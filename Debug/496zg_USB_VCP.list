
496zg_USB_VCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f8  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000180  080073a4  080073a4  000173a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007524  08007524  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  08007524  08007524  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007524  08007524  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007524  08007524  00017524  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007528  08007528  00017528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800752c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba8  20000190  080076bc  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d38  080076bc  00021d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179ce  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003461  00000000  00000000  00037b8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  0003aff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  0003be48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002afb6  00000000  00000000  0003cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a96  00000000  00000000  00067aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6b44  00000000  00000000  00079584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001700c8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f8  00000000  00000000  0017011c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000190 	.word	0x20000190
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800738c 	.word	0x0800738c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000194 	.word	0x20000194
 80001e8:	0800738c 	.word	0x0800738c

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b088      	sub	sp, #32
 8000204:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000206:	f107 030c 	add.w	r3, r7, #12
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]
 8000210:	609a      	str	r2, [r3, #8]
 8000212:	60da      	str	r2, [r3, #12]
 8000214:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000216:	4b33      	ldr	r3, [pc, #204]	; (80002e4 <MX_GPIO_Init+0xe4>)
 8000218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021a:	4a32      	ldr	r2, [pc, #200]	; (80002e4 <MX_GPIO_Init+0xe4>)
 800021c:	f043 0304 	orr.w	r3, r3, #4
 8000220:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000222:	4b30      	ldr	r3, [pc, #192]	; (80002e4 <MX_GPIO_Init+0xe4>)
 8000224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000226:	f003 0304 	and.w	r3, r3, #4
 800022a:	60bb      	str	r3, [r7, #8]
 800022c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800022e:	4b2d      	ldr	r3, [pc, #180]	; (80002e4 <MX_GPIO_Init+0xe4>)
 8000230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000232:	4a2c      	ldr	r2, [pc, #176]	; (80002e4 <MX_GPIO_Init+0xe4>)
 8000234:	f043 0302 	orr.w	r3, r3, #2
 8000238:	64d3      	str	r3, [r2, #76]	; 0x4c
 800023a:	4b2a      	ldr	r3, [pc, #168]	; (80002e4 <MX_GPIO_Init+0xe4>)
 800023c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800023e:	f003 0302 	and.w	r3, r3, #2
 8000242:	607b      	str	r3, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000246:	4b27      	ldr	r3, [pc, #156]	; (80002e4 <MX_GPIO_Init+0xe4>)
 8000248:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024a:	4a26      	ldr	r2, [pc, #152]	; (80002e4 <MX_GPIO_Init+0xe4>)
 800024c:	f043 0301 	orr.w	r3, r3, #1
 8000250:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000252:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <MX_GPIO_Init+0xe4>)
 8000254:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000256:	f003 0301 	and.w	r3, r3, #1
 800025a:	603b      	str	r3, [r7, #0]
 800025c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800025e:	2200      	movs	r2, #0
 8000260:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000264:	4820      	ldr	r0, [pc, #128]	; (80002e8 <MX_GPIO_Init+0xe8>)
 8000266:	f000 fe81 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800026a:	2200      	movs	r2, #0
 800026c:	2180      	movs	r1, #128	; 0x80
 800026e:	481f      	ldr	r0, [pc, #124]	; (80002ec <MX_GPIO_Init+0xec>)
 8000270:	f000 fe7c 	bl	8000f6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000274:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000278:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800027a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800027e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000280:	2302      	movs	r3, #2
 8000282:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000284:	f107 030c 	add.w	r3, r7, #12
 8000288:	4619      	mov	r1, r3
 800028a:	4818      	ldr	r0, [pc, #96]	; (80002ec <MX_GPIO_Init+0xec>)
 800028c:	f000 fcdc 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 8000290:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000294:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000296:	2301      	movs	r3, #1
 8000298:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800029a:	2300      	movs	r3, #0
 800029c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800029e:	2300      	movs	r3, #0
 80002a0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002a2:	f107 030c 	add.w	r3, r7, #12
 80002a6:	4619      	mov	r1, r3
 80002a8:	480f      	ldr	r0, [pc, #60]	; (80002e8 <MX_GPIO_Init+0xe8>)
 80002aa:	f000 fccd 	bl	8000c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80002ae:	2380      	movs	r3, #128	; 0x80
 80002b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002b2:	2301      	movs	r3, #1
 80002b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002b6:	2300      	movs	r3, #0
 80002b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ba:	2300      	movs	r3, #0
 80002bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80002be:	f107 030c 	add.w	r3, r7, #12
 80002c2:	4619      	mov	r1, r3
 80002c4:	4809      	ldr	r0, [pc, #36]	; (80002ec <MX_GPIO_Init+0xec>)
 80002c6:	f000 fcbf 	bl	8000c48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002ca:	2200      	movs	r2, #0
 80002cc:	2100      	movs	r1, #0
 80002ce:	2028      	movs	r0, #40	; 0x28
 80002d0:	f000 fc83 	bl	8000bda <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002d4:	2028      	movs	r0, #40	; 0x28
 80002d6:	f000 fc9c 	bl	8000c12 <HAL_NVIC_EnableIRQ>

}
 80002da:	bf00      	nop
 80002dc:	3720      	adds	r7, #32
 80002de:	46bd      	mov	sp, r7
 80002e0:	bd80      	pop	{r7, pc}
 80002e2:	bf00      	nop
 80002e4:	40021000 	.word	0x40021000
 80002e8:	48000400 	.word	0x48000400
 80002ec:	48000800 	.word	0x48000800

080002f0 <buffer_was_raus>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int buffer_was_raus(){
 80002f0:	b480      	push	{r7}
 80002f2:	b083      	sub	sp, #12
 80002f4:	af00      	add	r7, sp, #0
	int save_it;
	// wenn der letzte Speicherpunkt leer ist, dann wird auch nichts rausgebuffert.
    if (fifo_buffer.data[fifo_buffer.last]==0){
 80002f6:	4b18      	ldr	r3, [pc, #96]	; (8000358 <buffer_was_raus+0x68>)
 80002f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80002fc:	461a      	mov	r2, r3
 80002fe:	4b16      	ldr	r3, [pc, #88]	; (8000358 <buffer_was_raus+0x68>)
 8000300:	5c9b      	ldrb	r3, [r3, r2]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d101      	bne.n	800030a <buffer_was_raus+0x1a>
    	return 0;
 8000306:	2300      	movs	r3, #0
 8000308:	e01f      	b.n	800034a <buffer_was_raus+0x5a>
    } else {
		save_it=fifo_buffer.data[fifo_buffer.last];
 800030a:	4b13      	ldr	r3, [pc, #76]	; (8000358 <buffer_was_raus+0x68>)
 800030c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000310:	461a      	mov	r2, r3
 8000312:	4b11      	ldr	r3, [pc, #68]	; (8000358 <buffer_was_raus+0x68>)
 8000314:	5c9b      	ldrb	r3, [r3, r2]
 8000316:	607b      	str	r3, [r7, #4]
		fifo_buffer.data[fifo_buffer.last]=0;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <buffer_was_raus+0x68>)
 800031a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800031e:	461a      	mov	r2, r3
 8000320:	4b0d      	ldr	r3, [pc, #52]	; (8000358 <buffer_was_raus+0x68>)
 8000322:	2100      	movs	r1, #0
 8000324:	5499      	strb	r1, [r3, r2]
		fifo_buffer.last++;
 8000326:	4b0c      	ldr	r3, [pc, #48]	; (8000358 <buffer_was_raus+0x68>)
 8000328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800032c:	3301      	adds	r3, #1
 800032e:	b2da      	uxtb	r2, r3
 8000330:	4b09      	ldr	r3, [pc, #36]	; (8000358 <buffer_was_raus+0x68>)
 8000332:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		if (fifo_buffer.last>=buffergroesse){
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <buffer_was_raus+0x68>)
 8000338:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800033c:	2b3f      	cmp	r3, #63	; 0x3f
 800033e:	d903      	bls.n	8000348 <buffer_was_raus+0x58>
			fifo_buffer.last=0;
 8000340:	4b05      	ldr	r3, [pc, #20]	; (8000358 <buffer_was_raus+0x68>)
 8000342:	2200      	movs	r2, #0
 8000344:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		}
		return save_it;
 8000348:	687b      	ldr	r3, [r7, #4]
    }
}
 800034a:	4618      	mov	r0, r3
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	200001ac 	.word	0x200001ac

0800035c <buffer_was_rein>:

int buffer_was_rein(uint8_t status){
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	71fb      	strb	r3, [r7, #7]
	// Eine Null ist nichts, was ich reinbuffern will.
	if (status==0 || status==13){
 8000366:	79fb      	ldrb	r3, [r7, #7]
 8000368:	2b00      	cmp	r3, #0
 800036a:	d002      	beq.n	8000372 <buffer_was_rein+0x16>
 800036c:	79fb      	ldrb	r3, [r7, #7]
 800036e:	2b0d      	cmp	r3, #13
 8000370:	d101      	bne.n	8000376 <buffer_was_rein+0x1a>
		return 0;
 8000372:	2300      	movs	r3, #0
 8000374:	e026      	b.n	80003c4 <buffer_was_rein+0x68>
	}
	// Wenn der nächste Speicherplatz nicht leer ist, dann wird auch nichts reingebuffert.
	else if	(fifo_buffer.data[fifo_buffer.next]){
 8000376:	4b16      	ldr	r3, [pc, #88]	; (80003d0 <buffer_was_rein+0x74>)
 8000378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800037c:	461a      	mov	r2, r3
 800037e:	4b14      	ldr	r3, [pc, #80]	; (80003d0 <buffer_was_rein+0x74>)
 8000380:	5c9b      	ldrb	r3, [r3, r2]
 8000382:	2b00      	cmp	r3, #0
 8000384:	d001      	beq.n	800038a <buffer_was_rein+0x2e>
		return 0;
 8000386:	2300      	movs	r3, #0
 8000388:	e01c      	b.n	80003c4 <buffer_was_rein+0x68>
	}
	else {
		// Wir haben freien speicher und Daten, also wird was reingebuffert.

		fifo_buffer.data[fifo_buffer.next]=status;
 800038a:	4b11      	ldr	r3, [pc, #68]	; (80003d0 <buffer_was_rein+0x74>)
 800038c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000390:	4619      	mov	r1, r3
 8000392:	4a0f      	ldr	r2, [pc, #60]	; (80003d0 <buffer_was_rein+0x74>)
 8000394:	79fb      	ldrb	r3, [r7, #7]
 8000396:	5453      	strb	r3, [r2, r1]
		fifo_buffer.next++;
 8000398:	4b0d      	ldr	r3, [pc, #52]	; (80003d0 <buffer_was_rein+0x74>)
 800039a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800039e:	3301      	adds	r3, #1
 80003a0:	b2da      	uxtb	r2, r3
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <buffer_was_rein+0x74>)
 80003a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		// Wenn fifo_buffer.next größer als der Buffer wird, machen wir mit null weiter.
		if(fifo_buffer.next>=buffergroesse){
 80003a8:	4b09      	ldr	r3, [pc, #36]	; (80003d0 <buffer_was_rein+0x74>)
 80003aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80003ae:	2b3f      	cmp	r3, #63	; 0x3f
 80003b0:	d903      	bls.n	80003ba <buffer_was_rein+0x5e>
			fifo_buffer.next=0;
 80003b2:	4b07      	ldr	r3, [pc, #28]	; (80003d0 <buffer_was_rein+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		}
		fifo_buffer.changed=1;
 80003ba:	4b05      	ldr	r3, [pc, #20]	; (80003d0 <buffer_was_rein+0x74>)
 80003bc:	2201      	movs	r2, #1
 80003be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		return 1;
 80003c2:	2301      	movs	r3, #1
	}
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	370c      	adds	r7, #12
 80003c8:	46bd      	mov	sp, r7
 80003ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ce:	4770      	bx	lr
 80003d0:	200001ac 	.word	0x200001ac

080003d4 <check_usb_buffer>:

void check_usb_buffer(){
 80003d4:	b580      	push	{r7, lr}
 80003d6:	b082      	sub	sp, #8
 80003d8:	af00      	add	r7, sp, #0
	// Der komplette USB-Buffer in unseren Ringbuffer übertragen
	for (uint8_t z=0;z<buffergroesse;z++){
 80003da:	2300      	movs	r3, #0
 80003dc:	71fb      	strb	r3, [r7, #7]
 80003de:	e00d      	b.n	80003fc <check_usb_buffer+0x28>
		buffer_was_rein(bufferdata[z]);
 80003e0:	79fb      	ldrb	r3, [r7, #7]
 80003e2:	4a0a      	ldr	r2, [pc, #40]	; (800040c <check_usb_buffer+0x38>)
 80003e4:	5cd3      	ldrb	r3, [r2, r3]
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	4618      	mov	r0, r3
 80003ea:	f7ff ffb7 	bl	800035c <buffer_was_rein>
		bufferdata[z]=0;
 80003ee:	79fb      	ldrb	r3, [r7, #7]
 80003f0:	4a06      	ldr	r2, [pc, #24]	; (800040c <check_usb_buffer+0x38>)
 80003f2:	2100      	movs	r1, #0
 80003f4:	54d1      	strb	r1, [r2, r3]
	for (uint8_t z=0;z<buffergroesse;z++){
 80003f6:	79fb      	ldrb	r3, [r7, #7]
 80003f8:	3301      	adds	r3, #1
 80003fa:	71fb      	strb	r3, [r7, #7]
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	2b3f      	cmp	r3, #63	; 0x3f
 8000400:	d9ee      	bls.n	80003e0 <check_usb_buffer+0xc>
	}
}
 8000402:	bf00      	nop
 8000404:	bf00      	nop
 8000406:	3708      	adds	r7, #8
 8000408:	46bd      	mov	sp, r7
 800040a:	bd80      	pop	{r7, pc}
 800040c:	20000418 	.word	0x20000418

08000410 <blink_green>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void blink_green(int power){
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, power);
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	b2db      	uxtb	r3, r3
 800041c:	461a      	mov	r2, r3
 800041e:	2180      	movs	r1, #128	; 0x80
 8000420:	4803      	ldr	r0, [pc, #12]	; (8000430 <blink_green+0x20>)
 8000422:	f000 fda3 	bl	8000f6c <HAL_GPIO_WritePin>
}
 8000426:	bf00      	nop
 8000428:	3708      	adds	r7, #8
 800042a:	46bd      	mov	sp, r7
 800042c:	bd80      	pop	{r7, pc}
 800042e:	bf00      	nop
 8000430:	48000800 	.word	0x48000800

08000434 <blink_blue>:
void blink_blue(int power){
 8000434:	b580      	push	{r7, lr}
 8000436:	b082      	sub	sp, #8
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, power);
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	b2db      	uxtb	r3, r3
 8000440:	461a      	mov	r2, r3
 8000442:	2180      	movs	r1, #128	; 0x80
 8000444:	4803      	ldr	r0, [pc, #12]	; (8000454 <blink_blue+0x20>)
 8000446:	f000 fd91 	bl	8000f6c <HAL_GPIO_WritePin>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}
 8000452:	bf00      	nop
 8000454:	48000400 	.word	0x48000400

08000458 <HAL_GPIO_EXTI_Callback>:
void blink_red(int power){
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, power);
}
int button1_pressed;
void  HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_irgendwas) {
 8000458:	b480      	push	{r7}
 800045a:	b083      	sub	sp, #12
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	80fb      	strh	r3, [r7, #6]
	button1_pressed=1;
 8000462:	4b04      	ldr	r3, [pc, #16]	; (8000474 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000464:	2201      	movs	r2, #1
 8000466:	601a      	str	r2, [r3, #0]
}
 8000468:	bf00      	nop
 800046a:	370c      	adds	r7, #12
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	20000458 	.word	0x20000458

08000478 <show_lifesigns>:

void show_lifesigns(){
 8000478:	b580      	push	{r7, lr}
 800047a:	af00      	add	r7, sp, #0
	static uint32_t time;
	if((HAL_GetTick()-time)>1000){
 800047c:	f000 faa2 	bl	80009c4 <HAL_GetTick>
 8000480:	4602      	mov	r2, r0
 8000482:	4b09      	ldr	r3, [pc, #36]	; (80004a8 <show_lifesigns+0x30>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	1ad3      	subs	r3, r2, r3
 8000488:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800048c:	d909      	bls.n	80004a2 <show_lifesigns+0x2a>
		time=HAL_GetTick();
 800048e:	f000 fa99 	bl	80009c4 <HAL_GetTick>
 8000492:	4603      	mov	r3, r0
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <show_lifesigns+0x30>)
 8000496:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000498:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800049c:	4803      	ldr	r0, [pc, #12]	; (80004ac <show_lifesigns+0x34>)
 800049e:	f000 fd7d 	bl	8000f9c <HAL_GPIO_TogglePin>
	}
}
 80004a2:	bf00      	nop
 80004a4:	bd80      	pop	{r7, pc}
 80004a6:	bf00      	nop
 80004a8:	200001f0 	.word	0x200001f0
 80004ac:	48000400 	.word	0x48000400

080004b0 <get_fifo_buffer_length>:
uint8_t get_fifo_buffer_length(){
 80004b0:	b480      	push	{r7}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
uint8_t n;
        if (fifo_buffer.next<fifo_buffer.last){
 80004b6:	4b12      	ldr	r3, [pc, #72]	; (8000500 <get_fifo_buffer_length+0x50>)
 80004b8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80004bc:	4b10      	ldr	r3, [pc, #64]	; (8000500 <get_fifo_buffer_length+0x50>)
 80004be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80004c2:	429a      	cmp	r2, r3
 80004c4:	d20a      	bcs.n	80004dc <get_fifo_buffer_length+0x2c>
        	n = fifo_buffer.next + buffergroesse - fifo_buffer.last +1;
 80004c6:	4b0e      	ldr	r3, [pc, #56]	; (8000500 <get_fifo_buffer_length+0x50>)
 80004c8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80004cc:	4b0c      	ldr	r3, [pc, #48]	; (8000500 <get_fifo_buffer_length+0x50>)
 80004ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80004d2:	1ad3      	subs	r3, r2, r3
 80004d4:	b2db      	uxtb	r3, r3
 80004d6:	3341      	adds	r3, #65	; 0x41
 80004d8:	71fb      	strb	r3, [r7, #7]
 80004da:	e009      	b.n	80004f0 <get_fifo_buffer_length+0x40>
	}else{
		n = fifo_buffer.next - fifo_buffer.last + 1;
 80004dc:	4b08      	ldr	r3, [pc, #32]	; (8000500 <get_fifo_buffer_length+0x50>)
 80004de:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80004e2:	4b07      	ldr	r3, [pc, #28]	; (8000500 <get_fifo_buffer_length+0x50>)
 80004e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80004e8:	1ad3      	subs	r3, r2, r3
 80004ea:	b2db      	uxtb	r3, r3
 80004ec:	3301      	adds	r3, #1
 80004ee:	71fb      	strb	r3, [r7, #7]
	}
	return n;
 80004f0:	79fb      	ldrb	r3, [r7, #7]
}
 80004f2:	4618      	mov	r0, r3
 80004f4:	370c      	adds	r7, #12
 80004f6:	46bd      	mov	sp, r7
 80004f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop
 8000500:	200001ac 	.word	0x200001ac

08000504 <check_command>:
#define input_2 "do 2"
#define input_3 "do 3"
#define input_4 "do 4"
#define input_5 "do 5"

uint8_t check_command(uint8_t length){
 8000504:	b5b0      	push	{r4, r5, r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	4603      	mov	r3, r0
 800050c:	71fb      	strb	r3, [r7, #7]
 800050e:	466b      	mov	r3, sp
 8000510:	461d      	mov	r5, r3
	uint8_t answer[length];
 8000512:	79fc      	ldrb	r4, [r7, #7]
 8000514:	4623      	mov	r3, r4
 8000516:	3b01      	subs	r3, #1
 8000518:	613b      	str	r3, [r7, #16]
 800051a:	b2e0      	uxtb	r0, r4
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	f04f 0200 	mov.w	r2, #0
 8000524:	f04f 0300 	mov.w	r3, #0
 8000528:	00cb      	lsls	r3, r1, #3
 800052a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800052e:	00c2      	lsls	r2, r0, #3
 8000530:	b2e0      	uxtb	r0, r4
 8000532:	f04f 0100 	mov.w	r1, #0
 8000536:	f04f 0200 	mov.w	r2, #0
 800053a:	f04f 0300 	mov.w	r3, #0
 800053e:	00cb      	lsls	r3, r1, #3
 8000540:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000544:	00c2      	lsls	r2, r0, #3
 8000546:	4623      	mov	r3, r4
 8000548:	3307      	adds	r3, #7
 800054a:	08db      	lsrs	r3, r3, #3
 800054c:	00db      	lsls	r3, r3, #3
 800054e:	ebad 0d03 	sub.w	sp, sp, r3
 8000552:	466b      	mov	r3, sp
 8000554:	3300      	adds	r3, #0
 8000556:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0;i<length;i++){
 8000558:	2300      	movs	r3, #0
 800055a:	75fb      	strb	r3, [r7, #23]
 800055c:	e009      	b.n	8000572 <check_command+0x6e>
		answer[i]=buffer_was_raus();
 800055e:	f7ff fec7 	bl	80002f0 <buffer_was_raus>
 8000562:	4602      	mov	r2, r0
 8000564:	7dfb      	ldrb	r3, [r7, #23]
 8000566:	b2d1      	uxtb	r1, r2
 8000568:	68fa      	ldr	r2, [r7, #12]
 800056a:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0;i<length;i++){
 800056c:	7dfb      	ldrb	r3, [r7, #23]
 800056e:	3301      	adds	r3, #1
 8000570:	75fb      	strb	r3, [r7, #23]
 8000572:	7dfa      	ldrb	r2, [r7, #23]
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	429a      	cmp	r2, r3
 8000578:	d3f1      	bcc.n	800055e <check_command+0x5a>
	}

	if 	 (!strcmp(answer,input_1)){
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	491b      	ldr	r1, [pc, #108]	; (80005ec <check_command+0xe8>)
 800057e:	4618      	mov	r0, r3
 8000580:	f7ff fe34 	bl	80001ec <strcmp>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d101      	bne.n	800058e <check_command+0x8a>
		return 1;
 800058a:	2301      	movs	r3, #1
 800058c:	e028      	b.n	80005e0 <check_command+0xdc>
	}else if (!strcmp(answer,input_2)){
 800058e:	68fb      	ldr	r3, [r7, #12]
 8000590:	4917      	ldr	r1, [pc, #92]	; (80005f0 <check_command+0xec>)
 8000592:	4618      	mov	r0, r3
 8000594:	f7ff fe2a 	bl	80001ec <strcmp>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d101      	bne.n	80005a2 <check_command+0x9e>
		return 2;
 800059e:	2302      	movs	r3, #2
 80005a0:	e01e      	b.n	80005e0 <check_command+0xdc>
	}else if (!strcmp(answer,input_3)){
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	4913      	ldr	r1, [pc, #76]	; (80005f4 <check_command+0xf0>)
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff fe20 	bl	80001ec <strcmp>
 80005ac:	4603      	mov	r3, r0
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	d101      	bne.n	80005b6 <check_command+0xb2>
		return 3;
 80005b2:	2303      	movs	r3, #3
 80005b4:	e014      	b.n	80005e0 <check_command+0xdc>
	}else if (!strcmp(answer,input_4)){
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	490f      	ldr	r1, [pc, #60]	; (80005f8 <check_command+0xf4>)
 80005ba:	4618      	mov	r0, r3
 80005bc:	f7ff fe16 	bl	80001ec <strcmp>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d101      	bne.n	80005ca <check_command+0xc6>
		return 4;
 80005c6:	2304      	movs	r3, #4
 80005c8:	e00a      	b.n	80005e0 <check_command+0xdc>
	}else if (!strcmp(answer,input_5)){
 80005ca:	68fb      	ldr	r3, [r7, #12]
 80005cc:	490b      	ldr	r1, [pc, #44]	; (80005fc <check_command+0xf8>)
 80005ce:	4618      	mov	r0, r3
 80005d0:	f7ff fe0c 	bl	80001ec <strcmp>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d101      	bne.n	80005de <check_command+0xda>
		return 5;
 80005da:	2305      	movs	r3, #5
 80005dc:	e000      	b.n	80005e0 <check_command+0xdc>
	}else{
		return 0;
 80005de:	2300      	movs	r3, #0
 80005e0:	46ad      	mov	sp, r5
	}


}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3718      	adds	r7, #24
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bdb0      	pop	{r4, r5, r7, pc}
 80005ea:	bf00      	nop
 80005ec:	080073a4 	.word	0x080073a4
 80005f0:	080073ac 	.word	0x080073ac
 80005f4:	080073b4 	.word	0x080073b4
 80005f8:	080073bc 	.word	0x080073bc
 80005fc:	080073c4 	.word	0x080073c4

08000600 <answer_command>:
#define response_2 "\n\r I got a two \n\r what next? \n\r"
#define response_3 "\n\r I got a three \n\r what next? \n\r"
#define response_4 "\n\r I got a four \n\r what next? \n\r"
#define response_5 "\n\r I got a fife \n\r what next? \n\r"
#define response_d "\n\r I am confused \n\r try again \n\r"
void answer_command(){
 8000600:	b580      	push	{r7, lr}
 8000602:	b082      	sub	sp, #8
 8000604:	af00      	add	r7, sp, #0
	uint8_t n=get_fifo_buffer_length();
 8000606:	f7ff ff53 	bl	80004b0 <get_fifo_buffer_length>
 800060a:	4603      	mov	r3, r0
 800060c:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd=check_command(n);
 800060e:	79fb      	ldrb	r3, [r7, #7]
 8000610:	4618      	mov	r0, r3
 8000612:	f7ff ff77 	bl	8000504 <check_command>
 8000616:	4603      	mov	r3, r0
 8000618:	71bb      	strb	r3, [r7, #6]
	if(fifo_buffer.changed){
 800061a:	4b2b      	ldr	r3, [pc, #172]	; (80006c8 <answer_command+0xc8>)
 800061c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000620:	2b00      	cmp	r3, #0
 8000622:	d03b      	beq.n	800069c <answer_command+0x9c>
		switch (cmd){
 8000624:	79bb      	ldrb	r3, [r7, #6]
 8000626:	2b05      	cmp	r3, #5
 8000628:	d839      	bhi.n	800069e <answer_command+0x9e>
 800062a:	a201      	add	r2, pc, #4	; (adr r2, 8000630 <answer_command+0x30>)
 800062c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000630:	08000693 	.word	0x08000693
 8000634:	08000649 	.word	0x08000649
 8000638:	08000659 	.word	0x08000659
 800063c:	08000669 	.word	0x08000669
 8000640:	08000679 	.word	0x08000679
 8000644:	08000689 	.word	0x08000689
			case 1:
				CDC_Transmit_FS(response_1, strlen(response_1));
 8000648:	211f      	movs	r1, #31
 800064a:	4820      	ldr	r0, [pc, #128]	; (80006cc <answer_command+0xcc>)
 800064c:	f006 f8c6 	bl	80067dc <CDC_Transmit_FS>
				blink_green(1);
 8000650:	2001      	movs	r0, #1
 8000652:	f7ff fedd 	bl	8000410 <blink_green>
				break;
 8000656:	e022      	b.n	800069e <answer_command+0x9e>
			case 2: 
				CDC_Transmit_FS(response_2, strlen(response_2));
 8000658:	211f      	movs	r1, #31
 800065a:	481d      	ldr	r0, [pc, #116]	; (80006d0 <answer_command+0xd0>)
 800065c:	f006 f8be 	bl	80067dc <CDC_Transmit_FS>
				blink_green(0);
 8000660:	2000      	movs	r0, #0
 8000662:	f7ff fed5 	bl	8000410 <blink_green>
	                        break;
 8000666:	e01a      	b.n	800069e <answer_command+0x9e>
			case 3: 
				CDC_Transmit_FS(response_3, strlen(response_3));
 8000668:	2121      	movs	r1, #33	; 0x21
 800066a:	481a      	ldr	r0, [pc, #104]	; (80006d4 <answer_command+0xd4>)
 800066c:	f006 f8b6 	bl	80067dc <CDC_Transmit_FS>
				blink_blue(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f7ff fedf 	bl	8000434 <blink_blue>
	                        break;
 8000676:	e012      	b.n	800069e <answer_command+0x9e>
			case 4: 
				CDC_Transmit_FS(response_4, strlen(response_4));
 8000678:	2120      	movs	r1, #32
 800067a:	4817      	ldr	r0, [pc, #92]	; (80006d8 <answer_command+0xd8>)
 800067c:	f006 f8ae 	bl	80067dc <CDC_Transmit_FS>
				blink_blue(0);
 8000680:	2000      	movs	r0, #0
 8000682:	f7ff fed7 	bl	8000434 <blink_blue>
	                        break;
 8000686:	e00a      	b.n	800069e <answer_command+0x9e>
			case 5:
				CDC_Transmit_FS(response_5, strlen(response_5));
 8000688:	2120      	movs	r1, #32
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <answer_command+0xdc>)
 800068c:	f006 f8a6 	bl	80067dc <CDC_Transmit_FS>
				break;
 8000690:	e005      	b.n	800069e <answer_command+0x9e>
			case 0:
				CDC_Transmit_FS(response_d, strlen(response_d));
 8000692:	2120      	movs	r1, #32
 8000694:	4812      	ldr	r0, [pc, #72]	; (80006e0 <answer_command+0xe0>)
 8000696:	f006 f8a1 	bl	80067dc <CDC_Transmit_FS>
				break;
 800069a:	e000      	b.n	800069e <answer_command+0x9e>
		}
	}
 800069c:	bf00      	nop
			
	if((fifo_buffer.next==fifo_buffer.last) && (fifo_buffer.changed)){
 800069e:	4b0a      	ldr	r3, [pc, #40]	; (80006c8 <answer_command+0xc8>)
 80006a0:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <answer_command+0xc8>)
 80006a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80006aa:	429a      	cmp	r2, r3
 80006ac:	d108      	bne.n	80006c0 <answer_command+0xc0>
 80006ae:	4b06      	ldr	r3, [pc, #24]	; (80006c8 <answer_command+0xc8>)
 80006b0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d003      	beq.n	80006c0 <answer_command+0xc0>
		fifo_buffer.changed=0;
 80006b8:	4b03      	ldr	r3, [pc, #12]	; (80006c8 <answer_command+0xc8>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}
 80006c8:	200001ac 	.word	0x200001ac
 80006cc:	080073cc 	.word	0x080073cc
 80006d0:	080073ec 	.word	0x080073ec
 80006d4:	0800740c 	.word	0x0800740c
 80006d8:	08007430 	.word	0x08007430
 80006dc:	08007454 	.word	0x08007454
 80006e0:	08007478 	.word	0x08007478

080006e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e8:	f000 f903 	bl	80008f2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006ec:	f000 f80b 	bl	8000706 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f0:	f7ff fd86 	bl	8000200 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80006f4:	f005 ffa4 	bl	8006640 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Lebenszeichen durch LED3 und ". . . . . ." über USB to serial
	  show_lifesigns();
 80006f8:	f7ff febe 	bl	8000478 <show_lifesigns>

	  // USB_buffer ind Ringbuffer übertragen
	  check_usb_buffer();
 80006fc:	f7ff fe6a 	bl	80003d4 <check_usb_buffer>

	  // Eingegangene Befehle beantworten
	  answer_command();
 8000700:	f7ff ff7e 	bl	8000600 <answer_command>
	  show_lifesigns();
 8000704:	e7f8      	b.n	80006f8 <main+0x14>

08000706 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000706:	b580      	push	{r7, lr}
 8000708:	b096      	sub	sp, #88	; 0x58
 800070a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070c:	f107 0314 	add.w	r3, r7, #20
 8000710:	2244      	movs	r2, #68	; 0x44
 8000712:	2100      	movs	r1, #0
 8000714:	4618      	mov	r0, r3
 8000716:	f006 fe31 	bl	800737c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071a:	463b      	mov	r3, r7
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000728:	f44f 7000 	mov.w	r0, #512	; 0x200
 800072c:	f001 fd0a 	bl	8002144 <HAL_PWREx_ControlVoltageScaling>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d001      	beq.n	800073a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000736:	f000 f83c 	bl	80007b2 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800073a:	2314      	movs	r3, #20
 800073c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800073e:	2300      	movs	r3, #0
 8000740:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000742:	2301      	movs	r3, #1
 8000744:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000746:	2300      	movs	r3, #0
 8000748:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800074a:	2360      	movs	r3, #96	; 0x60
 800074c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800074e:	2302      	movs	r3, #2
 8000750:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000752:	2301      	movs	r3, #1
 8000754:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000756:	2301      	movs	r3, #1
 8000758:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800075a:	2328      	movs	r3, #40	; 0x28
 800075c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800075e:	2302      	movs	r3, #2
 8000760:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000762:	2302      	movs	r3, #2
 8000764:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000766:	2302      	movs	r3, #2
 8000768:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076a:	f107 0314 	add.w	r3, r7, #20
 800076e:	4618      	mov	r0, r3
 8000770:	f001 fd4e 	bl	8002210 <HAL_RCC_OscConfig>
 8000774:	4603      	mov	r3, r0
 8000776:	2b00      	cmp	r3, #0
 8000778:	d001      	beq.n	800077e <SystemClock_Config+0x78>
  {
    Error_Handler();
 800077a:	f000 f81a 	bl	80007b2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077e:	230f      	movs	r3, #15
 8000780:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000782:	2303      	movs	r3, #3
 8000784:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078e:	2300      	movs	r3, #0
 8000790:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	2104      	movs	r1, #4
 8000796:	4618      	mov	r0, r3
 8000798:	f002 f960 	bl	8002a5c <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007a2:	f000 f806 	bl	80007b2 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007a6:	f002 fe2f 	bl	8003408 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007aa:	bf00      	nop
 80007ac:	3758      	adds	r7, #88	; 0x58
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b2:	b480      	push	{r7}
 80007b4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b6:	b672      	cpsid	i
}
 80007b8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ba:	e7fe      	b.n	80007ba <Error_Handler+0x8>

080007bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <HAL_MspInit+0x44>)
 80007c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <HAL_MspInit+0x44>)
 80007c8:	f043 0301 	orr.w	r3, r3, #1
 80007cc:	6613      	str	r3, [r2, #96]	; 0x60
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <HAL_MspInit+0x44>)
 80007d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007d2:	f003 0301 	and.w	r3, r3, #1
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007da:	4b09      	ldr	r3, [pc, #36]	; (8000800 <HAL_MspInit+0x44>)
 80007dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007de:	4a08      	ldr	r2, [pc, #32]	; (8000800 <HAL_MspInit+0x44>)
 80007e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007e4:	6593      	str	r3, [r2, #88]	; 0x58
 80007e6:	4b06      	ldr	r3, [pc, #24]	; (8000800 <HAL_MspInit+0x44>)
 80007e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ee:	603b      	str	r3, [r7, #0]
 80007f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	40021000 	.word	0x40021000

08000804 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <NMI_Handler+0x4>

0800080a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <HardFault_Handler+0x4>

08000810 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <MemManage_Handler+0x4>

08000816 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <BusFault_Handler+0x4>

0800081c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <UsageFault_Handler+0x4>

08000822 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000826:	bf00      	nop
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr

08000830 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000834:	bf00      	nop
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800083e:	b480      	push	{r7}
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000842:	bf00      	nop
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr

0800084c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000850:	f000 f8a4 	bl	800099c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000854:	bf00      	nop
 8000856:	bd80      	pop	{r7, pc}

08000858 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 800085c:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000860:	f000 fbb6 	bl	8000fd0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}

08000868 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800086c:	4802      	ldr	r0, [pc, #8]	; (8000878 <OTG_FS_IRQHandler+0x10>)
 800086e:	f000 fd1a 	bl	80012a6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20001930 	.word	0x20001930

0800087c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <SystemInit+0x20>)
 8000882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000886:	4a05      	ldr	r2, [pc, #20]	; (800089c <SystemInit+0x20>)
 8000888:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800088c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000890:	bf00      	nop
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
 800089a:	bf00      	nop
 800089c:	e000ed00 	.word	0xe000ed00

080008a0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80008a0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008d8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a4:	f7ff ffea 	bl	800087c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a8:	480c      	ldr	r0, [pc, #48]	; (80008dc <LoopForever+0x6>)
  ldr r1, =_edata
 80008aa:	490d      	ldr	r1, [pc, #52]	; (80008e0 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ac:	4a0d      	ldr	r2, [pc, #52]	; (80008e4 <LoopForever+0xe>)
  movs r3, #0
 80008ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008b0:	e002      	b.n	80008b8 <LoopCopyDataInit>

080008b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b6:	3304      	adds	r3, #4

080008b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008bc:	d3f9      	bcc.n	80008b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008be:	4a0a      	ldr	r2, [pc, #40]	; (80008e8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008c0:	4c0a      	ldr	r4, [pc, #40]	; (80008ec <LoopForever+0x16>)
  movs r3, #0
 80008c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c4:	e001      	b.n	80008ca <LoopFillZerobss>

080008c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c8:	3204      	adds	r2, #4

080008ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008cc:	d3fb      	bcc.n	80008c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ce:	f006 fd23 	bl	8007318 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008d2:	f7ff ff07 	bl	80006e4 <main>

080008d6 <LoopForever>:

LoopForever:
    b LoopForever
 80008d6:	e7fe      	b.n	80008d6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80008d8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80008dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008e0:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80008e4:	0800752c 	.word	0x0800752c
  ldr r2, =_sbss
 80008e8:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80008ec:	20001d38 	.word	0x20001d38

080008f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008f0:	e7fe      	b.n	80008f0 <ADC1_2_IRQHandler>

080008f2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b082      	sub	sp, #8
 80008f6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008f8:	2300      	movs	r3, #0
 80008fa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008fc:	2003      	movs	r0, #3
 80008fe:	f000 f961 	bl	8000bc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000902:	2000      	movs	r0, #0
 8000904:	f000 f80e 	bl	8000924 <HAL_InitTick>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d002      	beq.n	8000914 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800090e:	2301      	movs	r3, #1
 8000910:	71fb      	strb	r3, [r7, #7]
 8000912:	e001      	b.n	8000918 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000914:	f7ff ff52 	bl	80007bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000918:	79fb      	ldrb	r3, [r7, #7]
}
 800091a:	4618      	mov	r0, r3
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800092c:	2300      	movs	r3, #0
 800092e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000930:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_InitTick+0x6c>)
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	2b00      	cmp	r3, #0
 8000936:	d023      	beq.n	8000980 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000938:	4b16      	ldr	r3, [pc, #88]	; (8000994 <HAL_InitTick+0x70>)
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	4b14      	ldr	r3, [pc, #80]	; (8000990 <HAL_InitTick+0x6c>)
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	4619      	mov	r1, r3
 8000942:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000946:	fbb3 f3f1 	udiv	r3, r3, r1
 800094a:	fbb2 f3f3 	udiv	r3, r2, r3
 800094e:	4618      	mov	r0, r3
 8000950:	f000 f96d 	bl	8000c2e <HAL_SYSTICK_Config>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d10f      	bne.n	800097a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	2b0f      	cmp	r3, #15
 800095e:	d809      	bhi.n	8000974 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000960:	2200      	movs	r2, #0
 8000962:	6879      	ldr	r1, [r7, #4]
 8000964:	f04f 30ff 	mov.w	r0, #4294967295
 8000968:	f000 f937 	bl	8000bda <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800096c:	4a0a      	ldr	r2, [pc, #40]	; (8000998 <HAL_InitTick+0x74>)
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	6013      	str	r3, [r2, #0]
 8000972:	e007      	b.n	8000984 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000974:	2301      	movs	r3, #1
 8000976:	73fb      	strb	r3, [r7, #15]
 8000978:	e004      	b.n	8000984 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800097a:	2301      	movs	r3, #1
 800097c:	73fb      	strb	r3, [r7, #15]
 800097e:	e001      	b.n	8000984 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000984:	7bfb      	ldrb	r3, [r7, #15]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008
 8000994:	20000000 	.word	0x20000000
 8000998:	20000004 	.word	0x20000004

0800099c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <HAL_IncTick+0x20>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	461a      	mov	r2, r3
 80009a6:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <HAL_IncTick+0x24>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	4413      	add	r3, r2
 80009ac:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <HAL_IncTick+0x24>)
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	20000008 	.word	0x20000008
 80009c0:	2000045c 	.word	0x2000045c

080009c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return uwTick;
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_GetTick+0x14>)
 80009ca:	681b      	ldr	r3, [r3, #0]
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	46bd      	mov	sp, r7
 80009d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d4:	4770      	bx	lr
 80009d6:	bf00      	nop
 80009d8:	2000045c 	.word	0x2000045c

080009dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009e4:	f7ff ffee 	bl	80009c4 <HAL_GetTick>
 80009e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009f4:	d005      	beq.n	8000a02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80009f6:	4b0a      	ldr	r3, [pc, #40]	; (8000a20 <HAL_Delay+0x44>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	461a      	mov	r2, r3
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	4413      	add	r3, r2
 8000a00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a02:	bf00      	nop
 8000a04:	f7ff ffde 	bl	80009c4 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	68bb      	ldr	r3, [r7, #8]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	68fa      	ldr	r2, [r7, #12]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <HAL_Delay+0x28>
  {
  }
}
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	bf00      	nop
 8000a20:	20000008 	.word	0x20000008

08000a24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f003 0307 	and.w	r3, r3, #7
 8000a32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a34:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a3a:	68ba      	ldr	r2, [r7, #8]
 8000a3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a40:	4013      	ands	r3, r2
 8000a42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a48:	68bb      	ldr	r3, [r7, #8]
 8000a4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a56:	4a04      	ldr	r2, [pc, #16]	; (8000a68 <__NVIC_SetPriorityGrouping+0x44>)
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	60d3      	str	r3, [r2, #12]
}
 8000a5c:	bf00      	nop
 8000a5e:	3714      	adds	r7, #20
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a70:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <__NVIC_GetPriorityGrouping+0x18>)
 8000a72:	68db      	ldr	r3, [r3, #12]
 8000a74:	0a1b      	lsrs	r3, r3, #8
 8000a76:	f003 0307 	and.w	r3, r3, #7
}
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	4603      	mov	r3, r0
 8000a90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	db0b      	blt.n	8000ab2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	f003 021f 	and.w	r2, r3, #31
 8000aa0:	4907      	ldr	r1, [pc, #28]	; (8000ac0 <__NVIC_EnableIRQ+0x38>)
 8000aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa6:	095b      	lsrs	r3, r3, #5
 8000aa8:	2001      	movs	r0, #1
 8000aaa:	fa00 f202 	lsl.w	r2, r0, r2
 8000aae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ab2:	bf00      	nop
 8000ab4:	370c      	adds	r7, #12
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100

08000ac4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	4603      	mov	r3, r0
 8000acc:	6039      	str	r1, [r7, #0]
 8000ace:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	db0a      	blt.n	8000aee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad8:	683b      	ldr	r3, [r7, #0]
 8000ada:	b2da      	uxtb	r2, r3
 8000adc:	490c      	ldr	r1, [pc, #48]	; (8000b10 <__NVIC_SetPriority+0x4c>)
 8000ade:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae2:	0112      	lsls	r2, r2, #4
 8000ae4:	b2d2      	uxtb	r2, r2
 8000ae6:	440b      	add	r3, r1
 8000ae8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aec:	e00a      	b.n	8000b04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	b2da      	uxtb	r2, r3
 8000af2:	4908      	ldr	r1, [pc, #32]	; (8000b14 <__NVIC_SetPriority+0x50>)
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	f003 030f 	and.w	r3, r3, #15
 8000afa:	3b04      	subs	r3, #4
 8000afc:	0112      	lsls	r2, r2, #4
 8000afe:	b2d2      	uxtb	r2, r2
 8000b00:	440b      	add	r3, r1
 8000b02:	761a      	strb	r2, [r3, #24]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr
 8000b10:	e000e100 	.word	0xe000e100
 8000b14:	e000ed00 	.word	0xe000ed00

08000b18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b089      	sub	sp, #36	; 0x24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	60f8      	str	r0, [r7, #12]
 8000b20:	60b9      	str	r1, [r7, #8]
 8000b22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f003 0307 	and.w	r3, r3, #7
 8000b2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b2c:	69fb      	ldr	r3, [r7, #28]
 8000b2e:	f1c3 0307 	rsb	r3, r3, #7
 8000b32:	2b04      	cmp	r3, #4
 8000b34:	bf28      	it	cs
 8000b36:	2304      	movcs	r3, #4
 8000b38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b3a:	69fb      	ldr	r3, [r7, #28]
 8000b3c:	3304      	adds	r3, #4
 8000b3e:	2b06      	cmp	r3, #6
 8000b40:	d902      	bls.n	8000b48 <NVIC_EncodePriority+0x30>
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	3b03      	subs	r3, #3
 8000b46:	e000      	b.n	8000b4a <NVIC_EncodePriority+0x32>
 8000b48:	2300      	movs	r3, #0
 8000b4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b50:	69bb      	ldr	r3, [r7, #24]
 8000b52:	fa02 f303 	lsl.w	r3, r2, r3
 8000b56:	43da      	mvns	r2, r3
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	401a      	ands	r2, r3
 8000b5c:	697b      	ldr	r3, [r7, #20]
 8000b5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b60:	f04f 31ff 	mov.w	r1, #4294967295
 8000b64:	697b      	ldr	r3, [r7, #20]
 8000b66:	fa01 f303 	lsl.w	r3, r1, r3
 8000b6a:	43d9      	mvns	r1, r3
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	4313      	orrs	r3, r2
         );
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3724      	adds	r7, #36	; 0x24
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
	...

08000b80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3b01      	subs	r3, #1
 8000b8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b90:	d301      	bcc.n	8000b96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00f      	b.n	8000bb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b96:	4a0a      	ldr	r2, [pc, #40]	; (8000bc0 <SysTick_Config+0x40>)
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	3b01      	subs	r3, #1
 8000b9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9e:	210f      	movs	r1, #15
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f7ff ff8e 	bl	8000ac4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba8:	4b05      	ldr	r3, [pc, #20]	; (8000bc0 <SysTick_Config+0x40>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bae:	4b04      	ldr	r3, [pc, #16]	; (8000bc0 <SysTick_Config+0x40>)
 8000bb0:	2207      	movs	r2, #7
 8000bb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb4:	2300      	movs	r3, #0
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	3708      	adds	r7, #8
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	e000e010 	.word	0xe000e010

08000bc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b082      	sub	sp, #8
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bcc:	6878      	ldr	r0, [r7, #4]
 8000bce:	f7ff ff29 	bl	8000a24 <__NVIC_SetPriorityGrouping>
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}

08000bda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	b086      	sub	sp, #24
 8000bde:	af00      	add	r7, sp, #0
 8000be0:	4603      	mov	r3, r0
 8000be2:	60b9      	str	r1, [r7, #8]
 8000be4:	607a      	str	r2, [r7, #4]
 8000be6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bec:	f7ff ff3e 	bl	8000a6c <__NVIC_GetPriorityGrouping>
 8000bf0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	68b9      	ldr	r1, [r7, #8]
 8000bf6:	6978      	ldr	r0, [r7, #20]
 8000bf8:	f7ff ff8e 	bl	8000b18 <NVIC_EncodePriority>
 8000bfc:	4602      	mov	r2, r0
 8000bfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c02:	4611      	mov	r1, r2
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff ff5d 	bl	8000ac4 <__NVIC_SetPriority>
}
 8000c0a:	bf00      	nop
 8000c0c:	3718      	adds	r7, #24
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff31 	bl	8000a88 <__NVIC_EnableIRQ>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b082      	sub	sp, #8
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c36:	6878      	ldr	r0, [r7, #4]
 8000c38:	f7ff ffa2 	bl	8000b80 <SysTick_Config>
 8000c3c:	4603      	mov	r3, r0
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b087      	sub	sp, #28
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
 8000c50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c52:	2300      	movs	r3, #0
 8000c54:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c56:	e166      	b.n	8000f26 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	697b      	ldr	r3, [r7, #20]
 8000c60:	fa01 f303 	lsl.w	r3, r1, r3
 8000c64:	4013      	ands	r3, r2
 8000c66:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	f000 8158 	beq.w	8000f20 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	f003 0303 	and.w	r3, r3, #3
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d005      	beq.n	8000c88 <HAL_GPIO_Init+0x40>
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f003 0303 	and.w	r3, r3, #3
 8000c84:	2b02      	cmp	r3, #2
 8000c86:	d130      	bne.n	8000cea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	689b      	ldr	r3, [r3, #8]
 8000c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	2203      	movs	r2, #3
 8000c94:	fa02 f303 	lsl.w	r3, r2, r3
 8000c98:	43db      	mvns	r3, r3
 8000c9a:	693a      	ldr	r2, [r7, #16]
 8000c9c:	4013      	ands	r3, r2
 8000c9e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	68da      	ldr	r2, [r3, #12]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	005b      	lsls	r3, r3, #1
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	693a      	ldr	r2, [r7, #16]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc6:	43db      	mvns	r3, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4013      	ands	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	091b      	lsrs	r3, r3, #4
 8000cd4:	f003 0201 	and.w	r2, r3, #1
 8000cd8:	697b      	ldr	r3, [r7, #20]
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b03      	cmp	r3, #3
 8000cf4:	d017      	beq.n	8000d26 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	68db      	ldr	r3, [r3, #12]
 8000cfa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	689a      	ldr	r2, [r3, #8]
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	693a      	ldr	r2, [r7, #16]
 8000d1c:	4313      	orrs	r3, r2
 8000d1e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	693a      	ldr	r2, [r7, #16]
 8000d24:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f003 0303 	and.w	r3, r3, #3
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d123      	bne.n	8000d7a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	08da      	lsrs	r2, r3, #3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3208      	adds	r2, #8
 8000d3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d3e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	f003 0307 	and.w	r3, r3, #7
 8000d46:	009b      	lsls	r3, r3, #2
 8000d48:	220f      	movs	r2, #15
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	691a      	ldr	r2, [r3, #16]
 8000d5a:	697b      	ldr	r3, [r7, #20]
 8000d5c:	f003 0307 	and.w	r3, r3, #7
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	08da      	lsrs	r2, r3, #3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	3208      	adds	r2, #8
 8000d74:	6939      	ldr	r1, [r7, #16]
 8000d76:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	2203      	movs	r2, #3
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4013      	ands	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d92:	683b      	ldr	r3, [r7, #0]
 8000d94:	685b      	ldr	r3, [r3, #4]
 8000d96:	f003 0203 	and.w	r2, r3, #3
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	005b      	lsls	r3, r3, #1
 8000d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000da2:	693a      	ldr	r2, [r7, #16]
 8000da4:	4313      	orrs	r3, r2
 8000da6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	f000 80b2 	beq.w	8000f20 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dbc:	4b61      	ldr	r3, [pc, #388]	; (8000f44 <HAL_GPIO_Init+0x2fc>)
 8000dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dc0:	4a60      	ldr	r2, [pc, #384]	; (8000f44 <HAL_GPIO_Init+0x2fc>)
 8000dc2:	f043 0301 	orr.w	r3, r3, #1
 8000dc6:	6613      	str	r3, [r2, #96]	; 0x60
 8000dc8:	4b5e      	ldr	r3, [pc, #376]	; (8000f44 <HAL_GPIO_Init+0x2fc>)
 8000dca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dcc:	f003 0301 	and.w	r3, r3, #1
 8000dd0:	60bb      	str	r3, [r7, #8]
 8000dd2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd4:	4a5c      	ldr	r2, [pc, #368]	; (8000f48 <HAL_GPIO_Init+0x300>)
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	089b      	lsrs	r3, r3, #2
 8000dda:	3302      	adds	r3, #2
 8000ddc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000de0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f003 0303 	and.w	r3, r3, #3
 8000de8:	009b      	lsls	r3, r3, #2
 8000dea:	220f      	movs	r2, #15
 8000dec:	fa02 f303 	lsl.w	r3, r2, r3
 8000df0:	43db      	mvns	r3, r3
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4013      	ands	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dfe:	d02b      	beq.n	8000e58 <HAL_GPIO_Init+0x210>
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	4a52      	ldr	r2, [pc, #328]	; (8000f4c <HAL_GPIO_Init+0x304>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d025      	beq.n	8000e54 <HAL_GPIO_Init+0x20c>
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	4a51      	ldr	r2, [pc, #324]	; (8000f50 <HAL_GPIO_Init+0x308>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d01f      	beq.n	8000e50 <HAL_GPIO_Init+0x208>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	4a50      	ldr	r2, [pc, #320]	; (8000f54 <HAL_GPIO_Init+0x30c>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	d019      	beq.n	8000e4c <HAL_GPIO_Init+0x204>
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a4f      	ldr	r2, [pc, #316]	; (8000f58 <HAL_GPIO_Init+0x310>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d013      	beq.n	8000e48 <HAL_GPIO_Init+0x200>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a4e      	ldr	r2, [pc, #312]	; (8000f5c <HAL_GPIO_Init+0x314>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d00d      	beq.n	8000e44 <HAL_GPIO_Init+0x1fc>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a4d      	ldr	r2, [pc, #308]	; (8000f60 <HAL_GPIO_Init+0x318>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d007      	beq.n	8000e40 <HAL_GPIO_Init+0x1f8>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a4c      	ldr	r2, [pc, #304]	; (8000f64 <HAL_GPIO_Init+0x31c>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d101      	bne.n	8000e3c <HAL_GPIO_Init+0x1f4>
 8000e38:	2307      	movs	r3, #7
 8000e3a:	e00e      	b.n	8000e5a <HAL_GPIO_Init+0x212>
 8000e3c:	2308      	movs	r3, #8
 8000e3e:	e00c      	b.n	8000e5a <HAL_GPIO_Init+0x212>
 8000e40:	2306      	movs	r3, #6
 8000e42:	e00a      	b.n	8000e5a <HAL_GPIO_Init+0x212>
 8000e44:	2305      	movs	r3, #5
 8000e46:	e008      	b.n	8000e5a <HAL_GPIO_Init+0x212>
 8000e48:	2304      	movs	r3, #4
 8000e4a:	e006      	b.n	8000e5a <HAL_GPIO_Init+0x212>
 8000e4c:	2303      	movs	r3, #3
 8000e4e:	e004      	b.n	8000e5a <HAL_GPIO_Init+0x212>
 8000e50:	2302      	movs	r3, #2
 8000e52:	e002      	b.n	8000e5a <HAL_GPIO_Init+0x212>
 8000e54:	2301      	movs	r3, #1
 8000e56:	e000      	b.n	8000e5a <HAL_GPIO_Init+0x212>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	697a      	ldr	r2, [r7, #20]
 8000e5c:	f002 0203 	and.w	r2, r2, #3
 8000e60:	0092      	lsls	r2, r2, #2
 8000e62:	4093      	lsls	r3, r2
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4313      	orrs	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e6a:	4937      	ldr	r1, [pc, #220]	; (8000f48 <HAL_GPIO_Init+0x300>)
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	089b      	lsrs	r3, r3, #2
 8000e70:	3302      	adds	r3, #2
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e78:	4b3b      	ldr	r3, [pc, #236]	; (8000f68 <HAL_GPIO_Init+0x320>)
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	43db      	mvns	r3, r3
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4013      	ands	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d003      	beq.n	8000e9c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000e94:	693a      	ldr	r2, [r7, #16]
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e9c:	4a32      	ldr	r2, [pc, #200]	; (8000f68 <HAL_GPIO_Init+0x320>)
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000ea2:	4b31      	ldr	r3, [pc, #196]	; (8000f68 <HAL_GPIO_Init+0x320>)
 8000ea4:	68db      	ldr	r3, [r3, #12]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d003      	beq.n	8000ec6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	4313      	orrs	r3, r2
 8000ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ec6:	4a28      	ldr	r2, [pc, #160]	; (8000f68 <HAL_GPIO_Init+0x320>)
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ecc:	4b26      	ldr	r3, [pc, #152]	; (8000f68 <HAL_GPIO_Init+0x320>)
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	43db      	mvns	r3, r3
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	4013      	ands	r3, r2
 8000eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d003      	beq.n	8000ef0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	4313      	orrs	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ef0:	4a1d      	ldr	r2, [pc, #116]	; (8000f68 <HAL_GPIO_Init+0x320>)
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	; (8000f68 <HAL_GPIO_Init+0x320>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	43db      	mvns	r3, r3
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	4013      	ands	r3, r2
 8000f04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d003      	beq.n	8000f1a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000f1a:	4a13      	ldr	r2, [pc, #76]	; (8000f68 <HAL_GPIO_Init+0x320>)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	3301      	adds	r3, #1
 8000f24:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	681a      	ldr	r2, [r3, #0]
 8000f2a:	697b      	ldr	r3, [r7, #20]
 8000f2c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	f47f ae91 	bne.w	8000c58 <HAL_GPIO_Init+0x10>
  }
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	371c      	adds	r7, #28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	40021000 	.word	0x40021000
 8000f48:	40010000 	.word	0x40010000
 8000f4c:	48000400 	.word	0x48000400
 8000f50:	48000800 	.word	0x48000800
 8000f54:	48000c00 	.word	0x48000c00
 8000f58:	48001000 	.word	0x48001000
 8000f5c:	48001400 	.word	0x48001400
 8000f60:	48001800 	.word	0x48001800
 8000f64:	48001c00 	.word	0x48001c00
 8000f68:	40010400 	.word	0x40010400

08000f6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	460b      	mov	r3, r1
 8000f76:	807b      	strh	r3, [r7, #2]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f7c:	787b      	ldrb	r3, [r7, #1]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d003      	beq.n	8000f8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f82:	887a      	ldrh	r2, [r7, #2]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f88:	e002      	b.n	8000f90 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f8a:	887a      	ldrh	r2, [r7, #2]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b085      	sub	sp, #20
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
 8000fa4:	460b      	mov	r3, r1
 8000fa6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	695b      	ldr	r3, [r3, #20]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000fae:	887a      	ldrh	r2, [r7, #2]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	041a      	lsls	r2, r3, #16
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	43d9      	mvns	r1, r3
 8000fba:	887b      	ldrh	r3, [r7, #2]
 8000fbc:	400b      	ands	r3, r1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	619a      	str	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fda:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fdc:	695a      	ldr	r2, [r3, #20]
 8000fde:	88fb      	ldrh	r3, [r7, #6]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fe8:	88fb      	ldrh	r3, [r7, #6]
 8000fea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fa32 	bl	8000458 <HAL_GPIO_EXTI_Callback>
  }
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40010400 	.word	0x40010400

08001000 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001000:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001002:	b08f      	sub	sp, #60	; 0x3c
 8001004:	af0a      	add	r7, sp, #40	; 0x28
 8001006:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d101      	bne.n	8001012 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800100e:	2301      	movs	r3, #1
 8001010:	e116      	b.n	8001240 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800101e:	b2db      	uxtb	r3, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	d106      	bne.n	8001032 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800102c:	6878      	ldr	r0, [r7, #4]
 800102e:	f005 fd2f 	bl	8006a90 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2203      	movs	r2, #3
 8001036:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800103e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001042:	2b00      	cmp	r3, #0
 8001044:	d102      	bne.n	800104c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	2200      	movs	r2, #0
 800104a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	4618      	mov	r0, r3
 8001052:	f002 fc90 	bl	8003976 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	687e      	ldr	r6, [r7, #4]
 800105e:	466d      	mov	r5, sp
 8001060:	f106 0410 	add.w	r4, r6, #16
 8001064:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001066:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001068:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800106a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800106c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001070:	e885 0003 	stmia.w	r5, {r0, r1}
 8001074:	1d33      	adds	r3, r6, #4
 8001076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001078:	6838      	ldr	r0, [r7, #0]
 800107a:	f002 fba3 	bl	80037c4 <USB_CoreInit>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d005      	beq.n	8001090 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2202      	movs	r2, #2
 8001088:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e0d7      	b.n	8001240 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2100      	movs	r1, #0
 8001096:	4618      	mov	r0, r3
 8001098:	f002 fc7e 	bl	8003998 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800109c:	2300      	movs	r3, #0
 800109e:	73fb      	strb	r3, [r7, #15]
 80010a0:	e04a      	b.n	8001138 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80010a2:	7bfa      	ldrb	r2, [r7, #15]
 80010a4:	6879      	ldr	r1, [r7, #4]
 80010a6:	4613      	mov	r3, r2
 80010a8:	00db      	lsls	r3, r3, #3
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	440b      	add	r3, r1
 80010b0:	333d      	adds	r3, #61	; 0x3d
 80010b2:	2201      	movs	r2, #1
 80010b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80010b6:	7bfa      	ldrb	r2, [r7, #15]
 80010b8:	6879      	ldr	r1, [r7, #4]
 80010ba:	4613      	mov	r3, r2
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	1a9b      	subs	r3, r3, r2
 80010c0:	009b      	lsls	r3, r3, #2
 80010c2:	440b      	add	r3, r1
 80010c4:	333c      	adds	r3, #60	; 0x3c
 80010c6:	7bfa      	ldrb	r2, [r7, #15]
 80010c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80010ca:	7bfa      	ldrb	r2, [r7, #15]
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
 80010ce:	b298      	uxth	r0, r3
 80010d0:	6879      	ldr	r1, [r7, #4]
 80010d2:	4613      	mov	r3, r2
 80010d4:	00db      	lsls	r3, r3, #3
 80010d6:	1a9b      	subs	r3, r3, r2
 80010d8:	009b      	lsls	r3, r3, #2
 80010da:	440b      	add	r3, r1
 80010dc:	3342      	adds	r3, #66	; 0x42
 80010de:	4602      	mov	r2, r0
 80010e0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80010e2:	7bfa      	ldrb	r2, [r7, #15]
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	00db      	lsls	r3, r3, #3
 80010ea:	1a9b      	subs	r3, r3, r2
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	440b      	add	r3, r1
 80010f0:	333f      	adds	r3, #63	; 0x3f
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80010f6:	7bfa      	ldrb	r2, [r7, #15]
 80010f8:	6879      	ldr	r1, [r7, #4]
 80010fa:	4613      	mov	r3, r2
 80010fc:	00db      	lsls	r3, r3, #3
 80010fe:	1a9b      	subs	r3, r3, r2
 8001100:	009b      	lsls	r3, r3, #2
 8001102:	440b      	add	r3, r1
 8001104:	3344      	adds	r3, #68	; 0x44
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800110a:	7bfa      	ldrb	r2, [r7, #15]
 800110c:	6879      	ldr	r1, [r7, #4]
 800110e:	4613      	mov	r3, r2
 8001110:	00db      	lsls	r3, r3, #3
 8001112:	1a9b      	subs	r3, r3, r2
 8001114:	009b      	lsls	r3, r3, #2
 8001116:	440b      	add	r3, r1
 8001118:	3348      	adds	r3, #72	; 0x48
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800111e:	7bfa      	ldrb	r2, [r7, #15]
 8001120:	6879      	ldr	r1, [r7, #4]
 8001122:	4613      	mov	r3, r2
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	1a9b      	subs	r3, r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	440b      	add	r3, r1
 800112c:	3350      	adds	r3, #80	; 0x50
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001132:	7bfb      	ldrb	r3, [r7, #15]
 8001134:	3301      	adds	r3, #1
 8001136:	73fb      	strb	r3, [r7, #15]
 8001138:	7bfa      	ldrb	r2, [r7, #15]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	429a      	cmp	r2, r3
 8001140:	d3af      	bcc.n	80010a2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001142:	2300      	movs	r3, #0
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	e044      	b.n	80011d2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001148:	7bfa      	ldrb	r2, [r7, #15]
 800114a:	6879      	ldr	r1, [r7, #4]
 800114c:	4613      	mov	r3, r2
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	1a9b      	subs	r3, r3, r2
 8001152:	009b      	lsls	r3, r3, #2
 8001154:	440b      	add	r3, r1
 8001156:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800115a:	2200      	movs	r2, #0
 800115c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800115e:	7bfa      	ldrb	r2, [r7, #15]
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001170:	7bfa      	ldrb	r2, [r7, #15]
 8001172:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001174:	7bfa      	ldrb	r2, [r7, #15]
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	4613      	mov	r3, r2
 800117a:	00db      	lsls	r3, r3, #3
 800117c:	1a9b      	subs	r3, r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001186:	2200      	movs	r2, #0
 8001188:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800118a:	7bfa      	ldrb	r2, [r7, #15]
 800118c:	6879      	ldr	r1, [r7, #4]
 800118e:	4613      	mov	r3, r2
 8001190:	00db      	lsls	r3, r3, #3
 8001192:	1a9b      	subs	r3, r3, r2
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	f503 7301 	add.w	r3, r3, #516	; 0x204
 800119c:	2200      	movs	r2, #0
 800119e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	6879      	ldr	r1, [r7, #4]
 80011a4:	4613      	mov	r3, r2
 80011a6:	00db      	lsls	r3, r3, #3
 80011a8:	1a9b      	subs	r3, r3, r2
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	440b      	add	r3, r1
 80011ae:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80011b6:	7bfa      	ldrb	r2, [r7, #15]
 80011b8:	6879      	ldr	r1, [r7, #4]
 80011ba:	4613      	mov	r3, r2
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	1a9b      	subs	r3, r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	440b      	add	r3, r1
 80011c4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	3301      	adds	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	7bfa      	ldrb	r2, [r7, #15]
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d3b5      	bcc.n	8001148 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	603b      	str	r3, [r7, #0]
 80011e2:	687e      	ldr	r6, [r7, #4]
 80011e4:	466d      	mov	r5, sp
 80011e6:	f106 0410 	add.w	r4, r6, #16
 80011ea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011ee:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80011f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80011f2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80011f6:	e885 0003 	stmia.w	r5, {r0, r1}
 80011fa:	1d33      	adds	r3, r6, #4
 80011fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80011fe:	6838      	ldr	r0, [r7, #0]
 8001200:	f002 fc16 	bl	8003a30 <USB_DevInit>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d005      	beq.n	8001216 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2202      	movs	r2, #2
 800120e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e014      	b.n	8001240 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2200      	movs	r2, #0
 800121a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	2201      	movs	r2, #1
 8001222:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800122a:	2b01      	cmp	r3, #1
 800122c:	d102      	bne.n	8001234 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800122e:	6878      	ldr	r0, [r7, #4]
 8001230:	f000 ff56 	bl	80020e0 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f003 fbe8 	bl	8004a0e <USB_DevDisconnect>

  return HAL_OK;
 800123e:	2300      	movs	r3, #0
}
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001248 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800125c:	2b01      	cmp	r3, #1
 800125e:	d101      	bne.n	8001264 <HAL_PCD_Start+0x1c>
 8001260:	2302      	movs	r3, #2
 8001262:	e01c      	b.n	800129e <HAL_PCD_Start+0x56>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2201      	movs	r2, #1
 8001268:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001270:	2b01      	cmp	r3, #1
 8001272:	d105      	bne.n	8001280 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001278:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fb65 	bl	8003954 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4618      	mov	r0, r3
 8001290:	f003 fb9c 	bl	80049cc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 800129c:	2300      	movs	r3, #0
}
 800129e:	4618      	mov	r0, r3
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80012a6:	b590      	push	{r4, r7, lr}
 80012a8:	b08d      	sub	sp, #52	; 0x34
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80012b4:	6a3b      	ldr	r3, [r7, #32]
 80012b6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f003 fc5a 	bl	8004b76 <USB_GetMode>
 80012c2:	4603      	mov	r3, r0
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f040 8384 	bne.w	80019d2 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f003 fbbe 	bl	8004a50 <USB_ReadInterrupts>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	f000 837a 	beq.w	80019d0 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f003 fbb5 	bl	8004a50 <USB_ReadInterrupts>
 80012e6:	4603      	mov	r3, r0
 80012e8:	f003 0302 	and.w	r3, r3, #2
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	d107      	bne.n	8001300 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	695a      	ldr	r2, [r3, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f002 0202 	and.w	r2, r2, #2
 80012fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4618      	mov	r0, r3
 8001306:	f003 fba3 	bl	8004a50 <USB_ReadInterrupts>
 800130a:	4603      	mov	r3, r0
 800130c:	f003 0310 	and.w	r3, r3, #16
 8001310:	2b10      	cmp	r3, #16
 8001312:	d161      	bne.n	80013d8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	699a      	ldr	r2, [r3, #24]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f022 0210 	bic.w	r2, r2, #16
 8001322:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001324:	6a3b      	ldr	r3, [r7, #32]
 8001326:	6a1b      	ldr	r3, [r3, #32]
 8001328:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	f003 020f 	and.w	r2, r3, #15
 8001330:	4613      	mov	r3, r2
 8001332:	00db      	lsls	r3, r3, #3
 8001334:	1a9b      	subs	r3, r3, r2
 8001336:	009b      	lsls	r3, r3, #2
 8001338:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800133c:	687a      	ldr	r2, [r7, #4]
 800133e:	4413      	add	r3, r2
 8001340:	3304      	adds	r3, #4
 8001342:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	0c5b      	lsrs	r3, r3, #17
 8001348:	f003 030f 	and.w	r3, r3, #15
 800134c:	2b02      	cmp	r3, #2
 800134e:	d124      	bne.n	800139a <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001356:	4013      	ands	r3, r2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d035      	beq.n	80013c8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001360:	69bb      	ldr	r3, [r7, #24]
 8001362:	091b      	lsrs	r3, r3, #4
 8001364:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800136a:	b29b      	uxth	r3, r3
 800136c:	461a      	mov	r2, r3
 800136e:	6a38      	ldr	r0, [r7, #32]
 8001370:	f003 f9da 	bl	8004728 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	68da      	ldr	r2, [r3, #12]
 8001378:	69bb      	ldr	r3, [r7, #24]
 800137a:	091b      	lsrs	r3, r3, #4
 800137c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001380:	441a      	add	r2, r3
 8001382:	697b      	ldr	r3, [r7, #20]
 8001384:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	69bb      	ldr	r3, [r7, #24]
 800138c:	091b      	lsrs	r3, r3, #4
 800138e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001392:	441a      	add	r2, r3
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	619a      	str	r2, [r3, #24]
 8001398:	e016      	b.n	80013c8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 800139a:	69bb      	ldr	r3, [r7, #24]
 800139c:	0c5b      	lsrs	r3, r3, #17
 800139e:	f003 030f 	and.w	r3, r3, #15
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d110      	bne.n	80013c8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80013ac:	2208      	movs	r2, #8
 80013ae:	4619      	mov	r1, r3
 80013b0:	6a38      	ldr	r0, [r7, #32]
 80013b2:	f003 f9b9 	bl	8004728 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	699a      	ldr	r2, [r3, #24]
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	091b      	lsrs	r3, r3, #4
 80013be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80013c2:	441a      	add	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	699a      	ldr	r2, [r3, #24]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f042 0210 	orr.w	r2, r2, #16
 80013d6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4618      	mov	r0, r3
 80013de:	f003 fb37 	bl	8004a50 <USB_ReadInterrupts>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80013e8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80013ec:	d16e      	bne.n	80014cc <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f003 fb3d 	bl	8004a76 <USB_ReadDevAllOutEpInterrupt>
 80013fc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80013fe:	e062      	b.n	80014c6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001402:	f003 0301 	and.w	r3, r3, #1
 8001406:	2b00      	cmp	r3, #0
 8001408:	d057      	beq.n	80014ba <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	4611      	mov	r1, r2
 8001414:	4618      	mov	r0, r3
 8001416:	f003 fb62 	bl	8004ade <USB_ReadDevOutEPInterrupt>
 800141a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	f003 0301 	and.w	r3, r3, #1
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00c      	beq.n	8001440 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001428:	015a      	lsls	r2, r3, #5
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	4413      	add	r3, r2
 800142e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001432:	461a      	mov	r2, r3
 8001434:	2301      	movs	r3, #1
 8001436:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001438:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f000 fd76 	bl	8001f2c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	f003 0308 	and.w	r3, r3, #8
 8001446:	2b00      	cmp	r3, #0
 8001448:	d00c      	beq.n	8001464 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800144a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144c:	015a      	lsls	r2, r3, #5
 800144e:	69fb      	ldr	r3, [r7, #28]
 8001450:	4413      	add	r3, r2
 8001452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001456:	461a      	mov	r2, r3
 8001458:	2308      	movs	r3, #8
 800145a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800145c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f000 fdb2 	bl	8001fc8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b00      	cmp	r3, #0
 800146c:	d008      	beq.n	8001480 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800146e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001470:	015a      	lsls	r2, r3, #5
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	4413      	add	r3, r2
 8001476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800147a:	461a      	mov	r2, r3
 800147c:	2310      	movs	r3, #16
 800147e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	2b00      	cmp	r3, #0
 8001488:	d008      	beq.n	800149c <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800148a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800148c:	015a      	lsls	r2, r3, #5
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	4413      	add	r3, r2
 8001492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001496:	461a      	mov	r2, r3
 8001498:	2320      	movs	r3, #32
 800149a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d009      	beq.n	80014ba <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80014a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a8:	015a      	lsls	r2, r3, #5
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	4413      	add	r3, r2
 80014ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014b2:	461a      	mov	r2, r3
 80014b4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014b8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	3301      	adds	r3, #1
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c2:	085b      	lsrs	r3, r3, #1
 80014c4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d199      	bne.n	8001400 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f003 fabd 	bl	8004a50 <USB_ReadInterrupts>
 80014d6:	4603      	mov	r3, r0
 80014d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014e0:	f040 808c 	bne.w	80015fc <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f003 fade 	bl	8004aaa <USB_ReadDevAllInEpInterrupt>
 80014ee:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80014f4:	e07e      	b.n	80015f4 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80014f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014f8:	f003 0301 	and.w	r3, r3, #1
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d073      	beq.n	80015e8 <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	4611      	mov	r1, r2
 800150a:	4618      	mov	r0, r3
 800150c:	f003 fb05 	bl	8004b1a <USB_ReadDevInEPInterrupt>
 8001510:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	2b00      	cmp	r3, #0
 800151a:	d020      	beq.n	800155e <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800151c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151e:	f003 030f 	and.w	r3, r3, #15
 8001522:	2201      	movs	r2, #1
 8001524:	fa02 f303 	lsl.w	r3, r2, r3
 8001528:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001530:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43db      	mvns	r3, r3
 8001536:	69f9      	ldr	r1, [r7, #28]
 8001538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800153c:	4013      	ands	r3, r2
 800153e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	015a      	lsls	r2, r3, #5
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	4413      	add	r3, r2
 8001548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800154c:	461a      	mov	r2, r3
 800154e:	2301      	movs	r3, #1
 8001550:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001554:	b2db      	uxtb	r3, r3
 8001556:	4619      	mov	r1, r3
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f005 fb58 	bl	8006c0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	f003 0308 	and.w	r3, r3, #8
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001574:	461a      	mov	r2, r3
 8001576:	2308      	movs	r3, #8
 8001578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f003 0310 	and.w	r3, r3, #16
 8001580:	2b00      	cmp	r3, #0
 8001582:	d008      	beq.n	8001596 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001586:	015a      	lsls	r2, r3, #5
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	4413      	add	r3, r2
 800158c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001590:	461a      	mov	r2, r3
 8001592:	2310      	movs	r3, #16
 8001594:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800159c:	2b00      	cmp	r3, #0
 800159e:	d008      	beq.n	80015b2 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80015a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a2:	015a      	lsls	r2, r3, #5
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015ac:	461a      	mov	r2, r3
 80015ae:	2340      	movs	r3, #64	; 0x40
 80015b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80015b2:	693b      	ldr	r3, [r7, #16]
 80015b4:	f003 0302 	and.w	r3, r3, #2
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d00c      	beq.n	80015d6 <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80015bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015be:	6a38      	ldr	r0, [r7, #32]
 80015c0:	f002 fb82 	bl	8003cc8 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	015a      	lsls	r2, r3, #5
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	4413      	add	r3, r2
 80015cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015d0:	461a      	mov	r2, r3
 80015d2:	2302      	movs	r3, #2
 80015d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d003      	beq.n	80015e8 <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015e2:	6878      	ldr	r0, [r7, #4]
 80015e4:	f000 fc1a 	bl	8001e1c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	3301      	adds	r3, #1
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f0:	085b      	lsrs	r3, r3, #1
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f47f af7d 	bne.w	80014f6 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fa25 	bl	8004a50 <USB_ReadInterrupts>
 8001606:	4603      	mov	r3, r0
 8001608:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800160c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001610:	d122      	bne.n	8001658 <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001620:	f023 0301 	bic.w	r3, r3, #1
 8001624:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800162c:	2b01      	cmp	r3, #1
 800162e:	d108      	bne.n	8001642 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2200      	movs	r2, #0
 8001634:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001638:	2100      	movs	r1, #0
 800163a:	6878      	ldr	r0, [r7, #4]
 800163c:	f005 fe00 	bl	8007240 <HAL_PCDEx_LPM_Callback>
 8001640:	e002      	b.n	8001648 <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001642:	6878      	ldr	r0, [r7, #4]
 8001644:	f005 fb50 	bl	8006ce8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	695a      	ldr	r2, [r3, #20]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001656:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f003 f9f7 	bl	8004a50 <USB_ReadInterrupts>
 8001662:	4603      	mov	r3, r0
 8001664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001668:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800166c:	d112      	bne.n	8001694 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001674:	689b      	ldr	r3, [r3, #8]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b01      	cmp	r3, #1
 800167c:	d102      	bne.n	8001684 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800167e:	6878      	ldr	r0, [r7, #4]
 8001680:	f005 fb0c 	bl	8006c9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001692:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4618      	mov	r0, r3
 800169a:	f003 f9d9 	bl	8004a50 <USB_ReadInterrupts>
 800169e:	4603      	mov	r3, r0
 80016a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80016a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80016a8:	d121      	bne.n	80016ee <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	695a      	ldr	r2, [r3, #20]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80016b8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d111      	bne.n	80016e8 <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2201      	movs	r2, #1
 80016c8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016d2:	089b      	lsrs	r3, r3, #2
 80016d4:	f003 020f 	and.w	r2, r3, #15
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80016de:	2101      	movs	r1, #1
 80016e0:	6878      	ldr	r0, [r7, #4]
 80016e2:	f005 fdad 	bl	8007240 <HAL_PCDEx_LPM_Callback>
 80016e6:	e002      	b.n	80016ee <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80016e8:	6878      	ldr	r0, [r7, #4]
 80016ea:	f005 fad7 	bl	8006c9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f003 f9ac 	bl	8004a50 <USB_ReadInterrupts>
 80016f8:	4603      	mov	r3, r0
 80016fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001702:	f040 80b5 	bne.w	8001870 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	69fa      	ldr	r2, [r7, #28]
 8001710:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001714:	f023 0301 	bic.w	r3, r3, #1
 8001718:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2110      	movs	r1, #16
 8001720:	4618      	mov	r0, r3
 8001722:	f002 fad1 	bl	8003cc8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001726:	2300      	movs	r3, #0
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800172a:	e046      	b.n	80017ba <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800172c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800172e:	015a      	lsls	r2, r3, #5
 8001730:	69fb      	ldr	r3, [r7, #28]
 8001732:	4413      	add	r3, r2
 8001734:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001738:	461a      	mov	r2, r3
 800173a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800173e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001742:	015a      	lsls	r2, r3, #5
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	4413      	add	r3, r2
 8001748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001750:	0151      	lsls	r1, r2, #5
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	440a      	add	r2, r1
 8001756:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800175a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800175e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001760:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001762:	015a      	lsls	r2, r3, #5
 8001764:	69fb      	ldr	r3, [r7, #28]
 8001766:	4413      	add	r3, r2
 8001768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800176c:	461a      	mov	r2, r3
 800176e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001772:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	4413      	add	r3, r2
 800177c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001784:	0151      	lsls	r1, r2, #5
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	440a      	add	r2, r1
 800178a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800178e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001792:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001796:	015a      	lsls	r2, r3, #5
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	4413      	add	r3, r2
 800179c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017a4:	0151      	lsls	r1, r2, #5
 80017a6:	69fa      	ldr	r2, [r7, #28]
 80017a8:	440a      	add	r2, r1
 80017aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80017ae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80017b2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b6:	3301      	adds	r3, #1
 80017b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d3b3      	bcc.n	800172c <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017ca:	69db      	ldr	r3, [r3, #28]
 80017cc:	69fa      	ldr	r2, [r7, #28]
 80017ce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80017d6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d016      	beq.n	800180e <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017ea:	69fa      	ldr	r2, [r7, #28]
 80017ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017f0:	f043 030b 	orr.w	r3, r3, #11
 80017f4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	69fa      	ldr	r2, [r7, #28]
 8001802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001806:	f043 030b 	orr.w	r3, r3, #11
 800180a:	6453      	str	r3, [r2, #68]	; 0x44
 800180c:	e015      	b.n	800183a <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800180e:	69fb      	ldr	r3, [r7, #28]
 8001810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	69fa      	ldr	r2, [r7, #28]
 8001818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800181c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001820:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001824:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800182c:	691b      	ldr	r3, [r3, #16]
 800182e:	69fa      	ldr	r2, [r7, #28]
 8001830:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001834:	f043 030b 	orr.w	r3, r3, #11
 8001838:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800183a:	69fb      	ldr	r3, [r7, #28]
 800183c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001848:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800184c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001858:	4619      	mov	r1, r3
 800185a:	4610      	mov	r0, r2
 800185c:	f003 f9bc 	bl	8004bd8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800186e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f003 f8eb 	bl	8004a50 <USB_ReadInterrupts>
 800187a:	4603      	mov	r3, r0
 800187c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001880:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001884:	d124      	bne.n	80018d0 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4618      	mov	r0, r3
 800188c:	f003 f981 	bl	8004b92 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f002 fa90 	bl	8003dba <USB_GetDevSpeed>
 800189a:	4603      	mov	r3, r0
 800189c:	461a      	mov	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681c      	ldr	r4, [r3, #0]
 80018a6:	f001 fa47 	bl	8002d38 <HAL_RCC_GetHCLKFreq>
 80018aa:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	461a      	mov	r2, r3
 80018b4:	4620      	mov	r0, r4
 80018b6:	f001 ffb1 	bl	800381c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f005 f9cf 	bl	8006c5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80018ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f003 f8bb 	bl	8004a50 <USB_ReadInterrupts>
 80018da:	4603      	mov	r3, r0
 80018dc:	f003 0308 	and.w	r3, r3, #8
 80018e0:	2b08      	cmp	r3, #8
 80018e2:	d10a      	bne.n	80018fa <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f005 f9ac 	bl	8006c42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	695a      	ldr	r2, [r3, #20]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f002 0208 	and.w	r2, r2, #8
 80018f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f003 f8a6 	bl	8004a50 <USB_ReadInterrupts>
 8001904:	4603      	mov	r3, r0
 8001906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800190e:	d10f      	bne.n	8001930 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	b2db      	uxtb	r3, r3
 8001918:	4619      	mov	r1, r3
 800191a:	6878      	ldr	r0, [r7, #4]
 800191c:	f005 fa1e 	bl	8006d5c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	695a      	ldr	r2, [r3, #20]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800192e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4618      	mov	r0, r3
 8001936:	f003 f88b 	bl	8004a50 <USB_ReadInterrupts>
 800193a:	4603      	mov	r3, r0
 800193c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001940:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001944:	d10f      	bne.n	8001966 <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001946:	2300      	movs	r3, #0
 8001948:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	b2db      	uxtb	r3, r3
 800194e:	4619      	mov	r1, r3
 8001950:	6878      	ldr	r0, [r7, #4]
 8001952:	f005 f9f1 	bl	8006d38 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	695a      	ldr	r2, [r3, #20]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001964:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f003 f870 	bl	8004a50 <USB_ReadInterrupts>
 8001970:	4603      	mov	r3, r0
 8001972:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800197a:	d10a      	bne.n	8001992 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f005 f9ff 	bl	8006d80 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	695a      	ldr	r2, [r3, #20]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001990:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4618      	mov	r0, r3
 8001998:	f003 f85a 	bl	8004a50 <USB_ReadInterrupts>
 800199c:	4603      	mov	r3, r0
 800199e:	f003 0304 	and.w	r3, r3, #4
 80019a2:	2b04      	cmp	r3, #4
 80019a4:	d115      	bne.n	80019d2 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	f003 0304 	and.w	r3, r3, #4
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d002      	beq.n	80019be <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80019b8:	6878      	ldr	r0, [r7, #4]
 80019ba:	f005 f9ef 	bl	8006d9c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6859      	ldr	r1, [r3, #4]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	e000      	b.n	80019d2 <HAL_PCD_IRQHandler+0x72c>
      return;
 80019d0:	bf00      	nop
    }
  }
}
 80019d2:	3734      	adds	r7, #52	; 0x34
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd90      	pop	{r4, r7, pc}

080019d8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	6078      	str	r0, [r7, #4]
 80019e0:	460b      	mov	r3, r1
 80019e2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d101      	bne.n	80019f2 <HAL_PCD_SetAddress+0x1a>
 80019ee:	2302      	movs	r3, #2
 80019f0:	e013      	b.n	8001a1a <HAL_PCD_SetAddress+0x42>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2201      	movs	r2, #1
 80019f6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	78fa      	ldrb	r2, [r7, #3]
 80019fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	4611      	mov	r1, r2
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 ffb8 	bl	8004980 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2200      	movs	r2, #0
 8001a14:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
 8001a2a:	4608      	mov	r0, r1
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	461a      	mov	r2, r3
 8001a30:	4603      	mov	r3, r0
 8001a32:	70fb      	strb	r3, [r7, #3]
 8001a34:	460b      	mov	r3, r1
 8001a36:	803b      	strh	r3, [r7, #0]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a40:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	da0f      	bge.n	8001a68 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a48:	78fb      	ldrb	r3, [r7, #3]
 8001a4a:	f003 020f 	and.w	r2, r3, #15
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	1a9b      	subs	r3, r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	3338      	adds	r3, #56	; 0x38
 8001a58:	687a      	ldr	r2, [r7, #4]
 8001a5a:	4413      	add	r3, r2
 8001a5c:	3304      	adds	r3, #4
 8001a5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	2201      	movs	r2, #1
 8001a64:	705a      	strb	r2, [r3, #1]
 8001a66:	e00f      	b.n	8001a88 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a68:	78fb      	ldrb	r3, [r7, #3]
 8001a6a:	f003 020f 	and.w	r2, r3, #15
 8001a6e:	4613      	mov	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	1a9b      	subs	r3, r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	3304      	adds	r3, #4
 8001a80:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	2200      	movs	r2, #0
 8001a86:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a88:	78fb      	ldrb	r3, [r7, #3]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	b2da      	uxtb	r2, r3
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a94:	883a      	ldrh	r2, [r7, #0]
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	78ba      	ldrb	r2, [r7, #2]
 8001a9e:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	785b      	ldrb	r3, [r3, #1]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d004      	beq.n	8001ab2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	781b      	ldrb	r3, [r3, #0]
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ab2:	78bb      	ldrb	r3, [r7, #2]
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d102      	bne.n	8001abe <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	2200      	movs	r2, #0
 8001abc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001ac4:	2b01      	cmp	r3, #1
 8001ac6:	d101      	bne.n	8001acc <HAL_PCD_EP_Open+0xaa>
 8001ac8:	2302      	movs	r3, #2
 8001aca:	e00e      	b.n	8001aea <HAL_PCD_EP_Open+0xc8>
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	68f9      	ldr	r1, [r7, #12]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f002 f98c 	bl	8003df8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001ae8:	7afb      	ldrb	r3, [r7, #11]
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}

08001af2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001af2:	b580      	push	{r7, lr}
 8001af4:	b084      	sub	sp, #16
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001afe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	da0f      	bge.n	8001b26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b06:	78fb      	ldrb	r3, [r7, #3]
 8001b08:	f003 020f 	and.w	r2, r3, #15
 8001b0c:	4613      	mov	r3, r2
 8001b0e:	00db      	lsls	r3, r3, #3
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	009b      	lsls	r3, r3, #2
 8001b14:	3338      	adds	r3, #56	; 0x38
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	4413      	add	r3, r2
 8001b1a:	3304      	adds	r3, #4
 8001b1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2201      	movs	r2, #1
 8001b22:	705a      	strb	r2, [r3, #1]
 8001b24:	e00f      	b.n	8001b46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	f003 020f 	and.w	r2, r3, #15
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	1a9b      	subs	r3, r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	4413      	add	r3, r2
 8001b3c:	3304      	adds	r3, #4
 8001b3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	2200      	movs	r2, #0
 8001b44:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	b2da      	uxtb	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <HAL_PCD_EP_Close+0x6e>
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	e00e      	b.n	8001b7e <HAL_PCD_EP_Close+0x8c>
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	68f9      	ldr	r1, [r7, #12]
 8001b6e:	4618      	mov	r0, r3
 8001b70:	f002 f9ca 	bl	8003f08 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b086      	sub	sp, #24
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	603b      	str	r3, [r7, #0]
 8001b92:	460b      	mov	r3, r1
 8001b94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b96:	7afb      	ldrb	r3, [r7, #11]
 8001b98:	f003 020f 	and.w	r2, r3, #15
 8001b9c:	4613      	mov	r3, r2
 8001b9e:	00db      	lsls	r3, r3, #3
 8001ba0:	1a9b      	subs	r3, r3, r2
 8001ba2:	009b      	lsls	r3, r3, #2
 8001ba4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ba8:	68fa      	ldr	r2, [r7, #12]
 8001baa:	4413      	add	r3, r2
 8001bac:	3304      	adds	r3, #4
 8001bae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	687a      	ldr	r2, [r7, #4]
 8001bb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bc8:	7afb      	ldrb	r3, [r7, #11]
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001bd4:	7afb      	ldrb	r3, [r7, #11]
 8001bd6:	f003 030f 	and.w	r3, r3, #15
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d106      	bne.n	8001bec <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6979      	ldr	r1, [r7, #20]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 fc47 	bl	8004478 <USB_EP0StartXfer>
 8001bea:	e005      	b.n	8001bf8 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6979      	ldr	r1, [r7, #20]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f002 fa64 	bl	80040c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	3718      	adds	r7, #24
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c02:	b480      	push	{r7}
 8001c04:	b083      	sub	sp, #12
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	6078      	str	r0, [r7, #4]
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001c0e:	78fb      	ldrb	r3, [r7, #3]
 8001c10:	f003 020f 	and.w	r2, r3, #15
 8001c14:	6879      	ldr	r1, [r7, #4]
 8001c16:	4613      	mov	r3, r2
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	1a9b      	subs	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	440b      	add	r3, r1
 8001c20:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001c24:	681b      	ldr	r3, [r3, #0]
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c32:	b580      	push	{r7, lr}
 8001c34:	b086      	sub	sp, #24
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	60f8      	str	r0, [r7, #12]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
 8001c3e:	460b      	mov	r3, r1
 8001c40:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c42:	7afb      	ldrb	r3, [r7, #11]
 8001c44:	f003 020f 	and.w	r2, r3, #15
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	1a9b      	subs	r3, r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	3338      	adds	r3, #56	; 0x38
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	4413      	add	r3, r2
 8001c56:	3304      	adds	r3, #4
 8001c58:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2201      	movs	r2, #1
 8001c70:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c72:	7afb      	ldrb	r3, [r7, #11]
 8001c74:	f003 030f 	and.w	r3, r3, #15
 8001c78:	b2da      	uxtb	r2, r3
 8001c7a:	697b      	ldr	r3, [r7, #20]
 8001c7c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c7e:	7afb      	ldrb	r3, [r7, #11]
 8001c80:	f003 030f 	and.w	r3, r3, #15
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d106      	bne.n	8001c96 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	6979      	ldr	r1, [r7, #20]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f002 fbf2 	bl	8004478 <USB_EP0StartXfer>
 8001c94:	e005      	b.n	8001ca2 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	6979      	ldr	r1, [r7, #20]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f002 fa0f 	bl	80040c0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ca2:	2300      	movs	r3, #0
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3718      	adds	r7, #24
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	460b      	mov	r3, r1
 8001cb6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 020f 	and.w	r2, r3, #15
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	429a      	cmp	r2, r3
 8001cc4:	d901      	bls.n	8001cca <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e04e      	b.n	8001d68 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001cca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	da0f      	bge.n	8001cf2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cd2:	78fb      	ldrb	r3, [r7, #3]
 8001cd4:	f003 020f 	and.w	r2, r3, #15
 8001cd8:	4613      	mov	r3, r2
 8001cda:	00db      	lsls	r3, r3, #3
 8001cdc:	1a9b      	subs	r3, r3, r2
 8001cde:	009b      	lsls	r3, r3, #2
 8001ce0:	3338      	adds	r3, #56	; 0x38
 8001ce2:	687a      	ldr	r2, [r7, #4]
 8001ce4:	4413      	add	r3, r2
 8001ce6:	3304      	adds	r3, #4
 8001ce8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2201      	movs	r2, #1
 8001cee:	705a      	strb	r2, [r3, #1]
 8001cf0:	e00d      	b.n	8001d0e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cf2:	78fa      	ldrb	r2, [r7, #3]
 8001cf4:	4613      	mov	r3, r2
 8001cf6:	00db      	lsls	r3, r3, #3
 8001cf8:	1a9b      	subs	r3, r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d00:	687a      	ldr	r2, [r7, #4]
 8001d02:	4413      	add	r3, r2
 8001d04:	3304      	adds	r3, #4
 8001d06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	2201      	movs	r2, #1
 8001d12:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d14:	78fb      	ldrb	r3, [r7, #3]
 8001d16:	f003 030f 	and.w	r3, r3, #15
 8001d1a:	b2da      	uxtb	r2, r3
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d101      	bne.n	8001d2e <HAL_PCD_EP_SetStall+0x82>
 8001d2a:	2302      	movs	r3, #2
 8001d2c:	e01c      	b.n	8001d68 <HAL_PCD_EP_SetStall+0xbc>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2201      	movs	r2, #1
 8001d32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	68f9      	ldr	r1, [r7, #12]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f002 fd4b 	bl	80047d8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	f003 030f 	and.w	r3, r3, #15
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d108      	bne.n	8001d5e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4610      	mov	r0, r2
 8001d5a:	f002 ff3d 	bl	8004bd8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2200      	movs	r2, #0
 8001d62:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	3710      	adds	r7, #16
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}

08001d70 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	460b      	mov	r3, r1
 8001d7a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d7c:	78fb      	ldrb	r3, [r7, #3]
 8001d7e:	f003 020f 	and.w	r2, r3, #15
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d901      	bls.n	8001d8e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e042      	b.n	8001e14 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da0f      	bge.n	8001db6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	f003 020f 	and.w	r2, r3, #15
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	1a9b      	subs	r3, r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	3338      	adds	r3, #56	; 0x38
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	4413      	add	r3, r2
 8001daa:	3304      	adds	r3, #4
 8001dac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2201      	movs	r2, #1
 8001db2:	705a      	strb	r2, [r3, #1]
 8001db4:	e00f      	b.n	8001dd6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001db6:	78fb      	ldrb	r3, [r7, #3]
 8001db8:	f003 020f 	and.w	r2, r3, #15
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	1a9b      	subs	r3, r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001dc8:	687a      	ldr	r2, [r7, #4]
 8001dca:	4413      	add	r3, r2
 8001dcc:	3304      	adds	r3, #4
 8001dce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	f003 030f 	and.w	r3, r3, #15
 8001de2:	b2da      	uxtb	r2, r3
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d101      	bne.n	8001df6 <HAL_PCD_EP_ClrStall+0x86>
 8001df2:	2302      	movs	r3, #2
 8001df4:	e00e      	b.n	8001e14 <HAL_PCD_EP_ClrStall+0xa4>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2201      	movs	r2, #1
 8001dfa:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	68f9      	ldr	r1, [r7, #12]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f002 fd55 	bl	80048b4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001e12:	2300      	movs	r3, #0
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	3710      	adds	r7, #16
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}

08001e1c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	4613      	mov	r3, r2
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	1a9b      	subs	r3, r3, r2
 8001e38:	009b      	lsls	r3, r3, #2
 8001e3a:	3338      	adds	r3, #56	; 0x38
 8001e3c:	687a      	ldr	r2, [r7, #4]
 8001e3e:	4413      	add	r3, r2
 8001e40:	3304      	adds	r3, #4
 8001e42:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	699a      	ldr	r2, [r3, #24]
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	695b      	ldr	r3, [r3, #20]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d901      	bls.n	8001e54 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e067      	b.n	8001f24 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	695a      	ldr	r2, [r3, #20]
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	69fa      	ldr	r2, [r7, #28]
 8001e66:	429a      	cmp	r2, r3
 8001e68:	d902      	bls.n	8001e70 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	689b      	ldr	r3, [r3, #8]
 8001e6e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001e70:	69fb      	ldr	r3, [r7, #28]
 8001e72:	3303      	adds	r3, #3
 8001e74:	089b      	lsrs	r3, r3, #2
 8001e76:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001e78:	e026      	b.n	8001ec8 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	695a      	ldr	r2, [r3, #20]
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	699b      	ldr	r3, [r3, #24]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	69fa      	ldr	r2, [r7, #28]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d902      	bls.n	8001e96 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3303      	adds	r3, #3
 8001e9a:	089b      	lsrs	r3, r3, #2
 8001e9c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	68d9      	ldr	r1, [r3, #12]
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	b2da      	uxtb	r2, r3
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	b29b      	uxth	r3, r3
 8001eaa:	6978      	ldr	r0, [r7, #20]
 8001eac:	f002 fc02 	bl	80046b4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	699a      	ldr	r2, [r3, #24]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	441a      	add	r2, r3
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	015a      	lsls	r2, r3, #5
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4413      	add	r3, r2
 8001ed0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ed4:	699b      	ldr	r3, [r3, #24]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	69ba      	ldr	r2, [r7, #24]
 8001eda:	429a      	cmp	r2, r3
 8001edc:	d809      	bhi.n	8001ef2 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	699a      	ldr	r2, [r3, #24]
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d203      	bcs.n	8001ef2 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	695b      	ldr	r3, [r3, #20]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d1c3      	bne.n	8001e7a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	695a      	ldr	r2, [r3, #20]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	699b      	ldr	r3, [r3, #24]
 8001efa:	429a      	cmp	r2, r3
 8001efc:	d811      	bhi.n	8001f22 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	2201      	movs	r2, #1
 8001f06:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	6939      	ldr	r1, [r7, #16]
 8001f1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001f1e:	4013      	ands	r3, r2
 8001f20:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001f22:	2300      	movs	r3, #0
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3720      	adds	r7, #32
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b086      	sub	sp, #24
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	333c      	adds	r3, #60	; 0x3c
 8001f44:	3304      	adds	r3, #4
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <PCD_EP_OutXfrComplete_int+0x98>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d124      	bne.n	8001fac <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001f62:	68bb      	ldr	r3, [r7, #8]
 8001f64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d00a      	beq.n	8001f82 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	015a      	lsls	r2, r3, #5
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4413      	add	r3, r2
 8001f74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f78:	461a      	mov	r2, r3
 8001f7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f7e:	6093      	str	r3, [r2, #8]
 8001f80:	e01a      	b.n	8001fb8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	f003 0320 	and.w	r3, r3, #32
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d008      	beq.n	8001f9e <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	015a      	lsls	r2, r3, #5
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	4413      	add	r3, r2
 8001f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2320      	movs	r3, #32
 8001f9c:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f004 fe17 	bl	8006bd8 <HAL_PCD_DataOutStageCallback>
 8001faa:	e005      	b.n	8001fb8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f004 fe10 	bl	8006bd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001fb8:	2300      	movs	r3, #0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3718      	adds	r7, #24
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
 8001fc2:	bf00      	nop
 8001fc4:	4f54310a 	.word	0x4f54310a

08001fc8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b086      	sub	sp, #24
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	333c      	adds	r3, #60	; 0x3c
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	015a      	lsls	r2, r3, #5
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	4413      	add	r3, r2
 8001fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	4a0c      	ldr	r2, [pc, #48]	; (800202c <PCD_EP_OutSetupPacket_int+0x64>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d90e      	bls.n	800201c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002004:	2b00      	cmp	r3, #0
 8002006:	d009      	beq.n	800201c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	015a      	lsls	r2, r3, #5
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	4413      	add	r3, r2
 8002010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002014:	461a      	mov	r2, r3
 8002016:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800201a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800201c:	6878      	ldr	r0, [r7, #4]
 800201e:	f004 fdc9 	bl	8006bb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002022:	2300      	movs	r3, #0
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	4f54300a 	.word	0x4f54300a

08002030 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002030:	b480      	push	{r7}
 8002032:	b085      	sub	sp, #20
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
 8002038:	460b      	mov	r3, r1
 800203a:	70fb      	strb	r3, [r7, #3]
 800203c:	4613      	mov	r3, r2
 800203e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002046:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002048:	78fb      	ldrb	r3, [r7, #3]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d107      	bne.n	800205e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800204e:	883b      	ldrh	r3, [r7, #0]
 8002050:	0419      	lsls	r1, r3, #16
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	430a      	orrs	r2, r1
 800205a:	629a      	str	r2, [r3, #40]	; 0x28
 800205c:	e028      	b.n	80020b0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002064:	0c1b      	lsrs	r3, r3, #16
 8002066:	68ba      	ldr	r2, [r7, #8]
 8002068:	4413      	add	r3, r2
 800206a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800206c:	2300      	movs	r3, #0
 800206e:	73fb      	strb	r3, [r7, #15]
 8002070:	e00d      	b.n	800208e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	7bfb      	ldrb	r3, [r7, #15]
 8002078:	3340      	adds	r3, #64	; 0x40
 800207a:	009b      	lsls	r3, r3, #2
 800207c:	4413      	add	r3, r2
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	0c1b      	lsrs	r3, r3, #16
 8002082:	68ba      	ldr	r2, [r7, #8]
 8002084:	4413      	add	r3, r2
 8002086:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	3301      	adds	r3, #1
 800208c:	73fb      	strb	r3, [r7, #15]
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	78fb      	ldrb	r3, [r7, #3]
 8002092:	3b01      	subs	r3, #1
 8002094:	429a      	cmp	r2, r3
 8002096:	d3ec      	bcc.n	8002072 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002098:	883b      	ldrh	r3, [r7, #0]
 800209a:	0418      	lsls	r0, r3, #16
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6819      	ldr	r1, [r3, #0]
 80020a0:	78fb      	ldrb	r3, [r7, #3]
 80020a2:	3b01      	subs	r3, #1
 80020a4:	68ba      	ldr	r2, [r7, #8]
 80020a6:	4302      	orrs	r2, r0
 80020a8:	3340      	adds	r3, #64	; 0x40
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr

080020be <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80020be:	b480      	push	{r7}
 80020c0:	b083      	sub	sp, #12
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
 80020c6:	460b      	mov	r3, r1
 80020c8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	887a      	ldrh	r2, [r7, #2]
 80020d0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80020d2:	2300      	movs	r3, #0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	370c      	adds	r7, #12
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2201      	movs	r2, #1
 80020f2:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002112:	f043 0303 	orr.w	r3, r3, #3
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr

08002128 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002128:	b480      	push	{r7}
 800212a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <HAL_PWREx_GetVoltageRange+0x18>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002134:	4618      	mov	r0, r3
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	40007000 	.word	0x40007000

08002144 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002144:	b480      	push	{r7}
 8002146:	b085      	sub	sp, #20
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002152:	d130      	bne.n	80021b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002154:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800215c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002160:	d038      	beq.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800216a:	4a1e      	ldr	r2, [pc, #120]	; (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002170:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002172:	4b1d      	ldr	r3, [pc, #116]	; (80021e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2232      	movs	r2, #50	; 0x32
 8002178:	fb02 f303 	mul.w	r3, r2, r3
 800217c:	4a1b      	ldr	r2, [pc, #108]	; (80021ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0c9b      	lsrs	r3, r3, #18
 8002184:	3301      	adds	r3, #1
 8002186:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002188:	e002      	b.n	8002190 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	3b01      	subs	r3, #1
 800218e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002190:	4b14      	ldr	r3, [pc, #80]	; (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002192:	695b      	ldr	r3, [r3, #20]
 8002194:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002198:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219c:	d102      	bne.n	80021a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d1f2      	bne.n	800218a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80021a4:	4b0f      	ldr	r3, [pc, #60]	; (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021b0:	d110      	bne.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e00f      	b.n	80021d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80021b6:	4b0b      	ldr	r3, [pc, #44]	; (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80021be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021c2:	d007      	beq.n	80021d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021c4:	4b07      	ldr	r3, [pc, #28]	; (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021cc:	4a05      	ldr	r2, [pc, #20]	; (80021e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40007000 	.word	0x40007000
 80021e8:	20000000 	.word	0x20000000
 80021ec:	431bde83 	.word	0x431bde83

080021f0 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80021f4:	4b05      	ldr	r3, [pc, #20]	; (800220c <HAL_PWREx_EnableVddUSB+0x1c>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	4a04      	ldr	r2, [pc, #16]	; (800220c <HAL_PWREx_EnableVddUSB+0x1c>)
 80021fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021fe:	6053      	str	r3, [r2, #4]
}
 8002200:	bf00      	nop
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40007000 	.word	0x40007000

08002210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b088      	sub	sp, #32
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d102      	bne.n	8002224 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	f000 bc16 	b.w	8002a50 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002224:	4ba0      	ldr	r3, [pc, #640]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800222e:	4b9e      	ldr	r3, [pc, #632]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	f003 0303 	and.w	r3, r3, #3
 8002236:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0310 	and.w	r3, r3, #16
 8002240:	2b00      	cmp	r3, #0
 8002242:	f000 80e4 	beq.w	800240e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <HAL_RCC_OscConfig+0x4c>
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	2b0c      	cmp	r3, #12
 8002250:	f040 808b 	bne.w	800236a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b01      	cmp	r3, #1
 8002258:	f040 8087 	bne.w	800236a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800225c:	4b92      	ldr	r3, [pc, #584]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d005      	beq.n	8002274 <HAL_RCC_OscConfig+0x64>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e3ed      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1a      	ldr	r2, [r3, #32]
 8002278:	4b8b      	ldr	r3, [pc, #556]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	2b00      	cmp	r3, #0
 8002282:	d004      	beq.n	800228e <HAL_RCC_OscConfig+0x7e>
 8002284:	4b88      	ldr	r3, [pc, #544]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800228c:	e005      	b.n	800229a <HAL_RCC_OscConfig+0x8a>
 800228e:	4b86      	ldr	r3, [pc, #536]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002290:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002294:	091b      	lsrs	r3, r3, #4
 8002296:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800229a:	4293      	cmp	r3, r2
 800229c:	d223      	bcs.n	80022e6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a1b      	ldr	r3, [r3, #32]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fd54 	bl	8002d50 <RCC_SetFlashLatencyFromMSIRange>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e3ce      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022b2:	4b7d      	ldr	r3, [pc, #500]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	4a7c      	ldr	r2, [pc, #496]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022b8:	f043 0308 	orr.w	r3, r3, #8
 80022bc:	6013      	str	r3, [r2, #0]
 80022be:	4b7a      	ldr	r3, [pc, #488]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6a1b      	ldr	r3, [r3, #32]
 80022ca:	4977      	ldr	r1, [pc, #476]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022cc:	4313      	orrs	r3, r2
 80022ce:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022d0:	4b75      	ldr	r3, [pc, #468]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	021b      	lsls	r3, r3, #8
 80022de:	4972      	ldr	r1, [pc, #456]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	604b      	str	r3, [r1, #4]
 80022e4:	e025      	b.n	8002332 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022e6:	4b70      	ldr	r3, [pc, #448]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a6f      	ldr	r2, [pc, #444]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022ec:	f043 0308 	orr.w	r3, r3, #8
 80022f0:	6013      	str	r3, [r2, #0]
 80022f2:	4b6d      	ldr	r3, [pc, #436]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	496a      	ldr	r1, [pc, #424]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002300:	4313      	orrs	r3, r2
 8002302:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002304:	4b68      	ldr	r3, [pc, #416]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	69db      	ldr	r3, [r3, #28]
 8002310:	021b      	lsls	r3, r3, #8
 8002312:	4965      	ldr	r1, [pc, #404]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002314:	4313      	orrs	r3, r2
 8002316:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002318:	69bb      	ldr	r3, [r7, #24]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d109      	bne.n	8002332 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a1b      	ldr	r3, [r3, #32]
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fd14 	bl	8002d50 <RCC_SetFlashLatencyFromMSIRange>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e38e      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002332:	f000 fc75 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002336:	4602      	mov	r2, r0
 8002338:	4b5b      	ldr	r3, [pc, #364]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	091b      	lsrs	r3, r3, #4
 800233e:	f003 030f 	and.w	r3, r3, #15
 8002342:	495a      	ldr	r1, [pc, #360]	; (80024ac <HAL_RCC_OscConfig+0x29c>)
 8002344:	5ccb      	ldrb	r3, [r1, r3]
 8002346:	f003 031f 	and.w	r3, r3, #31
 800234a:	fa22 f303 	lsr.w	r3, r2, r3
 800234e:	4a58      	ldr	r2, [pc, #352]	; (80024b0 <HAL_RCC_OscConfig+0x2a0>)
 8002350:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002352:	4b58      	ldr	r3, [pc, #352]	; (80024b4 <HAL_RCC_OscConfig+0x2a4>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4618      	mov	r0, r3
 8002358:	f7fe fae4 	bl	8000924 <HAL_InitTick>
 800235c:	4603      	mov	r3, r0
 800235e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002360:	7bfb      	ldrb	r3, [r7, #15]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d052      	beq.n	800240c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002366:	7bfb      	ldrb	r3, [r7, #15]
 8002368:	e372      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d032      	beq.n	80023d8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002372:	4b4d      	ldr	r3, [pc, #308]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a4c      	ldr	r2, [pc, #304]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800237e:	f7fe fb21 	bl	80009c4 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002386:	f7fe fb1d 	bl	80009c4 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e35b      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002398:	4b43      	ldr	r3, [pc, #268]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0302 	and.w	r3, r3, #2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80023a4:	4b40      	ldr	r3, [pc, #256]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a3f      	ldr	r2, [pc, #252]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023aa:	f043 0308 	orr.w	r3, r3, #8
 80023ae:	6013      	str	r3, [r2, #0]
 80023b0:	4b3d      	ldr	r3, [pc, #244]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a1b      	ldr	r3, [r3, #32]
 80023bc:	493a      	ldr	r1, [pc, #232]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80023c2:	4b39      	ldr	r3, [pc, #228]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	69db      	ldr	r3, [r3, #28]
 80023ce:	021b      	lsls	r3, r3, #8
 80023d0:	4935      	ldr	r1, [pc, #212]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	604b      	str	r3, [r1, #4]
 80023d6:	e01a      	b.n	800240e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80023d8:	4b33      	ldr	r3, [pc, #204]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4a32      	ldr	r2, [pc, #200]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 80023de:	f023 0301 	bic.w	r3, r3, #1
 80023e2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80023e4:	f7fe faee 	bl	80009c4 <HAL_GetTick>
 80023e8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023ea:	e008      	b.n	80023fe <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023ec:	f7fe faea 	bl	80009c4 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	2b02      	cmp	r3, #2
 80023f8:	d901      	bls.n	80023fe <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80023fa:	2303      	movs	r3, #3
 80023fc:	e328      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023fe:	4b2a      	ldr	r3, [pc, #168]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0302 	and.w	r3, r3, #2
 8002406:	2b00      	cmp	r3, #0
 8002408:	d1f0      	bne.n	80023ec <HAL_RCC_OscConfig+0x1dc>
 800240a:	e000      	b.n	800240e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800240c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d073      	beq.n	8002502 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	2b08      	cmp	r3, #8
 800241e:	d005      	beq.n	800242c <HAL_RCC_OscConfig+0x21c>
 8002420:	69bb      	ldr	r3, [r7, #24]
 8002422:	2b0c      	cmp	r3, #12
 8002424:	d10e      	bne.n	8002444 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	2b03      	cmp	r3, #3
 800242a:	d10b      	bne.n	8002444 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800242c:	4b1e      	ldr	r3, [pc, #120]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d063      	beq.n	8002500 <HAL_RCC_OscConfig+0x2f0>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	2b00      	cmp	r3, #0
 800243e:	d15f      	bne.n	8002500 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e305      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800244c:	d106      	bne.n	800245c <HAL_RCC_OscConfig+0x24c>
 800244e:	4b16      	ldr	r3, [pc, #88]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4a15      	ldr	r2, [pc, #84]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002454:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002458:	6013      	str	r3, [r2, #0]
 800245a:	e01d      	b.n	8002498 <HAL_RCC_OscConfig+0x288>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002464:	d10c      	bne.n	8002480 <HAL_RCC_OscConfig+0x270>
 8002466:	4b10      	ldr	r3, [pc, #64]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a0f      	ldr	r2, [pc, #60]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800246c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	4b0d      	ldr	r3, [pc, #52]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800247c:	6013      	str	r3, [r2, #0]
 800247e:	e00b      	b.n	8002498 <HAL_RCC_OscConfig+0x288>
 8002480:	4b09      	ldr	r3, [pc, #36]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a08      	ldr	r2, [pc, #32]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002486:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800248a:	6013      	str	r3, [r2, #0]
 800248c:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a05      	ldr	r2, [pc, #20]	; (80024a8 <HAL_RCC_OscConfig+0x298>)
 8002492:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002496:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d01b      	beq.n	80024d8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a0:	f7fe fa90 	bl	80009c4 <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024a6:	e010      	b.n	80024ca <HAL_RCC_OscConfig+0x2ba>
 80024a8:	40021000 	.word	0x40021000
 80024ac:	080074e4 	.word	0x080074e4
 80024b0:	20000000 	.word	0x20000000
 80024b4:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7fe fa84 	bl	80009c4 <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	; 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e2c2      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80024ca:	4baf      	ldr	r3, [pc, #700]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0x2a8>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024d8:	f7fe fa74 	bl	80009c4 <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7fe fa70 	bl	80009c4 <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	; 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e2ae      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024f2:	4ba5      	ldr	r3, [pc, #660]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0x2d0>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d060      	beq.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b04      	cmp	r3, #4
 8002512:	d005      	beq.n	8002520 <HAL_RCC_OscConfig+0x310>
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b0c      	cmp	r3, #12
 8002518:	d119      	bne.n	800254e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d116      	bne.n	800254e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002520:	4b99      	ldr	r3, [pc, #612]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_OscConfig+0x328>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68db      	ldr	r3, [r3, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002534:	2301      	movs	r3, #1
 8002536:	e28b      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002538:	4b93      	ldr	r3, [pc, #588]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	691b      	ldr	r3, [r3, #16]
 8002544:	061b      	lsls	r3, r3, #24
 8002546:	4990      	ldr	r1, [pc, #576]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800254c:	e040      	b.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d023      	beq.n	800259e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002556:	4b8c      	ldr	r3, [pc, #560]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4a8b      	ldr	r2, [pc, #556]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800255c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002560:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002562:	f7fe fa2f 	bl	80009c4 <HAL_GetTick>
 8002566:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002568:	e008      	b.n	800257c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256a:	f7fe fa2b 	bl	80009c4 <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	1ad3      	subs	r3, r2, r3
 8002574:	2b02      	cmp	r3, #2
 8002576:	d901      	bls.n	800257c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002578:	2303      	movs	r3, #3
 800257a:	e269      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800257c:	4b82      	ldr	r3, [pc, #520]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002584:	2b00      	cmp	r3, #0
 8002586:	d0f0      	beq.n	800256a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002588:	4b7f      	ldr	r3, [pc, #508]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	061b      	lsls	r3, r3, #24
 8002596:	497c      	ldr	r1, [pc, #496]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002598:	4313      	orrs	r3, r2
 800259a:	604b      	str	r3, [r1, #4]
 800259c:	e018      	b.n	80025d0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800259e:	4b7a      	ldr	r3, [pc, #488]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4a79      	ldr	r2, [pc, #484]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80025a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80025a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025aa:	f7fe fa0b 	bl	80009c4 <HAL_GetTick>
 80025ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025b0:	e008      	b.n	80025c4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b2:	f7fe fa07 	bl	80009c4 <HAL_GetTick>
 80025b6:	4602      	mov	r2, r0
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	1ad3      	subs	r3, r2, r3
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d901      	bls.n	80025c4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80025c0:	2303      	movs	r3, #3
 80025c2:	e245      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80025c4:	4b70      	ldr	r3, [pc, #448]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d1f0      	bne.n	80025b2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0308 	and.w	r3, r3, #8
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d03c      	beq.n	8002656 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	695b      	ldr	r3, [r3, #20]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d01c      	beq.n	800261e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025e4:	4b68      	ldr	r3, [pc, #416]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80025e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025ea:	4a67      	ldr	r2, [pc, #412]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80025ec:	f043 0301 	orr.w	r3, r3, #1
 80025f0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7fe f9e6 	bl	80009c4 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025fc:	f7fe f9e2 	bl	80009c4 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e220      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800260e:	4b5e      	ldr	r3, [pc, #376]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002610:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d0ef      	beq.n	80025fc <HAL_RCC_OscConfig+0x3ec>
 800261c:	e01b      	b.n	8002656 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261e:	4b5a      	ldr	r3, [pc, #360]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002624:	4a58      	ldr	r2, [pc, #352]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002626:	f023 0301 	bic.w	r3, r3, #1
 800262a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800262e:	f7fe f9c9 	bl	80009c4 <HAL_GetTick>
 8002632:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002634:	e008      	b.n	8002648 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002636:	f7fe f9c5 	bl	80009c4 <HAL_GetTick>
 800263a:	4602      	mov	r2, r0
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	1ad3      	subs	r3, r2, r3
 8002640:	2b02      	cmp	r3, #2
 8002642:	d901      	bls.n	8002648 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002644:	2303      	movs	r3, #3
 8002646:	e203      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002648:	4b4f      	ldr	r3, [pc, #316]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800264a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800264e:	f003 0302 	and.w	r3, r3, #2
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1ef      	bne.n	8002636 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	2b00      	cmp	r3, #0
 8002660:	f000 80a6 	beq.w	80027b0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002664:	2300      	movs	r3, #0
 8002666:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002668:	4b47      	ldr	r3, [pc, #284]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800266a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800266c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10d      	bne.n	8002690 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002674:	4b44      	ldr	r3, [pc, #272]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	4a43      	ldr	r2, [pc, #268]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800267a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267e:	6593      	str	r3, [r2, #88]	; 0x58
 8002680:	4b41      	ldr	r3, [pc, #260]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268c:	2301      	movs	r3, #1
 800268e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002690:	4b3e      	ldr	r3, [pc, #248]	; (800278c <HAL_RCC_OscConfig+0x57c>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002698:	2b00      	cmp	r3, #0
 800269a:	d118      	bne.n	80026ce <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800269c:	4b3b      	ldr	r3, [pc, #236]	; (800278c <HAL_RCC_OscConfig+0x57c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a3a      	ldr	r2, [pc, #232]	; (800278c <HAL_RCC_OscConfig+0x57c>)
 80026a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a8:	f7fe f98c 	bl	80009c4 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b0:	f7fe f988 	bl	80009c4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e1c6      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80026c2:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_RCC_OscConfig+0x57c>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d0f0      	beq.n	80026b0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d108      	bne.n	80026e8 <HAL_RCC_OscConfig+0x4d8>
 80026d6:	4b2c      	ldr	r3, [pc, #176]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80026d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026dc:	4a2a      	ldr	r2, [pc, #168]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026e6:	e024      	b.n	8002732 <HAL_RCC_OscConfig+0x522>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	689b      	ldr	r3, [r3, #8]
 80026ec:	2b05      	cmp	r3, #5
 80026ee:	d110      	bne.n	8002712 <HAL_RCC_OscConfig+0x502>
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80026f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026f6:	4a24      	ldr	r2, [pc, #144]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 80026f8:	f043 0304 	orr.w	r3, r3, #4
 80026fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002700:	4b21      	ldr	r3, [pc, #132]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	4a20      	ldr	r2, [pc, #128]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002708:	f043 0301 	orr.w	r3, r3, #1
 800270c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002710:	e00f      	b.n	8002732 <HAL_RCC_OscConfig+0x522>
 8002712:	4b1d      	ldr	r3, [pc, #116]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002718:	4a1b      	ldr	r2, [pc, #108]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800271a:	f023 0301 	bic.w	r3, r3, #1
 800271e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002722:	4b19      	ldr	r3, [pc, #100]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 8002724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002728:	4a17      	ldr	r2, [pc, #92]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800272a:	f023 0304 	bic.w	r3, r3, #4
 800272e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d016      	beq.n	8002768 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273a:	f7fe f943 	bl	80009c4 <HAL_GetTick>
 800273e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002740:	e00a      	b.n	8002758 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002742:	f7fe f93f 	bl	80009c4 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002750:	4293      	cmp	r3, r2
 8002752:	d901      	bls.n	8002758 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002754:	2303      	movs	r3, #3
 8002756:	e17b      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002758:	4b0b      	ldr	r3, [pc, #44]	; (8002788 <HAL_RCC_OscConfig+0x578>)
 800275a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0ed      	beq.n	8002742 <HAL_RCC_OscConfig+0x532>
 8002766:	e01a      	b.n	800279e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002768:	f7fe f92c 	bl	80009c4 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800276e:	e00f      	b.n	8002790 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002770:	f7fe f928 	bl	80009c4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	f241 3288 	movw	r2, #5000	; 0x1388
 800277e:	4293      	cmp	r3, r2
 8002780:	d906      	bls.n	8002790 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e164      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002790:	4ba8      	ldr	r3, [pc, #672]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	f003 0302 	and.w	r3, r3, #2
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1e8      	bne.n	8002770 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800279e:	7ffb      	ldrb	r3, [r7, #31]
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a4:	4ba3      	ldr	r3, [pc, #652]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	4aa2      	ldr	r2, [pc, #648]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80027aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ae:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d03c      	beq.n	8002836 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d01c      	beq.n	80027fe <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80027c4:	4b9b      	ldr	r3, [pc, #620]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80027c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ca:	4a9a      	ldr	r2, [pc, #616]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d4:	f7fe f8f6 	bl	80009c4 <HAL_GetTick>
 80027d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027da:	e008      	b.n	80027ee <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027dc:	f7fe f8f2 	bl	80009c4 <HAL_GetTick>
 80027e0:	4602      	mov	r2, r0
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1ad3      	subs	r3, r2, r3
 80027e6:	2b02      	cmp	r3, #2
 80027e8:	d901      	bls.n	80027ee <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e130      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027ee:	4b91      	ldr	r3, [pc, #580]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80027f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d0ef      	beq.n	80027dc <HAL_RCC_OscConfig+0x5cc>
 80027fc:	e01b      	b.n	8002836 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027fe:	4b8d      	ldr	r3, [pc, #564]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002800:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002804:	4a8b      	ldr	r2, [pc, #556]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002806:	f023 0301 	bic.w	r3, r3, #1
 800280a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800280e:	f7fe f8d9 	bl	80009c4 <HAL_GetTick>
 8002812:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002814:	e008      	b.n	8002828 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002816:	f7fe f8d5 	bl	80009c4 <HAL_GetTick>
 800281a:	4602      	mov	r2, r0
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e113      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002828:	4b82      	ldr	r3, [pc, #520]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 800282a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1ef      	bne.n	8002816 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800283a:	2b00      	cmp	r3, #0
 800283c:	f000 8107 	beq.w	8002a4e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002844:	2b02      	cmp	r3, #2
 8002846:	f040 80cb 	bne.w	80029e0 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800284a:	4b7a      	ldr	r3, [pc, #488]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 800284c:	68db      	ldr	r3, [r3, #12]
 800284e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002850:	697b      	ldr	r3, [r7, #20]
 8002852:	f003 0203 	and.w	r2, r3, #3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285a:	429a      	cmp	r2, r3
 800285c:	d12c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002868:	3b01      	subs	r3, #1
 800286a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d123      	bne.n	80028b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d11b      	bne.n	80028b8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800288a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d113      	bne.n	80028b8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002890:	697b      	ldr	r3, [r7, #20]
 8002892:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800289a:	085b      	lsrs	r3, r3, #1
 800289c:	3b01      	subs	r3, #1
 800289e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d109      	bne.n	80028b8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	085b      	lsrs	r3, r3, #1
 80028b0:	3b01      	subs	r3, #1
 80028b2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d06d      	beq.n	8002994 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028b8:	69bb      	ldr	r3, [r7, #24]
 80028ba:	2b0c      	cmp	r3, #12
 80028bc:	d068      	beq.n	8002990 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80028be:	4b5d      	ldr	r3, [pc, #372]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d105      	bne.n	80028d6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80028ca:	4b5a      	ldr	r3, [pc, #360]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d001      	beq.n	80028da <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0ba      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80028da:	4b56      	ldr	r3, [pc, #344]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a55      	ldr	r2, [pc, #340]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80028e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028e6:	f7fe f86d 	bl	80009c4 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028ee:	f7fe f869 	bl	80009c4 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e0a7      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002900:	4b4c      	ldr	r3, [pc, #304]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d1f0      	bne.n	80028ee <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800290c:	4b49      	ldr	r3, [pc, #292]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 800290e:	68da      	ldr	r2, [r3, #12]
 8002910:	4b49      	ldr	r3, [pc, #292]	; (8002a38 <HAL_RCC_OscConfig+0x828>)
 8002912:	4013      	ands	r3, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002918:	687a      	ldr	r2, [r7, #4]
 800291a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800291c:	3a01      	subs	r2, #1
 800291e:	0112      	lsls	r2, r2, #4
 8002920:	4311      	orrs	r1, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002926:	0212      	lsls	r2, r2, #8
 8002928:	4311      	orrs	r1, r2
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800292e:	0852      	lsrs	r2, r2, #1
 8002930:	3a01      	subs	r2, #1
 8002932:	0552      	lsls	r2, r2, #21
 8002934:	4311      	orrs	r1, r2
 8002936:	687a      	ldr	r2, [r7, #4]
 8002938:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800293a:	0852      	lsrs	r2, r2, #1
 800293c:	3a01      	subs	r2, #1
 800293e:	0652      	lsls	r2, r2, #25
 8002940:	4311      	orrs	r1, r2
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002946:	06d2      	lsls	r2, r2, #27
 8002948:	430a      	orrs	r2, r1
 800294a:	493a      	ldr	r1, [pc, #232]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 800294c:	4313      	orrs	r3, r2
 800294e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002950:	4b38      	ldr	r3, [pc, #224]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a37      	ldr	r2, [pc, #220]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800295c:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a34      	ldr	r2, [pc, #208]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002966:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002968:	f7fe f82c 	bl	80009c4 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe f828 	bl	80009c4 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e066      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	4b2c      	ldr	r3, [pc, #176]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800298e:	e05e      	b.n	8002a4e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002990:	2301      	movs	r3, #1
 8002992:	e05d      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002994:	4b27      	ldr	r3, [pc, #156]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299c:	2b00      	cmp	r3, #0
 800299e:	d156      	bne.n	8002a4e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80029a0:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a23      	ldr	r2, [pc, #140]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029aa:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80029ac:	4b21      	ldr	r3, [pc, #132]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	4a20      	ldr	r2, [pc, #128]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80029b8:	f7fe f804 	bl	80009c4 <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029c0:	f7fe f800 	bl	80009c4 <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e03e      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80029d2:	4b18      	ldr	r3, [pc, #96]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d0f0      	beq.n	80029c0 <HAL_RCC_OscConfig+0x7b0>
 80029de:	e036      	b.n	8002a4e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	2b0c      	cmp	r3, #12
 80029e4:	d031      	beq.n	8002a4a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029e6:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a12      	ldr	r2, [pc, #72]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029f0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80029f2:	4b10      	ldr	r3, [pc, #64]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d105      	bne.n	8002a0a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	4a0c      	ldr	r2, [pc, #48]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002a04:	f023 0303 	bic.w	r3, r3, #3
 8002a08:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002a0a:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002a0c:	68db      	ldr	r3, [r3, #12]
 8002a0e:	4a09      	ldr	r2, [pc, #36]	; (8002a34 <HAL_RCC_OscConfig+0x824>)
 8002a10:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a18:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7fd ffd3 	bl	80009c4 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a20:	e00c      	b.n	8002a3c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a22:	f7fd ffcf 	bl	80009c4 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d905      	bls.n	8002a3c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e00d      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
 8002a34:	40021000 	.word	0x40021000
 8002a38:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a3c:	4b06      	ldr	r3, [pc, #24]	; (8002a58 <HAL_RCC_OscConfig+0x848>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1ec      	bne.n	8002a22 <HAL_RCC_OscConfig+0x812>
 8002a48:	e001      	b.n	8002a4e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002a4a:	2301      	movs	r3, #1
 8002a4c:	e000      	b.n	8002a50 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3720      	adds	r7, #32
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	40021000 	.word	0x40021000

08002a5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d101      	bne.n	8002a70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0c8      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a70:	4b66      	ldr	r3, [pc, #408]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0307 	and.w	r3, r3, #7
 8002a78:	683a      	ldr	r2, [r7, #0]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d910      	bls.n	8002aa0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a7e:	4b63      	ldr	r3, [pc, #396]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f023 0207 	bic.w	r2, r3, #7
 8002a86:	4961      	ldr	r1, [pc, #388]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a8e:	4b5f      	ldr	r3, [pc, #380]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	683a      	ldr	r2, [r7, #0]
 8002a98:	429a      	cmp	r2, r3
 8002a9a:	d001      	beq.n	8002aa0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	e0b0      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 0301 	and.w	r3, r3, #1
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d04c      	beq.n	8002b46 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	685b      	ldr	r3, [r3, #4]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d107      	bne.n	8002ac4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ab4:	4b56      	ldr	r3, [pc, #344]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d121      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e09e      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d107      	bne.n	8002adc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002acc:	4b50      	ldr	r3, [pc, #320]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d115      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	e092      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d107      	bne.n	8002af4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002ae4:	4b4a      	ldr	r3, [pc, #296]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d109      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e086      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002af4:	4b46      	ldr	r3, [pc, #280]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d101      	bne.n	8002b04 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e07e      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002b04:	4b42      	ldr	r3, [pc, #264]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002b06:	689b      	ldr	r3, [r3, #8]
 8002b08:	f023 0203 	bic.w	r2, r3, #3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	493f      	ldr	r1, [pc, #252]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002b12:	4313      	orrs	r3, r2
 8002b14:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b16:	f7fd ff55 	bl	80009c4 <HAL_GetTick>
 8002b1a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b1c:	e00a      	b.n	8002b34 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b1e:	f7fd ff51 	bl	80009c4 <HAL_GetTick>
 8002b22:	4602      	mov	r2, r0
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	1ad3      	subs	r3, r2, r3
 8002b28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e066      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b34:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	f003 020c 	and.w	r2, r3, #12
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d1eb      	bne.n	8002b1e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b52:	4b2f      	ldr	r3, [pc, #188]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	689b      	ldr	r3, [r3, #8]
 8002b5e:	492c      	ldr	r1, [pc, #176]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b64:	4b29      	ldr	r3, [pc, #164]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	683a      	ldr	r2, [r7, #0]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d210      	bcs.n	8002b94 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b72:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f023 0207 	bic.w	r2, r3, #7
 8002b7a:	4924      	ldr	r1, [pc, #144]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	4313      	orrs	r3, r2
 8002b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b82:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <HAL_RCC_ClockConfig+0x1b0>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	683a      	ldr	r2, [r7, #0]
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d001      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002b90:	2301      	movs	r3, #1
 8002b92:	e036      	b.n	8002c02 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0304 	and.w	r3, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d008      	beq.n	8002bb2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ba0:	4b1b      	ldr	r3, [pc, #108]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	4918      	ldr	r1, [pc, #96]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0308 	and.w	r3, r3, #8
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d009      	beq.n	8002bd2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bbe:	4b14      	ldr	r3, [pc, #80]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4910      	ldr	r1, [pc, #64]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002bd2:	f000 f825 	bl	8002c20 <HAL_RCC_GetSysClockFreq>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	4b0d      	ldr	r3, [pc, #52]	; (8002c10 <HAL_RCC_ClockConfig+0x1b4>)
 8002bda:	689b      	ldr	r3, [r3, #8]
 8002bdc:	091b      	lsrs	r3, r3, #4
 8002bde:	f003 030f 	and.w	r3, r3, #15
 8002be2:	490c      	ldr	r1, [pc, #48]	; (8002c14 <HAL_RCC_ClockConfig+0x1b8>)
 8002be4:	5ccb      	ldrb	r3, [r1, r3]
 8002be6:	f003 031f 	and.w	r3, r3, #31
 8002bea:	fa22 f303 	lsr.w	r3, r2, r3
 8002bee:	4a0a      	ldr	r2, [pc, #40]	; (8002c18 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bf2:	4b0a      	ldr	r3, [pc, #40]	; (8002c1c <HAL_RCC_ClockConfig+0x1c0>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fd fe94 	bl	8000924 <HAL_InitTick>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	72fb      	strb	r3, [r7, #11]

  return status;
 8002c00:	7afb      	ldrb	r3, [r7, #11]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40022000 	.word	0x40022000
 8002c10:	40021000 	.word	0x40021000
 8002c14:	080074e4 	.word	0x080074e4
 8002c18:	20000000 	.word	0x20000000
 8002c1c:	20000004 	.word	0x20000004

08002c20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b089      	sub	sp, #36	; 0x24
 8002c24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002c2e:	4b3e      	ldr	r3, [pc, #248]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c38:	4b3b      	ldr	r3, [pc, #236]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0303 	and.w	r3, r3, #3
 8002c40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d005      	beq.n	8002c54 <HAL_RCC_GetSysClockFreq+0x34>
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b0c      	cmp	r3, #12
 8002c4c:	d121      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d11e      	bne.n	8002c92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c54:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 0308 	and.w	r3, r3, #8
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d107      	bne.n	8002c70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c60:	4b31      	ldr	r3, [pc, #196]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 030f 	and.w	r3, r3, #15
 8002c6c:	61fb      	str	r3, [r7, #28]
 8002c6e:	e005      	b.n	8002c7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c70:	4b2d      	ldr	r3, [pc, #180]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	091b      	lsrs	r3, r3, #4
 8002c76:	f003 030f 	and.w	r3, r3, #15
 8002c7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c7c:	4a2b      	ldr	r2, [pc, #172]	; (8002d2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d10d      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c90:	e00a      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c92:	693b      	ldr	r3, [r7, #16]
 8002c94:	2b04      	cmp	r3, #4
 8002c96:	d102      	bne.n	8002c9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c98:	4b25      	ldr	r3, [pc, #148]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c9a:	61bb      	str	r3, [r7, #24]
 8002c9c:	e004      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	2b08      	cmp	r3, #8
 8002ca2:	d101      	bne.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ca4:	4b23      	ldr	r3, [pc, #140]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002ca6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002ca8:	693b      	ldr	r3, [r7, #16]
 8002caa:	2b0c      	cmp	r3, #12
 8002cac:	d134      	bne.n	8002d18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	f003 0303 	and.w	r3, r3, #3
 8002cb6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d003      	beq.n	8002cc6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	2b03      	cmp	r3, #3
 8002cc2:	d003      	beq.n	8002ccc <HAL_RCC_GetSysClockFreq+0xac>
 8002cc4:	e005      	b.n	8002cd2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x110>)
 8002cc8:	617b      	str	r3, [r7, #20]
      break;
 8002cca:	e005      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ccc:	4b19      	ldr	r3, [pc, #100]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x114>)
 8002cce:	617b      	str	r3, [r7, #20]
      break;
 8002cd0:	e002      	b.n	8002cd8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	617b      	str	r3, [r7, #20]
      break;
 8002cd6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002cd8:	4b13      	ldr	r3, [pc, #76]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 0307 	and.w	r3, r3, #7
 8002ce2:	3301      	adds	r3, #1
 8002ce4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002ce6:	4b10      	ldr	r3, [pc, #64]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	0a1b      	lsrs	r3, r3, #8
 8002cec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cf0:	697a      	ldr	r2, [r7, #20]
 8002cf2:	fb02 f203 	mul.w	r2, r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cfc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cfe:	4b0a      	ldr	r3, [pc, #40]	; (8002d28 <HAL_RCC_GetSysClockFreq+0x108>)
 8002d00:	68db      	ldr	r3, [r3, #12]
 8002d02:	0e5b      	lsrs	r3, r3, #25
 8002d04:	f003 0303 	and.w	r3, r3, #3
 8002d08:	3301      	adds	r3, #1
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002d0e:	697a      	ldr	r2, [r7, #20]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002d18:	69bb      	ldr	r3, [r7, #24]
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3724      	adds	r7, #36	; 0x24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40021000 	.word	0x40021000
 8002d2c:	080074f4 	.word	0x080074f4
 8002d30:	00f42400 	.word	0x00f42400
 8002d34:	007a1200 	.word	0x007a1200

08002d38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d3c:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000000 	.word	0x20000000

08002d50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b086      	sub	sp, #24
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d58:	2300      	movs	r3, #0
 8002d5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d5c:	4b2a      	ldr	r3, [pc, #168]	; (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d003      	beq.n	8002d70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d68:	f7ff f9de 	bl	8002128 <HAL_PWREx_GetVoltageRange>
 8002d6c:	6178      	str	r0, [r7, #20]
 8002d6e:	e014      	b.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d70:	4b25      	ldr	r3, [pc, #148]	; (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	4a24      	ldr	r2, [pc, #144]	; (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8002d7c:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d84:	60fb      	str	r3, [r7, #12]
 8002d86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d88:	f7ff f9ce 	bl	8002128 <HAL_PWREx_GetVoltageRange>
 8002d8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d8e:	4b1e      	ldr	r3, [pc, #120]	; (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d92:	4a1d      	ldr	r2, [pc, #116]	; (8002e08 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002da0:	d10b      	bne.n	8002dba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2b80      	cmp	r3, #128	; 0x80
 8002da6:	d919      	bls.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2ba0      	cmp	r3, #160	; 0xa0
 8002dac:	d902      	bls.n	8002db4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dae:	2302      	movs	r3, #2
 8002db0:	613b      	str	r3, [r7, #16]
 8002db2:	e013      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002db4:	2301      	movs	r3, #1
 8002db6:	613b      	str	r3, [r7, #16]
 8002db8:	e010      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b80      	cmp	r3, #128	; 0x80
 8002dbe:	d902      	bls.n	8002dc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	613b      	str	r3, [r7, #16]
 8002dc4:	e00a      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2b80      	cmp	r3, #128	; 0x80
 8002dca:	d102      	bne.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dcc:	2302      	movs	r3, #2
 8002dce:	613b      	str	r3, [r7, #16]
 8002dd0:	e004      	b.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2b70      	cmp	r3, #112	; 0x70
 8002dd6:	d101      	bne.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dd8:	2301      	movs	r3, #1
 8002dda:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f023 0207 	bic.w	r2, r3, #7
 8002de4:	4909      	ldr	r1, [pc, #36]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dec:	4b07      	ldr	r3, [pc, #28]	; (8002e0c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0307 	and.w	r3, r3, #7
 8002df4:	693a      	ldr	r2, [r7, #16]
 8002df6:	429a      	cmp	r2, r3
 8002df8:	d001      	beq.n	8002dfe <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e000      	b.n	8002e00 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	40021000 	.word	0x40021000
 8002e0c:	40022000 	.word	0x40022000

08002e10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b086      	sub	sp, #24
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e18:	2300      	movs	r3, #0
 8002e1a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d041      	beq.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e30:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e34:	d02a      	beq.n	8002e8c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002e36:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e3a:	d824      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e3c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e40:	d008      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e42:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e46:	d81e      	bhi.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002e4c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e50:	d010      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002e52:	e018      	b.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002e54:	4b86      	ldr	r3, [pc, #536]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	4a85      	ldr	r2, [pc, #532]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e5e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e60:	e015      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	3304      	adds	r3, #4
 8002e66:	2100      	movs	r1, #0
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f000 fadd 	bl	8003428 <RCCEx_PLLSAI1_Config>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e72:	e00c      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3320      	adds	r3, #32
 8002e78:	2100      	movs	r1, #0
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 fbc6 	bl	800360c <RCCEx_PLLSAI2_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e84:	e003      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e86:	2301      	movs	r3, #1
 8002e88:	74fb      	strb	r3, [r7, #19]
      break;
 8002e8a:	e000      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002e8c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e8e:	7cfb      	ldrb	r3, [r7, #19]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10b      	bne.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e94:	4b76      	ldr	r3, [pc, #472]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e9a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea2:	4973      	ldr	r1, [pc, #460]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eaa:	e001      	b.n	8002eb0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eac:	7cfb      	ldrb	r3, [r7, #19]
 8002eae:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d041      	beq.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002ec4:	d02a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002ec6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002eca:	d824      	bhi.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ecc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ed0:	d008      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002ed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002ed6:	d81e      	bhi.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d00a      	beq.n	8002ef2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002edc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ee0:	d010      	beq.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002ee2:	e018      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ee4:	4b62      	ldr	r3, [pc, #392]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	4a61      	ldr	r2, [pc, #388]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eee:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ef0:	e015      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	3304      	adds	r3, #4
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 fa95 	bl	8003428 <RCCEx_PLLSAI1_Config>
 8002efe:	4603      	mov	r3, r0
 8002f00:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f02:	e00c      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	3320      	adds	r3, #32
 8002f08:	2100      	movs	r1, #0
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fb7e 	bl	800360c <RCCEx_PLLSAI2_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002f14:	e003      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	74fb      	strb	r3, [r7, #19]
      break;
 8002f1a:	e000      	b.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002f1c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002f1e:	7cfb      	ldrb	r3, [r7, #19]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d10b      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f24:	4b52      	ldr	r3, [pc, #328]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f2a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002f32:	494f      	ldr	r1, [pc, #316]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f34:	4313      	orrs	r3, r2
 8002f36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002f3a:	e001      	b.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f3c:	7cfb      	ldrb	r3, [r7, #19]
 8002f3e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	f000 80a0 	beq.w	800308e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002f52:	4b47      	ldr	r3, [pc, #284]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002f62:	2300      	movs	r3, #0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00d      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f68:	4b41      	ldr	r3, [pc, #260]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f6c:	4a40      	ldr	r2, [pc, #256]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f72:	6593      	str	r3, [r2, #88]	; 0x58
 8002f74:	4b3e      	ldr	r3, [pc, #248]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7c:	60bb      	str	r3, [r7, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f80:	2301      	movs	r3, #1
 8002f82:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f84:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a3a      	ldr	r2, [pc, #232]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002f8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f8e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f90:	f7fd fd18 	bl	80009c4 <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f96:	e009      	b.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f98:	f7fd fd14 	bl	80009c4 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b02      	cmp	r3, #2
 8002fa4:	d902      	bls.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	74fb      	strb	r3, [r7, #19]
        break;
 8002faa:	e005      	b.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002fac:	4b31      	ldr	r3, [pc, #196]	; (8003074 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d0ef      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002fb8:	7cfb      	ldrb	r3, [r7, #19]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d15c      	bne.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002fbe:	4b2c      	ldr	r3, [pc, #176]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fc8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01f      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d019      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002fdc:	4b24      	ldr	r3, [pc, #144]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fe8:	4b21      	ldr	r3, [pc, #132]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fee:	4a20      	ldr	r2, [pc, #128]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ff8:	4b1d      	ldr	r3, [pc, #116]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ffe:	4a1c      	ldr	r2, [pc, #112]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003008:	4a19      	ldr	r2, [pc, #100]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800300a:	697b      	ldr	r3, [r7, #20]
 800300c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	f003 0301 	and.w	r3, r3, #1
 8003016:	2b00      	cmp	r3, #0
 8003018:	d016      	beq.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800301a:	f7fd fcd3 	bl	80009c4 <HAL_GetTick>
 800301e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003020:	e00b      	b.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003022:	f7fd fccf 	bl	80009c4 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003030:	4293      	cmp	r3, r2
 8003032:	d902      	bls.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	74fb      	strb	r3, [r7, #19]
            break;
 8003038:	e006      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800303a:	4b0d      	ldr	r3, [pc, #52]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800303c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d0ec      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003048:	7cfb      	ldrb	r3, [r7, #19]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d10c      	bne.n	8003068 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800304e:	4b08      	ldr	r3, [pc, #32]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003054:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800305e:	4904      	ldr	r1, [pc, #16]	; (8003070 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003060:	4313      	orrs	r3, r2
 8003062:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003066:	e009      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003068:	7cfb      	ldrb	r3, [r7, #19]
 800306a:	74bb      	strb	r3, [r7, #18]
 800306c:	e006      	b.n	800307c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800306e:	bf00      	nop
 8003070:	40021000 	.word	0x40021000
 8003074:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003078:	7cfb      	ldrb	r3, [r7, #19]
 800307a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800307c:	7c7b      	ldrb	r3, [r7, #17]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4ba6      	ldr	r3, [pc, #664]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003084:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003086:	4aa5      	ldr	r2, [pc, #660]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0301 	and.w	r3, r3, #1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800309a:	4ba0      	ldr	r3, [pc, #640]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800309c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a0:	f023 0203 	bic.w	r2, r3, #3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030a8:	499c      	ldr	r1, [pc, #624]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030aa:	4313      	orrs	r3, r2
 80030ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 0302 	and.w	r3, r3, #2
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d00a      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030bc:	4b97      	ldr	r3, [pc, #604]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030c2:	f023 020c 	bic.w	r2, r3, #12
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ca:	4994      	ldr	r1, [pc, #592]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 0304 	and.w	r3, r3, #4
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00a      	beq.n	80030f4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030de:	4b8f      	ldr	r3, [pc, #572]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030e4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ec:	498b      	ldr	r1, [pc, #556]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00a      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003100:	4b86      	ldr	r3, [pc, #536]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003106:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800310e:	4983      	ldr	r1, [pc, #524]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003110:	4313      	orrs	r3, r2
 8003112:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0310 	and.w	r3, r3, #16
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00a      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003122:	4b7e      	ldr	r3, [pc, #504]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003128:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003130:	497a      	ldr	r1, [pc, #488]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003132:	4313      	orrs	r3, r2
 8003134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0320 	and.w	r3, r3, #32
 8003140:	2b00      	cmp	r3, #0
 8003142:	d00a      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003144:	4b75      	ldr	r3, [pc, #468]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003152:	4972      	ldr	r1, [pc, #456]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003162:	2b00      	cmp	r3, #0
 8003164:	d00a      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003166:	4b6d      	ldr	r3, [pc, #436]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003174:	4969      	ldr	r1, [pc, #420]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003176:	4313      	orrs	r3, r2
 8003178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003184:	2b00      	cmp	r3, #0
 8003186:	d00a      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003188:	4b64      	ldr	r3, [pc, #400]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800318a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800318e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003196:	4961      	ldr	r1, [pc, #388]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003198:	4313      	orrs	r3, r2
 800319a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80031aa:	4b5c      	ldr	r3, [pc, #368]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031b8:	4958      	ldr	r1, [pc, #352]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00a      	beq.n	80031e2 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80031cc:	4b53      	ldr	r3, [pc, #332]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031da:	4950      	ldr	r1, [pc, #320]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031dc:	4313      	orrs	r3, r2
 80031de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00a      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80031ee:	4b4b      	ldr	r3, [pc, #300]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031fc:	4947      	ldr	r1, [pc, #284]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003210:	4b42      	ldr	r3, [pc, #264]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003212:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003216:	f023 0203 	bic.w	r2, r3, #3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800321e:	493f      	ldr	r1, [pc, #252]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003220:	4313      	orrs	r3, r2
 8003222:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d028      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003232:	4b3a      	ldr	r3, [pc, #232]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003238:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003240:	4936      	ldr	r1, [pc, #216]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003250:	d106      	bne.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003252:	4b32      	ldr	r3, [pc, #200]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	4a31      	ldr	r2, [pc, #196]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003258:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800325c:	60d3      	str	r3, [r2, #12]
 800325e:	e011      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003264:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003268:	d10c      	bne.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	3304      	adds	r3, #4
 800326e:	2101      	movs	r1, #1
 8003270:	4618      	mov	r0, r3
 8003272:	f000 f8d9 	bl	8003428 <RCCEx_PLLSAI1_Config>
 8003276:	4603      	mov	r3, r0
 8003278:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800327a:	7cfb      	ldrb	r3, [r7, #19]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d001      	beq.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 8003280:	7cfb      	ldrb	r3, [r7, #19]
 8003282:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d028      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003290:	4b22      	ldr	r3, [pc, #136]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003296:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329e:	491f      	ldr	r1, [pc, #124]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032aa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032ae:	d106      	bne.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80032b0:	4b1a      	ldr	r3, [pc, #104]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	4a19      	ldr	r2, [pc, #100]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032b6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80032ba:	60d3      	str	r3, [r2, #12]
 80032bc:	e011      	b.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80032c6:	d10c      	bne.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	3304      	adds	r3, #4
 80032cc:	2101      	movs	r1, #1
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 f8aa 	bl	8003428 <RCCEx_PLLSAI1_Config>
 80032d4:	4603      	mov	r3, r0
 80032d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80032de:	7cfb      	ldrb	r3, [r7, #19]
 80032e0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d02a      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80032ee:	4b0b      	ldr	r3, [pc, #44]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032fc:	4907      	ldr	r1, [pc, #28]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003308:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800330c:	d108      	bne.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800330e:	4b03      	ldr	r3, [pc, #12]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003310:	68db      	ldr	r3, [r3, #12]
 8003312:	4a02      	ldr	r2, [pc, #8]	; (800331c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003318:	60d3      	str	r3, [r2, #12]
 800331a:	e013      	b.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800331c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003324:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003328:	d10c      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	3304      	adds	r3, #4
 800332e:	2101      	movs	r1, #1
 8003330:	4618      	mov	r0, r3
 8003332:	f000 f879 	bl	8003428 <RCCEx_PLLSAI1_Config>
 8003336:	4603      	mov	r3, r0
 8003338:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800333a:	7cfb      	ldrb	r3, [r7, #19]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d001      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003340:	7cfb      	ldrb	r3, [r7, #19]
 8003342:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d02f      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003350:	4b2c      	ldr	r3, [pc, #176]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003356:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800335e:	4929      	ldr	r1, [pc, #164]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800336a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800336e:	d10d      	bne.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	3304      	adds	r3, #4
 8003374:	2102      	movs	r1, #2
 8003376:	4618      	mov	r0, r3
 8003378:	f000 f856 	bl	8003428 <RCCEx_PLLSAI1_Config>
 800337c:	4603      	mov	r3, r0
 800337e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003380:	7cfb      	ldrb	r3, [r7, #19]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d014      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003386:	7cfb      	ldrb	r3, [r7, #19]
 8003388:	74bb      	strb	r3, [r7, #18]
 800338a:	e011      	b.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003390:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003394:	d10c      	bne.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	3320      	adds	r3, #32
 800339a:	2102      	movs	r1, #2
 800339c:	4618      	mov	r0, r3
 800339e:	f000 f935 	bl	800360c <RCCEx_PLLSAI2_Config>
 80033a2:	4603      	mov	r3, r0
 80033a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80033a6:	7cfb      	ldrb	r3, [r7, #19]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d001      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80033ac:	7cfb      	ldrb	r3, [r7, #19]
 80033ae:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00b      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80033bc:	4b11      	ldr	r3, [pc, #68]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033cc:	490d      	ldr	r1, [pc, #52]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d00b      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80033e0:	4b08      	ldr	r3, [pc, #32]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80033e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f0:	4904      	ldr	r1, [pc, #16]	; (8003404 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80033f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40021000 	.word	0x40021000

08003408 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003408:	b480      	push	{r7}
 800340a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800340c:	4b05      	ldr	r3, [pc, #20]	; (8003424 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a04      	ldr	r2, [pc, #16]	; (8003424 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003412:	f043 0304 	orr.w	r3, r3, #4
 8003416:	6013      	str	r3, [r2, #0]
}
 8003418:	bf00      	nop
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	40021000 	.word	0x40021000

08003428 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003432:	2300      	movs	r3, #0
 8003434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003436:	4b74      	ldr	r3, [pc, #464]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d018      	beq.n	8003474 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003442:	4b71      	ldr	r3, [pc, #452]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003444:	68db      	ldr	r3, [r3, #12]
 8003446:	f003 0203 	and.w	r2, r3, #3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	429a      	cmp	r2, r3
 8003450:	d10d      	bne.n	800346e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
       ||
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800345a:	4b6b      	ldr	r3, [pc, #428]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	091b      	lsrs	r3, r3, #4
 8003460:	f003 0307 	and.w	r3, r3, #7
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
       ||
 800346a:	429a      	cmp	r2, r3
 800346c:	d047      	beq.n	80034fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	73fb      	strb	r3, [r7, #15]
 8003472:	e044      	b.n	80034fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2b03      	cmp	r3, #3
 800347a:	d018      	beq.n	80034ae <RCCEx_PLLSAI1_Config+0x86>
 800347c:	2b03      	cmp	r3, #3
 800347e:	d825      	bhi.n	80034cc <RCCEx_PLLSAI1_Config+0xa4>
 8003480:	2b01      	cmp	r3, #1
 8003482:	d002      	beq.n	800348a <RCCEx_PLLSAI1_Config+0x62>
 8003484:	2b02      	cmp	r3, #2
 8003486:	d009      	beq.n	800349c <RCCEx_PLLSAI1_Config+0x74>
 8003488:	e020      	b.n	80034cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800348a:	4b5f      	ldr	r3, [pc, #380]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d11d      	bne.n	80034d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800349a:	e01a      	b.n	80034d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800349c:	4b5a      	ldr	r3, [pc, #360]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d116      	bne.n	80034d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80034ac:	e013      	b.n	80034d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80034ae:	4b56      	ldr	r3, [pc, #344]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10f      	bne.n	80034da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80034ba:	4b53      	ldr	r3, [pc, #332]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d109      	bne.n	80034da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80034ca:	e006      	b.n	80034da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	73fb      	strb	r3, [r7, #15]
      break;
 80034d0:	e004      	b.n	80034dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034d2:	bf00      	nop
 80034d4:	e002      	b.n	80034dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034d6:	bf00      	nop
 80034d8:	e000      	b.n	80034dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80034da:	bf00      	nop
    }

    if(status == HAL_OK)
 80034dc:	7bfb      	ldrb	r3, [r7, #15]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d10d      	bne.n	80034fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80034e2:	4b49      	ldr	r3, [pc, #292]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6819      	ldr	r1, [r3, #0]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	430b      	orrs	r3, r1
 80034f8:	4943      	ldr	r1, [pc, #268]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d17c      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003504:	4b40      	ldr	r3, [pc, #256]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a3f      	ldr	r2, [pc, #252]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800350a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800350e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003510:	f7fd fa58 	bl	80009c4 <HAL_GetTick>
 8003514:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003516:	e009      	b.n	800352c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003518:	f7fd fa54 	bl	80009c4 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d902      	bls.n	800352c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	73fb      	strb	r3, [r7, #15]
        break;
 800352a:	e005      	b.n	8003538 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800352c:	4b36      	ldr	r3, [pc, #216]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003534:	2b00      	cmp	r3, #0
 8003536:	d1ef      	bne.n	8003518 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003538:	7bfb      	ldrb	r3, [r7, #15]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d15f      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d110      	bne.n	8003566 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003544:	4b30      	ldr	r3, [pc, #192]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800354c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003550:	687a      	ldr	r2, [r7, #4]
 8003552:	6892      	ldr	r2, [r2, #8]
 8003554:	0211      	lsls	r1, r2, #8
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	68d2      	ldr	r2, [r2, #12]
 800355a:	06d2      	lsls	r2, r2, #27
 800355c:	430a      	orrs	r2, r1
 800355e:	492a      	ldr	r1, [pc, #168]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003560:	4313      	orrs	r3, r2
 8003562:	610b      	str	r3, [r1, #16]
 8003564:	e027      	b.n	80035b6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d112      	bne.n	8003592 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800356c:	4b26      	ldr	r3, [pc, #152]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003574:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	6892      	ldr	r2, [r2, #8]
 800357c:	0211      	lsls	r1, r2, #8
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6912      	ldr	r2, [r2, #16]
 8003582:	0852      	lsrs	r2, r2, #1
 8003584:	3a01      	subs	r2, #1
 8003586:	0552      	lsls	r2, r2, #21
 8003588:	430a      	orrs	r2, r1
 800358a:	491f      	ldr	r1, [pc, #124]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800358c:	4313      	orrs	r3, r2
 800358e:	610b      	str	r3, [r1, #16]
 8003590:	e011      	b.n	80035b6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003592:	4b1d      	ldr	r3, [pc, #116]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800359a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800359e:	687a      	ldr	r2, [r7, #4]
 80035a0:	6892      	ldr	r2, [r2, #8]
 80035a2:	0211      	lsls	r1, r2, #8
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6952      	ldr	r2, [r2, #20]
 80035a8:	0852      	lsrs	r2, r2, #1
 80035aa:	3a01      	subs	r2, #1
 80035ac:	0652      	lsls	r2, r2, #25
 80035ae:	430a      	orrs	r2, r1
 80035b0:	4915      	ldr	r1, [pc, #84]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a13      	ldr	r2, [pc, #76]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80035c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c2:	f7fd f9ff 	bl	80009c4 <HAL_GetTick>
 80035c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035c8:	e009      	b.n	80035de <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80035ca:	f7fd f9fb 	bl	80009c4 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d902      	bls.n	80035de <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	73fb      	strb	r3, [r7, #15]
          break;
 80035dc:	e005      	b.n	80035ea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80035de:	4b0a      	ldr	r3, [pc, #40]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d0ef      	beq.n	80035ca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80035ea:	7bfb      	ldrb	r3, [r7, #15]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d106      	bne.n	80035fe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80035f0:	4b05      	ldr	r3, [pc, #20]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	699b      	ldr	r3, [r3, #24]
 80035f8:	4903      	ldr	r1, [pc, #12]	; (8003608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80035fa:	4313      	orrs	r3, r2
 80035fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80035fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003600:	4618      	mov	r0, r3
 8003602:	3710      	adds	r7, #16
 8003604:	46bd      	mov	sp, r7
 8003606:	bd80      	pop	{r7, pc}
 8003608:	40021000 	.word	0x40021000

0800360c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800361a:	4b69      	ldr	r3, [pc, #420]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d018      	beq.n	8003658 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003626:	4b66      	ldr	r3, [pc, #408]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003628:	68db      	ldr	r3, [r3, #12]
 800362a:	f003 0203 	and.w	r2, r3, #3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	429a      	cmp	r2, r3
 8003634:	d10d      	bne.n	8003652 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
       ||
 800363a:	2b00      	cmp	r3, #0
 800363c:	d009      	beq.n	8003652 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800363e:	4b60      	ldr	r3, [pc, #384]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	091b      	lsrs	r3, r3, #4
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	685b      	ldr	r3, [r3, #4]
       ||
 800364e:	429a      	cmp	r2, r3
 8003650:	d047      	beq.n	80036e2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003652:	2301      	movs	r3, #1
 8003654:	73fb      	strb	r3, [r7, #15]
 8003656:	e044      	b.n	80036e2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b03      	cmp	r3, #3
 800365e:	d018      	beq.n	8003692 <RCCEx_PLLSAI2_Config+0x86>
 8003660:	2b03      	cmp	r3, #3
 8003662:	d825      	bhi.n	80036b0 <RCCEx_PLLSAI2_Config+0xa4>
 8003664:	2b01      	cmp	r3, #1
 8003666:	d002      	beq.n	800366e <RCCEx_PLLSAI2_Config+0x62>
 8003668:	2b02      	cmp	r3, #2
 800366a:	d009      	beq.n	8003680 <RCCEx_PLLSAI2_Config+0x74>
 800366c:	e020      	b.n	80036b0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800366e:	4b54      	ldr	r3, [pc, #336]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0302 	and.w	r3, r3, #2
 8003676:	2b00      	cmp	r3, #0
 8003678:	d11d      	bne.n	80036b6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800367e:	e01a      	b.n	80036b6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003680:	4b4f      	ldr	r3, [pc, #316]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003688:	2b00      	cmp	r3, #0
 800368a:	d116      	bne.n	80036ba <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003690:	e013      	b.n	80036ba <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003692:	4b4b      	ldr	r3, [pc, #300]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800369e:	4b48      	ldr	r3, [pc, #288]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d109      	bne.n	80036be <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036ae:	e006      	b.n	80036be <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	73fb      	strb	r3, [r7, #15]
      break;
 80036b4:	e004      	b.n	80036c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036b6:	bf00      	nop
 80036b8:	e002      	b.n	80036c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036ba:	bf00      	nop
 80036bc:	e000      	b.n	80036c0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80036be:	bf00      	nop
    }

    if(status == HAL_OK)
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d10d      	bne.n	80036e2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036c6:	4b3e      	ldr	r3, [pc, #248]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80036c8:	68db      	ldr	r3, [r3, #12]
 80036ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6819      	ldr	r1, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	3b01      	subs	r3, #1
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	430b      	orrs	r3, r1
 80036dc:	4938      	ldr	r1, [pc, #224]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80036de:	4313      	orrs	r3, r2
 80036e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036e2:	7bfb      	ldrb	r3, [r7, #15]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d166      	bne.n	80037b6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80036e8:	4b35      	ldr	r3, [pc, #212]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4a34      	ldr	r2, [pc, #208]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80036ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036f4:	f7fd f966 	bl	80009c4 <HAL_GetTick>
 80036f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80036fa:	e009      	b.n	8003710 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80036fc:	f7fd f962 	bl	80009c4 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d902      	bls.n	8003710 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	73fb      	strb	r3, [r7, #15]
        break;
 800370e:	e005      	b.n	800371c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003710:	4b2b      	ldr	r3, [pc, #172]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1ef      	bne.n	80036fc <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800371c:	7bfb      	ldrb	r3, [r7, #15]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d149      	bne.n	80037b6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b00      	cmp	r3, #0
 8003726:	d110      	bne.n	800374a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003728:	4b25      	ldr	r3, [pc, #148]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800372a:	695b      	ldr	r3, [r3, #20]
 800372c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003730:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6892      	ldr	r2, [r2, #8]
 8003738:	0211      	lsls	r1, r2, #8
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68d2      	ldr	r2, [r2, #12]
 800373e:	06d2      	lsls	r2, r2, #27
 8003740:	430a      	orrs	r2, r1
 8003742:	491f      	ldr	r1, [pc, #124]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003744:	4313      	orrs	r3, r2
 8003746:	614b      	str	r3, [r1, #20]
 8003748:	e011      	b.n	800376e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800374a:	4b1d      	ldr	r3, [pc, #116]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003752:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	6892      	ldr	r2, [r2, #8]
 800375a:	0211      	lsls	r1, r2, #8
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	6912      	ldr	r2, [r2, #16]
 8003760:	0852      	lsrs	r2, r2, #1
 8003762:	3a01      	subs	r2, #1
 8003764:	0652      	lsls	r2, r2, #25
 8003766:	430a      	orrs	r2, r1
 8003768:	4915      	ldr	r1, [pc, #84]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800376a:	4313      	orrs	r3, r2
 800376c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800376e:	4b14      	ldr	r3, [pc, #80]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4a13      	ldr	r2, [pc, #76]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003778:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377a:	f7fd f923 	bl	80009c4 <HAL_GetTick>
 800377e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003780:	e009      	b.n	8003796 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003782:	f7fd f91f 	bl	80009c4 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	68bb      	ldr	r3, [r7, #8]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d902      	bls.n	8003796 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	73fb      	strb	r3, [r7, #15]
          break;
 8003794:	e005      	b.n	80037a2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003796:	4b0a      	ldr	r3, [pc, #40]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d0ef      	beq.n	8003782 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80037a2:	7bfb      	ldrb	r3, [r7, #15]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d106      	bne.n	80037b6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80037a8:	4b05      	ldr	r3, [pc, #20]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037aa:	695a      	ldr	r2, [r3, #20]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	695b      	ldr	r3, [r3, #20]
 80037b0:	4903      	ldr	r1, [pc, #12]	; (80037c0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80037b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3710      	adds	r7, #16
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40021000 	.word	0x40021000

080037c4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037c4:	b084      	sub	sp, #16
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b084      	sub	sp, #16
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	6078      	str	r0, [r7, #4]
 80037ce:	f107 001c 	add.w	r0, r7, #28
 80037d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f001 fa40 	bl	8004c68 <USB_CoreReset>
 80037e8:	4603      	mov	r3, r0
 80037ea:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80037ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d106      	bne.n	8003800 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	639a      	str	r2, [r3, #56]	; 0x38
 80037fe:	e005      	b.n	800380c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003804:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 800380c:	7bfb      	ldrb	r3, [r7, #15]
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003818:	b004      	add	sp, #16
 800381a:	4770      	bx	lr

0800381c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	4613      	mov	r3, r2
 8003828:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	2b02      	cmp	r3, #2
 800382e:	d165      	bne.n	80038fc <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	4a3e      	ldr	r2, [pc, #248]	; (800392c <USB_SetTurnaroundTime+0x110>)
 8003834:	4293      	cmp	r3, r2
 8003836:	d906      	bls.n	8003846 <USB_SetTurnaroundTime+0x2a>
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4a3d      	ldr	r2, [pc, #244]	; (8003930 <USB_SetTurnaroundTime+0x114>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d202      	bcs.n	8003846 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003840:	230f      	movs	r3, #15
 8003842:	617b      	str	r3, [r7, #20]
 8003844:	e05c      	b.n	8003900 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	4a39      	ldr	r2, [pc, #228]	; (8003930 <USB_SetTurnaroundTime+0x114>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d306      	bcc.n	800385c <USB_SetTurnaroundTime+0x40>
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	4a38      	ldr	r2, [pc, #224]	; (8003934 <USB_SetTurnaroundTime+0x118>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d202      	bcs.n	800385c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003856:	230e      	movs	r3, #14
 8003858:	617b      	str	r3, [r7, #20]
 800385a:	e051      	b.n	8003900 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	4a35      	ldr	r2, [pc, #212]	; (8003934 <USB_SetTurnaroundTime+0x118>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d306      	bcc.n	8003872 <USB_SetTurnaroundTime+0x56>
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	4a34      	ldr	r2, [pc, #208]	; (8003938 <USB_SetTurnaroundTime+0x11c>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d202      	bcs.n	8003872 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800386c:	230d      	movs	r3, #13
 800386e:	617b      	str	r3, [r7, #20]
 8003870:	e046      	b.n	8003900 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	4a30      	ldr	r2, [pc, #192]	; (8003938 <USB_SetTurnaroundTime+0x11c>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d306      	bcc.n	8003888 <USB_SetTurnaroundTime+0x6c>
 800387a:	68bb      	ldr	r3, [r7, #8]
 800387c:	4a2f      	ldr	r2, [pc, #188]	; (800393c <USB_SetTurnaroundTime+0x120>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d802      	bhi.n	8003888 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003882:	230c      	movs	r3, #12
 8003884:	617b      	str	r3, [r7, #20]
 8003886:	e03b      	b.n	8003900 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	4a2c      	ldr	r2, [pc, #176]	; (800393c <USB_SetTurnaroundTime+0x120>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d906      	bls.n	800389e <USB_SetTurnaroundTime+0x82>
 8003890:	68bb      	ldr	r3, [r7, #8]
 8003892:	4a2b      	ldr	r2, [pc, #172]	; (8003940 <USB_SetTurnaroundTime+0x124>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d802      	bhi.n	800389e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003898:	230b      	movs	r3, #11
 800389a:	617b      	str	r3, [r7, #20]
 800389c:	e030      	b.n	8003900 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800389e:	68bb      	ldr	r3, [r7, #8]
 80038a0:	4a27      	ldr	r2, [pc, #156]	; (8003940 <USB_SetTurnaroundTime+0x124>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	d906      	bls.n	80038b4 <USB_SetTurnaroundTime+0x98>
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	4a26      	ldr	r2, [pc, #152]	; (8003944 <USB_SetTurnaroundTime+0x128>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d802      	bhi.n	80038b4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80038ae:	230a      	movs	r3, #10
 80038b0:	617b      	str	r3, [r7, #20]
 80038b2:	e025      	b.n	8003900 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	4a23      	ldr	r2, [pc, #140]	; (8003944 <USB_SetTurnaroundTime+0x128>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d906      	bls.n	80038ca <USB_SetTurnaroundTime+0xae>
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	4a22      	ldr	r2, [pc, #136]	; (8003948 <USB_SetTurnaroundTime+0x12c>)
 80038c0:	4293      	cmp	r3, r2
 80038c2:	d202      	bcs.n	80038ca <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038c4:	2309      	movs	r3, #9
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	e01a      	b.n	8003900 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038ca:	68bb      	ldr	r3, [r7, #8]
 80038cc:	4a1e      	ldr	r2, [pc, #120]	; (8003948 <USB_SetTurnaroundTime+0x12c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d306      	bcc.n	80038e0 <USB_SetTurnaroundTime+0xc4>
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4a1d      	ldr	r2, [pc, #116]	; (800394c <USB_SetTurnaroundTime+0x130>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d802      	bhi.n	80038e0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80038da:	2308      	movs	r3, #8
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	e00f      	b.n	8003900 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4a1a      	ldr	r2, [pc, #104]	; (800394c <USB_SetTurnaroundTime+0x130>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d906      	bls.n	80038f6 <USB_SetTurnaroundTime+0xda>
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4a19      	ldr	r2, [pc, #100]	; (8003950 <USB_SetTurnaroundTime+0x134>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d202      	bcs.n	80038f6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80038f0:	2307      	movs	r3, #7
 80038f2:	617b      	str	r3, [r7, #20]
 80038f4:	e004      	b.n	8003900 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80038f6:	2306      	movs	r3, #6
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	e001      	b.n	8003900 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80038fc:	2309      	movs	r3, #9
 80038fe:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	68da      	ldr	r2, [r3, #12]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	029b      	lsls	r3, r3, #10
 8003914:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003918:	431a      	orrs	r2, r3
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800391e:	2300      	movs	r3, #0
}
 8003920:	4618      	mov	r0, r3
 8003922:	371c      	adds	r7, #28
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr
 800392c:	00d8acbf 	.word	0x00d8acbf
 8003930:	00e4e1c0 	.word	0x00e4e1c0
 8003934:	00f42400 	.word	0x00f42400
 8003938:	01067380 	.word	0x01067380
 800393c:	011a499f 	.word	0x011a499f
 8003940:	01312cff 	.word	0x01312cff
 8003944:	014ca43f 	.word	0x014ca43f
 8003948:	016e3600 	.word	0x016e3600
 800394c:	01a6ab1f 	.word	0x01a6ab1f
 8003950:	01e84800 	.word	0x01e84800

08003954 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	f043 0201 	orr.w	r2, r3, #1
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003968:	2300      	movs	r3, #0
}
 800396a:	4618      	mov	r0, r3
 800396c:	370c      	adds	r7, #12
 800396e:	46bd      	mov	sp, r7
 8003970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003974:	4770      	bx	lr

08003976 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003976:	b480      	push	{r7}
 8003978:	b083      	sub	sp, #12
 800397a:	af00      	add	r7, sp, #0
 800397c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f023 0201 	bic.w	r2, r3, #1
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	460b      	mov	r3, r1
 80039a2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039a4:	2300      	movs	r3, #0
 80039a6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039b4:	78fb      	ldrb	r3, [r7, #3]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d115      	bne.n	80039e6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039c6:	2001      	movs	r0, #1
 80039c8:	f7fd f808 	bl	80009dc <HAL_Delay>
      ms++;
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	3301      	adds	r3, #1
 80039d0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f001 f8cf 	bl	8004b76 <USB_GetMode>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d01e      	beq.n	8003a1c <USB_SetCurrentMode+0x84>
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2b31      	cmp	r3, #49	; 0x31
 80039e2:	d9f0      	bls.n	80039c6 <USB_SetCurrentMode+0x2e>
 80039e4:	e01a      	b.n	8003a1c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80039e6:	78fb      	ldrb	r3, [r7, #3]
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d115      	bne.n	8003a18 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	68db      	ldr	r3, [r3, #12]
 80039f0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80039f8:	2001      	movs	r0, #1
 80039fa:	f7fc ffef 	bl	80009dc <HAL_Delay>
      ms++;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3301      	adds	r3, #1
 8003a02:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f001 f8b6 	bl	8004b76 <USB_GetMode>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d005      	beq.n	8003a1c <USB_SetCurrentMode+0x84>
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2b31      	cmp	r3, #49	; 0x31
 8003a14:	d9f0      	bls.n	80039f8 <USB_SetCurrentMode+0x60>
 8003a16:	e001      	b.n	8003a1c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e005      	b.n	8003a28 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2b32      	cmp	r3, #50	; 0x32
 8003a20:	d101      	bne.n	8003a26 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e000      	b.n	8003a28 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a30:	b084      	sub	sp, #16
 8003a32:	b580      	push	{r7, lr}
 8003a34:	b086      	sub	sp, #24
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	613b      	str	r3, [r7, #16]
 8003a4e:	e009      	b.n	8003a64 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a50:	687a      	ldr	r2, [r7, #4]
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	3340      	adds	r3, #64	; 0x40
 8003a56:	009b      	lsls	r3, r3, #2
 8003a58:	4413      	add	r3, r2
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a5e:	693b      	ldr	r3, [r7, #16]
 8003a60:	3301      	adds	r3, #1
 8003a62:	613b      	str	r3, [r7, #16]
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	2b0e      	cmp	r3, #14
 8003a68:	d9f2      	bls.n	8003a50 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d11c      	bne.n	8003aaa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a7e:	f043 0302 	orr.w	r3, r3, #2
 8003a82:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a88:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	e005      	b.n	8003ab6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aae:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003abc:	461a      	mov	r2, r3
 8003abe:	2300      	movs	r3, #0
 8003ac0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ac8:	4619      	mov	r1, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	680b      	ldr	r3, [r1, #0]
 8003ad4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003ad6:	2103      	movs	r1, #3
 8003ad8:	6878      	ldr	r0, [r7, #4]
 8003ada:	f000 f955 	bl	8003d88 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003ade:	2110      	movs	r1, #16
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 f8f1 	bl	8003cc8 <USB_FlushTxFifo>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d001      	beq.n	8003af0 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 f91b 	bl	8003d2c <USB_FlushRxFifo>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d001      	beq.n	8003b00 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b06:	461a      	mov	r2, r3
 8003b08:	2300      	movs	r3, #0
 8003b0a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b12:	461a      	mov	r2, r3
 8003b14:	2300      	movs	r3, #0
 8003b16:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2300      	movs	r3, #0
 8003b22:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b24:	2300      	movs	r3, #0
 8003b26:	613b      	str	r3, [r7, #16]
 8003b28:	e043      	b.n	8003bb2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b2a:	693b      	ldr	r3, [r7, #16]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003b3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003b40:	d118      	bne.n	8003b74 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10a      	bne.n	8003b5e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	015a      	lsls	r2, r3, #5
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	4413      	add	r3, r2
 8003b50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b54:	461a      	mov	r2, r3
 8003b56:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003b5a:	6013      	str	r3, [r2, #0]
 8003b5c:	e013      	b.n	8003b86 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003b70:	6013      	str	r3, [r2, #0]
 8003b72:	e008      	b.n	8003b86 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	015a      	lsls	r2, r3, #5
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	4413      	add	r3, r2
 8003b7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b80:	461a      	mov	r2, r3
 8003b82:	2300      	movs	r3, #0
 8003b84:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	015a      	lsls	r2, r3, #5
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b92:	461a      	mov	r2, r3
 8003b94:	2300      	movs	r3, #0
 8003b96:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	015a      	lsls	r2, r3, #5
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	4413      	add	r3, r2
 8003ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003baa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	3301      	adds	r3, #1
 8003bb0:	613b      	str	r3, [r7, #16]
 8003bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d3b7      	bcc.n	8003b2a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	e043      	b.n	8003c48 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	015a      	lsls	r2, r3, #5
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4413      	add	r3, r2
 8003bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003bd2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003bd6:	d118      	bne.n	8003c0a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10a      	bne.n	8003bf4 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	015a      	lsls	r2, r3, #5
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	4413      	add	r3, r2
 8003be6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bea:	461a      	mov	r2, r3
 8003bec:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bf0:	6013      	str	r3, [r2, #0]
 8003bf2:	e013      	b.n	8003c1c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	015a      	lsls	r2, r3, #5
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c00:	461a      	mov	r2, r3
 8003c02:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c06:	6013      	str	r3, [r2, #0]
 8003c08:	e008      	b.n	8003c1c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c16:	461a      	mov	r2, r3
 8003c18:	2300      	movs	r3, #0
 8003c1a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c28:	461a      	mov	r2, r3
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c40:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c42:	693b      	ldr	r3, [r7, #16]
 8003c44:	3301      	adds	r3, #1
 8003c46:	613b      	str	r3, [r7, #16]
 8003c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d3b7      	bcc.n	8003bc0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c5e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c62:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2200      	movs	r2, #0
 8003c68:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003c70:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	f043 0210 	orr.w	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	699a      	ldr	r2, [r3, #24]
 8003c82:	4b10      	ldr	r3, [pc, #64]	; (8003cc4 <USB_DevInit+0x294>)
 8003c84:	4313      	orrs	r3, r2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003c8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d005      	beq.n	8003c9c <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	699b      	ldr	r3, [r3, #24]
 8003c94:	f043 0208 	orr.w	r2, r3, #8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c9e:	2b01      	cmp	r3, #1
 8003ca0:	d107      	bne.n	8003cb2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003caa:	f043 0304 	orr.w	r3, r3, #4
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003cb2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cb4:	4618      	mov	r0, r3
 8003cb6:	3718      	adds	r7, #24
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cbe:	b004      	add	sp, #16
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	803c3800 	.word	0x803c3800

08003cc8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b085      	sub	sp, #20
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
 8003cd0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	60fb      	str	r3, [r7, #12]
 8003cdc:	4a12      	ldr	r2, [pc, #72]	; (8003d28 <USB_FlushTxFifo+0x60>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d901      	bls.n	8003ce6 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	e01a      	b.n	8003d1c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	daf3      	bge.n	8003cd6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003cf2:	683b      	ldr	r3, [r7, #0]
 8003cf4:	019b      	lsls	r3, r3, #6
 8003cf6:	f043 0220 	orr.w	r2, r3, #32
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	3301      	adds	r3, #1
 8003d02:	60fb      	str	r3, [r7, #12]
 8003d04:	4a08      	ldr	r2, [pc, #32]	; (8003d28 <USB_FlushTxFifo+0x60>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d901      	bls.n	8003d0e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e006      	b.n	8003d1c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	691b      	ldr	r3, [r3, #16]
 8003d12:	f003 0320 	and.w	r3, r3, #32
 8003d16:	2b20      	cmp	r3, #32
 8003d18:	d0f1      	beq.n	8003cfe <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3714      	adds	r7, #20
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr
 8003d28:	00030d40 	.word	0x00030d40

08003d2c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b085      	sub	sp, #20
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003d34:	2300      	movs	r3, #0
 8003d36:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	3301      	adds	r3, #1
 8003d3c:	60fb      	str	r3, [r7, #12]
 8003d3e:	4a11      	ldr	r2, [pc, #68]	; (8003d84 <USB_FlushRxFifo+0x58>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d901      	bls.n	8003d48 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8003d44:	2303      	movs	r3, #3
 8003d46:	e017      	b.n	8003d78 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	daf3      	bge.n	8003d38 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2210      	movs	r2, #16
 8003d58:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	4a08      	ldr	r2, [pc, #32]	; (8003d84 <USB_FlushRxFifo+0x58>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d901      	bls.n	8003d6a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e006      	b.n	8003d78 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	f003 0310 	and.w	r3, r3, #16
 8003d72:	2b10      	cmp	r3, #16
 8003d74:	d0f1      	beq.n	8003d5a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8003d76:	2300      	movs	r3, #0
}
 8003d78:	4618      	mov	r0, r3
 8003d7a:	3714      	adds	r7, #20
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d82:	4770      	bx	lr
 8003d84:	00030d40 	.word	0x00030d40

08003d88 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b085      	sub	sp, #20
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	460b      	mov	r3, r1
 8003d92:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	78fb      	ldrb	r3, [r7, #3]
 8003da2:	68f9      	ldr	r1, [r7, #12]
 8003da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003da8:	4313      	orrs	r3, r2
 8003daa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr

08003dba <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003dba:	b480      	push	{r7}
 8003dbc:	b087      	sub	sp, #28
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003dcc:	689b      	ldr	r3, [r3, #8]
 8003dce:	f003 0306 	and.w	r3, r3, #6
 8003dd2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	2b02      	cmp	r3, #2
 8003dd8:	d002      	beq.n	8003de0 <USB_GetDevSpeed+0x26>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b06      	cmp	r3, #6
 8003dde:	d102      	bne.n	8003de6 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003de0:	2302      	movs	r3, #2
 8003de2:	75fb      	strb	r3, [r7, #23]
 8003de4:	e001      	b.n	8003dea <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003de6:	230f      	movs	r3, #15
 8003de8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003dea:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	371c      	adds	r7, #28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b085      	sub	sp, #20
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	785b      	ldrb	r3, [r3, #1]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d13a      	bne.n	8003e8a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e1a:	69da      	ldr	r2, [r3, #28]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f003 030f 	and.w	r3, r3, #15
 8003e24:	2101      	movs	r1, #1
 8003e26:	fa01 f303 	lsl.w	r3, r1, r3
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	68f9      	ldr	r1, [r7, #12]
 8003e2e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e32:	4313      	orrs	r3, r2
 8003e34:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003e36:	68bb      	ldr	r3, [r7, #8]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d155      	bne.n	8003ef8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e58:	681a      	ldr	r2, [r3, #0]
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	689b      	ldr	r3, [r3, #8]
 8003e5e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	78db      	ldrb	r3, [r3, #3]
 8003e66:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e68:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	059b      	lsls	r3, r3, #22
 8003e6e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003e70:	4313      	orrs	r3, r2
 8003e72:	68ba      	ldr	r2, [r7, #8]
 8003e74:	0151      	lsls	r1, r2, #5
 8003e76:	68fa      	ldr	r2, [r7, #12]
 8003e78:	440a      	add	r2, r1
 8003e7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003e86:	6013      	str	r3, [r2, #0]
 8003e88:	e036      	b.n	8003ef8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e90:	69da      	ldr	r2, [r3, #28]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	f003 030f 	and.w	r3, r3, #15
 8003e9a:	2101      	movs	r1, #1
 8003e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea0:	041b      	lsls	r3, r3, #16
 8003ea2:	68f9      	ldr	r1, [r7, #12]
 8003ea4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	015a      	lsls	r2, r3, #5
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	4413      	add	r3, r2
 8003eb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d11a      	bne.n	8003ef8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	015a      	lsls	r2, r3, #5
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	4413      	add	r3, r2
 8003eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	78db      	ldrb	r3, [r3, #3]
 8003edc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ede:	430b      	orrs	r3, r1
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	68ba      	ldr	r2, [r7, #8]
 8003ee4:	0151      	lsls	r1, r2, #5
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	440a      	add	r2, r1
 8003eea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003ef8:	2300      	movs	r3, #0
}
 8003efa:	4618      	mov	r0, r3
 8003efc:	3714      	adds	r7, #20
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr
	...

08003f08 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b085      	sub	sp, #20
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	781b      	ldrb	r3, [r3, #0]
 8003f1a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	785b      	ldrb	r3, [r3, #1]
 8003f20:	2b01      	cmp	r3, #1
 8003f22:	d161      	bne.n	8003fe8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003f36:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003f3a:	d11f      	bne.n	8003f7c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	0151      	lsls	r1, r2, #5
 8003f4e:	68fa      	ldr	r2, [r7, #12]
 8003f50:	440a      	add	r2, r1
 8003f52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003f5a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	68ba      	ldr	r2, [r7, #8]
 8003f6c:	0151      	lsls	r1, r2, #5
 8003f6e:	68fa      	ldr	r2, [r7, #12]
 8003f70:	440a      	add	r2, r1
 8003f72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f76:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f7a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	f003 030f 	and.w	r3, r3, #15
 8003f8c:	2101      	movs	r1, #1
 8003f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	43db      	mvns	r3, r3
 8003f96:	68f9      	ldr	r1, [r7, #12]
 8003f98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	f003 030f 	and.w	r3, r3, #15
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	43db      	mvns	r3, r3
 8003fba:	68f9      	ldr	r1, [r7, #12]
 8003fbc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	015a      	lsls	r2, r3, #5
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	4413      	add	r3, r2
 8003fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	0159      	lsls	r1, r3, #5
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	440b      	add	r3, r1
 8003fda:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fde:	4619      	mov	r1, r3
 8003fe0:	4b35      	ldr	r3, [pc, #212]	; (80040b8 <USB_DeactivateEndpoint+0x1b0>)
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	600b      	str	r3, [r1, #0]
 8003fe6:	e060      	b.n	80040aa <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	015a      	lsls	r2, r3, #5
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	4413      	add	r3, r2
 8003ff0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ffa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ffe:	d11f      	bne.n	8004040 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	015a      	lsls	r2, r3, #5
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4413      	add	r3, r2
 8004008:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68ba      	ldr	r2, [r7, #8]
 8004010:	0151      	lsls	r1, r2, #5
 8004012:	68fa      	ldr	r2, [r7, #12]
 8004014:	440a      	add	r2, r1
 8004016:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800401a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800401e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	015a      	lsls	r2, r3, #5
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	4413      	add	r3, r2
 8004028:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	68ba      	ldr	r2, [r7, #8]
 8004030:	0151      	lsls	r1, r2, #5
 8004032:	68fa      	ldr	r2, [r7, #12]
 8004034:	440a      	add	r2, r1
 8004036:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800403a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800403e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004046:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	f003 030f 	and.w	r3, r3, #15
 8004050:	2101      	movs	r1, #1
 8004052:	fa01 f303 	lsl.w	r3, r1, r3
 8004056:	041b      	lsls	r3, r3, #16
 8004058:	43db      	mvns	r3, r3
 800405a:	68f9      	ldr	r1, [r7, #12]
 800405c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004060:	4013      	ands	r3, r2
 8004062:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800406a:	69da      	ldr	r2, [r3, #28]
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	f003 030f 	and.w	r3, r3, #15
 8004074:	2101      	movs	r1, #1
 8004076:	fa01 f303 	lsl.w	r3, r1, r3
 800407a:	041b      	lsls	r3, r3, #16
 800407c:	43db      	mvns	r3, r3
 800407e:	68f9      	ldr	r1, [r7, #12]
 8004080:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004084:	4013      	ands	r3, r2
 8004086:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	015a      	lsls	r2, r3, #5
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	4413      	add	r3, r2
 8004090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	0159      	lsls	r1, r3, #5
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	440b      	add	r3, r1
 800409e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040a2:	4619      	mov	r1, r3
 80040a4:	4b05      	ldr	r3, [pc, #20]	; (80040bc <USB_DeactivateEndpoint+0x1b4>)
 80040a6:	4013      	ands	r3, r2
 80040a8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr
 80040b8:	ec337800 	.word	0xec337800
 80040bc:	eff37800 	.word	0xeff37800

080040c0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b086      	sub	sp, #24
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
 80040c8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	785b      	ldrb	r3, [r3, #1]
 80040d8:	2b01      	cmp	r3, #1
 80040da:	f040 810a 	bne.w	80042f2 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d132      	bne.n	800414c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	015a      	lsls	r2, r3, #5
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	4413      	add	r3, r2
 80040ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	0151      	lsls	r1, r2, #5
 80040f8:	697a      	ldr	r2, [r7, #20]
 80040fa:	440a      	add	r2, r1
 80040fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004100:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004104:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004108:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	015a      	lsls	r2, r3, #5
 800410e:	697b      	ldr	r3, [r7, #20]
 8004110:	4413      	add	r3, r2
 8004112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004116:	691b      	ldr	r3, [r3, #16]
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	0151      	lsls	r1, r2, #5
 800411c:	697a      	ldr	r2, [r7, #20]
 800411e:	440a      	add	r2, r1
 8004120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004124:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004128:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	015a      	lsls	r2, r3, #5
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	4413      	add	r3, r2
 8004132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004136:	691b      	ldr	r3, [r3, #16]
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	0151      	lsls	r1, r2, #5
 800413c:	697a      	ldr	r2, [r7, #20]
 800413e:	440a      	add	r2, r1
 8004140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004144:	0cdb      	lsrs	r3, r3, #19
 8004146:	04db      	lsls	r3, r3, #19
 8004148:	6113      	str	r3, [r2, #16]
 800414a:	e074      	b.n	8004236 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	015a      	lsls	r2, r3, #5
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	4413      	add	r3, r2
 8004154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004158:	691b      	ldr	r3, [r3, #16]
 800415a:	693a      	ldr	r2, [r7, #16]
 800415c:	0151      	lsls	r1, r2, #5
 800415e:	697a      	ldr	r2, [r7, #20]
 8004160:	440a      	add	r2, r1
 8004162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004166:	0cdb      	lsrs	r3, r3, #19
 8004168:	04db      	lsls	r3, r3, #19
 800416a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	0151      	lsls	r1, r2, #5
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	440a      	add	r2, r1
 8004182:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004186:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800418a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800418e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	697b      	ldr	r3, [r7, #20]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	6959      	ldr	r1, [r3, #20]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	440b      	add	r3, r1
 80041a8:	1e59      	subs	r1, r3, #1
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80041b2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80041b4:	4baf      	ldr	r3, [pc, #700]	; (8004474 <USB_EPStartXfer+0x3b4>)
 80041b6:	400b      	ands	r3, r1
 80041b8:	6939      	ldr	r1, [r7, #16]
 80041ba:	0148      	lsls	r0, r1, #5
 80041bc:	6979      	ldr	r1, [r7, #20]
 80041be:	4401      	add	r1, r0
 80041c0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041c4:	4313      	orrs	r3, r2
 80041c6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	691a      	ldr	r2, [r3, #16]
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041de:	6939      	ldr	r1, [r7, #16]
 80041e0:	0148      	lsls	r0, r1, #5
 80041e2:	6979      	ldr	r1, [r7, #20]
 80041e4:	4401      	add	r1, r0
 80041e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80041ea:	4313      	orrs	r3, r2
 80041ec:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	78db      	ldrb	r3, [r3, #3]
 80041f2:	2b01      	cmp	r3, #1
 80041f4:	d11f      	bne.n	8004236 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	0151      	lsls	r1, r2, #5
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	440a      	add	r2, r1
 800420c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004210:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004214:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	4413      	add	r3, r2
 800421e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	693a      	ldr	r2, [r7, #16]
 8004226:	0151      	lsls	r1, r2, #5
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	440a      	add	r2, r1
 800422c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004230:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004234:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004236:	693b      	ldr	r3, [r7, #16]
 8004238:	015a      	lsls	r2, r3, #5
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	4413      	add	r3, r2
 800423e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	693a      	ldr	r2, [r7, #16]
 8004246:	0151      	lsls	r1, r2, #5
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	440a      	add	r2, r1
 800424c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004250:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004254:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	78db      	ldrb	r3, [r3, #3]
 800425a:	2b01      	cmp	r3, #1
 800425c:	d015      	beq.n	800428a <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	2b00      	cmp	r3, #0
 8004264:	f000 8100 	beq.w	8004468 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800426e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	f003 030f 	and.w	r3, r3, #15
 8004278:	2101      	movs	r1, #1
 800427a:	fa01 f303 	lsl.w	r3, r1, r3
 800427e:	6979      	ldr	r1, [r7, #20]
 8004280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004284:	4313      	orrs	r3, r2
 8004286:	634b      	str	r3, [r1, #52]	; 0x34
 8004288:	e0ee      	b.n	8004468 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004296:	2b00      	cmp	r3, #0
 8004298:	d110      	bne.n	80042bc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	693a      	ldr	r2, [r7, #16]
 80042aa:	0151      	lsls	r1, r2, #5
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	440a      	add	r2, r1
 80042b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042b8:	6013      	str	r3, [r2, #0]
 80042ba:	e00f      	b.n	80042dc <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	693a      	ldr	r2, [r7, #16]
 80042cc:	0151      	lsls	r1, r2, #5
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	440a      	add	r2, r1
 80042d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042da:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	68d9      	ldr	r1, [r3, #12]
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	781a      	ldrb	r2, [r3, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	695b      	ldr	r3, [r3, #20]
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	6878      	ldr	r0, [r7, #4]
 80042ec:	f000 f9e2 	bl	80046b4 <USB_WritePacket>
 80042f0:	e0ba      	b.n	8004468 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042fe:	691b      	ldr	r3, [r3, #16]
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	0151      	lsls	r1, r2, #5
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	440a      	add	r2, r1
 8004308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800430c:	0cdb      	lsrs	r3, r3, #19
 800430e:	04db      	lsls	r3, r3, #19
 8004310:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	0151      	lsls	r1, r2, #5
 8004324:	697a      	ldr	r2, [r7, #20]
 8004326:	440a      	add	r2, r1
 8004328:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800432c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004330:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004334:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	695b      	ldr	r3, [r3, #20]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d123      	bne.n	8004386 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434a:	691a      	ldr	r2, [r3, #16]
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004354:	6939      	ldr	r1, [r7, #16]
 8004356:	0148      	lsls	r0, r1, #5
 8004358:	6979      	ldr	r1, [r7, #20]
 800435a:	4401      	add	r1, r0
 800435c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004360:	4313      	orrs	r3, r2
 8004362:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	015a      	lsls	r2, r3, #5
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	4413      	add	r3, r2
 800436c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004370:	691b      	ldr	r3, [r3, #16]
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	0151      	lsls	r1, r2, #5
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	440a      	add	r2, r1
 800437a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800437e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004382:	6113      	str	r3, [r2, #16]
 8004384:	e033      	b.n	80043ee <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	695a      	ldr	r2, [r3, #20]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	4413      	add	r3, r2
 8004390:	1e5a      	subs	r2, r3, #1
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	fbb2 f3f3 	udiv	r3, r2, r3
 800439a:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	015a      	lsls	r2, r3, #5
 80043a0:	697b      	ldr	r3, [r7, #20]
 80043a2:	4413      	add	r3, r2
 80043a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043a8:	691a      	ldr	r2, [r3, #16]
 80043aa:	89fb      	ldrh	r3, [r7, #14]
 80043ac:	04d9      	lsls	r1, r3, #19
 80043ae:	4b31      	ldr	r3, [pc, #196]	; (8004474 <USB_EPStartXfer+0x3b4>)
 80043b0:	400b      	ands	r3, r1
 80043b2:	6939      	ldr	r1, [r7, #16]
 80043b4:	0148      	lsls	r0, r1, #5
 80043b6:	6979      	ldr	r1, [r7, #20]
 80043b8:	4401      	add	r1, r0
 80043ba:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043be:	4313      	orrs	r3, r2
 80043c0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ce:	691a      	ldr	r2, [r3, #16]
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	89f9      	ldrh	r1, [r7, #14]
 80043d6:	fb01 f303 	mul.w	r3, r1, r3
 80043da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043de:	6939      	ldr	r1, [r7, #16]
 80043e0:	0148      	lsls	r0, r1, #5
 80043e2:	6979      	ldr	r1, [r7, #20]
 80043e4:	4401      	add	r1, r0
 80043e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80043ea:	4313      	orrs	r3, r2
 80043ec:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	78db      	ldrb	r3, [r3, #3]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	d128      	bne.n	8004448 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004402:	2b00      	cmp	r3, #0
 8004404:	d110      	bne.n	8004428 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	0151      	lsls	r1, r2, #5
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	440a      	add	r2, r1
 800441c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004420:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e00f      	b.n	8004448 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	4413      	add	r3, r2
 8004430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	693a      	ldr	r2, [r7, #16]
 8004438:	0151      	lsls	r1, r2, #5
 800443a:	697a      	ldr	r2, [r7, #20]
 800443c:	440a      	add	r2, r1
 800443e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004442:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004446:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	0151      	lsls	r1, r2, #5
 800445a:	697a      	ldr	r2, [r7, #20]
 800445c:	440a      	add	r2, r1
 800445e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004462:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004466:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
 8004472:	bf00      	nop
 8004474:	1ff80000 	.word	0x1ff80000

08004478 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
 8004480:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004486:	683b      	ldr	r3, [r7, #0]
 8004488:	781b      	ldrb	r3, [r3, #0]
 800448a:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	785b      	ldrb	r3, [r3, #1]
 8004490:	2b01      	cmp	r3, #1
 8004492:	f040 80ab 	bne.w	80045ec <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d132      	bne.n	8004504 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	015a      	lsls	r2, r3, #5
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	4413      	add	r3, r2
 80044a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044aa:	691b      	ldr	r3, [r3, #16]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	0151      	lsls	r1, r2, #5
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	440a      	add	r2, r1
 80044b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	015a      	lsls	r2, r3, #5
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	4413      	add	r3, r2
 80044ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ce:	691b      	ldr	r3, [r3, #16]
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	0151      	lsls	r1, r2, #5
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	440a      	add	r2, r1
 80044d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	68ba      	ldr	r2, [r7, #8]
 80044f2:	0151      	lsls	r1, r2, #5
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	440a      	add	r2, r1
 80044f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044fc:	0cdb      	lsrs	r3, r3, #19
 80044fe:	04db      	lsls	r3, r3, #19
 8004500:	6113      	str	r3, [r2, #16]
 8004502:	e04e      	b.n	80045a2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	015a      	lsls	r2, r3, #5
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004510:	691b      	ldr	r3, [r3, #16]
 8004512:	68ba      	ldr	r2, [r7, #8]
 8004514:	0151      	lsls	r1, r2, #5
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	440a      	add	r2, r1
 800451a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800451e:	0cdb      	lsrs	r3, r3, #19
 8004520:	04db      	lsls	r3, r3, #19
 8004522:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004530:	691b      	ldr	r3, [r3, #16]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800453e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004542:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004546:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	695a      	ldr	r2, [r3, #20]
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	689b      	ldr	r3, [r3, #8]
 8004550:	429a      	cmp	r2, r3
 8004552:	d903      	bls.n	800455c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	015a      	lsls	r2, r3, #5
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	0151      	lsls	r1, r2, #5
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	440a      	add	r2, r1
 8004572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004576:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800457a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	695b      	ldr	r3, [r3, #20]
 800458e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004592:	68b9      	ldr	r1, [r7, #8]
 8004594:	0148      	lsls	r0, r1, #5
 8004596:	68f9      	ldr	r1, [r7, #12]
 8004598:	4401      	add	r1, r0
 800459a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800459e:	4313      	orrs	r3, r2
 80045a0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	0151      	lsls	r1, r2, #5
 80045b4:	68fa      	ldr	r2, [r7, #12]
 80045b6:	440a      	add	r2, r1
 80045b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045c0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d06d      	beq.n	80046a6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	f003 030f 	and.w	r3, r3, #15
 80045da:	2101      	movs	r1, #1
 80045dc:	fa01 f303 	lsl.w	r3, r1, r3
 80045e0:	68f9      	ldr	r1, [r7, #12]
 80045e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e6:	4313      	orrs	r3, r2
 80045e8:	634b      	str	r3, [r1, #52]	; 0x34
 80045ea:	e05c      	b.n	80046a6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	015a      	lsls	r2, r3, #5
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4413      	add	r3, r2
 80045f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045f8:	691b      	ldr	r3, [r3, #16]
 80045fa:	68ba      	ldr	r2, [r7, #8]
 80045fc:	0151      	lsls	r1, r2, #5
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	440a      	add	r2, r1
 8004602:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004606:	0cdb      	lsrs	r3, r3, #19
 8004608:	04db      	lsls	r3, r3, #19
 800460a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004618:	691b      	ldr	r3, [r3, #16]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	0151      	lsls	r1, r2, #5
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	440a      	add	r2, r1
 8004622:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004626:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800462a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800462e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d003      	beq.n	8004640 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	689a      	ldr	r2, [r3, #8]
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004640:	68bb      	ldr	r3, [r7, #8]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	68ba      	ldr	r2, [r7, #8]
 8004650:	0151      	lsls	r1, r2, #5
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	440a      	add	r2, r1
 8004656:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800465a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800465e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466c:	691a      	ldr	r2, [r3, #16]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004676:	68b9      	ldr	r1, [r7, #8]
 8004678:	0148      	lsls	r0, r1, #5
 800467a:	68f9      	ldr	r1, [r7, #12]
 800467c:	4401      	add	r1, r0
 800467e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004682:	4313      	orrs	r3, r2
 8004684:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004686:	68bb      	ldr	r3, [r7, #8]
 8004688:	015a      	lsls	r2, r3, #5
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	4413      	add	r3, r2
 800468e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	68ba      	ldr	r2, [r7, #8]
 8004696:	0151      	lsls	r1, r2, #5
 8004698:	68fa      	ldr	r2, [r7, #12]
 800469a:	440a      	add	r2, r1
 800469c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80046a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80046a6:	2300      	movs	r3, #0
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3714      	adds	r7, #20
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b089      	sub	sp, #36	; 0x24
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	60b9      	str	r1, [r7, #8]
 80046be:	4611      	mov	r1, r2
 80046c0:	461a      	mov	r2, r3
 80046c2:	460b      	mov	r3, r1
 80046c4:	71fb      	strb	r3, [r7, #7]
 80046c6:	4613      	mov	r3, r2
 80046c8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80046d2:	88bb      	ldrh	r3, [r7, #4]
 80046d4:	3303      	adds	r3, #3
 80046d6:	089b      	lsrs	r3, r3, #2
 80046d8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	e018      	b.n	8004712 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80046e0:	79fb      	ldrb	r3, [r7, #7]
 80046e2:	031a      	lsls	r2, r3, #12
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046ec:	461a      	mov	r2, r3
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80046f4:	69fb      	ldr	r3, [r7, #28]
 80046f6:	3301      	adds	r3, #1
 80046f8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80046fa:	69fb      	ldr	r3, [r7, #28]
 80046fc:	3301      	adds	r3, #1
 80046fe:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	3301      	adds	r3, #1
 8004704:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004706:	69fb      	ldr	r3, [r7, #28]
 8004708:	3301      	adds	r3, #1
 800470a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	3301      	adds	r3, #1
 8004710:	61bb      	str	r3, [r7, #24]
 8004712:	69ba      	ldr	r2, [r7, #24]
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	429a      	cmp	r2, r3
 8004718:	d3e2      	bcc.n	80046e0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800471a:	2300      	movs	r3, #0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3724      	adds	r7, #36	; 0x24
 8004720:	46bd      	mov	sp, r7
 8004722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004726:	4770      	bx	lr

08004728 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004728:	b480      	push	{r7}
 800472a:	b08b      	sub	sp, #44	; 0x2c
 800472c:	af00      	add	r7, sp, #0
 800472e:	60f8      	str	r0, [r7, #12]
 8004730:	60b9      	str	r1, [r7, #8]
 8004732:	4613      	mov	r3, r2
 8004734:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800473e:	88fb      	ldrh	r3, [r7, #6]
 8004740:	089b      	lsrs	r3, r3, #2
 8004742:	b29b      	uxth	r3, r3
 8004744:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004746:	88fb      	ldrh	r3, [r7, #6]
 8004748:	f003 0303 	and.w	r3, r3, #3
 800474c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800474e:	2300      	movs	r3, #0
 8004750:	623b      	str	r3, [r7, #32]
 8004752:	e014      	b.n	800477e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004762:	3301      	adds	r3, #1
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	3301      	adds	r3, #1
 800476a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800476c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476e:	3301      	adds	r3, #1
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004774:	3301      	adds	r3, #1
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004778:	6a3b      	ldr	r3, [r7, #32]
 800477a:	3301      	adds	r3, #1
 800477c:	623b      	str	r3, [r7, #32]
 800477e:	6a3a      	ldr	r2, [r7, #32]
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	429a      	cmp	r2, r3
 8004784:	d3e6      	bcc.n	8004754 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004786:	8bfb      	ldrh	r3, [r7, #30]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d01e      	beq.n	80047ca <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800478c:	2300      	movs	r3, #0
 800478e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004790:	69bb      	ldr	r3, [r7, #24]
 8004792:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004796:	461a      	mov	r2, r3
 8004798:	f107 0310 	add.w	r3, r7, #16
 800479c:	6812      	ldr	r2, [r2, #0]
 800479e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	6a3b      	ldr	r3, [r7, #32]
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	00db      	lsls	r3, r3, #3
 80047a8:	fa22 f303 	lsr.w	r3, r2, r3
 80047ac:	b2da      	uxtb	r2, r3
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	701a      	strb	r2, [r3, #0]
      i++;
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	3301      	adds	r3, #1
 80047b6:	623b      	str	r3, [r7, #32]
      pDest++;
 80047b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ba:	3301      	adds	r3, #1
 80047bc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80047be:	8bfb      	ldrh	r3, [r7, #30]
 80047c0:	3b01      	subs	r3, #1
 80047c2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80047c4:	8bfb      	ldrh	r3, [r7, #30]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1ea      	bne.n	80047a0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80047ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	372c      	adds	r7, #44	; 0x2c
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	781b      	ldrb	r3, [r3, #0]
 80047ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	785b      	ldrb	r3, [r3, #1]
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d12c      	bne.n	800484e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	015a      	lsls	r2, r3, #5
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	4413      	add	r3, r2
 80047fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	db12      	blt.n	800482c <USB_EPSetStall+0x54>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d00f      	beq.n	800482c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	015a      	lsls	r2, r3, #5
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	4413      	add	r3, r2
 8004814:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68ba      	ldr	r2, [r7, #8]
 800481c:	0151      	lsls	r1, r2, #5
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	440a      	add	r2, r1
 8004822:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004826:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800482a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	015a      	lsls	r2, r3, #5
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4413      	add	r3, r2
 8004834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	68ba      	ldr	r2, [r7, #8]
 800483c:	0151      	lsls	r1, r2, #5
 800483e:	68fa      	ldr	r2, [r7, #12]
 8004840:	440a      	add	r2, r1
 8004842:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004846:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	e02b      	b.n	80048a6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	015a      	lsls	r2, r3, #5
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	db12      	blt.n	8004886 <USB_EPSetStall+0xae>
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00f      	beq.n	8004886 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004866:	68bb      	ldr	r3, [r7, #8]
 8004868:	015a      	lsls	r2, r3, #5
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	4413      	add	r3, r2
 800486e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	0151      	lsls	r1, r2, #5
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	440a      	add	r2, r1
 800487c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004880:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004884:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	68ba      	ldr	r2, [r7, #8]
 8004896:	0151      	lsls	r1, r2, #5
 8004898:	68fa      	ldr	r2, [r7, #12]
 800489a:	440a      	add	r2, r1
 800489c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b2:	4770      	bx	lr

080048b4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	785b      	ldrb	r3, [r3, #1]
 80048cc:	2b01      	cmp	r3, #1
 80048ce:	d128      	bne.n	8004922 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	015a      	lsls	r2, r3, #5
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	4413      	add	r3, r2
 80048d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	68ba      	ldr	r2, [r7, #8]
 80048e0:	0151      	lsls	r1, r2, #5
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	440a      	add	r2, r1
 80048e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80048ee:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	78db      	ldrb	r3, [r3, #3]
 80048f4:	2b03      	cmp	r3, #3
 80048f6:	d003      	beq.n	8004900 <USB_EPClearStall+0x4c>
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	78db      	ldrb	r3, [r3, #3]
 80048fc:	2b02      	cmp	r3, #2
 80048fe:	d138      	bne.n	8004972 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	015a      	lsls	r2, r3, #5
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4413      	add	r3, r2
 8004908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68ba      	ldr	r2, [r7, #8]
 8004910:	0151      	lsls	r1, r2, #5
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	440a      	add	r2, r1
 8004916:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800491a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800491e:	6013      	str	r3, [r2, #0]
 8004920:	e027      	b.n	8004972 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	015a      	lsls	r2, r3, #5
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	4413      	add	r3, r2
 800492a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	68ba      	ldr	r2, [r7, #8]
 8004932:	0151      	lsls	r1, r2, #5
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	440a      	add	r2, r1
 8004938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800493c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004940:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004942:	683b      	ldr	r3, [r7, #0]
 8004944:	78db      	ldrb	r3, [r3, #3]
 8004946:	2b03      	cmp	r3, #3
 8004948:	d003      	beq.n	8004952 <USB_EPClearStall+0x9e>
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	78db      	ldrb	r3, [r3, #3]
 800494e:	2b02      	cmp	r3, #2
 8004950:	d10f      	bne.n	8004972 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	015a      	lsls	r2, r3, #5
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4413      	add	r3, r2
 800495a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68ba      	ldr	r2, [r7, #8]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800496c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004970:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004972:	2300      	movs	r3, #0
}
 8004974:	4618      	mov	r0, r3
 8004976:	3714      	adds	r7, #20
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
 8004988:	460b      	mov	r3, r1
 800498a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800499e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80049a2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049aa:	681a      	ldr	r2, [r3, #0]
 80049ac:	78fb      	ldrb	r3, [r7, #3]
 80049ae:	011b      	lsls	r3, r3, #4
 80049b0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80049b4:	68f9      	ldr	r1, [r7, #12]
 80049b6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049ba:	4313      	orrs	r3, r2
 80049bc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b085      	sub	sp, #20
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	68fa      	ldr	r2, [r7, #12]
 80049e2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80049e6:	f023 0303 	bic.w	r3, r3, #3
 80049ea:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049fa:	f023 0302 	bic.w	r3, r3, #2
 80049fe:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a00:	2300      	movs	r3, #0
}
 8004a02:	4618      	mov	r0, r3
 8004a04:	3714      	adds	r7, #20
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68fa      	ldr	r2, [r7, #12]
 8004a24:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a28:	f023 0303 	bic.w	r3, r3, #3
 8004a2c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	68fa      	ldr	r2, [r7, #12]
 8004a38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a3c:	f043 0302 	orr.w	r3, r3, #2
 8004a40:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	695b      	ldr	r3, [r3, #20]
 8004a5c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	699b      	ldr	r3, [r3, #24]
 8004a62:	68fa      	ldr	r2, [r7, #12]
 8004a64:	4013      	ands	r3, r2
 8004a66:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004a68:	68fb      	ldr	r3, [r7, #12]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3714      	adds	r7, #20
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a74:	4770      	bx	lr

08004a76 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a76:	b480      	push	{r7}
 8004a78:	b085      	sub	sp, #20
 8004a7a:	af00      	add	r7, sp, #0
 8004a7c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a88:	699b      	ldr	r3, [r3, #24]
 8004a8a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a92:	69db      	ldr	r3, [r3, #28]
 8004a94:	68ba      	ldr	r2, [r7, #8]
 8004a96:	4013      	ands	r3, r2
 8004a98:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	0c1b      	lsrs	r3, r3, #16
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3714      	adds	r7, #20
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa8:	4770      	bx	lr

08004aaa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004aaa:	b480      	push	{r7}
 8004aac:	b085      	sub	sp, #20
 8004aae:	af00      	add	r7, sp, #0
 8004ab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ac6:	69db      	ldr	r3, [r3, #28]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	4013      	ands	r3, r2
 8004acc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	b29b      	uxth	r3, r3
}
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	3714      	adds	r7, #20
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004adc:	4770      	bx	lr

08004ade <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ade:	b480      	push	{r7}
 8004ae0:	b085      	sub	sp, #20
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	6078      	str	r0, [r7, #4]
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004aee:	78fb      	ldrb	r3, [r7, #3]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b04:	695b      	ldr	r3, [r3, #20]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	4013      	ands	r3, r2
 8004b0a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b0c:	68bb      	ldr	r3, [r7, #8]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr

08004b1a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b1a:	b480      	push	{r7}
 8004b1c:	b087      	sub	sp, #28
 8004b1e:	af00      	add	r7, sp, #0
 8004b20:	6078      	str	r0, [r7, #4]
 8004b22:	460b      	mov	r3, r1
 8004b24:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004b2a:	697b      	ldr	r3, [r7, #20]
 8004b2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b3c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004b3e:	78fb      	ldrb	r3, [r7, #3]
 8004b40:	f003 030f 	and.w	r3, r3, #15
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	fa22 f303 	lsr.w	r3, r2, r3
 8004b4a:	01db      	lsls	r3, r3, #7
 8004b4c:	b2db      	uxtb	r3, r3
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004b54:	78fb      	ldrb	r3, [r7, #3]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4013      	ands	r3, r2
 8004b66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b68:	68bb      	ldr	r3, [r7, #8]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	371c      	adds	r7, #28
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004b76:	b480      	push	{r7}
 8004b78:	b083      	sub	sp, #12
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	695b      	ldr	r3, [r3, #20]
 8004b82:	f003 0301 	and.w	r3, r3, #1
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr

08004b92 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bac:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004bb0:	f023 0307 	bic.w	r3, r3, #7
 8004bb4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bc8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004bca:	2300      	movs	r3, #0
}
 8004bcc:	4618      	mov	r0, r3
 8004bce:	3714      	adds	r7, #20
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd6:	4770      	bx	lr

08004bd8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	333c      	adds	r3, #60	; 0x3c
 8004bea:	3304      	adds	r3, #4
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	4a1c      	ldr	r2, [pc, #112]	; (8004c64 <USB_EP0_OutStart+0x8c>)
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d90a      	bls.n	8004c0e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c08:	d101      	bne.n	8004c0e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	e024      	b.n	8004c58 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c14:	461a      	mov	r2, r3
 8004c16:	2300      	movs	r3, #0
 8004c18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c2c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c3c:	f043 0318 	orr.w	r3, r3, #24
 8004c40:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c48:	691b      	ldr	r3, [r3, #16]
 8004c4a:	68fa      	ldr	r2, [r7, #12]
 8004c4c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c50:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004c54:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004c56:	2300      	movs	r3, #0
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3714      	adds	r7, #20
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c62:	4770      	bx	lr
 8004c64:	4f54300a 	.word	0x4f54300a

08004c68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b085      	sub	sp, #20
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	3301      	adds	r3, #1
 8004c78:	60fb      	str	r3, [r7, #12]
 8004c7a:	4a13      	ldr	r2, [pc, #76]	; (8004cc8 <USB_CoreReset+0x60>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d901      	bls.n	8004c84 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004c80:	2303      	movs	r3, #3
 8004c82:	e01a      	b.n	8004cba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	691b      	ldr	r3, [r3, #16]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	daf3      	bge.n	8004c74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	f043 0201 	orr.w	r2, r3, #1
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	3301      	adds	r3, #1
 8004ca0:	60fb      	str	r3, [r7, #12]
 8004ca2:	4a09      	ldr	r2, [pc, #36]	; (8004cc8 <USB_CoreReset+0x60>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d901      	bls.n	8004cac <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e006      	b.n	8004cba <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	f003 0301 	and.w	r3, r3, #1
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d0f1      	beq.n	8004c9c <USB_CoreReset+0x34>

  return HAL_OK;
 8004cb8:	2300      	movs	r3, #0
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3714      	adds	r7, #20
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc4:	4770      	bx	lr
 8004cc6:	bf00      	nop
 8004cc8:	00030d40 	.word	0x00030d40

08004ccc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
 8004cd4:	460b      	mov	r3, r1
 8004cd6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004cd8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004cdc:	f002 fafe 	bl	80072dc <USBD_static_malloc>
 8004ce0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d105      	bne.n	8004cf4 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	e066      	b.n	8004dc2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	7c1b      	ldrb	r3, [r3, #16]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d119      	bne.n	8004d38 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d08:	2202      	movs	r2, #2
 8004d0a:	2181      	movs	r1, #129	; 0x81
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f002 f8d1 	bl	8006eb4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2201      	movs	r2, #1
 8004d16:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d1c:	2202      	movs	r2, #2
 8004d1e:	2101      	movs	r1, #1
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f002 f8c7 	bl	8006eb4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2210      	movs	r2, #16
 8004d32:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004d36:	e016      	b.n	8004d66 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004d38:	2340      	movs	r3, #64	; 0x40
 8004d3a:	2202      	movs	r2, #2
 8004d3c:	2181      	movs	r1, #129	; 0x81
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f002 f8b8 	bl	8006eb4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2201      	movs	r2, #1
 8004d48:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004d4a:	2340      	movs	r3, #64	; 0x40
 8004d4c:	2202      	movs	r2, #2
 8004d4e:	2101      	movs	r1, #1
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f002 f8af 	bl	8006eb4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2210      	movs	r2, #16
 8004d62:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004d66:	2308      	movs	r3, #8
 8004d68:	2203      	movs	r2, #3
 8004d6a:	2182      	movs	r1, #130	; 0x82
 8004d6c:	6878      	ldr	r0, [r7, #4]
 8004d6e:	f002 f8a1 	bl	8006eb4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	2200      	movs	r2, #0
 8004d88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	7c1b      	ldrb	r3, [r3, #16]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d109      	bne.n	8004db0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004da2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004da6:	2101      	movs	r1, #1
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f002 f9fd 	bl	80071a8 <USBD_LL_PrepareReceive>
 8004dae:	e007      	b.n	8004dc0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004db6:	2340      	movs	r3, #64	; 0x40
 8004db8:	2101      	movs	r1, #1
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f002 f9f4 	bl	80071a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004dc0:	2300      	movs	r3, #0
}
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	3710      	adds	r7, #16
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	bd80      	pop	{r7, pc}

08004dca <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004dca:	b580      	push	{r7, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004dd6:	2181      	movs	r1, #129	; 0x81
 8004dd8:	6878      	ldr	r0, [r7, #4]
 8004dda:	f002 f8a9 	bl	8006f30 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004de4:	2101      	movs	r1, #1
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f002 f8a2 	bl	8006f30 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2200      	movs	r2, #0
 8004df0:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004df4:	2182      	movs	r1, #130	; 0x82
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f002 f89a 	bl	8006f30 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2200      	movs	r2, #0
 8004e08:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00e      	beq.n	8004e34 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e26:	4618      	mov	r0, r3
 8004e28:	f002 fa66 	bl	80072f8 <USBD_static_free>
    pdev->pClassData = NULL;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004e34:	2300      	movs	r3, #0
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3708      	adds	r7, #8
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004e50:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d101      	bne.n	8004e68 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0af      	b.n	8004fc8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d03f      	beq.n	8004ef4 <USBD_CDC_Setup+0xb4>
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	f040 809f 	bne.w	8004fb8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	88db      	ldrh	r3, [r3, #6]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d02e      	beq.n	8004ee0 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	b25b      	sxtb	r3, r3
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	da16      	bge.n	8004eba <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	683a      	ldr	r2, [r7, #0]
 8004e96:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004e98:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004e9a:	683a      	ldr	r2, [r7, #0]
 8004e9c:	88d2      	ldrh	r2, [r2, #6]
 8004e9e:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	88db      	ldrh	r3, [r3, #6]
 8004ea4:	2b07      	cmp	r3, #7
 8004ea6:	bf28      	it	cs
 8004ea8:	2307      	movcs	r3, #7
 8004eaa:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	89fa      	ldrh	r2, [r7, #14]
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f001 fb43 	bl	800653e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004eb8:	e085      	b.n	8004fc6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	785a      	ldrb	r2, [r3, #1]
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	88db      	ldrh	r3, [r3, #6]
 8004ec8:	b2da      	uxtb	r2, r3
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004ed0:	6939      	ldr	r1, [r7, #16]
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	88db      	ldrh	r3, [r3, #6]
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f001 fb5c 	bl	8006596 <USBD_CtlPrepareRx>
      break;
 8004ede:	e072      	b.n	8004fc6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004ee6:	689b      	ldr	r3, [r3, #8]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	7850      	ldrb	r0, [r2, #1]
 8004eec:	2200      	movs	r2, #0
 8004eee:	6839      	ldr	r1, [r7, #0]
 8004ef0:	4798      	blx	r3
      break;
 8004ef2:	e068      	b.n	8004fc6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	785b      	ldrb	r3, [r3, #1]
 8004ef8:	2b0b      	cmp	r3, #11
 8004efa:	d852      	bhi.n	8004fa2 <USBD_CDC_Setup+0x162>
 8004efc:	a201      	add	r2, pc, #4	; (adr r2, 8004f04 <USBD_CDC_Setup+0xc4>)
 8004efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f02:	bf00      	nop
 8004f04:	08004f35 	.word	0x08004f35
 8004f08:	08004fb1 	.word	0x08004fb1
 8004f0c:	08004fa3 	.word	0x08004fa3
 8004f10:	08004fa3 	.word	0x08004fa3
 8004f14:	08004fa3 	.word	0x08004fa3
 8004f18:	08004fa3 	.word	0x08004fa3
 8004f1c:	08004fa3 	.word	0x08004fa3
 8004f20:	08004fa3 	.word	0x08004fa3
 8004f24:	08004fa3 	.word	0x08004fa3
 8004f28:	08004fa3 	.word	0x08004fa3
 8004f2c:	08004f5f 	.word	0x08004f5f
 8004f30:	08004f89 	.word	0x08004f89
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b03      	cmp	r3, #3
 8004f3e:	d107      	bne.n	8004f50 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004f40:	f107 030a 	add.w	r3, r7, #10
 8004f44:	2202      	movs	r2, #2
 8004f46:	4619      	mov	r1, r3
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f001 faf8 	bl	800653e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f4e:	e032      	b.n	8004fb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004f50:	6839      	ldr	r1, [r7, #0]
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f001 fa82 	bl	800645c <USBD_CtlError>
            ret = USBD_FAIL;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	75fb      	strb	r3, [r7, #23]
          break;
 8004f5c:	e02b      	b.n	8004fb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	2b03      	cmp	r3, #3
 8004f68:	d107      	bne.n	8004f7a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004f6a:	f107 030d 	add.w	r3, r7, #13
 8004f6e:	2201      	movs	r2, #1
 8004f70:	4619      	mov	r1, r3
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f001 fae3 	bl	800653e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004f78:	e01d      	b.n	8004fb6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004f7a:	6839      	ldr	r1, [r7, #0]
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f001 fa6d 	bl	800645c <USBD_CtlError>
            ret = USBD_FAIL;
 8004f82:	2303      	movs	r3, #3
 8004f84:	75fb      	strb	r3, [r7, #23]
          break;
 8004f86:	e016      	b.n	8004fb6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b03      	cmp	r3, #3
 8004f92:	d00f      	beq.n	8004fb4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004f94:	6839      	ldr	r1, [r7, #0]
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f001 fa60 	bl	800645c <USBD_CtlError>
            ret = USBD_FAIL;
 8004f9c:	2303      	movs	r3, #3
 8004f9e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004fa0:	e008      	b.n	8004fb4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004fa2:	6839      	ldr	r1, [r7, #0]
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f001 fa59 	bl	800645c <USBD_CtlError>
          ret = USBD_FAIL;
 8004faa:	2303      	movs	r3, #3
 8004fac:	75fb      	strb	r3, [r7, #23]
          break;
 8004fae:	e002      	b.n	8004fb6 <USBD_CDC_Setup+0x176>
          break;
 8004fb0:	bf00      	nop
 8004fb2:	e008      	b.n	8004fc6 <USBD_CDC_Setup+0x186>
          break;
 8004fb4:	bf00      	nop
      }
      break;
 8004fb6:	e006      	b.n	8004fc6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004fb8:	6839      	ldr	r1, [r7, #0]
 8004fba:	6878      	ldr	r0, [r7, #4]
 8004fbc:	f001 fa4e 	bl	800645c <USBD_CtlError>
      ret = USBD_FAIL;
 8004fc0:	2303      	movs	r3, #3
 8004fc2:	75fb      	strb	r3, [r7, #23]
      break;
 8004fc4:	bf00      	nop
  }

  return (uint8_t)ret;
 8004fc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	3718      	adds	r7, #24
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	bd80      	pop	{r7, pc}

08004fd0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	b084      	sub	sp, #16
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	460b      	mov	r3, r1
 8004fda:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004fe2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e04f      	b.n	8005092 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ff8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004ffa:	78fa      	ldrb	r2, [r7, #3]
 8004ffc:	6879      	ldr	r1, [r7, #4]
 8004ffe:	4613      	mov	r3, r2
 8005000:	009b      	lsls	r3, r3, #2
 8005002:	4413      	add	r3, r2
 8005004:	009b      	lsls	r3, r3, #2
 8005006:	440b      	add	r3, r1
 8005008:	3318      	adds	r3, #24
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d029      	beq.n	8005064 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005010:	78fa      	ldrb	r2, [r7, #3]
 8005012:	6879      	ldr	r1, [r7, #4]
 8005014:	4613      	mov	r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4413      	add	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	440b      	add	r3, r1
 800501e:	3318      	adds	r3, #24
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	78f9      	ldrb	r1, [r7, #3]
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	460b      	mov	r3, r1
 8005028:	00db      	lsls	r3, r3, #3
 800502a:	1a5b      	subs	r3, r3, r1
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4403      	add	r3, r0
 8005030:	3344      	adds	r3, #68	; 0x44
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	fbb2 f1f3 	udiv	r1, r2, r3
 8005038:	fb03 f301 	mul.w	r3, r3, r1
 800503c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800503e:	2b00      	cmp	r3, #0
 8005040:	d110      	bne.n	8005064 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005042:	78fa      	ldrb	r2, [r7, #3]
 8005044:	6879      	ldr	r1, [r7, #4]
 8005046:	4613      	mov	r3, r2
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	4413      	add	r3, r2
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	440b      	add	r3, r1
 8005050:	3318      	adds	r3, #24
 8005052:	2200      	movs	r2, #0
 8005054:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005056:	78f9      	ldrb	r1, [r7, #3]
 8005058:	2300      	movs	r3, #0
 800505a:	2200      	movs	r2, #0
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f002 f86b 	bl	8007138 <USBD_LL_Transmit>
 8005062:	e015      	b.n	8005090 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	2200      	movs	r2, #0
 8005068:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005072:	691b      	ldr	r3, [r3, #16]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d00b      	beq.n	8005090 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800507e:	691b      	ldr	r3, [r3, #16]
 8005080:	68ba      	ldr	r2, [r7, #8]
 8005082:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800508c:	78fa      	ldrb	r2, [r7, #3]
 800508e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8005090:	2300      	movs	r3, #0
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}

0800509a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800509a:	b580      	push	{r7, lr}
 800509c:	b084      	sub	sp, #16
 800509e:	af00      	add	r7, sp, #0
 80050a0:	6078      	str	r0, [r7, #4]
 80050a2:	460b      	mov	r3, r1
 80050a4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050ac:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e015      	b.n	80050e8 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	4619      	mov	r1, r3
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f002 f8a9 	bl	8007218 <USBD_LL_GetRxDataSize>
 80050c6:	4602      	mov	r2, r0
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80050dc:	68fa      	ldr	r2, [r7, #12]
 80050de:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80050e2:	4611      	mov	r1, r2
 80050e4:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80050e6:	2300      	movs	r3, #0
}
 80050e8:	4618      	mov	r0, r3
 80050ea:	3710      	adds	r7, #16
 80050ec:	46bd      	mov	sp, r7
 80050ee:	bd80      	pop	{r7, pc}

080050f0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b084      	sub	sp, #16
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050fe:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d101      	bne.n	800510a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005106:	2303      	movs	r3, #3
 8005108:	e01b      	b.n	8005142 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005110:	2b00      	cmp	r3, #0
 8005112:	d015      	beq.n	8005140 <USBD_CDC_EP0_RxReady+0x50>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800511a:	2bff      	cmp	r3, #255	; 0xff
 800511c:	d010      	beq.n	8005140 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	68fa      	ldr	r2, [r7, #12]
 8005128:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800512c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005134:	b292      	uxth	r2, r2
 8005136:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	22ff      	movs	r2, #255	; 0xff
 800513c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3710      	adds	r7, #16
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
	...

0800514c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2243      	movs	r2, #67	; 0x43
 8005158:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800515a:	4b03      	ldr	r3, [pc, #12]	; (8005168 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800515c:	4618      	mov	r0, r3
 800515e:	370c      	adds	r7, #12
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	20000094 	.word	0x20000094

0800516c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2243      	movs	r2, #67	; 0x43
 8005178:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800517a:	4b03      	ldr	r3, [pc, #12]	; (8005188 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800517c:	4618      	mov	r0, r3
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	20000050 	.word	0x20000050

0800518c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2243      	movs	r2, #67	; 0x43
 8005198:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 800519a:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800519c:	4618      	mov	r0, r3
 800519e:	370c      	adds	r7, #12
 80051a0:	46bd      	mov	sp, r7
 80051a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a6:	4770      	bx	lr
 80051a8:	200000d8 	.word	0x200000d8

080051ac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80051ac:	b480      	push	{r7}
 80051ae:	b083      	sub	sp, #12
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	220a      	movs	r2, #10
 80051b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80051ba:	4b03      	ldr	r3, [pc, #12]	; (80051c8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80051bc:	4618      	mov	r0, r3
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr
 80051c8:	2000000c 	.word	0x2000000c

080051cc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80051dc:	2303      	movs	r3, #3
 80051de:	e004      	b.n	80051ea <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	370c      	adds	r7, #12
 80051ee:	46bd      	mov	sp, r7
 80051f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f4:	4770      	bx	lr

080051f6 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80051f6:	b480      	push	{r7}
 80051f8:	b087      	sub	sp, #28
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	60f8      	str	r0, [r7, #12]
 80051fe:	60b9      	str	r1, [r7, #8]
 8005200:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005208:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005210:	2303      	movs	r3, #3
 8005212:	e008      	b.n	8005226 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	68ba      	ldr	r2, [r7, #8]
 8005218:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	687a      	ldr	r2, [r7, #4]
 8005220:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	371c      	adds	r7, #28
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr

08005232 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005232:	b480      	push	{r7}
 8005234:	b085      	sub	sp, #20
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
 800523a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005242:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800524a:	2303      	movs	r3, #3
 800524c:	e004      	b.n	8005258 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	683a      	ldr	r2, [r7, #0]
 8005252:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005256:	2300      	movs	r3, #0
}
 8005258:	4618      	mov	r0, r3
 800525a:	3714      	adds	r7, #20
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005264:	b580      	push	{r7, lr}
 8005266:	b084      	sub	sp, #16
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005272:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005274:	2301      	movs	r3, #1
 8005276:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005282:	2303      	movs	r3, #3
 8005284:	e01a      	b.n	80052bc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800528c:	2b00      	cmp	r3, #0
 800528e:	d114      	bne.n	80052ba <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2201      	movs	r2, #1
 8005294:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80052a2:	68bb      	ldr	r3, [r7, #8]
 80052a4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80052ae:	2181      	movs	r1, #129	; 0x81
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f001 ff41 	bl	8007138 <USBD_LL_Transmit>

    ret = USBD_OK;
 80052b6:	2300      	movs	r3, #0
 80052b8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80052ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052d2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d101      	bne.n	80052e2 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80052de:	2303      	movs	r3, #3
 80052e0:	e016      	b.n	8005310 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	7c1b      	ldrb	r3, [r3, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d109      	bne.n	80052fe <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80052f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80052f4:	2101      	movs	r1, #1
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f001 ff56 	bl	80071a8 <USBD_LL_PrepareReceive>
 80052fc:	e007      	b.n	800530e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005304:	2340      	movs	r3, #64	; 0x40
 8005306:	2101      	movs	r1, #1
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f001 ff4d 	bl	80071a8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800530e:	2300      	movs	r3, #0
}
 8005310:	4618      	mov	r0, r3
 8005312:	3710      	adds	r7, #16
 8005314:	46bd      	mov	sp, r7
 8005316:	bd80      	pop	{r7, pc}

08005318 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b086      	sub	sp, #24
 800531c:	af00      	add	r7, sp, #0
 800531e:	60f8      	str	r0, [r7, #12]
 8005320:	60b9      	str	r1, [r7, #8]
 8005322:	4613      	mov	r3, r2
 8005324:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800532c:	2303      	movs	r3, #3
 800532e:	e01f      	b.n	8005370 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2200      	movs	r2, #0
 800533c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	2200      	movs	r2, #0
 8005344:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	68ba      	ldr	r2, [r7, #8]
 8005352:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2201      	movs	r2, #1
 800535a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	79fa      	ldrb	r2, [r7, #7]
 8005362:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005364:	68f8      	ldr	r0, [r7, #12]
 8005366:	f001 fd27 	bl	8006db8 <USBD_LL_Init>
 800536a:	4603      	mov	r3, r0
 800536c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800536e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005370:	4618      	mov	r0, r3
 8005372:	3718      	adds	r7, #24
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}

08005378 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b084      	sub	sp, #16
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
 8005380:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005382:	2300      	movs	r3, #0
 8005384:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d101      	bne.n	8005390 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 800538c:	2303      	movs	r3, #3
 800538e:	e016      	b.n	80053be <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	683a      	ldr	r2, [r7, #0]
 8005394:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800539e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00b      	beq.n	80053bc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80053aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053ac:	f107 020e 	add.w	r2, r7, #14
 80053b0:	4610      	mov	r0, r2
 80053b2:	4798      	blx	r3
 80053b4:	4602      	mov	r2, r0
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3710      	adds	r7, #16
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}

080053c6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b082      	sub	sp, #8
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f001 fd3e 	bl	8006e50 <USBD_LL_Start>
 80053d4:	4603      	mov	r3, r0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3708      	adds	r7, #8
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}

080053de <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80053de:	b480      	push	{r7}
 80053e0:	b083      	sub	sp, #12
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80053e6:	2300      	movs	r3, #0
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	370c      	adds	r7, #12
 80053ec:	46bd      	mov	sp, r7
 80053ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f2:	4770      	bx	lr

080053f4 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	460b      	mov	r3, r1
 80053fe:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005400:	2303      	movs	r3, #3
 8005402:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800540a:	2b00      	cmp	r3, #0
 800540c:	d009      	beq.n	8005422 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	78fa      	ldrb	r2, [r7, #3]
 8005418:	4611      	mov	r1, r2
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	4798      	blx	r3
 800541e:	4603      	mov	r3, r0
 8005420:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005422:	7bfb      	ldrb	r3, [r7, #15]
}
 8005424:	4618      	mov	r0, r3
 8005426:	3710      	adds	r7, #16
 8005428:	46bd      	mov	sp, r7
 800542a:	bd80      	pop	{r7, pc}

0800542c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b082      	sub	sp, #8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	460b      	mov	r3, r1
 8005436:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800543e:	2b00      	cmp	r3, #0
 8005440:	d007      	beq.n	8005452 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	78fa      	ldrb	r2, [r7, #3]
 800544c:	4611      	mov	r1, r2
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	4798      	blx	r3
  }

  return USBD_OK;
 8005452:	2300      	movs	r3, #0
}
 8005454:	4618      	mov	r0, r3
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800546c:	6839      	ldr	r1, [r7, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f000 ffba 	bl	80063e8 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005482:	461a      	mov	r2, r3
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005490:	f003 031f 	and.w	r3, r3, #31
 8005494:	2b02      	cmp	r3, #2
 8005496:	d01a      	beq.n	80054ce <USBD_LL_SetupStage+0x72>
 8005498:	2b02      	cmp	r3, #2
 800549a:	d822      	bhi.n	80054e2 <USBD_LL_SetupStage+0x86>
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <USBD_LL_SetupStage+0x4a>
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d00a      	beq.n	80054ba <USBD_LL_SetupStage+0x5e>
 80054a4:	e01d      	b.n	80054e2 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054ac:	4619      	mov	r1, r3
 80054ae:	6878      	ldr	r0, [r7, #4]
 80054b0:	f000 fa62 	bl	8005978 <USBD_StdDevReq>
 80054b4:	4603      	mov	r3, r0
 80054b6:	73fb      	strb	r3, [r7, #15]
      break;
 80054b8:	e020      	b.n	80054fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054c0:	4619      	mov	r1, r3
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 fac6 	bl	8005a54 <USBD_StdItfReq>
 80054c8:	4603      	mov	r3, r0
 80054ca:	73fb      	strb	r3, [r7, #15]
      break;
 80054cc:	e016      	b.n	80054fc <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f000 fb05 	bl	8005ae6 <USBD_StdEPReq>
 80054dc:	4603      	mov	r3, r0
 80054de:	73fb      	strb	r3, [r7, #15]
      break;
 80054e0:	e00c      	b.n	80054fc <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80054e8:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	4619      	mov	r1, r3
 80054f0:	6878      	ldr	r0, [r7, #4]
 80054f2:	f001 fd53 	bl	8006f9c <USBD_LL_StallEP>
 80054f6:	4603      	mov	r3, r0
 80054f8:	73fb      	strb	r3, [r7, #15]
      break;
 80054fa:	bf00      	nop
  }

  return ret;
 80054fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b086      	sub	sp, #24
 800550a:	af00      	add	r7, sp, #0
 800550c:	60f8      	str	r0, [r7, #12]
 800550e:	460b      	mov	r3, r1
 8005510:	607a      	str	r2, [r7, #4]
 8005512:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005514:	7afb      	ldrb	r3, [r7, #11]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d138      	bne.n	800558c <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005520:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005528:	2b03      	cmp	r3, #3
 800552a:	d14a      	bne.n	80055c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800552c:	693b      	ldr	r3, [r7, #16]
 800552e:	689a      	ldr	r2, [r3, #8]
 8005530:	693b      	ldr	r3, [r7, #16]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	429a      	cmp	r2, r3
 8005536:	d913      	bls.n	8005560 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	689a      	ldr	r2, [r3, #8]
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	1ad2      	subs	r2, r2, r3
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	68da      	ldr	r2, [r3, #12]
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	689b      	ldr	r3, [r3, #8]
 800554e:	4293      	cmp	r3, r2
 8005550:	bf28      	it	cs
 8005552:	4613      	movcs	r3, r2
 8005554:	461a      	mov	r2, r3
 8005556:	6879      	ldr	r1, [r7, #4]
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f001 f839 	bl	80065d0 <USBD_CtlContinueRx>
 800555e:	e030      	b.n	80055c2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005566:	b2db      	uxtb	r3, r3
 8005568:	2b03      	cmp	r3, #3
 800556a:	d10b      	bne.n	8005584 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005572:	691b      	ldr	r3, [r3, #16]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d005      	beq.n	8005584 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800557e:	691b      	ldr	r3, [r3, #16]
 8005580:	68f8      	ldr	r0, [r7, #12]
 8005582:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f001 f834 	bl	80065f2 <USBD_CtlSendStatus>
 800558a:	e01a      	b.n	80055c2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b03      	cmp	r3, #3
 8005596:	d114      	bne.n	80055c2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00e      	beq.n	80055c2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055aa:	699b      	ldr	r3, [r3, #24]
 80055ac:	7afa      	ldrb	r2, [r7, #11]
 80055ae:	4611      	mov	r1, r2
 80055b0:	68f8      	ldr	r0, [r7, #12]
 80055b2:	4798      	blx	r3
 80055b4:	4603      	mov	r3, r0
 80055b6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80055b8:	7dfb      	ldrb	r3, [r7, #23]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80055be:	7dfb      	ldrb	r3, [r7, #23]
 80055c0:	e000      	b.n	80055c4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80055c2:	2300      	movs	r3, #0
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	3718      	adds	r7, #24
 80055c8:	46bd      	mov	sp, r7
 80055ca:	bd80      	pop	{r7, pc}

080055cc <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b086      	sub	sp, #24
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	60f8      	str	r0, [r7, #12]
 80055d4:	460b      	mov	r3, r1
 80055d6:	607a      	str	r2, [r7, #4]
 80055d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80055da:	7afb      	ldrb	r3, [r7, #11]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d16b      	bne.n	80056b8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3314      	adds	r3, #20
 80055e4:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055ec:	2b02      	cmp	r3, #2
 80055ee:	d156      	bne.n	800569e <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80055f0:	693b      	ldr	r3, [r7, #16]
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d914      	bls.n	8005626 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80055fc:	693b      	ldr	r3, [r7, #16]
 80055fe:	689a      	ldr	r2, [r3, #8]
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	1ad2      	subs	r2, r2, r3
 8005606:	693b      	ldr	r3, [r7, #16]
 8005608:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800560a:	693b      	ldr	r3, [r7, #16]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	461a      	mov	r2, r3
 8005610:	6879      	ldr	r1, [r7, #4]
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f000 ffae 	bl	8006574 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005618:	2300      	movs	r3, #0
 800561a:	2200      	movs	r2, #0
 800561c:	2100      	movs	r1, #0
 800561e:	68f8      	ldr	r0, [r7, #12]
 8005620:	f001 fdc2 	bl	80071a8 <USBD_LL_PrepareReceive>
 8005624:	e03b      	b.n	800569e <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	68da      	ldr	r2, [r3, #12]
 800562a:	693b      	ldr	r3, [r7, #16]
 800562c:	689b      	ldr	r3, [r3, #8]
 800562e:	429a      	cmp	r2, r3
 8005630:	d11c      	bne.n	800566c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005632:	693b      	ldr	r3, [r7, #16]
 8005634:	685a      	ldr	r2, [r3, #4]
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800563a:	429a      	cmp	r2, r3
 800563c:	d316      	bcc.n	800566c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	685a      	ldr	r2, [r3, #4]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005648:	429a      	cmp	r2, r3
 800564a:	d20f      	bcs.n	800566c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800564c:	2200      	movs	r2, #0
 800564e:	2100      	movs	r1, #0
 8005650:	68f8      	ldr	r0, [r7, #12]
 8005652:	f000 ff8f 	bl	8006574 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	2200      	movs	r2, #0
 800565a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800565e:	2300      	movs	r3, #0
 8005660:	2200      	movs	r2, #0
 8005662:	2100      	movs	r1, #0
 8005664:	68f8      	ldr	r0, [r7, #12]
 8005666:	f001 fd9f 	bl	80071a8 <USBD_LL_PrepareReceive>
 800566a:	e018      	b.n	800569e <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005672:	b2db      	uxtb	r3, r3
 8005674:	2b03      	cmp	r3, #3
 8005676:	d10b      	bne.n	8005690 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800567e:	68db      	ldr	r3, [r3, #12]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d005      	beq.n	8005690 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005690:	2180      	movs	r1, #128	; 0x80
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f001 fc82 	bl	8006f9c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005698:	68f8      	ldr	r0, [r7, #12]
 800569a:	f000 ffbd 	bl	8006618 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d122      	bne.n	80056ee <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80056a8:	68f8      	ldr	r0, [r7, #12]
 80056aa:	f7ff fe98 	bl	80053de <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80056b6:	e01a      	b.n	80056ee <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056be:	b2db      	uxtb	r3, r3
 80056c0:	2b03      	cmp	r3, #3
 80056c2:	d114      	bne.n	80056ee <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ca:	695b      	ldr	r3, [r3, #20]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00e      	beq.n	80056ee <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d6:	695b      	ldr	r3, [r3, #20]
 80056d8:	7afa      	ldrb	r2, [r7, #11]
 80056da:	4611      	mov	r1, r2
 80056dc:	68f8      	ldr	r0, [r7, #12]
 80056de:	4798      	blx	r3
 80056e0:	4603      	mov	r3, r0
 80056e2:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80056e4:	7dfb      	ldrb	r3, [r7, #23]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d001      	beq.n	80056ee <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80056ea:	7dfb      	ldrb	r3, [r7, #23]
 80056ec:	e000      	b.n	80056f0 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80056ee:	2300      	movs	r3, #0
}
 80056f0:	4618      	mov	r0, r3
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2201      	movs	r2, #1
 8005704:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005724:	2b00      	cmp	r3, #0
 8005726:	d101      	bne.n	800572c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005728:	2303      	movs	r3, #3
 800572a:	e02f      	b.n	800578c <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005732:	2b00      	cmp	r3, #0
 8005734:	d00f      	beq.n	8005756 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d009      	beq.n	8005756 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005748:	685b      	ldr	r3, [r3, #4]
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	6852      	ldr	r2, [r2, #4]
 800574e:	b2d2      	uxtb	r2, r2
 8005750:	4611      	mov	r1, r2
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005756:	2340      	movs	r3, #64	; 0x40
 8005758:	2200      	movs	r2, #0
 800575a:	2100      	movs	r1, #0
 800575c:	6878      	ldr	r0, [r7, #4]
 800575e:	f001 fba9 	bl	8006eb4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2201      	movs	r2, #1
 8005766:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2240      	movs	r2, #64	; 0x40
 800576e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005772:	2340      	movs	r3, #64	; 0x40
 8005774:	2200      	movs	r2, #0
 8005776:	2180      	movs	r1, #128	; 0x80
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f001 fb9b 	bl	8006eb4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2201      	movs	r2, #1
 8005782:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2240      	movs	r2, #64	; 0x40
 8005788:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005794:	b480      	push	{r7}
 8005796:	b083      	sub	sp, #12
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	460b      	mov	r3, r1
 800579e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	78fa      	ldrb	r2, [r7, #3]
 80057a4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80057a6:	2300      	movs	r3, #0
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	370c      	adds	r7, #12
 80057ac:	46bd      	mov	sp, r7
 80057ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b2:	4770      	bx	lr

080057b4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b083      	sub	sp, #12
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c2:	b2da      	uxtb	r2, r3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2204      	movs	r2, #4
 80057ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	2b04      	cmp	r3, #4
 80057f2:	d106      	bne.n	8005802 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80057fa:	b2da      	uxtb	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	370c      	adds	r7, #12
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800581e:	2b00      	cmp	r3, #0
 8005820:	d101      	bne.n	8005826 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005822:	2303      	movs	r3, #3
 8005824:	e012      	b.n	800584c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800582c:	b2db      	uxtb	r3, r3
 800582e:	2b03      	cmp	r3, #3
 8005830:	d10b      	bne.n	800584a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d005      	beq.n	800584a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005844:	69db      	ldr	r3, [r3, #28]
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800584a:	2300      	movs	r3, #0
}
 800584c:	4618      	mov	r0, r3
 800584e:	3708      	adds	r7, #8
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	460b      	mov	r3, r1
 800585e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d101      	bne.n	800586e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 800586a:	2303      	movs	r3, #3
 800586c:	e014      	b.n	8005898 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005874:	b2db      	uxtb	r3, r3
 8005876:	2b03      	cmp	r3, #3
 8005878:	d10d      	bne.n	8005896 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d007      	beq.n	8005896 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800588c:	6a1b      	ldr	r3, [r3, #32]
 800588e:	78fa      	ldrb	r2, [r7, #3]
 8005890:	4611      	mov	r1, r2
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3708      	adds	r7, #8
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b082      	sub	sp, #8
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	460b      	mov	r3, r1
 80058aa:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d101      	bne.n	80058ba <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e014      	b.n	80058e4 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b03      	cmp	r3, #3
 80058c4:	d10d      	bne.n	80058e2 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d007      	beq.n	80058e2 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	78fa      	ldrb	r2, [r7, #3]
 80058dc:	4611      	mov	r1, r2
 80058de:	6878      	ldr	r0, [r7, #4]
 80058e0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3708      	adds	r7, #8
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80058ec:	b480      	push	{r7}
 80058ee:	b083      	sub	sp, #12
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	370c      	adds	r7, #12
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr

08005902 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b082      	sub	sp, #8
 8005906:	af00      	add	r7, sp, #0
 8005908:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2201      	movs	r2, #1
 800590e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005918:	2b00      	cmp	r3, #0
 800591a:	d009      	beq.n	8005930 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	687a      	ldr	r2, [r7, #4]
 8005926:	6852      	ldr	r2, [r2, #4]
 8005928:	b2d2      	uxtb	r2, r2
 800592a:	4611      	mov	r1, r2
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	4798      	blx	r3
  }

  return USBD_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800593a:	b480      	push	{r7}
 800593c:	b087      	sub	sp, #28
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	3301      	adds	r3, #1
 8005950:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	781b      	ldrb	r3, [r3, #0]
 8005956:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005958:	8a3b      	ldrh	r3, [r7, #16]
 800595a:	021b      	lsls	r3, r3, #8
 800595c:	b21a      	sxth	r2, r3
 800595e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005962:	4313      	orrs	r3, r2
 8005964:	b21b      	sxth	r3, r3
 8005966:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005968:	89fb      	ldrh	r3, [r7, #14]
}
 800596a:	4618      	mov	r0, r3
 800596c:	371c      	adds	r7, #28
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr
	...

08005978 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b084      	sub	sp, #16
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800598e:	2b40      	cmp	r3, #64	; 0x40
 8005990:	d005      	beq.n	800599e <USBD_StdDevReq+0x26>
 8005992:	2b40      	cmp	r3, #64	; 0x40
 8005994:	d853      	bhi.n	8005a3e <USBD_StdDevReq+0xc6>
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00b      	beq.n	80059b2 <USBD_StdDevReq+0x3a>
 800599a:	2b20      	cmp	r3, #32
 800599c:	d14f      	bne.n	8005a3e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	6839      	ldr	r1, [r7, #0]
 80059a8:	6878      	ldr	r0, [r7, #4]
 80059aa:	4798      	blx	r3
 80059ac:	4603      	mov	r3, r0
 80059ae:	73fb      	strb	r3, [r7, #15]
      break;
 80059b0:	e04a      	b.n	8005a48 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	2b09      	cmp	r3, #9
 80059b8:	d83b      	bhi.n	8005a32 <USBD_StdDevReq+0xba>
 80059ba:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <USBD_StdDevReq+0x48>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	08005a15 	.word	0x08005a15
 80059c4:	08005a29 	.word	0x08005a29
 80059c8:	08005a33 	.word	0x08005a33
 80059cc:	08005a1f 	.word	0x08005a1f
 80059d0:	08005a33 	.word	0x08005a33
 80059d4:	080059f3 	.word	0x080059f3
 80059d8:	080059e9 	.word	0x080059e9
 80059dc:	08005a33 	.word	0x08005a33
 80059e0:	08005a0b 	.word	0x08005a0b
 80059e4:	080059fd 	.word	0x080059fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f9de 	bl	8005dac <USBD_GetDescriptor>
          break;
 80059f0:	e024      	b.n	8005a3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80059f2:	6839      	ldr	r1, [r7, #0]
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fb6d 	bl	80060d4 <USBD_SetAddress>
          break;
 80059fa:	e01f      	b.n	8005a3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80059fc:	6839      	ldr	r1, [r7, #0]
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fbac 	bl	800615c <USBD_SetConfig>
 8005a04:	4603      	mov	r3, r0
 8005a06:	73fb      	strb	r3, [r7, #15]
          break;
 8005a08:	e018      	b.n	8005a3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fc4b 	bl	80062a8 <USBD_GetConfig>
          break;
 8005a12:	e013      	b.n	8005a3c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005a14:	6839      	ldr	r1, [r7, #0]
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f000 fc7c 	bl	8006314 <USBD_GetStatus>
          break;
 8005a1c:	e00e      	b.n	8005a3c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005a1e:	6839      	ldr	r1, [r7, #0]
 8005a20:	6878      	ldr	r0, [r7, #4]
 8005a22:	f000 fcab 	bl	800637c <USBD_SetFeature>
          break;
 8005a26:	e009      	b.n	8005a3c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fcba 	bl	80063a4 <USBD_ClrFeature>
          break;
 8005a30:	e004      	b.n	8005a3c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005a32:	6839      	ldr	r1, [r7, #0]
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 fd11 	bl	800645c <USBD_CtlError>
          break;
 8005a3a:	bf00      	nop
      }
      break;
 8005a3c:	e004      	b.n	8005a48 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005a3e:	6839      	ldr	r1, [r7, #0]
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 fd0b 	bl	800645c <USBD_CtlError>
      break;
 8005a46:	bf00      	nop
  }

  return ret;
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3710      	adds	r7, #16
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd80      	pop	{r7, pc}
 8005a52:	bf00      	nop

08005a54 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a5e:	2300      	movs	r3, #0
 8005a60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	781b      	ldrb	r3, [r3, #0]
 8005a66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a6a:	2b40      	cmp	r3, #64	; 0x40
 8005a6c:	d005      	beq.n	8005a7a <USBD_StdItfReq+0x26>
 8005a6e:	2b40      	cmp	r3, #64	; 0x40
 8005a70:	d82f      	bhi.n	8005ad2 <USBD_StdItfReq+0x7e>
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d001      	beq.n	8005a7a <USBD_StdItfReq+0x26>
 8005a76:	2b20      	cmp	r3, #32
 8005a78:	d12b      	bne.n	8005ad2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	3b01      	subs	r3, #1
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d81d      	bhi.n	8005ac4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	889b      	ldrh	r3, [r3, #4]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d813      	bhi.n	8005aba <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a98:	689b      	ldr	r3, [r3, #8]
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	6878      	ldr	r0, [r7, #4]
 8005a9e:	4798      	blx	r3
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	88db      	ldrh	r3, [r3, #6]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d110      	bne.n	8005ace <USBD_StdItfReq+0x7a>
 8005aac:	7bfb      	ldrb	r3, [r7, #15]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10d      	bne.n	8005ace <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005ab2:	6878      	ldr	r0, [r7, #4]
 8005ab4:	f000 fd9d 	bl	80065f2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005ab8:	e009      	b.n	8005ace <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005aba:	6839      	ldr	r1, [r7, #0]
 8005abc:	6878      	ldr	r0, [r7, #4]
 8005abe:	f000 fccd 	bl	800645c <USBD_CtlError>
          break;
 8005ac2:	e004      	b.n	8005ace <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 fcc8 	bl	800645c <USBD_CtlError>
          break;
 8005acc:	e000      	b.n	8005ad0 <USBD_StdItfReq+0x7c>
          break;
 8005ace:	bf00      	nop
      }
      break;
 8005ad0:	e004      	b.n	8005adc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005ad2:	6839      	ldr	r1, [r7, #0]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fcc1 	bl	800645c <USBD_CtlError>
      break;
 8005ada:	bf00      	nop
  }

  return ret;
 8005adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ade:	4618      	mov	r0, r3
 8005ae0:	3710      	adds	r7, #16
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bd80      	pop	{r7, pc}

08005ae6 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ae6:	b580      	push	{r7, lr}
 8005ae8:	b084      	sub	sp, #16
 8005aea:	af00      	add	r7, sp, #0
 8005aec:	6078      	str	r0, [r7, #4]
 8005aee:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005af0:	2300      	movs	r3, #0
 8005af2:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	889b      	ldrh	r3, [r3, #4]
 8005af8:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b02:	2b40      	cmp	r3, #64	; 0x40
 8005b04:	d007      	beq.n	8005b16 <USBD_StdEPReq+0x30>
 8005b06:	2b40      	cmp	r3, #64	; 0x40
 8005b08:	f200 8145 	bhi.w	8005d96 <USBD_StdEPReq+0x2b0>
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00c      	beq.n	8005b2a <USBD_StdEPReq+0x44>
 8005b10:	2b20      	cmp	r3, #32
 8005b12:	f040 8140 	bne.w	8005d96 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	6839      	ldr	r1, [r7, #0]
 8005b20:	6878      	ldr	r0, [r7, #4]
 8005b22:	4798      	blx	r3
 8005b24:	4603      	mov	r3, r0
 8005b26:	73fb      	strb	r3, [r7, #15]
      break;
 8005b28:	e13a      	b.n	8005da0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	785b      	ldrb	r3, [r3, #1]
 8005b2e:	2b03      	cmp	r3, #3
 8005b30:	d007      	beq.n	8005b42 <USBD_StdEPReq+0x5c>
 8005b32:	2b03      	cmp	r3, #3
 8005b34:	f300 8129 	bgt.w	8005d8a <USBD_StdEPReq+0x2a4>
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d07f      	beq.n	8005c3c <USBD_StdEPReq+0x156>
 8005b3c:	2b01      	cmp	r3, #1
 8005b3e:	d03c      	beq.n	8005bba <USBD_StdEPReq+0xd4>
 8005b40:	e123      	b.n	8005d8a <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b48:	b2db      	uxtb	r3, r3
 8005b4a:	2b02      	cmp	r3, #2
 8005b4c:	d002      	beq.n	8005b54 <USBD_StdEPReq+0x6e>
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d016      	beq.n	8005b80 <USBD_StdEPReq+0x9a>
 8005b52:	e02c      	b.n	8005bae <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b54:	7bbb      	ldrb	r3, [r7, #14]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00d      	beq.n	8005b76 <USBD_StdEPReq+0x90>
 8005b5a:	7bbb      	ldrb	r3, [r7, #14]
 8005b5c:	2b80      	cmp	r3, #128	; 0x80
 8005b5e:	d00a      	beq.n	8005b76 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b60:	7bbb      	ldrb	r3, [r7, #14]
 8005b62:	4619      	mov	r1, r3
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f001 fa19 	bl	8006f9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005b6a:	2180      	movs	r1, #128	; 0x80
 8005b6c:	6878      	ldr	r0, [r7, #4]
 8005b6e:	f001 fa15 	bl	8006f9c <USBD_LL_StallEP>
 8005b72:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005b74:	e020      	b.n	8005bb8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fc6f 	bl	800645c <USBD_CtlError>
              break;
 8005b7e:	e01b      	b.n	8005bb8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	885b      	ldrh	r3, [r3, #2]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d10e      	bne.n	8005ba6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b88:	7bbb      	ldrb	r3, [r7, #14]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d00b      	beq.n	8005ba6 <USBD_StdEPReq+0xc0>
 8005b8e:	7bbb      	ldrb	r3, [r7, #14]
 8005b90:	2b80      	cmp	r3, #128	; 0x80
 8005b92:	d008      	beq.n	8005ba6 <USBD_StdEPReq+0xc0>
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	88db      	ldrh	r3, [r3, #6]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d104      	bne.n	8005ba6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005b9c:	7bbb      	ldrb	r3, [r7, #14]
 8005b9e:	4619      	mov	r1, r3
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f001 f9fb 	bl	8006f9c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f000 fd23 	bl	80065f2 <USBD_CtlSendStatus>

              break;
 8005bac:	e004      	b.n	8005bb8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005bae:	6839      	ldr	r1, [r7, #0]
 8005bb0:	6878      	ldr	r0, [r7, #4]
 8005bb2:	f000 fc53 	bl	800645c <USBD_CtlError>
              break;
 8005bb6:	bf00      	nop
          }
          break;
 8005bb8:	e0ec      	b.n	8005d94 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b02      	cmp	r3, #2
 8005bc4:	d002      	beq.n	8005bcc <USBD_StdEPReq+0xe6>
 8005bc6:	2b03      	cmp	r3, #3
 8005bc8:	d016      	beq.n	8005bf8 <USBD_StdEPReq+0x112>
 8005bca:	e030      	b.n	8005c2e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005bcc:	7bbb      	ldrb	r3, [r7, #14]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d00d      	beq.n	8005bee <USBD_StdEPReq+0x108>
 8005bd2:	7bbb      	ldrb	r3, [r7, #14]
 8005bd4:	2b80      	cmp	r3, #128	; 0x80
 8005bd6:	d00a      	beq.n	8005bee <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bd8:	7bbb      	ldrb	r3, [r7, #14]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f001 f9dd 	bl	8006f9c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005be2:	2180      	movs	r1, #128	; 0x80
 8005be4:	6878      	ldr	r0, [r7, #4]
 8005be6:	f001 f9d9 	bl	8006f9c <USBD_LL_StallEP>
 8005bea:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bec:	e025      	b.n	8005c3a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005bee:	6839      	ldr	r1, [r7, #0]
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f000 fc33 	bl	800645c <USBD_CtlError>
              break;
 8005bf6:	e020      	b.n	8005c3a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	885b      	ldrh	r3, [r3, #2]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d11b      	bne.n	8005c38 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d004      	beq.n	8005c14 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c0a:	7bbb      	ldrb	r3, [r7, #14]
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 f9fa 	bl	8007008 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f000 fcec 	bl	80065f2 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	6839      	ldr	r1, [r7, #0]
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	4798      	blx	r3
 8005c28:	4603      	mov	r3, r0
 8005c2a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005c2c:	e004      	b.n	8005c38 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005c2e:	6839      	ldr	r1, [r7, #0]
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f000 fc13 	bl	800645c <USBD_CtlError>
              break;
 8005c36:	e000      	b.n	8005c3a <USBD_StdEPReq+0x154>
              break;
 8005c38:	bf00      	nop
          }
          break;
 8005c3a:	e0ab      	b.n	8005d94 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c42:	b2db      	uxtb	r3, r3
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d002      	beq.n	8005c4e <USBD_StdEPReq+0x168>
 8005c48:	2b03      	cmp	r3, #3
 8005c4a:	d032      	beq.n	8005cb2 <USBD_StdEPReq+0x1cc>
 8005c4c:	e097      	b.n	8005d7e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c4e:	7bbb      	ldrb	r3, [r7, #14]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d007      	beq.n	8005c64 <USBD_StdEPReq+0x17e>
 8005c54:	7bbb      	ldrb	r3, [r7, #14]
 8005c56:	2b80      	cmp	r3, #128	; 0x80
 8005c58:	d004      	beq.n	8005c64 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fbfd 	bl	800645c <USBD_CtlError>
                break;
 8005c62:	e091      	b.n	8005d88 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	da0b      	bge.n	8005c84 <USBD_StdEPReq+0x19e>
 8005c6c:	7bbb      	ldrb	r3, [r7, #14]
 8005c6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005c72:	4613      	mov	r3, r2
 8005c74:	009b      	lsls	r3, r3, #2
 8005c76:	4413      	add	r3, r2
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	3310      	adds	r3, #16
 8005c7c:	687a      	ldr	r2, [r7, #4]
 8005c7e:	4413      	add	r3, r2
 8005c80:	3304      	adds	r3, #4
 8005c82:	e00b      	b.n	8005c9c <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c84:	7bbb      	ldrb	r3, [r7, #14]
 8005c86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	009b      	lsls	r3, r3, #2
 8005c8e:	4413      	add	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4413      	add	r3, r2
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ca4:	68bb      	ldr	r3, [r7, #8]
 8005ca6:	2202      	movs	r2, #2
 8005ca8:	4619      	mov	r1, r3
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fc47 	bl	800653e <USBD_CtlSendData>
              break;
 8005cb0:	e06a      	b.n	8005d88 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005cb2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	da11      	bge.n	8005cde <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005cba:	7bbb      	ldrb	r3, [r7, #14]
 8005cbc:	f003 020f 	and.w	r2, r3, #15
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	4613      	mov	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	009b      	lsls	r3, r3, #2
 8005cca:	440b      	add	r3, r1
 8005ccc:	3324      	adds	r3, #36	; 0x24
 8005cce:	881b      	ldrh	r3, [r3, #0]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d117      	bne.n	8005d04 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005cd4:	6839      	ldr	r1, [r7, #0]
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f000 fbc0 	bl	800645c <USBD_CtlError>
                  break;
 8005cdc:	e054      	b.n	8005d88 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005cde:	7bbb      	ldrb	r3, [r7, #14]
 8005ce0:	f003 020f 	and.w	r2, r3, #15
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005cf4:	881b      	ldrh	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d104      	bne.n	8005d04 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 fbad 	bl	800645c <USBD_CtlError>
                  break;
 8005d02:	e041      	b.n	8005d88 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	da0b      	bge.n	8005d24 <USBD_StdEPReq+0x23e>
 8005d0c:	7bbb      	ldrb	r3, [r7, #14]
 8005d0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d12:	4613      	mov	r3, r2
 8005d14:	009b      	lsls	r3, r3, #2
 8005d16:	4413      	add	r3, r2
 8005d18:	009b      	lsls	r3, r3, #2
 8005d1a:	3310      	adds	r3, #16
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	4413      	add	r3, r2
 8005d20:	3304      	adds	r3, #4
 8005d22:	e00b      	b.n	8005d3c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d24:	7bbb      	ldrb	r3, [r7, #14]
 8005d26:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	4413      	add	r3, r2
 8005d3a:	3304      	adds	r3, #4
 8005d3c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005d3e:	7bbb      	ldrb	r3, [r7, #14]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <USBD_StdEPReq+0x264>
 8005d44:	7bbb      	ldrb	r3, [r7, #14]
 8005d46:	2b80      	cmp	r3, #128	; 0x80
 8005d48:	d103      	bne.n	8005d52 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005d4a:	68bb      	ldr	r3, [r7, #8]
 8005d4c:	2200      	movs	r2, #0
 8005d4e:	601a      	str	r2, [r3, #0]
 8005d50:	e00e      	b.n	8005d70 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005d52:	7bbb      	ldrb	r3, [r7, #14]
 8005d54:	4619      	mov	r1, r3
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f001 f98c 	bl	8007074 <USBD_LL_IsStallEP>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d003      	beq.n	8005d6a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005d62:	68bb      	ldr	r3, [r7, #8]
 8005d64:	2201      	movs	r2, #1
 8005d66:	601a      	str	r2, [r3, #0]
 8005d68:	e002      	b.n	8005d70 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005d6a:	68bb      	ldr	r3, [r7, #8]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	2202      	movs	r2, #2
 8005d74:	4619      	mov	r1, r3
 8005d76:	6878      	ldr	r0, [r7, #4]
 8005d78:	f000 fbe1 	bl	800653e <USBD_CtlSendData>
              break;
 8005d7c:	e004      	b.n	8005d88 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005d7e:	6839      	ldr	r1, [r7, #0]
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f000 fb6b 	bl	800645c <USBD_CtlError>
              break;
 8005d86:	bf00      	nop
          }
          break;
 8005d88:	e004      	b.n	8005d94 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 fb65 	bl	800645c <USBD_CtlError>
          break;
 8005d92:	bf00      	nop
      }
      break;
 8005d94:	e004      	b.n	8005da0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005d96:	6839      	ldr	r1, [r7, #0]
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fb5f 	bl	800645c <USBD_CtlError>
      break;
 8005d9e:	bf00      	nop
  }

  return ret;
 8005da0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b084      	sub	sp, #16
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	885b      	ldrh	r3, [r3, #2]
 8005dc6:	0a1b      	lsrs	r3, r3, #8
 8005dc8:	b29b      	uxth	r3, r3
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	2b0e      	cmp	r3, #14
 8005dce:	f200 8152 	bhi.w	8006076 <USBD_GetDescriptor+0x2ca>
 8005dd2:	a201      	add	r2, pc, #4	; (adr r2, 8005dd8 <USBD_GetDescriptor+0x2c>)
 8005dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dd8:	08005e49 	.word	0x08005e49
 8005ddc:	08005e61 	.word	0x08005e61
 8005de0:	08005ea1 	.word	0x08005ea1
 8005de4:	08006077 	.word	0x08006077
 8005de8:	08006077 	.word	0x08006077
 8005dec:	08006017 	.word	0x08006017
 8005df0:	08006043 	.word	0x08006043
 8005df4:	08006077 	.word	0x08006077
 8005df8:	08006077 	.word	0x08006077
 8005dfc:	08006077 	.word	0x08006077
 8005e00:	08006077 	.word	0x08006077
 8005e04:	08006077 	.word	0x08006077
 8005e08:	08006077 	.word	0x08006077
 8005e0c:	08006077 	.word	0x08006077
 8005e10:	08005e15 	.word	0x08005e15
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e1a:	69db      	ldr	r3, [r3, #28]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d00b      	beq.n	8005e38 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e26:	69db      	ldr	r3, [r3, #28]
 8005e28:	687a      	ldr	r2, [r7, #4]
 8005e2a:	7c12      	ldrb	r2, [r2, #16]
 8005e2c:	f107 0108 	add.w	r1, r7, #8
 8005e30:	4610      	mov	r0, r2
 8005e32:	4798      	blx	r3
 8005e34:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005e36:	e126      	b.n	8006086 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005e38:	6839      	ldr	r1, [r7, #0]
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fb0e 	bl	800645c <USBD_CtlError>
        err++;
 8005e40:	7afb      	ldrb	r3, [r7, #11]
 8005e42:	3301      	adds	r3, #1
 8005e44:	72fb      	strb	r3, [r7, #11]
      break;
 8005e46:	e11e      	b.n	8006086 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	7c12      	ldrb	r2, [r2, #16]
 8005e54:	f107 0108 	add.w	r1, r7, #8
 8005e58:	4610      	mov	r0, r2
 8005e5a:	4798      	blx	r3
 8005e5c:	60f8      	str	r0, [r7, #12]
      break;
 8005e5e:	e112      	b.n	8006086 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	7c1b      	ldrb	r3, [r3, #16]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d10d      	bne.n	8005e84 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e70:	f107 0208 	add.w	r2, r7, #8
 8005e74:	4610      	mov	r0, r2
 8005e76:	4798      	blx	r3
 8005e78:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	2202      	movs	r2, #2
 8005e80:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005e82:	e100      	b.n	8006086 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e8c:	f107 0208 	add.w	r2, r7, #8
 8005e90:	4610      	mov	r0, r2
 8005e92:	4798      	blx	r3
 8005e94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	2202      	movs	r2, #2
 8005e9c:	701a      	strb	r2, [r3, #0]
      break;
 8005e9e:	e0f2      	b.n	8006086 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	885b      	ldrh	r3, [r3, #2]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	2b05      	cmp	r3, #5
 8005ea8:	f200 80ac 	bhi.w	8006004 <USBD_GetDescriptor+0x258>
 8005eac:	a201      	add	r2, pc, #4	; (adr r2, 8005eb4 <USBD_GetDescriptor+0x108>)
 8005eae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005eb2:	bf00      	nop
 8005eb4:	08005ecd 	.word	0x08005ecd
 8005eb8:	08005f01 	.word	0x08005f01
 8005ebc:	08005f35 	.word	0x08005f35
 8005ec0:	08005f69 	.word	0x08005f69
 8005ec4:	08005f9d 	.word	0x08005f9d
 8005ec8:	08005fd1 	.word	0x08005fd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d00b      	beq.n	8005ef0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	7c12      	ldrb	r2, [r2, #16]
 8005ee4:	f107 0108 	add.w	r1, r7, #8
 8005ee8:	4610      	mov	r0, r2
 8005eea:	4798      	blx	r3
 8005eec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005eee:	e091      	b.n	8006014 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005ef0:	6839      	ldr	r1, [r7, #0]
 8005ef2:	6878      	ldr	r0, [r7, #4]
 8005ef4:	f000 fab2 	bl	800645c <USBD_CtlError>
            err++;
 8005ef8:	7afb      	ldrb	r3, [r7, #11]
 8005efa:	3301      	adds	r3, #1
 8005efc:	72fb      	strb	r3, [r7, #11]
          break;
 8005efe:	e089      	b.n	8006014 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00b      	beq.n	8005f24 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	7c12      	ldrb	r2, [r2, #16]
 8005f18:	f107 0108 	add.w	r1, r7, #8
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	4798      	blx	r3
 8005f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f22:	e077      	b.n	8006014 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 fa98 	bl	800645c <USBD_CtlError>
            err++;
 8005f2c:	7afb      	ldrb	r3, [r7, #11]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	72fb      	strb	r3, [r7, #11]
          break;
 8005f32:	e06f      	b.n	8006014 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f3a:	68db      	ldr	r3, [r3, #12]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00b      	beq.n	8005f58 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	7c12      	ldrb	r2, [r2, #16]
 8005f4c:	f107 0108 	add.w	r1, r7, #8
 8005f50:	4610      	mov	r0, r2
 8005f52:	4798      	blx	r3
 8005f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f56:	e05d      	b.n	8006014 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fa7e 	bl	800645c <USBD_CtlError>
            err++;
 8005f60:	7afb      	ldrb	r3, [r7, #11]
 8005f62:	3301      	adds	r3, #1
 8005f64:	72fb      	strb	r3, [r7, #11]
          break;
 8005f66:	e055      	b.n	8006014 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f6e:	691b      	ldr	r3, [r3, #16]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00b      	beq.n	8005f8c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f7a:	691b      	ldr	r3, [r3, #16]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	7c12      	ldrb	r2, [r2, #16]
 8005f80:	f107 0108 	add.w	r1, r7, #8
 8005f84:	4610      	mov	r0, r2
 8005f86:	4798      	blx	r3
 8005f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f8a:	e043      	b.n	8006014 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fa64 	bl	800645c <USBD_CtlError>
            err++;
 8005f94:	7afb      	ldrb	r3, [r7, #11]
 8005f96:	3301      	adds	r3, #1
 8005f98:	72fb      	strb	r3, [r7, #11]
          break;
 8005f9a:	e03b      	b.n	8006014 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fa2:	695b      	ldr	r3, [r3, #20]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fae:	695b      	ldr	r3, [r3, #20]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	7c12      	ldrb	r2, [r2, #16]
 8005fb4:	f107 0108 	add.w	r1, r7, #8
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4798      	blx	r3
 8005fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fbe:	e029      	b.n	8006014 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fa4a 	bl	800645c <USBD_CtlError>
            err++;
 8005fc8:	7afb      	ldrb	r3, [r7, #11]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8005fce:	e021      	b.n	8006014 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe2:	699b      	ldr	r3, [r3, #24]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	7c12      	ldrb	r2, [r2, #16]
 8005fe8:	f107 0108 	add.w	r1, r7, #8
 8005fec:	4610      	mov	r0, r2
 8005fee:	4798      	blx	r3
 8005ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ff2:	e00f      	b.n	8006014 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa30 	bl	800645c <USBD_CtlError>
            err++;
 8005ffc:	7afb      	ldrb	r3, [r7, #11]
 8005ffe:	3301      	adds	r3, #1
 8006000:	72fb      	strb	r3, [r7, #11]
          break;
 8006002:	e007      	b.n	8006014 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006004:	6839      	ldr	r1, [r7, #0]
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa28 	bl	800645c <USBD_CtlError>
          err++;
 800600c:	7afb      	ldrb	r3, [r7, #11]
 800600e:	3301      	adds	r3, #1
 8006010:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006012:	bf00      	nop
      }
      break;
 8006014:	e037      	b.n	8006086 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	7c1b      	ldrb	r3, [r3, #16]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d109      	bne.n	8006032 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006026:	f107 0208 	add.w	r2, r7, #8
 800602a:	4610      	mov	r0, r2
 800602c:	4798      	blx	r3
 800602e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006030:	e029      	b.n	8006086 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006032:	6839      	ldr	r1, [r7, #0]
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f000 fa11 	bl	800645c <USBD_CtlError>
        err++;
 800603a:	7afb      	ldrb	r3, [r7, #11]
 800603c:	3301      	adds	r3, #1
 800603e:	72fb      	strb	r3, [r7, #11]
      break;
 8006040:	e021      	b.n	8006086 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	7c1b      	ldrb	r3, [r3, #16]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d10d      	bne.n	8006066 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006052:	f107 0208 	add.w	r2, r7, #8
 8006056:	4610      	mov	r0, r2
 8006058:	4798      	blx	r3
 800605a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	3301      	adds	r3, #1
 8006060:	2207      	movs	r2, #7
 8006062:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006064:	e00f      	b.n	8006086 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f9f7 	bl	800645c <USBD_CtlError>
        err++;
 800606e:	7afb      	ldrb	r3, [r7, #11]
 8006070:	3301      	adds	r3, #1
 8006072:	72fb      	strb	r3, [r7, #11]
      break;
 8006074:	e007      	b.n	8006086 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006076:	6839      	ldr	r1, [r7, #0]
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f9ef 	bl	800645c <USBD_CtlError>
      err++;
 800607e:	7afb      	ldrb	r3, [r7, #11]
 8006080:	3301      	adds	r3, #1
 8006082:	72fb      	strb	r3, [r7, #11]
      break;
 8006084:	bf00      	nop
  }

  if (err != 0U)
 8006086:	7afb      	ldrb	r3, [r7, #11]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d11e      	bne.n	80060ca <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	88db      	ldrh	r3, [r3, #6]
 8006090:	2b00      	cmp	r3, #0
 8006092:	d016      	beq.n	80060c2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8006094:	893b      	ldrh	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00e      	beq.n	80060b8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	88da      	ldrh	r2, [r3, #6]
 800609e:	893b      	ldrh	r3, [r7, #8]
 80060a0:	4293      	cmp	r3, r2
 80060a2:	bf28      	it	cs
 80060a4:	4613      	movcs	r3, r2
 80060a6:	b29b      	uxth	r3, r3
 80060a8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80060aa:	893b      	ldrh	r3, [r7, #8]
 80060ac:	461a      	mov	r2, r3
 80060ae:	68f9      	ldr	r1, [r7, #12]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fa44 	bl	800653e <USBD_CtlSendData>
 80060b6:	e009      	b.n	80060cc <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 f9ce 	bl	800645c <USBD_CtlError>
 80060c0:	e004      	b.n	80060cc <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	f000 fa95 	bl	80065f2 <USBD_CtlSendStatus>
 80060c8:	e000      	b.n	80060cc <USBD_GetDescriptor+0x320>
    return;
 80060ca:	bf00      	nop
  }
}
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop

080060d4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b084      	sub	sp, #16
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
 80060dc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	889b      	ldrh	r3, [r3, #4]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d131      	bne.n	800614a <USBD_SetAddress+0x76>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	88db      	ldrh	r3, [r3, #6]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d12d      	bne.n	800614a <USBD_SetAddress+0x76>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	885b      	ldrh	r3, [r3, #2]
 80060f2:	2b7f      	cmp	r3, #127	; 0x7f
 80060f4:	d829      	bhi.n	800614a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	885b      	ldrh	r3, [r3, #2]
 80060fa:	b2db      	uxtb	r3, r3
 80060fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006100:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b03      	cmp	r3, #3
 800610c:	d104      	bne.n	8006118 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800610e:	6839      	ldr	r1, [r7, #0]
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 f9a3 	bl	800645c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006116:	e01d      	b.n	8006154 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	7bfa      	ldrb	r2, [r7, #15]
 800611c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006120:	7bfb      	ldrb	r3, [r7, #15]
 8006122:	4619      	mov	r1, r3
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 ffd1 	bl	80070cc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 fa61 	bl	80065f2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006130:	7bfb      	ldrb	r3, [r7, #15]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d004      	beq.n	8006140 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2202      	movs	r2, #2
 800613a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800613e:	e009      	b.n	8006154 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2201      	movs	r2, #1
 8006144:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006148:	e004      	b.n	8006154 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	6878      	ldr	r0, [r7, #4]
 800614e:	f000 f985 	bl	800645c <USBD_CtlError>
  }
}
 8006152:	bf00      	nop
 8006154:	bf00      	nop
 8006156:	3710      	adds	r7, #16
 8006158:	46bd      	mov	sp, r7
 800615a:	bd80      	pop	{r7, pc}

0800615c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
 8006164:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006166:	2300      	movs	r3, #0
 8006168:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	885b      	ldrh	r3, [r3, #2]
 800616e:	b2da      	uxtb	r2, r3
 8006170:	4b4c      	ldr	r3, [pc, #304]	; (80062a4 <USBD_SetConfig+0x148>)
 8006172:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006174:	4b4b      	ldr	r3, [pc, #300]	; (80062a4 <USBD_SetConfig+0x148>)
 8006176:	781b      	ldrb	r3, [r3, #0]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d905      	bls.n	8006188 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 f96c 	bl	800645c <USBD_CtlError>
    return USBD_FAIL;
 8006184:	2303      	movs	r3, #3
 8006186:	e088      	b.n	800629a <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800618e:	b2db      	uxtb	r3, r3
 8006190:	2b02      	cmp	r3, #2
 8006192:	d002      	beq.n	800619a <USBD_SetConfig+0x3e>
 8006194:	2b03      	cmp	r3, #3
 8006196:	d025      	beq.n	80061e4 <USBD_SetConfig+0x88>
 8006198:	e071      	b.n	800627e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800619a:	4b42      	ldr	r3, [pc, #264]	; (80062a4 <USBD_SetConfig+0x148>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d01c      	beq.n	80061dc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80061a2:	4b40      	ldr	r3, [pc, #256]	; (80062a4 <USBD_SetConfig+0x148>)
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80061ac:	4b3d      	ldr	r3, [pc, #244]	; (80062a4 <USBD_SetConfig+0x148>)
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	4619      	mov	r1, r3
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f7ff f91e 	bl	80053f4 <USBD_SetClassConfig>
 80061b8:	4603      	mov	r3, r0
 80061ba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d004      	beq.n	80061cc <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f000 f949 	bl	800645c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80061ca:	e065      	b.n	8006298 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 fa10 	bl	80065f2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2203      	movs	r2, #3
 80061d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80061da:	e05d      	b.n	8006298 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80061dc:	6878      	ldr	r0, [r7, #4]
 80061de:	f000 fa08 	bl	80065f2 <USBD_CtlSendStatus>
      break;
 80061e2:	e059      	b.n	8006298 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80061e4:	4b2f      	ldr	r3, [pc, #188]	; (80062a4 <USBD_SetConfig+0x148>)
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d112      	bne.n	8006212 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2202      	movs	r2, #2
 80061f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80061f4:	4b2b      	ldr	r3, [pc, #172]	; (80062a4 <USBD_SetConfig+0x148>)
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	461a      	mov	r2, r3
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80061fe:	4b29      	ldr	r3, [pc, #164]	; (80062a4 <USBD_SetConfig+0x148>)
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	4619      	mov	r1, r3
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f7ff f911 	bl	800542c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800620a:	6878      	ldr	r0, [r7, #4]
 800620c:	f000 f9f1 	bl	80065f2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006210:	e042      	b.n	8006298 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006212:	4b24      	ldr	r3, [pc, #144]	; (80062a4 <USBD_SetConfig+0x148>)
 8006214:	781b      	ldrb	r3, [r3, #0]
 8006216:	461a      	mov	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	429a      	cmp	r2, r3
 800621e:	d02a      	beq.n	8006276 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	4619      	mov	r1, r3
 8006228:	6878      	ldr	r0, [r7, #4]
 800622a:	f7ff f8ff 	bl	800542c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800622e:	4b1d      	ldr	r3, [pc, #116]	; (80062a4 <USBD_SetConfig+0x148>)
 8006230:	781b      	ldrb	r3, [r3, #0]
 8006232:	461a      	mov	r2, r3
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006238:	4b1a      	ldr	r3, [pc, #104]	; (80062a4 <USBD_SetConfig+0x148>)
 800623a:	781b      	ldrb	r3, [r3, #0]
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f7ff f8d8 	bl	80053f4 <USBD_SetClassConfig>
 8006244:	4603      	mov	r3, r0
 8006246:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00f      	beq.n	800626e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800624e:	6839      	ldr	r1, [r7, #0]
 8006250:	6878      	ldr	r0, [r7, #4]
 8006252:	f000 f903 	bl	800645c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	b2db      	uxtb	r3, r3
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f7ff f8e4 	bl	800542c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	2202      	movs	r2, #2
 8006268:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800626c:	e014      	b.n	8006298 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 f9bf 	bl	80065f2 <USBD_CtlSendStatus>
      break;
 8006274:	e010      	b.n	8006298 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006276:	6878      	ldr	r0, [r7, #4]
 8006278:	f000 f9bb 	bl	80065f2 <USBD_CtlSendStatus>
      break;
 800627c:	e00c      	b.n	8006298 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800627e:	6839      	ldr	r1, [r7, #0]
 8006280:	6878      	ldr	r0, [r7, #4]
 8006282:	f000 f8eb 	bl	800645c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006286:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <USBD_SetConfig+0x148>)
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	4619      	mov	r1, r3
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff f8cd 	bl	800542c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006292:	2303      	movs	r3, #3
 8006294:	73fb      	strb	r3, [r7, #15]
      break;
 8006296:	bf00      	nop
  }

  return ret;
 8006298:	7bfb      	ldrb	r3, [r7, #15]
}
 800629a:	4618      	mov	r0, r3
 800629c:	3710      	adds	r7, #16
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}
 80062a2:	bf00      	nop
 80062a4:	200001f4 	.word	0x200001f4

080062a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b082      	sub	sp, #8
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	88db      	ldrh	r3, [r3, #6]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d004      	beq.n	80062c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f8cd 	bl	800645c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80062c2:	e023      	b.n	800630c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062ca:	b2db      	uxtb	r3, r3
 80062cc:	2b02      	cmp	r3, #2
 80062ce:	dc02      	bgt.n	80062d6 <USBD_GetConfig+0x2e>
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	dc03      	bgt.n	80062dc <USBD_GetConfig+0x34>
 80062d4:	e015      	b.n	8006302 <USBD_GetConfig+0x5a>
 80062d6:	2b03      	cmp	r3, #3
 80062d8:	d00b      	beq.n	80062f2 <USBD_GetConfig+0x4a>
 80062da:	e012      	b.n	8006302 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2200      	movs	r2, #0
 80062e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	3308      	adds	r3, #8
 80062e6:	2201      	movs	r2, #1
 80062e8:	4619      	mov	r1, r3
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 f927 	bl	800653e <USBD_CtlSendData>
        break;
 80062f0:	e00c      	b.n	800630c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	3304      	adds	r3, #4
 80062f6:	2201      	movs	r2, #1
 80062f8:	4619      	mov	r1, r3
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f91f 	bl	800653e <USBD_CtlSendData>
        break;
 8006300:	e004      	b.n	800630c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006302:	6839      	ldr	r1, [r7, #0]
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f8a9 	bl	800645c <USBD_CtlError>
        break;
 800630a:	bf00      	nop
}
 800630c:	bf00      	nop
 800630e:	3708      	adds	r7, #8
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006324:	b2db      	uxtb	r3, r3
 8006326:	3b01      	subs	r3, #1
 8006328:	2b02      	cmp	r3, #2
 800632a:	d81e      	bhi.n	800636a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	88db      	ldrh	r3, [r3, #6]
 8006330:	2b02      	cmp	r3, #2
 8006332:	d004      	beq.n	800633e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f890 	bl	800645c <USBD_CtlError>
        break;
 800633c:	e01a      	b.n	8006374 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2201      	movs	r2, #1
 8006342:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800634a:	2b00      	cmp	r3, #0
 800634c:	d005      	beq.n	800635a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68db      	ldr	r3, [r3, #12]
 8006352:	f043 0202 	orr.w	r2, r3, #2
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	330c      	adds	r3, #12
 800635e:	2202      	movs	r2, #2
 8006360:	4619      	mov	r1, r3
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f8eb 	bl	800653e <USBD_CtlSendData>
      break;
 8006368:	e004      	b.n	8006374 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800636a:	6839      	ldr	r1, [r7, #0]
 800636c:	6878      	ldr	r0, [r7, #4]
 800636e:	f000 f875 	bl	800645c <USBD_CtlError>
      break;
 8006372:	bf00      	nop
  }
}
 8006374:	bf00      	nop
 8006376:	3708      	adds	r7, #8
 8006378:	46bd      	mov	sp, r7
 800637a:	bd80      	pop	{r7, pc}

0800637c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
 8006384:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	885b      	ldrh	r3, [r3, #2]
 800638a:	2b01      	cmp	r3, #1
 800638c:	d106      	bne.n	800639c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 f92b 	bl	80065f2 <USBD_CtlSendStatus>
  }
}
 800639c:	bf00      	nop
 800639e:	3708      	adds	r7, #8
 80063a0:	46bd      	mov	sp, r7
 80063a2:	bd80      	pop	{r7, pc}

080063a4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b082      	sub	sp, #8
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	3b01      	subs	r3, #1
 80063b8:	2b02      	cmp	r3, #2
 80063ba:	d80b      	bhi.n	80063d4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	885b      	ldrh	r3, [r3, #2]
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d10c      	bne.n	80063de <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f910 	bl	80065f2 <USBD_CtlSendStatus>
      }
      break;
 80063d2:	e004      	b.n	80063de <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 f840 	bl	800645c <USBD_CtlError>
      break;
 80063dc:	e000      	b.n	80063e0 <USBD_ClrFeature+0x3c>
      break;
 80063de:	bf00      	nop
  }
}
 80063e0:	bf00      	nop
 80063e2:	3708      	adds	r7, #8
 80063e4:	46bd      	mov	sp, r7
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b084      	sub	sp, #16
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	781a      	ldrb	r2, [r3, #0]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3301      	adds	r3, #1
 8006402:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	781a      	ldrb	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	3301      	adds	r3, #1
 8006410:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f7ff fa91 	bl	800593a <SWAPBYTE>
 8006418:	4603      	mov	r3, r0
 800641a:	461a      	mov	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3301      	adds	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	3301      	adds	r3, #1
 800642a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800642c:	68f8      	ldr	r0, [r7, #12]
 800642e:	f7ff fa84 	bl	800593a <SWAPBYTE>
 8006432:	4603      	mov	r3, r0
 8006434:	461a      	mov	r2, r3
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	3301      	adds	r3, #1
 800643e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	3301      	adds	r3, #1
 8006444:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f7ff fa77 	bl	800593a <SWAPBYTE>
 800644c:	4603      	mov	r3, r0
 800644e:	461a      	mov	r2, r3
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	80da      	strh	r2, [r3, #6]
}
 8006454:	bf00      	nop
 8006456:	3710      	adds	r7, #16
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006466:	2180      	movs	r1, #128	; 0x80
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fd97 	bl	8006f9c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800646e:	2100      	movs	r1, #0
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 fd93 	bl	8006f9c <USBD_LL_StallEP>
}
 8006476:	bf00      	nop
 8006478:	3708      	adds	r7, #8
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b086      	sub	sp, #24
 8006482:	af00      	add	r7, sp, #0
 8006484:	60f8      	str	r0, [r7, #12]
 8006486:	60b9      	str	r1, [r7, #8]
 8006488:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800648a:	2300      	movs	r3, #0
 800648c:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d036      	beq.n	8006502 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006498:	6938      	ldr	r0, [r7, #16]
 800649a:	f000 f836 	bl	800650a <USBD_GetLen>
 800649e:	4603      	mov	r3, r0
 80064a0:	3301      	adds	r3, #1
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	005b      	lsls	r3, r3, #1
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80064ac:	7dfb      	ldrb	r3, [r7, #23]
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	4413      	add	r3, r2
 80064b2:	687a      	ldr	r2, [r7, #4]
 80064b4:	7812      	ldrb	r2, [r2, #0]
 80064b6:	701a      	strb	r2, [r3, #0]
  idx++;
 80064b8:	7dfb      	ldrb	r3, [r7, #23]
 80064ba:	3301      	adds	r3, #1
 80064bc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80064be:	7dfb      	ldrb	r3, [r7, #23]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	4413      	add	r3, r2
 80064c4:	2203      	movs	r2, #3
 80064c6:	701a      	strb	r2, [r3, #0]
  idx++;
 80064c8:	7dfb      	ldrb	r3, [r7, #23]
 80064ca:	3301      	adds	r3, #1
 80064cc:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80064ce:	e013      	b.n	80064f8 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80064d0:	7dfb      	ldrb	r3, [r7, #23]
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	4413      	add	r3, r2
 80064d6:	693a      	ldr	r2, [r7, #16]
 80064d8:	7812      	ldrb	r2, [r2, #0]
 80064da:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	3301      	adds	r3, #1
 80064e0:	613b      	str	r3, [r7, #16]
    idx++;
 80064e2:	7dfb      	ldrb	r3, [r7, #23]
 80064e4:	3301      	adds	r3, #1
 80064e6:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
 80064ea:	68ba      	ldr	r2, [r7, #8]
 80064ec:	4413      	add	r3, r2
 80064ee:	2200      	movs	r2, #0
 80064f0:	701a      	strb	r2, [r3, #0]
    idx++;
 80064f2:	7dfb      	ldrb	r3, [r7, #23]
 80064f4:	3301      	adds	r3, #1
 80064f6:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80064f8:	693b      	ldr	r3, [r7, #16]
 80064fa:	781b      	ldrb	r3, [r3, #0]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d1e7      	bne.n	80064d0 <USBD_GetString+0x52>
 8006500:	e000      	b.n	8006504 <USBD_GetString+0x86>
    return;
 8006502:	bf00      	nop
  }
}
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006512:	2300      	movs	r3, #0
 8006514:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800651a:	e005      	b.n	8006528 <USBD_GetLen+0x1e>
  {
    len++;
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	3301      	adds	r3, #1
 8006520:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	3301      	adds	r3, #1
 8006526:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d1f5      	bne.n	800651c <USBD_GetLen+0x12>
  }

  return len;
 8006530:	7bfb      	ldrb	r3, [r7, #15]
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800653e:	b580      	push	{r7, lr}
 8006540:	b084      	sub	sp, #16
 8006542:	af00      	add	r7, sp, #0
 8006544:	60f8      	str	r0, [r7, #12]
 8006546:	60b9      	str	r1, [r7, #8]
 8006548:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	2202      	movs	r2, #2
 800654e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	687a      	ldr	r2, [r7, #4]
 8006556:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	68ba      	ldr	r2, [r7, #8]
 8006562:	2100      	movs	r1, #0
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 fde7 	bl	8007138 <USBD_LL_Transmit>

  return USBD_OK;
 800656a:	2300      	movs	r3, #0
}
 800656c:	4618      	mov	r0, r3
 800656e:	3710      	adds	r7, #16
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	68ba      	ldr	r2, [r7, #8]
 8006584:	2100      	movs	r1, #0
 8006586:	68f8      	ldr	r0, [r7, #12]
 8006588:	f000 fdd6 	bl	8007138 <USBD_LL_Transmit>

  return USBD_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3710      	adds	r7, #16
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}

08006596 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006596:	b580      	push	{r7, lr}
 8006598:	b084      	sub	sp, #16
 800659a:	af00      	add	r7, sp, #0
 800659c:	60f8      	str	r0, [r7, #12]
 800659e:	60b9      	str	r1, [r7, #8]
 80065a0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2203      	movs	r2, #3
 80065a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	687a      	ldr	r2, [r7, #4]
 80065ae:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	2100      	movs	r1, #0
 80065c0:	68f8      	ldr	r0, [r7, #12]
 80065c2:	f000 fdf1 	bl	80071a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065c6:	2300      	movs	r3, #0
}
 80065c8:	4618      	mov	r0, r3
 80065ca:	3710      	adds	r7, #16
 80065cc:	46bd      	mov	sp, r7
 80065ce:	bd80      	pop	{r7, pc}

080065d0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b084      	sub	sp, #16
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	60f8      	str	r0, [r7, #12]
 80065d8:	60b9      	str	r1, [r7, #8]
 80065da:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	68ba      	ldr	r2, [r7, #8]
 80065e0:	2100      	movs	r1, #0
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f000 fde0 	bl	80071a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80065e8:	2300      	movs	r3, #0
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3710      	adds	r7, #16
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b082      	sub	sp, #8
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	2204      	movs	r2, #4
 80065fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006602:	2300      	movs	r3, #0
 8006604:	2200      	movs	r2, #0
 8006606:	2100      	movs	r1, #0
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fd95 	bl	8007138 <USBD_LL_Transmit>

  return USBD_OK;
 800660e:	2300      	movs	r3, #0
}
 8006610:	4618      	mov	r0, r3
 8006612:	3708      	adds	r7, #8
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}

08006618 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b082      	sub	sp, #8
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2205      	movs	r2, #5
 8006624:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006628:	2300      	movs	r3, #0
 800662a:	2200      	movs	r2, #0
 800662c:	2100      	movs	r1, #0
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fdba 	bl	80071a8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006634:	2300      	movs	r3, #0
}
 8006636:	4618      	mov	r0, r3
 8006638:	3708      	adds	r7, #8
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
	...

08006640 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006640:	b580      	push	{r7, lr}
 8006642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006644:	2200      	movs	r2, #0
 8006646:	4912      	ldr	r1, [pc, #72]	; (8006690 <MX_USB_DEVICE_Init+0x50>)
 8006648:	4812      	ldr	r0, [pc, #72]	; (8006694 <MX_USB_DEVICE_Init+0x54>)
 800664a:	f7fe fe65 	bl	8005318 <USBD_Init>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d001      	beq.n	8006658 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006654:	f7fa f8ad 	bl	80007b2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006658:	490f      	ldr	r1, [pc, #60]	; (8006698 <MX_USB_DEVICE_Init+0x58>)
 800665a:	480e      	ldr	r0, [pc, #56]	; (8006694 <MX_USB_DEVICE_Init+0x54>)
 800665c:	f7fe fe8c 	bl	8005378 <USBD_RegisterClass>
 8006660:	4603      	mov	r3, r0
 8006662:	2b00      	cmp	r3, #0
 8006664:	d001      	beq.n	800666a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006666:	f7fa f8a4 	bl	80007b2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800666a:	490c      	ldr	r1, [pc, #48]	; (800669c <MX_USB_DEVICE_Init+0x5c>)
 800666c:	4809      	ldr	r0, [pc, #36]	; (8006694 <MX_USB_DEVICE_Init+0x54>)
 800666e:	f7fe fdad 	bl	80051cc <USBD_CDC_RegisterInterface>
 8006672:	4603      	mov	r3, r0
 8006674:	2b00      	cmp	r3, #0
 8006676:	d001      	beq.n	800667c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006678:	f7fa f89b 	bl	80007b2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800667c:	4805      	ldr	r0, [pc, #20]	; (8006694 <MX_USB_DEVICE_Init+0x54>)
 800667e:	f7fe fea2 	bl	80053c6 <USBD_Start>
 8006682:	4603      	mov	r3, r0
 8006684:	2b00      	cmp	r3, #0
 8006686:	d001      	beq.n	800668c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006688:	f7fa f893 	bl	80007b2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800668c:	bf00      	nop
 800668e:	bd80      	pop	{r7, pc}
 8006690:	20000130 	.word	0x20000130
 8006694:	20000460 	.word	0x20000460
 8006698:	20000018 	.word	0x20000018
 800669c:	2000011c 	.word	0x2000011c

080066a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80066a4:	2200      	movs	r2, #0
 80066a6:	4905      	ldr	r1, [pc, #20]	; (80066bc <CDC_Init_FS+0x1c>)
 80066a8:	4805      	ldr	r0, [pc, #20]	; (80066c0 <CDC_Init_FS+0x20>)
 80066aa:	f7fe fda4 	bl	80051f6 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80066ae:	4905      	ldr	r1, [pc, #20]	; (80066c4 <CDC_Init_FS+0x24>)
 80066b0:	4803      	ldr	r0, [pc, #12]	; (80066c0 <CDC_Init_FS+0x20>)
 80066b2:	f7fe fdbe 	bl	8005232 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80066b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	20000f30 	.word	0x20000f30
 80066c0:	20000460 	.word	0x20000460
 80066c4:	20000730 	.word	0x20000730

080066c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80066c8:	b480      	push	{r7}
 80066ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80066cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80066ce:	4618      	mov	r0, r3
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr

080066d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
 80066de:	4603      	mov	r3, r0
 80066e0:	6039      	str	r1, [r7, #0]
 80066e2:	71fb      	strb	r3, [r7, #7]
 80066e4:	4613      	mov	r3, r2
 80066e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80066e8:	79fb      	ldrb	r3, [r7, #7]
 80066ea:	2b23      	cmp	r3, #35	; 0x23
 80066ec:	d84a      	bhi.n	8006784 <CDC_Control_FS+0xac>
 80066ee:	a201      	add	r2, pc, #4	; (adr r2, 80066f4 <CDC_Control_FS+0x1c>)
 80066f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066f4:	08006785 	.word	0x08006785
 80066f8:	08006785 	.word	0x08006785
 80066fc:	08006785 	.word	0x08006785
 8006700:	08006785 	.word	0x08006785
 8006704:	08006785 	.word	0x08006785
 8006708:	08006785 	.word	0x08006785
 800670c:	08006785 	.word	0x08006785
 8006710:	08006785 	.word	0x08006785
 8006714:	08006785 	.word	0x08006785
 8006718:	08006785 	.word	0x08006785
 800671c:	08006785 	.word	0x08006785
 8006720:	08006785 	.word	0x08006785
 8006724:	08006785 	.word	0x08006785
 8006728:	08006785 	.word	0x08006785
 800672c:	08006785 	.word	0x08006785
 8006730:	08006785 	.word	0x08006785
 8006734:	08006785 	.word	0x08006785
 8006738:	08006785 	.word	0x08006785
 800673c:	08006785 	.word	0x08006785
 8006740:	08006785 	.word	0x08006785
 8006744:	08006785 	.word	0x08006785
 8006748:	08006785 	.word	0x08006785
 800674c:	08006785 	.word	0x08006785
 8006750:	08006785 	.word	0x08006785
 8006754:	08006785 	.word	0x08006785
 8006758:	08006785 	.word	0x08006785
 800675c:	08006785 	.word	0x08006785
 8006760:	08006785 	.word	0x08006785
 8006764:	08006785 	.word	0x08006785
 8006768:	08006785 	.word	0x08006785
 800676c:	08006785 	.word	0x08006785
 8006770:	08006785 	.word	0x08006785
 8006774:	08006785 	.word	0x08006785
 8006778:	08006785 	.word	0x08006785
 800677c:	08006785 	.word	0x08006785
 8006780:	08006785 	.word	0x08006785
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006784:	bf00      	nop
  }

  return (USBD_OK);
 8006786:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006788:	4618      	mov	r0, r3
 800678a:	370c      	adds	r7, #12
 800678c:	46bd      	mov	sp, r7
 800678e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006792:	4770      	bx	lr

08006794 <CDC_Receive_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
#define buffergroesse 64 		//wie viele speicherplätze bekommt der ringbuffer?
extern uint8_t bufferdata[buffergroesse];
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800679e:	6879      	ldr	r1, [r7, #4]
 80067a0:	480c      	ldr	r0, [pc, #48]	; (80067d4 <CDC_Receive_FS+0x40>)
 80067a2:	f7fe fd46 	bl	8005232 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80067a6:	480b      	ldr	r0, [pc, #44]	; (80067d4 <CDC_Receive_FS+0x40>)
 80067a8:	f7fe fd8c 	bl	80052c4 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	73fb      	strb	r3, [r7, #15]

  memcpy (bufferdata,Buf,len);
 80067b2:	7bfb      	ldrb	r3, [r7, #15]
 80067b4:	461a      	mov	r2, r3
 80067b6:	6879      	ldr	r1, [r7, #4]
 80067b8:	4807      	ldr	r0, [pc, #28]	; (80067d8 <CDC_Receive_FS+0x44>)
 80067ba:	f000 fdd1 	bl	8007360 <memcpy>
  memset (Buf,'\0', len);
 80067be:	7bfb      	ldrb	r3, [r7, #15]
 80067c0:	461a      	mov	r2, r3
 80067c2:	2100      	movs	r1, #0
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fdd9 	bl	800737c <memset>

  return (USBD_OK);
 80067ca:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	3710      	adds	r7, #16
 80067d0:	46bd      	mov	sp, r7
 80067d2:	bd80      	pop	{r7, pc}
 80067d4:	20000460 	.word	0x20000460
 80067d8:	20000418 	.word	0x20000418

080067dc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
 80067e4:	460b      	mov	r3, r1
 80067e6:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80067e8:	2300      	movs	r3, #0
 80067ea:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80067ec:	4b0d      	ldr	r3, [pc, #52]	; (8006824 <CDC_Transmit_FS+0x48>)
 80067ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80067f2:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80067f4:	68bb      	ldr	r3, [r7, #8]
 80067f6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d001      	beq.n	8006802 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80067fe:	2301      	movs	r3, #1
 8006800:	e00b      	b.n	800681a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006802:	887b      	ldrh	r3, [r7, #2]
 8006804:	461a      	mov	r2, r3
 8006806:	6879      	ldr	r1, [r7, #4]
 8006808:	4806      	ldr	r0, [pc, #24]	; (8006824 <CDC_Transmit_FS+0x48>)
 800680a:	f7fe fcf4 	bl	80051f6 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800680e:	4805      	ldr	r0, [pc, #20]	; (8006824 <CDC_Transmit_FS+0x48>)
 8006810:	f7fe fd28 	bl	8005264 <USBD_CDC_TransmitPacket>
 8006814:	4603      	mov	r3, r0
 8006816:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006818:	7bfb      	ldrb	r3, [r7, #15]
}
 800681a:	4618      	mov	r0, r3
 800681c:	3710      	adds	r7, #16
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000460 	.word	0x20000460

08006828 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006828:	b480      	push	{r7}
 800682a:	b087      	sub	sp, #28
 800682c:	af00      	add	r7, sp, #0
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	4613      	mov	r3, r2
 8006834:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800683a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800683e:	4618      	mov	r0, r3
 8006840:	371c      	adds	r7, #28
 8006842:	46bd      	mov	sp, r7
 8006844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006848:	4770      	bx	lr
	...

0800684c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800684c:	b480      	push	{r7}
 800684e:	b083      	sub	sp, #12
 8006850:	af00      	add	r7, sp, #0
 8006852:	4603      	mov	r3, r0
 8006854:	6039      	str	r1, [r7, #0]
 8006856:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006858:	683b      	ldr	r3, [r7, #0]
 800685a:	2212      	movs	r2, #18
 800685c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800685e:	4b03      	ldr	r3, [pc, #12]	; (800686c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006860:	4618      	mov	r0, r3
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	20000150 	.word	0x20000150

08006870 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	6039      	str	r1, [r7, #0]
 800687a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2204      	movs	r2, #4
 8006880:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006882:	4b03      	ldr	r3, [pc, #12]	; (8006890 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	20000170 	.word	0x20000170

08006894 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	4603      	mov	r3, r0
 800689c:	6039      	str	r1, [r7, #0]
 800689e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80068a0:	79fb      	ldrb	r3, [r7, #7]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d105      	bne.n	80068b2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068a6:	683a      	ldr	r2, [r7, #0]
 80068a8:	4907      	ldr	r1, [pc, #28]	; (80068c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80068aa:	4808      	ldr	r0, [pc, #32]	; (80068cc <USBD_FS_ProductStrDescriptor+0x38>)
 80068ac:	f7ff fde7 	bl	800647e <USBD_GetString>
 80068b0:	e004      	b.n	80068bc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80068b2:	683a      	ldr	r2, [r7, #0]
 80068b4:	4904      	ldr	r1, [pc, #16]	; (80068c8 <USBD_FS_ProductStrDescriptor+0x34>)
 80068b6:	4805      	ldr	r0, [pc, #20]	; (80068cc <USBD_FS_ProductStrDescriptor+0x38>)
 80068b8:	f7ff fde1 	bl	800647e <USBD_GetString>
  }
  return USBD_StrDesc;
 80068bc:	4b02      	ldr	r3, [pc, #8]	; (80068c8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80068be:	4618      	mov	r0, r3
 80068c0:	3708      	adds	r7, #8
 80068c2:	46bd      	mov	sp, r7
 80068c4:	bd80      	pop	{r7, pc}
 80068c6:	bf00      	nop
 80068c8:	20001730 	.word	0x20001730
 80068cc:	0800749c 	.word	0x0800749c

080068d0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b082      	sub	sp, #8
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	4603      	mov	r3, r0
 80068d8:	6039      	str	r1, [r7, #0]
 80068da:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068dc:	683a      	ldr	r2, [r7, #0]
 80068de:	4904      	ldr	r1, [pc, #16]	; (80068f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80068e0:	4804      	ldr	r0, [pc, #16]	; (80068f4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80068e2:	f7ff fdcc 	bl	800647e <USBD_GetString>
  return USBD_StrDesc;
 80068e6:	4b02      	ldr	r3, [pc, #8]	; (80068f0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3708      	adds	r7, #8
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20001730 	.word	0x20001730
 80068f4:	080074b4 	.word	0x080074b4

080068f8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b082      	sub	sp, #8
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	4603      	mov	r3, r0
 8006900:	6039      	str	r1, [r7, #0]
 8006902:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	221a      	movs	r2, #26
 8006908:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800690a:	f000 f855 	bl	80069b8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800690e:	4b02      	ldr	r3, [pc, #8]	; (8006918 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006910:	4618      	mov	r0, r3
 8006912:	3708      	adds	r7, #8
 8006914:	46bd      	mov	sp, r7
 8006916:	bd80      	pop	{r7, pc}
 8006918:	20000174 	.word	0x20000174

0800691c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	4603      	mov	r3, r0
 8006924:	6039      	str	r1, [r7, #0]
 8006926:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006928:	79fb      	ldrb	r3, [r7, #7]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d105      	bne.n	800693a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	4907      	ldr	r1, [pc, #28]	; (8006950 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006932:	4808      	ldr	r0, [pc, #32]	; (8006954 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006934:	f7ff fda3 	bl	800647e <USBD_GetString>
 8006938:	e004      	b.n	8006944 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	4904      	ldr	r1, [pc, #16]	; (8006950 <USBD_FS_ConfigStrDescriptor+0x34>)
 800693e:	4805      	ldr	r0, [pc, #20]	; (8006954 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006940:	f7ff fd9d 	bl	800647e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006944:	4b02      	ldr	r3, [pc, #8]	; (8006950 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006946:	4618      	mov	r0, r3
 8006948:	3708      	adds	r7, #8
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	20001730 	.word	0x20001730
 8006954:	080074c8 	.word	0x080074c8

08006958 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b082      	sub	sp, #8
 800695c:	af00      	add	r7, sp, #0
 800695e:	4603      	mov	r3, r0
 8006960:	6039      	str	r1, [r7, #0]
 8006962:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006964:	79fb      	ldrb	r3, [r7, #7]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d105      	bne.n	8006976 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	4907      	ldr	r1, [pc, #28]	; (800698c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800696e:	4808      	ldr	r0, [pc, #32]	; (8006990 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006970:	f7ff fd85 	bl	800647e <USBD_GetString>
 8006974:	e004      	b.n	8006980 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006976:	683a      	ldr	r2, [r7, #0]
 8006978:	4904      	ldr	r1, [pc, #16]	; (800698c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800697a:	4805      	ldr	r0, [pc, #20]	; (8006990 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800697c:	f7ff fd7f 	bl	800647e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006980:	4b02      	ldr	r3, [pc, #8]	; (800698c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006982:	4618      	mov	r0, r3
 8006984:	3708      	adds	r7, #8
 8006986:	46bd      	mov	sp, r7
 8006988:	bd80      	pop	{r7, pc}
 800698a:	bf00      	nop
 800698c:	20001730 	.word	0x20001730
 8006990:	080074d4 	.word	0x080074d4

08006994 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006994:	b480      	push	{r7}
 8006996:	b083      	sub	sp, #12
 8006998:	af00      	add	r7, sp, #0
 800699a:	4603      	mov	r3, r0
 800699c:	6039      	str	r1, [r7, #0]
 800699e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	220c      	movs	r2, #12
 80069a4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 80069a6:	4b03      	ldr	r3, [pc, #12]	; (80069b4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	370c      	adds	r7, #12
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	20000164 	.word	0x20000164

080069b8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80069be:	4b0f      	ldr	r3, [pc, #60]	; (80069fc <Get_SerialNum+0x44>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80069c4:	4b0e      	ldr	r3, [pc, #56]	; (8006a00 <Get_SerialNum+0x48>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80069ca:	4b0e      	ldr	r3, [pc, #56]	; (8006a04 <Get_SerialNum+0x4c>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80069d0:	68fa      	ldr	r2, [r7, #12]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	4413      	add	r3, r2
 80069d6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d009      	beq.n	80069f2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80069de:	2208      	movs	r2, #8
 80069e0:	4909      	ldr	r1, [pc, #36]	; (8006a08 <Get_SerialNum+0x50>)
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 f814 	bl	8006a10 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80069e8:	2204      	movs	r2, #4
 80069ea:	4908      	ldr	r1, [pc, #32]	; (8006a0c <Get_SerialNum+0x54>)
 80069ec:	68b8      	ldr	r0, [r7, #8]
 80069ee:	f000 f80f 	bl	8006a10 <IntToUnicode>
  }
}
 80069f2:	bf00      	nop
 80069f4:	3710      	adds	r7, #16
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	1fff7590 	.word	0x1fff7590
 8006a00:	1fff7594 	.word	0x1fff7594
 8006a04:	1fff7598 	.word	0x1fff7598
 8006a08:	20000176 	.word	0x20000176
 8006a0c:	20000186 	.word	0x20000186

08006a10 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a10:	b480      	push	{r7}
 8006a12:	b087      	sub	sp, #28
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	60f8      	str	r0, [r7, #12]
 8006a18:	60b9      	str	r1, [r7, #8]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a1e:	2300      	movs	r3, #0
 8006a20:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a22:	2300      	movs	r3, #0
 8006a24:	75fb      	strb	r3, [r7, #23]
 8006a26:	e027      	b.n	8006a78 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	0f1b      	lsrs	r3, r3, #28
 8006a2c:	2b09      	cmp	r3, #9
 8006a2e:	d80b      	bhi.n	8006a48 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	0f1b      	lsrs	r3, r3, #28
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	7dfb      	ldrb	r3, [r7, #23]
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	4619      	mov	r1, r3
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	440b      	add	r3, r1
 8006a40:	3230      	adds	r2, #48	; 0x30
 8006a42:	b2d2      	uxtb	r2, r2
 8006a44:	701a      	strb	r2, [r3, #0]
 8006a46:	e00a      	b.n	8006a5e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	0f1b      	lsrs	r3, r3, #28
 8006a4c:	b2da      	uxtb	r2, r3
 8006a4e:	7dfb      	ldrb	r3, [r7, #23]
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	4619      	mov	r1, r3
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	440b      	add	r3, r1
 8006a58:	3237      	adds	r2, #55	; 0x37
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	011b      	lsls	r3, r3, #4
 8006a62:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a64:	7dfb      	ldrb	r3, [r7, #23]
 8006a66:	005b      	lsls	r3, r3, #1
 8006a68:	3301      	adds	r3, #1
 8006a6a:	68ba      	ldr	r2, [r7, #8]
 8006a6c:	4413      	add	r3, r2
 8006a6e:	2200      	movs	r2, #0
 8006a70:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a72:	7dfb      	ldrb	r3, [r7, #23]
 8006a74:	3301      	adds	r3, #1
 8006a76:	75fb      	strb	r3, [r7, #23]
 8006a78:	7dfa      	ldrb	r2, [r7, #23]
 8006a7a:	79fb      	ldrb	r3, [r7, #7]
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d3d3      	bcc.n	8006a28 <IntToUnicode+0x18>
  }
}
 8006a80:	bf00      	nop
 8006a82:	bf00      	nop
 8006a84:	371c      	adds	r7, #28
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr
	...

08006a90 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b0ae      	sub	sp, #184	; 0xb8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a98:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	601a      	str	r2, [r3, #0]
 8006aa0:	605a      	str	r2, [r3, #4]
 8006aa2:	609a      	str	r2, [r3, #8]
 8006aa4:	60da      	str	r2, [r3, #12]
 8006aa6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006aa8:	f107 0318 	add.w	r3, r7, #24
 8006aac:	228c      	movs	r2, #140	; 0x8c
 8006aae:	2100      	movs	r1, #0
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f000 fc63 	bl	800737c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006abe:	d173      	bne.n	8006ba8 <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006ac0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006ac4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8006ac6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006aca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8006ad6:	2318      	movs	r3, #24
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8006ada:	2302      	movs	r3, #2
 8006adc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006ae2:	2302      	movs	r3, #2
 8006ae4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8006ae6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006aea:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006aec:	f107 0318 	add.w	r3, r7, #24
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7fc f98d 	bl	8002e10 <HAL_RCCEx_PeriphCLKConfig>
 8006af6:	4603      	mov	r3, r0
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d001      	beq.n	8006b00 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8006afc:	f7f9 fe59 	bl	80007b2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b00:	4b2b      	ldr	r3, [pc, #172]	; (8006bb0 <HAL_PCD_MspInit+0x120>)
 8006b02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b04:	4a2a      	ldr	r2, [pc, #168]	; (8006bb0 <HAL_PCD_MspInit+0x120>)
 8006b06:	f043 0301 	orr.w	r3, r3, #1
 8006b0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b0c:	4b28      	ldr	r3, [pc, #160]	; (8006bb0 <HAL_PCD_MspInit+0x120>)
 8006b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	617b      	str	r3, [r7, #20]
 8006b16:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b18:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b1c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b20:	2302      	movs	r3, #2
 8006b22:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b26:	2300      	movs	r3, #0
 8006b28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b2c:	2303      	movs	r3, #3
 8006b2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b32:	230a      	movs	r3, #10
 8006b34:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b38:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006b42:	f7fa f881 	bl	8000c48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b46:	4b1a      	ldr	r3, [pc, #104]	; (8006bb0 <HAL_PCD_MspInit+0x120>)
 8006b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4a:	4a19      	ldr	r2, [pc, #100]	; (8006bb0 <HAL_PCD_MspInit+0x120>)
 8006b4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006b50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006b52:	4b17      	ldr	r3, [pc, #92]	; (8006bb0 <HAL_PCD_MspInit+0x120>)
 8006b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b5a:	613b      	str	r3, [r7, #16]
 8006b5c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b5e:	4b14      	ldr	r3, [pc, #80]	; (8006bb0 <HAL_PCD_MspInit+0x120>)
 8006b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d114      	bne.n	8006b94 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b6a:	4b11      	ldr	r3, [pc, #68]	; (8006bb0 <HAL_PCD_MspInit+0x120>)
 8006b6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b6e:	4a10      	ldr	r2, [pc, #64]	; (8006bb0 <HAL_PCD_MspInit+0x120>)
 8006b70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b74:	6593      	str	r3, [r2, #88]	; 0x58
 8006b76:	4b0e      	ldr	r3, [pc, #56]	; (8006bb0 <HAL_PCD_MspInit+0x120>)
 8006b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b7e:	60fb      	str	r3, [r7, #12]
 8006b80:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8006b82:	f7fb fb35 	bl	80021f0 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b86:	4b0a      	ldr	r3, [pc, #40]	; (8006bb0 <HAL_PCD_MspInit+0x120>)
 8006b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b8a:	4a09      	ldr	r2, [pc, #36]	; (8006bb0 <HAL_PCD_MspInit+0x120>)
 8006b8c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b90:	6593      	str	r3, [r2, #88]	; 0x58
 8006b92:	e001      	b.n	8006b98 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006b94:	f7fb fb2c 	bl	80021f0 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b98:	2200      	movs	r2, #0
 8006b9a:	2100      	movs	r1, #0
 8006b9c:	2043      	movs	r0, #67	; 0x43
 8006b9e:	f7fa f81c 	bl	8000bda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006ba2:	2043      	movs	r0, #67	; 0x43
 8006ba4:	f7fa f835 	bl	8000c12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ba8:	bf00      	nop
 8006baa:	37b8      	adds	r7, #184	; 0xb8
 8006bac:	46bd      	mov	sp, r7
 8006bae:	bd80      	pop	{r7, pc}
 8006bb0:	40021000 	.word	0x40021000

08006bb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006bc8:	4619      	mov	r1, r3
 8006bca:	4610      	mov	r0, r2
 8006bcc:	f7fe fc46 	bl	800545c <USBD_LL_SetupStage>
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b082      	sub	sp, #8
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	460b      	mov	r3, r1
 8006be2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006bea:	78fa      	ldrb	r2, [r7, #3]
 8006bec:	6879      	ldr	r1, [r7, #4]
 8006bee:	4613      	mov	r3, r2
 8006bf0:	00db      	lsls	r3, r3, #3
 8006bf2:	1a9b      	subs	r3, r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	440b      	add	r3, r1
 8006bf8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	78fb      	ldrb	r3, [r7, #3]
 8006c00:	4619      	mov	r1, r3
 8006c02:	f7fe fc80 	bl	8005506 <USBD_LL_DataOutStage>
}
 8006c06:	bf00      	nop
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}

08006c0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c0e:	b580      	push	{r7, lr}
 8006c10:	b082      	sub	sp, #8
 8006c12:	af00      	add	r7, sp, #0
 8006c14:	6078      	str	r0, [r7, #4]
 8006c16:	460b      	mov	r3, r1
 8006c18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006c20:	78fa      	ldrb	r2, [r7, #3]
 8006c22:	6879      	ldr	r1, [r7, #4]
 8006c24:	4613      	mov	r3, r2
 8006c26:	00db      	lsls	r3, r3, #3
 8006c28:	1a9b      	subs	r3, r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	440b      	add	r3, r1
 8006c2e:	3348      	adds	r3, #72	; 0x48
 8006c30:	681a      	ldr	r2, [r3, #0]
 8006c32:	78fb      	ldrb	r3, [r7, #3]
 8006c34:	4619      	mov	r1, r3
 8006c36:	f7fe fcc9 	bl	80055cc <USBD_LL_DataInStage>
}
 8006c3a:	bf00      	nop
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b082      	sub	sp, #8
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fe fddd 	bl	8005810 <USBD_LL_SOF>
}
 8006c56:	bf00      	nop
 8006c58:	3708      	adds	r7, #8
 8006c5a:	46bd      	mov	sp, r7
 8006c5c:	bd80      	pop	{r7, pc}

08006c5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c5e:	b580      	push	{r7, lr}
 8006c60:	b084      	sub	sp, #16
 8006c62:	af00      	add	r7, sp, #0
 8006c64:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c66:	2301      	movs	r3, #1
 8006c68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d001      	beq.n	8006c76 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006c72:	f7f9 fd9e 	bl	80007b2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c7c:	7bfa      	ldrb	r2, [r7, #15]
 8006c7e:	4611      	mov	r1, r2
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fe fd87 	bl	8005794 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	f7fe fd33 	bl	80056f8 <USBD_LL_Reset>
}
 8006c92:	bf00      	nop
 8006c94:	3710      	adds	r7, #16
 8006c96:	46bd      	mov	sp, r7
 8006c98:	bd80      	pop	{r7, pc}
	...

08006c9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	6812      	ldr	r2, [r2, #0]
 8006cb2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cb6:	f043 0301 	orr.w	r3, r3, #1
 8006cba:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006cc2:	4618      	mov	r0, r3
 8006cc4:	f7fe fd76 	bl	80057b4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6a1b      	ldr	r3, [r3, #32]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006cd0:	4b04      	ldr	r3, [pc, #16]	; (8006ce4 <HAL_PCD_SuspendCallback+0x48>)
 8006cd2:	691b      	ldr	r3, [r3, #16]
 8006cd4:	4a03      	ldr	r2, [pc, #12]	; (8006ce4 <HAL_PCD_SuspendCallback+0x48>)
 8006cd6:	f043 0306 	orr.w	r3, r3, #6
 8006cda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006cdc:	bf00      	nop
 8006cde:	3708      	adds	r7, #8
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	e000ed00 	.word	0xe000ed00

08006ce8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	6812      	ldr	r2, [r2, #0]
 8006cfe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d02:	f023 0301 	bic.w	r3, r3, #1
 8006d06:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a1b      	ldr	r3, [r3, #32]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006d10:	4b08      	ldr	r3, [pc, #32]	; (8006d34 <HAL_PCD_ResumeCallback+0x4c>)
 8006d12:	691b      	ldr	r3, [r3, #16]
 8006d14:	4a07      	ldr	r2, [pc, #28]	; (8006d34 <HAL_PCD_ResumeCallback+0x4c>)
 8006d16:	f023 0306 	bic.w	r3, r3, #6
 8006d1a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006d1c:	f000 faf6 	bl	800730c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d26:	4618      	mov	r0, r3
 8006d28:	f7fe fd5a 	bl	80057e0 <USBD_LL_Resume>
}
 8006d2c:	bf00      	nop
 8006d2e:	3708      	adds	r7, #8
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}
 8006d34:	e000ed00 	.word	0xe000ed00

08006d38 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b082      	sub	sp, #8
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
 8006d40:	460b      	mov	r3, r1
 8006d42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d4a:	78fa      	ldrb	r2, [r7, #3]
 8006d4c:	4611      	mov	r1, r2
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f7fe fda6 	bl	80058a0 <USBD_LL_IsoOUTIncomplete>
}
 8006d54:	bf00      	nop
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}

08006d5c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b082      	sub	sp, #8
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	460b      	mov	r3, r1
 8006d66:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d6e:	78fa      	ldrb	r2, [r7, #3]
 8006d70:	4611      	mov	r1, r2
 8006d72:	4618      	mov	r0, r3
 8006d74:	f7fe fd6e 	bl	8005854 <USBD_LL_IsoINIncomplete>
}
 8006d78:	bf00      	nop
 8006d7a:	3708      	adds	r7, #8
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b082      	sub	sp, #8
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f7fe fdac 	bl	80058ec <USBD_LL_DevConnected>
}
 8006d94:	bf00      	nop
 8006d96:	3708      	adds	r7, #8
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}

08006d9c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	b082      	sub	sp, #8
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006daa:	4618      	mov	r0, r3
 8006dac:	f7fe fda9 	bl	8005902 <USBD_LL_DevDisconnected>
}
 8006db0:	bf00      	nop
 8006db2:	3708      	adds	r7, #8
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b082      	sub	sp, #8
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d13c      	bne.n	8006e42 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006dc8:	4a20      	ldr	r2, [pc, #128]	; (8006e4c <USBD_LL_Init+0x94>)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a1e      	ldr	r2, [pc, #120]	; (8006e4c <USBD_LL_Init+0x94>)
 8006dd4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006dd8:	4b1c      	ldr	r3, [pc, #112]	; (8006e4c <USBD_LL_Init+0x94>)
 8006dda:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006dde:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006de0:	4b1a      	ldr	r3, [pc, #104]	; (8006e4c <USBD_LL_Init+0x94>)
 8006de2:	2206      	movs	r2, #6
 8006de4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006de6:	4b19      	ldr	r3, [pc, #100]	; (8006e4c <USBD_LL_Init+0x94>)
 8006de8:	2202      	movs	r2, #2
 8006dea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006dec:	4b17      	ldr	r3, [pc, #92]	; (8006e4c <USBD_LL_Init+0x94>)
 8006dee:	2202      	movs	r2, #2
 8006df0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006df2:	4b16      	ldr	r3, [pc, #88]	; (8006e4c <USBD_LL_Init+0x94>)
 8006df4:	2200      	movs	r2, #0
 8006df6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006df8:	4b14      	ldr	r3, [pc, #80]	; (8006e4c <USBD_LL_Init+0x94>)
 8006dfa:	2200      	movs	r2, #0
 8006dfc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006dfe:	4b13      	ldr	r3, [pc, #76]	; (8006e4c <USBD_LL_Init+0x94>)
 8006e00:	2200      	movs	r2, #0
 8006e02:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006e04:	4b11      	ldr	r3, [pc, #68]	; (8006e4c <USBD_LL_Init+0x94>)
 8006e06:	2200      	movs	r2, #0
 8006e08:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006e0a:	4b10      	ldr	r3, [pc, #64]	; (8006e4c <USBD_LL_Init+0x94>)
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006e10:	4b0e      	ldr	r3, [pc, #56]	; (8006e4c <USBD_LL_Init+0x94>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006e16:	480d      	ldr	r0, [pc, #52]	; (8006e4c <USBD_LL_Init+0x94>)
 8006e18:	f7fa f8f2 	bl	8001000 <HAL_PCD_Init>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d001      	beq.n	8006e26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006e22:	f7f9 fcc6 	bl	80007b2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006e26:	2180      	movs	r1, #128	; 0x80
 8006e28:	4808      	ldr	r0, [pc, #32]	; (8006e4c <USBD_LL_Init+0x94>)
 8006e2a:	f7fb f948 	bl	80020be <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006e2e:	2240      	movs	r2, #64	; 0x40
 8006e30:	2100      	movs	r1, #0
 8006e32:	4806      	ldr	r0, [pc, #24]	; (8006e4c <USBD_LL_Init+0x94>)
 8006e34:	f7fb f8fc 	bl	8002030 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006e38:	2280      	movs	r2, #128	; 0x80
 8006e3a:	2101      	movs	r1, #1
 8006e3c:	4803      	ldr	r0, [pc, #12]	; (8006e4c <USBD_LL_Init+0x94>)
 8006e3e:	f7fb f8f7 	bl	8002030 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3708      	adds	r7, #8
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}
 8006e4c:	20001930 	.word	0x20001930

08006e50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fa f9ee 	bl	8001248 <HAL_PCD_Start>
 8006e6c:	4603      	mov	r3, r0
 8006e6e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006e70:	7bbb      	ldrb	r3, [r7, #14]
 8006e72:	2b03      	cmp	r3, #3
 8006e74:	d816      	bhi.n	8006ea4 <USBD_LL_Start+0x54>
 8006e76:	a201      	add	r2, pc, #4	; (adr r2, 8006e7c <USBD_LL_Start+0x2c>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006e8d 	.word	0x08006e8d
 8006e80:	08006e93 	.word	0x08006e93
 8006e84:	08006e99 	.word	0x08006e99
 8006e88:	08006e9f 	.word	0x08006e9f
    case HAL_OK :
      usb_status = USBD_OK;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e90:	e00b      	b.n	8006eaa <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e92:	2303      	movs	r3, #3
 8006e94:	73fb      	strb	r3, [r7, #15]
    break;
 8006e96:	e008      	b.n	8006eaa <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e98:	2301      	movs	r3, #1
 8006e9a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e9c:	e005      	b.n	8006eaa <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e9e:	2303      	movs	r3, #3
 8006ea0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea2:	e002      	b.n	8006eaa <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ea8:	bf00      	nop
  }
  return usb_status;
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	3710      	adds	r7, #16
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd80      	pop	{r7, pc}

08006eb4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006eb4:	b580      	push	{r7, lr}
 8006eb6:	b084      	sub	sp, #16
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	6078      	str	r0, [r7, #4]
 8006ebc:	4608      	mov	r0, r1
 8006ebe:	4611      	mov	r1, r2
 8006ec0:	461a      	mov	r2, r3
 8006ec2:	4603      	mov	r3, r0
 8006ec4:	70fb      	strb	r3, [r7, #3]
 8006ec6:	460b      	mov	r3, r1
 8006ec8:	70bb      	strb	r3, [r7, #2]
 8006eca:	4613      	mov	r3, r2
 8006ecc:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ece:	2300      	movs	r3, #0
 8006ed0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ed2:	2300      	movs	r3, #0
 8006ed4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006edc:	78bb      	ldrb	r3, [r7, #2]
 8006ede:	883a      	ldrh	r2, [r7, #0]
 8006ee0:	78f9      	ldrb	r1, [r7, #3]
 8006ee2:	f7fa fd9e 	bl	8001a22 <HAL_PCD_EP_Open>
 8006ee6:	4603      	mov	r3, r0
 8006ee8:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006eea:	7bbb      	ldrb	r3, [r7, #14]
 8006eec:	2b03      	cmp	r3, #3
 8006eee:	d817      	bhi.n	8006f20 <USBD_LL_OpenEP+0x6c>
 8006ef0:	a201      	add	r2, pc, #4	; (adr r2, 8006ef8 <USBD_LL_OpenEP+0x44>)
 8006ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ef6:	bf00      	nop
 8006ef8:	08006f09 	.word	0x08006f09
 8006efc:	08006f0f 	.word	0x08006f0f
 8006f00:	08006f15 	.word	0x08006f15
 8006f04:	08006f1b 	.word	0x08006f1b
    case HAL_OK :
      usb_status = USBD_OK;
 8006f08:	2300      	movs	r3, #0
 8006f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f0c:	e00b      	b.n	8006f26 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f0e:	2303      	movs	r3, #3
 8006f10:	73fb      	strb	r3, [r7, #15]
    break;
 8006f12:	e008      	b.n	8006f26 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f14:	2301      	movs	r3, #1
 8006f16:	73fb      	strb	r3, [r7, #15]
    break;
 8006f18:	e005      	b.n	8006f26 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f1a:	2303      	movs	r3, #3
 8006f1c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f1e:	e002      	b.n	8006f26 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006f20:	2303      	movs	r3, #3
 8006f22:	73fb      	strb	r3, [r7, #15]
    break;
 8006f24:	bf00      	nop
  }
  return usb_status;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
 8006f38:	460b      	mov	r3, r1
 8006f3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f40:	2300      	movs	r3, #0
 8006f42:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f4a:	78fa      	ldrb	r2, [r7, #3]
 8006f4c:	4611      	mov	r1, r2
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fa fdcf 	bl	8001af2 <HAL_PCD_EP_Close>
 8006f54:	4603      	mov	r3, r0
 8006f56:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006f58:	7bbb      	ldrb	r3, [r7, #14]
 8006f5a:	2b03      	cmp	r3, #3
 8006f5c:	d816      	bhi.n	8006f8c <USBD_LL_CloseEP+0x5c>
 8006f5e:	a201      	add	r2, pc, #4	; (adr r2, 8006f64 <USBD_LL_CloseEP+0x34>)
 8006f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f64:	08006f75 	.word	0x08006f75
 8006f68:	08006f7b 	.word	0x08006f7b
 8006f6c:	08006f81 	.word	0x08006f81
 8006f70:	08006f87 	.word	0x08006f87
    case HAL_OK :
      usb_status = USBD_OK;
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]
    break;
 8006f78:	e00b      	b.n	8006f92 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f7a:	2303      	movs	r3, #3
 8006f7c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f7e:	e008      	b.n	8006f92 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f80:	2301      	movs	r3, #1
 8006f82:	73fb      	strb	r3, [r7, #15]
    break;
 8006f84:	e005      	b.n	8006f92 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f86:	2303      	movs	r3, #3
 8006f88:	73fb      	strb	r3, [r7, #15]
    break;
 8006f8a:	e002      	b.n	8006f92 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006f8c:	2303      	movs	r3, #3
 8006f8e:	73fb      	strb	r3, [r7, #15]
    break;
 8006f90:	bf00      	nop
  }
  return usb_status;
 8006f92:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f94:	4618      	mov	r0, r3
 8006f96:	3710      	adds	r7, #16
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	bd80      	pop	{r7, pc}

08006f9c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b084      	sub	sp, #16
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fac:	2300      	movs	r3, #0
 8006fae:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	4611      	mov	r1, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f7fa fe76 	bl	8001cac <HAL_PCD_EP_SetStall>
 8006fc0:	4603      	mov	r3, r0
 8006fc2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006fc4:	7bbb      	ldrb	r3, [r7, #14]
 8006fc6:	2b03      	cmp	r3, #3
 8006fc8:	d816      	bhi.n	8006ff8 <USBD_LL_StallEP+0x5c>
 8006fca:	a201      	add	r2, pc, #4	; (adr r2, 8006fd0 <USBD_LL_StallEP+0x34>)
 8006fcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fd0:	08006fe1 	.word	0x08006fe1
 8006fd4:	08006fe7 	.word	0x08006fe7
 8006fd8:	08006fed 	.word	0x08006fed
 8006fdc:	08006ff3 	.word	0x08006ff3
    case HAL_OK :
      usb_status = USBD_OK;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	73fb      	strb	r3, [r7, #15]
    break;
 8006fe4:	e00b      	b.n	8006ffe <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	73fb      	strb	r3, [r7, #15]
    break;
 8006fea:	e008      	b.n	8006ffe <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006fec:	2301      	movs	r3, #1
 8006fee:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff0:	e005      	b.n	8006ffe <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff6:	e002      	b.n	8006ffe <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8006ffc:	bf00      	nop
  }
  return usb_status;
 8006ffe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007000:	4618      	mov	r0, r3
 8007002:	3710      	adds	r7, #16
 8007004:	46bd      	mov	sp, r7
 8007006:	bd80      	pop	{r7, pc}

08007008 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
 8007010:	460b      	mov	r3, r1
 8007012:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007018:	2300      	movs	r3, #0
 800701a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007022:	78fa      	ldrb	r2, [r7, #3]
 8007024:	4611      	mov	r1, r2
 8007026:	4618      	mov	r0, r3
 8007028:	f7fa fea2 	bl	8001d70 <HAL_PCD_EP_ClrStall>
 800702c:	4603      	mov	r3, r0
 800702e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	2b03      	cmp	r3, #3
 8007034:	d816      	bhi.n	8007064 <USBD_LL_ClearStallEP+0x5c>
 8007036:	a201      	add	r2, pc, #4	; (adr r2, 800703c <USBD_LL_ClearStallEP+0x34>)
 8007038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703c:	0800704d 	.word	0x0800704d
 8007040:	08007053 	.word	0x08007053
 8007044:	08007059 	.word	0x08007059
 8007048:	0800705f 	.word	0x0800705f
    case HAL_OK :
      usb_status = USBD_OK;
 800704c:	2300      	movs	r3, #0
 800704e:	73fb      	strb	r3, [r7, #15]
    break;
 8007050:	e00b      	b.n	800706a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007052:	2303      	movs	r3, #3
 8007054:	73fb      	strb	r3, [r7, #15]
    break;
 8007056:	e008      	b.n	800706a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007058:	2301      	movs	r3, #1
 800705a:	73fb      	strb	r3, [r7, #15]
    break;
 800705c:	e005      	b.n	800706a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800705e:	2303      	movs	r3, #3
 8007060:	73fb      	strb	r3, [r7, #15]
    break;
 8007062:	e002      	b.n	800706a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007064:	2303      	movs	r3, #3
 8007066:	73fb      	strb	r3, [r7, #15]
    break;
 8007068:	bf00      	nop
  }
  return usb_status;
 800706a:	7bfb      	ldrb	r3, [r7, #15]
}
 800706c:	4618      	mov	r0, r3
 800706e:	3710      	adds	r7, #16
 8007070:	46bd      	mov	sp, r7
 8007072:	bd80      	pop	{r7, pc}

08007074 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007074:	b480      	push	{r7}
 8007076:	b085      	sub	sp, #20
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007086:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007088:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800708c:	2b00      	cmp	r3, #0
 800708e:	da0b      	bge.n	80070a8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007090:	78fb      	ldrb	r3, [r7, #3]
 8007092:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007096:	68f9      	ldr	r1, [r7, #12]
 8007098:	4613      	mov	r3, r2
 800709a:	00db      	lsls	r3, r3, #3
 800709c:	1a9b      	subs	r3, r3, r2
 800709e:	009b      	lsls	r3, r3, #2
 80070a0:	440b      	add	r3, r1
 80070a2:	333e      	adds	r3, #62	; 0x3e
 80070a4:	781b      	ldrb	r3, [r3, #0]
 80070a6:	e00b      	b.n	80070c0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80070a8:	78fb      	ldrb	r3, [r7, #3]
 80070aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80070ae:	68f9      	ldr	r1, [r7, #12]
 80070b0:	4613      	mov	r3, r2
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	1a9b      	subs	r3, r3, r2
 80070b6:	009b      	lsls	r3, r3, #2
 80070b8:	440b      	add	r3, r1
 80070ba:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80070be:	781b      	ldrb	r3, [r3, #0]
  }
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3714      	adds	r7, #20
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b084      	sub	sp, #16
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070dc:	2300      	movs	r3, #0
 80070de:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80070e6:	78fa      	ldrb	r2, [r7, #3]
 80070e8:	4611      	mov	r1, r2
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fa fc74 	bl	80019d8 <HAL_PCD_SetAddress>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
 80070f6:	2b03      	cmp	r3, #3
 80070f8:	d816      	bhi.n	8007128 <USBD_LL_SetUSBAddress+0x5c>
 80070fa:	a201      	add	r2, pc, #4	; (adr r2, 8007100 <USBD_LL_SetUSBAddress+0x34>)
 80070fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007100:	08007111 	.word	0x08007111
 8007104:	08007117 	.word	0x08007117
 8007108:	0800711d 	.word	0x0800711d
 800710c:	08007123 	.word	0x08007123
    case HAL_OK :
      usb_status = USBD_OK;
 8007110:	2300      	movs	r3, #0
 8007112:	73fb      	strb	r3, [r7, #15]
    break;
 8007114:	e00b      	b.n	800712e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007116:	2303      	movs	r3, #3
 8007118:	73fb      	strb	r3, [r7, #15]
    break;
 800711a:	e008      	b.n	800712e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800711c:	2301      	movs	r3, #1
 800711e:	73fb      	strb	r3, [r7, #15]
    break;
 8007120:	e005      	b.n	800712e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007122:	2303      	movs	r3, #3
 8007124:	73fb      	strb	r3, [r7, #15]
    break;
 8007126:	e002      	b.n	800712e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007128:	2303      	movs	r3, #3
 800712a:	73fb      	strb	r3, [r7, #15]
    break;
 800712c:	bf00      	nop
  }
  return usb_status;
 800712e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007130:	4618      	mov	r0, r3
 8007132:	3710      	adds	r7, #16
 8007134:	46bd      	mov	sp, r7
 8007136:	bd80      	pop	{r7, pc}

08007138 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b086      	sub	sp, #24
 800713c:	af00      	add	r7, sp, #0
 800713e:	60f8      	str	r0, [r7, #12]
 8007140:	607a      	str	r2, [r7, #4]
 8007142:	603b      	str	r3, [r7, #0]
 8007144:	460b      	mov	r3, r1
 8007146:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007148:	2300      	movs	r3, #0
 800714a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800714c:	2300      	movs	r3, #0
 800714e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007156:	7af9      	ldrb	r1, [r7, #11]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	687a      	ldr	r2, [r7, #4]
 800715c:	f7fa fd69 	bl	8001c32 <HAL_PCD_EP_Transmit>
 8007160:	4603      	mov	r3, r0
 8007162:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007164:	7dbb      	ldrb	r3, [r7, #22]
 8007166:	2b03      	cmp	r3, #3
 8007168:	d816      	bhi.n	8007198 <USBD_LL_Transmit+0x60>
 800716a:	a201      	add	r2, pc, #4	; (adr r2, 8007170 <USBD_LL_Transmit+0x38>)
 800716c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007170:	08007181 	.word	0x08007181
 8007174:	08007187 	.word	0x08007187
 8007178:	0800718d 	.word	0x0800718d
 800717c:	08007193 	.word	0x08007193
    case HAL_OK :
      usb_status = USBD_OK;
 8007180:	2300      	movs	r3, #0
 8007182:	75fb      	strb	r3, [r7, #23]
    break;
 8007184:	e00b      	b.n	800719e <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007186:	2303      	movs	r3, #3
 8007188:	75fb      	strb	r3, [r7, #23]
    break;
 800718a:	e008      	b.n	800719e <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800718c:	2301      	movs	r3, #1
 800718e:	75fb      	strb	r3, [r7, #23]
    break;
 8007190:	e005      	b.n	800719e <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007192:	2303      	movs	r3, #3
 8007194:	75fb      	strb	r3, [r7, #23]
    break;
 8007196:	e002      	b.n	800719e <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	75fb      	strb	r3, [r7, #23]
    break;
 800719c:	bf00      	nop
  }
  return usb_status;
 800719e:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3718      	adds	r7, #24
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b086      	sub	sp, #24
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	60f8      	str	r0, [r7, #12]
 80071b0:	607a      	str	r2, [r7, #4]
 80071b2:	603b      	str	r3, [r7, #0]
 80071b4:	460b      	mov	r3, r1
 80071b6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071bc:	2300      	movs	r3, #0
 80071be:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80071c6:	7af9      	ldrb	r1, [r7, #11]
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	f7fa fcdb 	bl	8001b86 <HAL_PCD_EP_Receive>
 80071d0:	4603      	mov	r3, r0
 80071d2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80071d4:	7dbb      	ldrb	r3, [r7, #22]
 80071d6:	2b03      	cmp	r3, #3
 80071d8:	d816      	bhi.n	8007208 <USBD_LL_PrepareReceive+0x60>
 80071da:	a201      	add	r2, pc, #4	; (adr r2, 80071e0 <USBD_LL_PrepareReceive+0x38>)
 80071dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071e0:	080071f1 	.word	0x080071f1
 80071e4:	080071f7 	.word	0x080071f7
 80071e8:	080071fd 	.word	0x080071fd
 80071ec:	08007203 	.word	0x08007203
    case HAL_OK :
      usb_status = USBD_OK;
 80071f0:	2300      	movs	r3, #0
 80071f2:	75fb      	strb	r3, [r7, #23]
    break;
 80071f4:	e00b      	b.n	800720e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071f6:	2303      	movs	r3, #3
 80071f8:	75fb      	strb	r3, [r7, #23]
    break;
 80071fa:	e008      	b.n	800720e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071fc:	2301      	movs	r3, #1
 80071fe:	75fb      	strb	r3, [r7, #23]
    break;
 8007200:	e005      	b.n	800720e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007202:	2303      	movs	r3, #3
 8007204:	75fb      	strb	r3, [r7, #23]
    break;
 8007206:	e002      	b.n	800720e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007208:	2303      	movs	r3, #3
 800720a:	75fb      	strb	r3, [r7, #23]
    break;
 800720c:	bf00      	nop
  }
  return usb_status;
 800720e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3718      	adds	r7, #24
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}

08007218 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	460b      	mov	r3, r1
 8007222:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800722a:	78fa      	ldrb	r2, [r7, #3]
 800722c:	4611      	mov	r1, r2
 800722e:	4618      	mov	r0, r3
 8007230:	f7fa fce7 	bl	8001c02 <HAL_PCD_EP_GetRxCount>
 8007234:	4603      	mov	r3, r0
}
 8007236:	4618      	mov	r0, r3
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b082      	sub	sp, #8
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800724c:	78fb      	ldrb	r3, [r7, #3]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d002      	beq.n	8007258 <HAL_PCDEx_LPM_Callback+0x18>
 8007252:	2b01      	cmp	r3, #1
 8007254:	d01f      	beq.n	8007296 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007256:	e03b      	b.n	80072d0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a1b      	ldr	r3, [r3, #32]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d007      	beq.n	8007270 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007260:	f000 f854 	bl	800730c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007264:	4b1c      	ldr	r3, [pc, #112]	; (80072d8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007266:	691b      	ldr	r3, [r3, #16]
 8007268:	4a1b      	ldr	r2, [pc, #108]	; (80072d8 <HAL_PCDEx_LPM_Callback+0x98>)
 800726a:	f023 0306 	bic.w	r3, r3, #6
 800726e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	687a      	ldr	r2, [r7, #4]
 800727c:	6812      	ldr	r2, [r2, #0]
 800727e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007282:	f023 0301 	bic.w	r3, r3, #1
 8007286:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800728e:	4618      	mov	r0, r3
 8007290:	f7fe faa6 	bl	80057e0 <USBD_LL_Resume>
    break;
 8007294:	e01c      	b.n	80072d0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	687a      	ldr	r2, [r7, #4]
 80072a2:	6812      	ldr	r2, [r2, #0]
 80072a4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80072a8:	f043 0301 	orr.w	r3, r3, #1
 80072ac:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80072b4:	4618      	mov	r0, r3
 80072b6:	f7fe fa7d 	bl	80057b4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a1b      	ldr	r3, [r3, #32]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d005      	beq.n	80072ce <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80072c2:	4b05      	ldr	r3, [pc, #20]	; (80072d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80072c4:	691b      	ldr	r3, [r3, #16]
 80072c6:	4a04      	ldr	r2, [pc, #16]	; (80072d8 <HAL_PCDEx_LPM_Callback+0x98>)
 80072c8:	f043 0306 	orr.w	r3, r3, #6
 80072cc:	6113      	str	r3, [r2, #16]
    break;
 80072ce:	bf00      	nop
}
 80072d0:	bf00      	nop
 80072d2:	3708      	adds	r7, #8
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	e000ed00 	.word	0xe000ed00

080072dc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80072dc:	b480      	push	{r7}
 80072de:	b083      	sub	sp, #12
 80072e0:	af00      	add	r7, sp, #0
 80072e2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80072e4:	4b03      	ldr	r3, [pc, #12]	; (80072f4 <USBD_static_malloc+0x18>)
}
 80072e6:	4618      	mov	r0, r3
 80072e8:	370c      	adds	r7, #12
 80072ea:	46bd      	mov	sp, r7
 80072ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop
 80072f4:	200001f8 	.word	0x200001f8

080072f8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]

}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007310:	f7f9 f9f9 	bl	8000706 <SystemClock_Config>
}
 8007314:	bf00      	nop
 8007316:	bd80      	pop	{r7, pc}

08007318 <__libc_init_array>:
 8007318:	b570      	push	{r4, r5, r6, lr}
 800731a:	4d0d      	ldr	r5, [pc, #52]	; (8007350 <__libc_init_array+0x38>)
 800731c:	4c0d      	ldr	r4, [pc, #52]	; (8007354 <__libc_init_array+0x3c>)
 800731e:	1b64      	subs	r4, r4, r5
 8007320:	10a4      	asrs	r4, r4, #2
 8007322:	2600      	movs	r6, #0
 8007324:	42a6      	cmp	r6, r4
 8007326:	d109      	bne.n	800733c <__libc_init_array+0x24>
 8007328:	4d0b      	ldr	r5, [pc, #44]	; (8007358 <__libc_init_array+0x40>)
 800732a:	4c0c      	ldr	r4, [pc, #48]	; (800735c <__libc_init_array+0x44>)
 800732c:	f000 f82e 	bl	800738c <_init>
 8007330:	1b64      	subs	r4, r4, r5
 8007332:	10a4      	asrs	r4, r4, #2
 8007334:	2600      	movs	r6, #0
 8007336:	42a6      	cmp	r6, r4
 8007338:	d105      	bne.n	8007346 <__libc_init_array+0x2e>
 800733a:	bd70      	pop	{r4, r5, r6, pc}
 800733c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007340:	4798      	blx	r3
 8007342:	3601      	adds	r6, #1
 8007344:	e7ee      	b.n	8007324 <__libc_init_array+0xc>
 8007346:	f855 3b04 	ldr.w	r3, [r5], #4
 800734a:	4798      	blx	r3
 800734c:	3601      	adds	r6, #1
 800734e:	e7f2      	b.n	8007336 <__libc_init_array+0x1e>
 8007350:	08007524 	.word	0x08007524
 8007354:	08007524 	.word	0x08007524
 8007358:	08007524 	.word	0x08007524
 800735c:	08007528 	.word	0x08007528

08007360 <memcpy>:
 8007360:	440a      	add	r2, r1
 8007362:	4291      	cmp	r1, r2
 8007364:	f100 33ff 	add.w	r3, r0, #4294967295
 8007368:	d100      	bne.n	800736c <memcpy+0xc>
 800736a:	4770      	bx	lr
 800736c:	b510      	push	{r4, lr}
 800736e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007372:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007376:	4291      	cmp	r1, r2
 8007378:	d1f9      	bne.n	800736e <memcpy+0xe>
 800737a:	bd10      	pop	{r4, pc}

0800737c <memset>:
 800737c:	4402      	add	r2, r0
 800737e:	4603      	mov	r3, r0
 8007380:	4293      	cmp	r3, r2
 8007382:	d100      	bne.n	8007386 <memset+0xa>
 8007384:	4770      	bx	lr
 8007386:	f803 1b01 	strb.w	r1, [r3], #1
 800738a:	e7f9      	b.n	8007380 <memset+0x4>

0800738c <_init>:
 800738c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800738e:	bf00      	nop
 8007390:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007392:	bc08      	pop	{r3}
 8007394:	469e      	mov	lr, r3
 8007396:	4770      	bx	lr

08007398 <_fini>:
 8007398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800739a:	bf00      	nop
 800739c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800739e:	bc08      	pop	{r3}
 80073a0:	469e      	mov	lr, r3
 80073a2:	4770      	bx	lr
