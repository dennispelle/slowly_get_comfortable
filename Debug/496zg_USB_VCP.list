
496zg_USB_VCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007518  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  080076c4  080076c4  000176c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800786c  0800786c  000201b4  2**0
                  CONTENTS
  4 .ARM          00000000  0800786c  0800786c  000201b4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800786c  0800786c  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800786c  0800786c  0001786c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  08007874  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba4  200001b4  08007a28  000201b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d58  08007a28  00021d58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178e5  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d4  00000000  00000000  00037ac9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e80  00000000  00000000  0003afa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d18  00000000  00000000  0003be20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002afd9  00000000  00000000  0003cb38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011cef  00000000  00000000  00067b11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6c24  00000000  00000000  00079800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00170424  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039a4  00000000  00000000  00170478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	200001b4 	.word	0x200001b4
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080076ac 	.word	0x080076ac

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	200001b8 	.word	0x200001b8
 80001e8:	080076ac 	.word	0x080076ac

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b088      	sub	sp, #32
 8000214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000216:	f107 030c 	add.w	r3, r7, #12
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000226:	4b2e      	ldr	r3, [pc, #184]	; (80002e0 <MX_GPIO_Init+0xd0>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	4a2d      	ldr	r2, [pc, #180]	; (80002e0 <MX_GPIO_Init+0xd0>)
 800022c:	f043 0304 	orr.w	r3, r3, #4
 8000230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000232:	4b2b      	ldr	r3, [pc, #172]	; (80002e0 <MX_GPIO_Init+0xd0>)
 8000234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000236:	f003 0304 	and.w	r3, r3, #4
 800023a:	60bb      	str	r3, [r7, #8]
 800023c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <MX_GPIO_Init+0xd0>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000242:	4a27      	ldr	r2, [pc, #156]	; (80002e0 <MX_GPIO_Init+0xd0>)
 8000244:	f043 0302 	orr.w	r3, r3, #2
 8000248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_GPIO_Init+0xd0>)
 800024c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024e:	f003 0302 	and.w	r3, r3, #2
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_GPIO_Init+0xd0>)
 8000258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025a:	4a21      	ldr	r2, [pc, #132]	; (80002e0 <MX_GPIO_Init+0xd0>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_GPIO_Init+0xd0>)
 8000264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000266:	f003 0301 	and.w	r3, r3, #1
 800026a:	603b      	str	r3, [r7, #0]
 800026c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000274:	481b      	ldr	r0, [pc, #108]	; (80002e4 <MX_GPIO_Init+0xd4>)
 8000276:	f001 f821 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	481a      	ldr	r0, [pc, #104]	; (80002e8 <MX_GPIO_Init+0xd8>)
 8000280:	f001 f81c 	bl	80012bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000288:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800028a:	2300      	movs	r3, #0
 800028c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000292:	f107 030c 	add.w	r3, r7, #12
 8000296:	4619      	mov	r1, r3
 8000298:	4813      	ldr	r0, [pc, #76]	; (80002e8 <MX_GPIO_Init+0xd8>)
 800029a:	f000 fe65 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800029e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80002a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a4:	2301      	movs	r3, #1
 80002a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a8:	2300      	movs	r3, #0
 80002aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ac:	2300      	movs	r3, #0
 80002ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002b0:	f107 030c 	add.w	r3, r7, #12
 80002b4:	4619      	mov	r1, r3
 80002b6:	480b      	ldr	r0, [pc, #44]	; (80002e4 <MX_GPIO_Init+0xd4>)
 80002b8:	f000 fe56 	bl	8000f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c0:	2301      	movs	r3, #1
 80002c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80002cc:	f107 030c 	add.w	r3, r7, #12
 80002d0:	4619      	mov	r1, r3
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_GPIO_Init+0xd8>)
 80002d4:	f000 fe48 	bl	8000f68 <HAL_GPIO_Init>

}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40021000 	.word	0x40021000
 80002e4:	48000400 	.word	0x48000400
 80002e8:	48000800 	.word	0x48000800

080002ec <buffer_was_raus>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int buffer_was_raus() {
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
    int save_it;
    // wenn der letzte Speicherpunkt leer ist, dann wird auch nichts rausgebuffert.
    if (fifo_buffer.data[fifo_buffer.last]==0) {
 80002f2:	4b18      	ldr	r3, [pc, #96]	; (8000354 <buffer_was_raus+0x68>)
 80002f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b16      	ldr	r3, [pc, #88]	; (8000354 <buffer_was_raus+0x68>)
 80002fc:	5c9b      	ldrb	r3, [r3, r2]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d101      	bne.n	8000306 <buffer_was_raus+0x1a>
        return 0;
 8000302:	2300      	movs	r3, #0
 8000304:	e01f      	b.n	8000346 <buffer_was_raus+0x5a>
    } else {
        save_it=fifo_buffer.data[fifo_buffer.last];
 8000306:	4b13      	ldr	r3, [pc, #76]	; (8000354 <buffer_was_raus+0x68>)
 8000308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800030c:	461a      	mov	r2, r3
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <buffer_was_raus+0x68>)
 8000310:	5c9b      	ldrb	r3, [r3, r2]
 8000312:	607b      	str	r3, [r7, #4]
        fifo_buffer.data[fifo_buffer.last]=0;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <buffer_was_raus+0x68>)
 8000316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800031a:	461a      	mov	r2, r3
 800031c:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <buffer_was_raus+0x68>)
 800031e:	2100      	movs	r1, #0
 8000320:	5499      	strb	r1, [r3, r2]
        fifo_buffer.last++;
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <buffer_was_raus+0x68>)
 8000324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000328:	3301      	adds	r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <buffer_was_raus+0x68>)
 800032e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        if (fifo_buffer.last>=buffergroesse) {
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <buffer_was_raus+0x68>)
 8000334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000338:	2b3f      	cmp	r3, #63	; 0x3f
 800033a:	d903      	bls.n	8000344 <buffer_was_raus+0x58>
            fifo_buffer.last=0;
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <buffer_was_raus+0x68>)
 800033e:	2200      	movs	r2, #0
 8000340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
        return save_it;
 8000344:	687b      	ldr	r3, [r7, #4]
    }
}
 8000346:	4618      	mov	r0, r3
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	200001d0 	.word	0x200001d0

08000358 <buffer_was_rein>:

int buffer_was_rein(uint8_t status) {
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
    // Eine Null ist nichts, was ich reinbuffern will.
    if (status==0 || status==13) {
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d002      	beq.n	800036e <buffer_was_rein+0x16>
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	2b0d      	cmp	r3, #13
 800036c:	d101      	bne.n	8000372 <buffer_was_rein+0x1a>
        return 0;
 800036e:	2300      	movs	r3, #0
 8000370:	e026      	b.n	80003c0 <buffer_was_rein+0x68>
    }
    // Wenn der nächste Speicherplatz nicht leer ist, dann wird auch nichts reingebuffert.
    else if	(fifo_buffer.data[fifo_buffer.next]) {
 8000372:	4b16      	ldr	r3, [pc, #88]	; (80003cc <buffer_was_rein+0x74>)
 8000374:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000378:	461a      	mov	r2, r3
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <buffer_was_rein+0x74>)
 800037c:	5c9b      	ldrb	r3, [r3, r2]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <buffer_was_rein+0x2e>
        return 0;
 8000382:	2300      	movs	r3, #0
 8000384:	e01c      	b.n	80003c0 <buffer_was_rein+0x68>
    }
    else {
        // Wir haben freien speicher und Daten, also wird was reingebuffert.

        fifo_buffer.data[fifo_buffer.next]=status;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <buffer_was_rein+0x74>)
 8000388:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800038c:	4619      	mov	r1, r3
 800038e:	4a0f      	ldr	r2, [pc, #60]	; (80003cc <buffer_was_rein+0x74>)
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	5453      	strb	r3, [r2, r1]
        fifo_buffer.next++;
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <buffer_was_rein+0x74>)
 8000396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800039a:	3301      	adds	r3, #1
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <buffer_was_rein+0x74>)
 80003a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        // Wenn fifo_buffer.next größer als der Buffer wird, machen wir mit null weiter.
        if(fifo_buffer.next>=buffergroesse) {
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <buffer_was_rein+0x74>)
 80003a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80003aa:	2b3f      	cmp	r3, #63	; 0x3f
 80003ac:	d903      	bls.n	80003b6 <buffer_was_rein+0x5e>
            fifo_buffer.next=0;
 80003ae:	4b07      	ldr	r3, [pc, #28]	; (80003cc <buffer_was_rein+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
        fifo_buffer.changed=1;
 80003b6:	4b05      	ldr	r3, [pc, #20]	; (80003cc <buffer_was_rein+0x74>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        return 1;
 80003be:	2301      	movs	r3, #1
    }
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	200001d0 	.word	0x200001d0

080003d0 <check_usb_buffer>:

void check_usb_buffer() {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
    // Der komplette USB-Buffer in unseren Ringbuffer übertragen
    for (uint8_t z=0; z<buffergroesse; z++) {
 80003d6:	2300      	movs	r3, #0
 80003d8:	71fb      	strb	r3, [r7, #7]
 80003da:	e00d      	b.n	80003f8 <check_usb_buffer+0x28>
        buffer_was_rein(bufferdata[z]);
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <check_usb_buffer+0x38>)
 80003e0:	5cd3      	ldrb	r3, [r2, r3]
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff ffb7 	bl	8000358 <buffer_was_rein>
        bufferdata[z]=0;
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	4a06      	ldr	r2, [pc, #24]	; (8000408 <check_usb_buffer+0x38>)
 80003ee:	2100      	movs	r1, #0
 80003f0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t z=0; z<buffergroesse; z++) {
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	3301      	adds	r3, #1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	2b3f      	cmp	r3, #63	; 0x3f
 80003fc:	d9ee      	bls.n	80003dc <check_usb_buffer+0xc>
    }
}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	2000043c 	.word	0x2000043c

0800040c <blink_green>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void blink_green(int power) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, power);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	461a      	mov	r2, r3
 800041a:	2180      	movs	r1, #128	; 0x80
 800041c:	4803      	ldr	r0, [pc, #12]	; (800042c <blink_green+0x20>)
 800041e:	f000 ff4d 	bl	80012bc <HAL_GPIO_WritePin>
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	48000800 	.word	0x48000800

08000430 <blink_blue>:
void blink_blue(int power) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	if (power==2){
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b02      	cmp	r3, #2
 800043c:	d104      	bne.n	8000448 <blink_blue+0x18>
		HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 800043e:	2180      	movs	r1, #128	; 0x80
 8000440:	4807      	ldr	r0, [pc, #28]	; (8000460 <blink_blue+0x30>)
 8000442:	f000 ff53 	bl	80012ec <HAL_GPIO_TogglePin>
	}else{	
    	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, power);
	}
}
 8000446:	e006      	b.n	8000456 <blink_blue+0x26>
    	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, power);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	2180      	movs	r1, #128	; 0x80
 8000450:	4803      	ldr	r0, [pc, #12]	; (8000460 <blink_blue+0x30>)
 8000452:	f000 ff33 	bl	80012bc <HAL_GPIO_WritePin>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	48000400 	.word	0x48000400

08000464 <read_input>:
void blink_red(int power) {
    	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, power);
}
uint8_t read_input(){
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <read_input+0x14>)
 800046e:	f000 ff0d 	bl	800128c <HAL_GPIO_ReadPin>
 8000472:	4603      	mov	r3, r0
}
 8000474:	4618      	mov	r0, r3
 8000476:	bd80      	pop	{r7, pc}
 8000478:	48000800 	.word	0x48000800

0800047c <show_lifesigns>:
void show_lifesigns() {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
    static uint32_t time;
    if((HAL_GetTick()-time)>1000) {
 8000480:	f000 fc30 	bl	8000ce4 <HAL_GetTick>
 8000484:	4602      	mov	r2, r0
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <show_lifesigns+0x30>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	1ad3      	subs	r3, r2, r3
 800048c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000490:	d909      	bls.n	80004a6 <show_lifesigns+0x2a>
        time=HAL_GetTick();
 8000492:	f000 fc27 	bl	8000ce4 <HAL_GetTick>
 8000496:	4603      	mov	r3, r0
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <show_lifesigns+0x30>)
 800049a:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800049c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004a0:	4803      	ldr	r0, [pc, #12]	; (80004b0 <show_lifesigns+0x34>)
 80004a2:	f000 ff23 	bl	80012ec <HAL_GPIO_TogglePin>
    }
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000214 	.word	0x20000214
 80004b0:	48000400 	.word	0x48000400

080004b4 <get_fifo_buffer_length>:
uint8_t get_fifo_buffer_length() {
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
    uint8_t n;
    if (fifo_buffer.next<fifo_buffer.last) {
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <get_fifo_buffer_length+0x50>)
 80004bc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <get_fifo_buffer_length+0x50>)
 80004c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d20a      	bcs.n	80004e0 <get_fifo_buffer_length+0x2c>
        n = fifo_buffer.next + buffergroesse - fifo_buffer.last +1;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <get_fifo_buffer_length+0x50>)
 80004cc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <get_fifo_buffer_length+0x50>)
 80004d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80004d6:	1ad3      	subs	r3, r2, r3
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	3341      	adds	r3, #65	; 0x41
 80004dc:	71fb      	strb	r3, [r7, #7]
 80004de:	e009      	b.n	80004f4 <get_fifo_buffer_length+0x40>
    } else {
        n = fifo_buffer.next - fifo_buffer.last + 1;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <get_fifo_buffer_length+0x50>)
 80004e2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80004e6:	4b07      	ldr	r3, [pc, #28]	; (8000504 <get_fifo_buffer_length+0x50>)
 80004e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	3301      	adds	r3, #1
 80004f2:	71fb      	strb	r3, [r7, #7]
    }
    return n;
 80004f4:	79fb      	ldrb	r3, [r7, #7]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	200001d0 	.word	0x200001d0

08000508 <check_command>:
#define input_clock "clock"
#define input_4 "do 4"
#define input_read "read"
#define input_show "show"

uint8_t check_command() {
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b084      	sub	sp, #16
 800050c:	af00      	add	r7, sp, #0
 800050e:	466b      	mov	r3, sp
 8000510:	461d      	mov	r5, r3
    uint8_t length=get_fifo_buffer_length();
 8000512:	f7ff ffcf 	bl	80004b4 <get_fifo_buffer_length>
 8000516:	4603      	mov	r3, r0
 8000518:	73bb      	strb	r3, [r7, #14]
    uint8_t answer[length];
 800051a:	7bbc      	ldrb	r4, [r7, #14]
 800051c:	4623      	mov	r3, r4
 800051e:	3b01      	subs	r3, #1
 8000520:	60bb      	str	r3, [r7, #8]
 8000522:	b2e0      	uxtb	r0, r4
 8000524:	f04f 0100 	mov.w	r1, #0
 8000528:	f04f 0200 	mov.w	r2, #0
 800052c:	f04f 0300 	mov.w	r3, #0
 8000530:	00cb      	lsls	r3, r1, #3
 8000532:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000536:	00c2      	lsls	r2, r0, #3
 8000538:	b2e0      	uxtb	r0, r4
 800053a:	f04f 0100 	mov.w	r1, #0
 800053e:	f04f 0200 	mov.w	r2, #0
 8000542:	f04f 0300 	mov.w	r3, #0
 8000546:	00cb      	lsls	r3, r1, #3
 8000548:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800054c:	00c2      	lsls	r2, r0, #3
 800054e:	4623      	mov	r3, r4
 8000550:	3307      	adds	r3, #7
 8000552:	08db      	lsrs	r3, r3, #3
 8000554:	00db      	lsls	r3, r3, #3
 8000556:	ebad 0d03 	sub.w	sp, sp, r3
 800055a:	466b      	mov	r3, sp
 800055c:	3300      	adds	r3, #0
 800055e:	607b      	str	r3, [r7, #4]
    for (uint8_t i=0; i<length; i++) {
 8000560:	2300      	movs	r3, #0
 8000562:	73fb      	strb	r3, [r7, #15]
 8000564:	e009      	b.n	800057a <check_command+0x72>
        answer[i]=buffer_was_raus();
 8000566:	f7ff fec1 	bl	80002ec <buffer_was_raus>
 800056a:	4602      	mov	r2, r0
 800056c:	7bfb      	ldrb	r3, [r7, #15]
 800056e:	b2d1      	uxtb	r1, r2
 8000570:	687a      	ldr	r2, [r7, #4]
 8000572:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i=0; i<length; i++) {
 8000574:	7bfb      	ldrb	r3, [r7, #15]
 8000576:	3301      	adds	r3, #1
 8000578:	73fb      	strb	r3, [r7, #15]
 800057a:	7bfa      	ldrb	r2, [r7, #15]
 800057c:	7bbb      	ldrb	r3, [r7, #14]
 800057e:	429a      	cmp	r2, r3
 8000580:	d3f1      	bcc.n	8000566 <check_command+0x5e>
    }
	// vergleich der eingaben mit den vordefinierten befehlen
    if 	 (!strcmp(answer,input_help)) {
 8000582:	687b      	ldr	r3, [r7, #4]
 8000584:	4920      	ldr	r1, [pc, #128]	; (8000608 <check_command+0x100>)
 8000586:	4618      	mov	r0, r3
 8000588:	f7ff fe30 	bl	80001ec <strcmp>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d101      	bne.n	8000596 <check_command+0x8e>
        return 1;
 8000592:	2301      	movs	r3, #1
 8000594:	e032      	b.n	80005fc <check_command+0xf4>
    } else if (!strcmp(answer,input_calc)) {
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	491c      	ldr	r1, [pc, #112]	; (800060c <check_command+0x104>)
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff fe26 	bl	80001ec <strcmp>
 80005a0:	4603      	mov	r3, r0
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d101      	bne.n	80005aa <check_command+0xa2>
        return 2;
 80005a6:	2302      	movs	r3, #2
 80005a8:	e028      	b.n	80005fc <check_command+0xf4>
    } else if (!strcmp(answer,input_clock)) {
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	4918      	ldr	r1, [pc, #96]	; (8000610 <check_command+0x108>)
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff fe1c 	bl	80001ec <strcmp>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d101      	bne.n	80005be <check_command+0xb6>
        return 3;
 80005ba:	2303      	movs	r3, #3
 80005bc:	e01e      	b.n	80005fc <check_command+0xf4>
    } else if (!strcmp(answer,input_4)) {
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	4914      	ldr	r1, [pc, #80]	; (8000614 <check_command+0x10c>)
 80005c2:	4618      	mov	r0, r3
 80005c4:	f7ff fe12 	bl	80001ec <strcmp>
 80005c8:	4603      	mov	r3, r0
 80005ca:	2b00      	cmp	r3, #0
 80005cc:	d101      	bne.n	80005d2 <check_command+0xca>
        return 4;
 80005ce:	2304      	movs	r3, #4
 80005d0:	e014      	b.n	80005fc <check_command+0xf4>
    } else if (!strcmp(answer,input_read)) {
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	4910      	ldr	r1, [pc, #64]	; (8000618 <check_command+0x110>)
 80005d6:	4618      	mov	r0, r3
 80005d8:	f7ff fe08 	bl	80001ec <strcmp>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d101      	bne.n	80005e6 <check_command+0xde>
        return 5;
 80005e2:	2305      	movs	r3, #5
 80005e4:	e00a      	b.n	80005fc <check_command+0xf4>
    } else if (!strcmp(answer,input_show)) {
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	490c      	ldr	r1, [pc, #48]	; (800061c <check_command+0x114>)
 80005ea:	4618      	mov	r0, r3
 80005ec:	f7ff fdfe 	bl	80001ec <strcmp>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d101      	bne.n	80005fa <check_command+0xf2>
        return 6;
 80005f6:	2306      	movs	r3, #6
 80005f8:	e000      	b.n	80005fc <check_command+0xf4>
    } else {
        return 0;
 80005fa:	2300      	movs	r3, #0
 80005fc:	46ad      	mov	sp, r5
    }


}
 80005fe:	4618      	mov	r0, r3
 8000600:	3710      	adds	r7, #16
 8000602:	46bd      	mov	sp, r7
 8000604:	bdb0      	pop	{r4, r5, r7, pc}
 8000606:	bf00      	nop
 8000608:	080076c4 	.word	0x080076c4
 800060c:	080076cc 	.word	0x080076cc
 8000610:	080076d4 	.word	0x080076d4
 8000614:	080076dc 	.word	0x080076dc
 8000618:	080076e4 	.word	0x080076e4
 800061c:	080076ec 	.word	0x080076ec

08000620 <check_number>:
uint16_t check_number(){
 8000620:	b5b0      	push	{r4, r5, r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	466b      	mov	r3, sp
 8000628:	461d      	mov	r5, r3
	// diese funktion übersetzt eingaben in Integer;
    uint8_t length=get_fifo_buffer_length();
 800062a:	f7ff ff43 	bl	80004b4 <get_fifo_buffer_length>
 800062e:	4603      	mov	r3, r0
 8000630:	727b      	strb	r3, [r7, #9]
    uint8_t answer[length];
 8000632:	7a7c      	ldrb	r4, [r7, #9]
 8000634:	4623      	mov	r3, r4
 8000636:	3b01      	subs	r3, #1
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	b2e0      	uxtb	r0, r4
 800063c:	f04f 0100 	mov.w	r1, #0
 8000640:	f04f 0200 	mov.w	r2, #0
 8000644:	f04f 0300 	mov.w	r3, #0
 8000648:	00cb      	lsls	r3, r1, #3
 800064a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800064e:	00c2      	lsls	r2, r0, #3
 8000650:	b2e0      	uxtb	r0, r4
 8000652:	f04f 0100 	mov.w	r1, #0
 8000656:	f04f 0200 	mov.w	r2, #0
 800065a:	f04f 0300 	mov.w	r3, #0
 800065e:	00cb      	lsls	r3, r1, #3
 8000660:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000664:	00c2      	lsls	r2, r0, #3
 8000666:	4623      	mov	r3, r4
 8000668:	3307      	adds	r3, #7
 800066a:	08db      	lsrs	r3, r3, #3
 800066c:	00db      	lsls	r3, r3, #3
 800066e:	ebad 0d03 	sub.w	sp, sp, r3
 8000672:	466b      	mov	r3, sp
 8000674:	3300      	adds	r3, #0
 8000676:	603b      	str	r3, [r7, #0]
    uint16_t translation=0;
 8000678:	2300      	movs	r3, #0
 800067a:	817b      	strh	r3, [r7, #10]
    for (uint8_t i=0; i<length; i++) {
 800067c:	2300      	movs	r3, #0
 800067e:	737b      	strb	r3, [r7, #13]
 8000680:	e009      	b.n	8000696 <check_number+0x76>
        answer[i]=buffer_was_raus();
 8000682:	f7ff fe33 	bl	80002ec <buffer_was_raus>
 8000686:	4602      	mov	r2, r0
 8000688:	7b7b      	ldrb	r3, [r7, #13]
 800068a:	b2d1      	uxtb	r1, r2
 800068c:	683a      	ldr	r2, [r7, #0]
 800068e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i=0; i<length; i++) {
 8000690:	7b7b      	ldrb	r3, [r7, #13]
 8000692:	3301      	adds	r3, #1
 8000694:	737b      	strb	r3, [r7, #13]
 8000696:	7b7a      	ldrb	r2, [r7, #13]
 8000698:	7a7b      	ldrb	r3, [r7, #9]
 800069a:	429a      	cmp	r2, r3
 800069c:	d3f1      	bcc.n	8000682 <check_number+0x62>
    }
    for (uint8_t i=0; i<length; i++) {
 800069e:	2300      	movs	r3, #0
 80006a0:	73bb      	strb	r3, [r7, #14]
 80006a2:	e012      	b.n	80006ca <check_number+0xaa>
        if(answer[i]>=47 && answer[i]<=57){
 80006a4:	7bbb      	ldrb	r3, [r7, #14]
 80006a6:	683a      	ldr	r2, [r7, #0]
 80006a8:	5cd3      	ldrb	r3, [r2, r3]
 80006aa:	2b2e      	cmp	r3, #46	; 0x2e
 80006ac:	d90a      	bls.n	80006c4 <check_number+0xa4>
 80006ae:	7bbb      	ldrb	r3, [r7, #14]
 80006b0:	683a      	ldr	r2, [r7, #0]
 80006b2:	5cd3      	ldrb	r3, [r2, r3]
 80006b4:	2b39      	cmp	r3, #57	; 0x39
 80006b6:	d805      	bhi.n	80006c4 <check_number+0xa4>
		buffer_was_rein(answer[i]);
 80006b8:	7bbb      	ldrb	r3, [r7, #14]
 80006ba:	683a      	ldr	r2, [r7, #0]
 80006bc:	5cd3      	ldrb	r3, [r2, r3]
 80006be:	4618      	mov	r0, r3
 80006c0:	f7ff fe4a 	bl	8000358 <buffer_was_rein>
    for (uint8_t i=0; i<length; i++) {
 80006c4:	7bbb      	ldrb	r3, [r7, #14]
 80006c6:	3301      	adds	r3, #1
 80006c8:	73bb      	strb	r3, [r7, #14]
 80006ca:	7bba      	ldrb	r2, [r7, #14]
 80006cc:	7a7b      	ldrb	r3, [r7, #9]
 80006ce:	429a      	cmp	r2, r3
 80006d0:	d3e8      	bcc.n	80006a4 <check_number+0x84>
	}
    }
    length=get_fifo_buffer_length();
 80006d2:	f7ff feef 	bl	80004b4 <get_fifo_buffer_length>
 80006d6:	4603      	mov	r3, r0
 80006d8:	727b      	strb	r3, [r7, #9]
    for (uint8_t i=0; i<length; i++) {
 80006da:	2300      	movs	r3, #0
 80006dc:	73fb      	strb	r3, [r7, #15]
 80006de:	e016      	b.n	800070e <check_number+0xee>
        answer[i]=buffer_was_raus()-47;
 80006e0:	f7ff fe04 	bl	80002ec <buffer_was_raus>
 80006e4:	4603      	mov	r3, r0
 80006e6:	b2da      	uxtb	r2, r3
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	3a2f      	subs	r2, #47	; 0x2f
 80006ec:	b2d1      	uxtb	r1, r2
 80006ee:	683a      	ldr	r2, [r7, #0]
 80006f0:	54d1      	strb	r1, [r2, r3]
	translation+=answer[i]*(1<<i);
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	5cd3      	ldrb	r3, [r2, r3]
 80006f8:	461a      	mov	r2, r3
 80006fa:	7bfb      	ldrb	r3, [r7, #15]
 80006fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000700:	b29a      	uxth	r2, r3
 8000702:	897b      	ldrh	r3, [r7, #10]
 8000704:	4413      	add	r3, r2
 8000706:	817b      	strh	r3, [r7, #10]
    for (uint8_t i=0; i<length; i++) {
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	3301      	adds	r3, #1
 800070c:	73fb      	strb	r3, [r7, #15]
 800070e:	7bfa      	ldrb	r2, [r7, #15]
 8000710:	7a7b      	ldrb	r3, [r7, #9]
 8000712:	429a      	cmp	r2, r3
 8000714:	d3e4      	bcc.n	80006e0 <check_number+0xc0>
    }
    return translation;
 8000716:	897b      	ldrh	r3, [r7, #10]
 8000718:	46ad      	mov	sp, r5

	
}
 800071a:	4618      	mov	r0, r3
 800071c:	3710      	adds	r7, #16
 800071e:	46bd      	mov	sp, r7
 8000720:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000724 <calculate_data>:
void calculate_data(){
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
	// hier werden die eingelesenen datenbits zu chars konvertriert
	for (uint8_t j=0;j<32;j++){
 800072a:	2300      	movs	r3, #0
 800072c:	71fb      	strb	r3, [r7, #7]
 800072e:	e00a      	b.n	8000746 <calculate_data+0x22>
		// mach aus True and False '0' und '1'
		datenpaket.bit[j]+=48;
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	4a0a      	ldr	r2, [pc, #40]	; (800075c <calculate_data+0x38>)
 8000734:	5cd2      	ldrb	r2, [r2, r3]
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	3230      	adds	r2, #48	; 0x30
 800073a:	b2d1      	uxtb	r1, r2
 800073c:	4a07      	ldr	r2, [pc, #28]	; (800075c <calculate_data+0x38>)
 800073e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j=0;j<32;j++){
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	3301      	adds	r3, #1
 8000744:	71fb      	strb	r3, [r7, #7]
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b1f      	cmp	r3, #31
 800074a:	d9f1      	bls.n	8000730 <calculate_data+0xc>
	}
}
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000000 	.word	0x20000000

08000760 <start_reading_Spi>:


void start_reading_Spi(){
 8000760:	b590      	push	{r4, r7, lr}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
	//Diese Funktion soll den SPI_sensor auslesen;
	uint32_t tick_time=HAL_GetTick();
 8000766:	f000 fabd 	bl	8000ce4 <HAL_GetTick>
 800076a:	6078      	str	r0, [r7, #4]
	blink_green(1);
 800076c:	2001      	movs	r0, #1
 800076e:	f7ff fe4d 	bl	800040c <blink_green>
	blink_blue(0);
 8000772:	2000      	movs	r0, #0
 8000774:	f7ff fe5c 	bl	8000430 <blink_blue>
	while(HAL_GetTick()-tick_time<datenpaket.wait){}
 8000778:	bf00      	nop
 800077a:	f000 fab3 	bl	8000ce4 <HAL_GetTick>
 800077e:	4602      	mov	r2, r0
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	1ad3      	subs	r3, r2, r3
 8000784:	4a27      	ldr	r2, [pc, #156]	; (8000824 <start_reading_Spi+0xc4>)
 8000786:	8c52      	ldrh	r2, [r2, #34]	; 0x22
 8000788:	4293      	cmp	r3, r2
 800078a:	d3f6      	bcc.n	800077a <start_reading_Spi+0x1a>
	tick_time=HAL_GetTick();
 800078c:	f000 faaa 	bl	8000ce4 <HAL_GetTick>
 8000790:	6078      	str	r0, [r7, #4]
	blink_green(0);
 8000792:	2000      	movs	r0, #0
 8000794:	f7ff fe3a 	bl	800040c <blink_green>
	for (uint8_t i=0;i<32;i++){
 8000798:	2300      	movs	r3, #0
 800079a:	70fb      	strb	r3, [r7, #3]
 800079c:	e037      	b.n	800080e <start_reading_Spi+0xae>
		// 0=aus,1=an,2=switch on/off
		blink_blue(1);
 800079e:	2001      	movs	r0, #1
 80007a0:	f7ff fe46 	bl	8000430 <blink_blue>
		while(HAL_GetTick()-tick_time<datenpaket.clk){}
 80007a4:	bf00      	nop
 80007a6:	f000 fa9d 	bl	8000ce4 <HAL_GetTick>
 80007aa:	4602      	mov	r2, r0
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	4a1c      	ldr	r2, [pc, #112]	; (8000824 <start_reading_Spi+0xc4>)
 80007b2:	8c12      	ldrh	r2, [r2, #32]
 80007b4:	4293      	cmp	r3, r2
 80007b6:	d3f6      	bcc.n	80007a6 <start_reading_Spi+0x46>
		tick_time=HAL_GetTick();
 80007b8:	f000 fa94 	bl	8000ce4 <HAL_GetTick>
 80007bc:	6078      	str	r0, [r7, #4]
		// schreibe den input an die stelle i von datenpaket;
		datenpaket.bit[i]=read_input();
 80007be:	78fc      	ldrb	r4, [r7, #3]
 80007c0:	f7ff fe50 	bl	8000464 <read_input>
 80007c4:	4603      	mov	r3, r0
 80007c6:	461a      	mov	r2, r3
 80007c8:	4b16      	ldr	r3, [pc, #88]	; (8000824 <start_reading_Spi+0xc4>)
 80007ca:	551a      	strb	r2, [r3, r4]
		while(HAL_GetTick()-tick_time<datenpaket.clk){}
 80007cc:	bf00      	nop
 80007ce:	f000 fa89 	bl	8000ce4 <HAL_GetTick>
 80007d2:	4602      	mov	r2, r0
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	1ad3      	subs	r3, r2, r3
 80007d8:	4a12      	ldr	r2, [pc, #72]	; (8000824 <start_reading_Spi+0xc4>)
 80007da:	8c12      	ldrh	r2, [r2, #32]
 80007dc:	4293      	cmp	r3, r2
 80007de:	d3f6      	bcc.n	80007ce <start_reading_Spi+0x6e>
		tick_time=HAL_GetTick();
 80007e0:	f000 fa80 	bl	8000ce4 <HAL_GetTick>
 80007e4:	6078      	str	r0, [r7, #4]
		blink_blue(0);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff fe22 	bl	8000430 <blink_blue>
		while(HAL_GetTick()-tick_time<datenpaket.clk*2){}
 80007ec:	bf00      	nop
 80007ee:	f000 fa79 	bl	8000ce4 <HAL_GetTick>
 80007f2:	4602      	mov	r2, r0
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	1ad3      	subs	r3, r2, r3
 80007f8:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <start_reading_Spi+0xc4>)
 80007fa:	8c12      	ldrh	r2, [r2, #32]
 80007fc:	0052      	lsls	r2, r2, #1
 80007fe:	4293      	cmp	r3, r2
 8000800:	d3f5      	bcc.n	80007ee <start_reading_Spi+0x8e>
		tick_time=HAL_GetTick();
 8000802:	f000 fa6f 	bl	8000ce4 <HAL_GetTick>
 8000806:	6078      	str	r0, [r7, #4]
	for (uint8_t i=0;i<32;i++){
 8000808:	78fb      	ldrb	r3, [r7, #3]
 800080a:	3301      	adds	r3, #1
 800080c:	70fb      	strb	r3, [r7, #3]
 800080e:	78fb      	ldrb	r3, [r7, #3]
 8000810:	2b1f      	cmp	r3, #31
 8000812:	d9c4      	bls.n	800079e <start_reading_Spi+0x3e>
		
	}
	blink_green(1);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fdf9 	bl	800040c <blink_green>
}
 800081a:	bf00      	nop
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bd90      	pop	{r4, r7, pc}
 8000822:	bf00      	nop
 8000824:	20000000 	.word	0x20000000

08000828 <write_new_line_usb>:
#define usb_delay 1
void write_new_line_usb(uint8_t wait){
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
 800082e:	4603      	mov	r3, r0
 8000830:	71fb      	strb	r3, [r7, #7]
	// springt in nächste zeile und an den Anfang. bei 0 
	if (wait){	
 8000832:	79fb      	ldrb	r3, [r7, #7]
 8000834:	2b00      	cmp	r3, #0
 8000836:	d002      	beq.n	800083e <write_new_line_usb+0x16>
	HAL_Delay(usb_delay);
 8000838:	2001      	movs	r0, #1
 800083a:	f000 fa5f 	bl	8000cfc <HAL_Delay>
	}
	CDC_Transmit_FS("\n\r",strlen("\n\r"));
 800083e:	2102      	movs	r1, #2
 8000840:	4806      	ldr	r0, [pc, #24]	; (800085c <write_new_line_usb+0x34>)
 8000842:	f006 f95b 	bl	8006afc <CDC_Transmit_FS>
	if (wait){	
 8000846:	79fb      	ldrb	r3, [r7, #7]
 8000848:	2b00      	cmp	r3, #0
 800084a:	d002      	beq.n	8000852 <write_new_line_usb+0x2a>
	HAL_Delay(usb_delay);
 800084c:	2001      	movs	r0, #1
 800084e:	f000 fa55 	bl	8000cfc <HAL_Delay>
	}
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	080076f4 	.word	0x080076f4

08000860 <show_commands>:

void show_commands(){
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
	// diese Funktion listet alle möglichen Befehlseingaben auf
	CDC_Transmit_FS(input_help,strlen(input_help));
 8000864:	2104      	movs	r1, #4
 8000866:	4812      	ldr	r0, [pc, #72]	; (80008b0 <show_commands+0x50>)
 8000868:	f006 f948 	bl	8006afc <CDC_Transmit_FS>
	write_new_line_usb(1);
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff ffdb 	bl	8000828 <write_new_line_usb>
	CDC_Transmit_FS(input_read,strlen(input_read));
 8000872:	2104      	movs	r1, #4
 8000874:	480f      	ldr	r0, [pc, #60]	; (80008b4 <show_commands+0x54>)
 8000876:	f006 f941 	bl	8006afc <CDC_Transmit_FS>
	write_new_line_usb(1);
 800087a:	2001      	movs	r0, #1
 800087c:	f7ff ffd4 	bl	8000828 <write_new_line_usb>
	CDC_Transmit_FS(input_calc,strlen(input_calc));
 8000880:	2104      	movs	r1, #4
 8000882:	480d      	ldr	r0, [pc, #52]	; (80008b8 <show_commands+0x58>)
 8000884:	f006 f93a 	bl	8006afc <CDC_Transmit_FS>
	write_new_line_usb(1);
 8000888:	2001      	movs	r0, #1
 800088a:	f7ff ffcd 	bl	8000828 <write_new_line_usb>
	CDC_Transmit_FS(input_show,strlen(input_show));
 800088e:	2104      	movs	r1, #4
 8000890:	480a      	ldr	r0, [pc, #40]	; (80008bc <show_commands+0x5c>)
 8000892:	f006 f933 	bl	8006afc <CDC_Transmit_FS>
	write_new_line_usb(1);
 8000896:	2001      	movs	r0, #1
 8000898:	f7ff ffc6 	bl	8000828 <write_new_line_usb>
	CDC_Transmit_FS(input_clock,strlen(input_clock));
 800089c:	2105      	movs	r1, #5
 800089e:	4808      	ldr	r0, [pc, #32]	; (80008c0 <show_commands+0x60>)
 80008a0:	f006 f92c 	bl	8006afc <CDC_Transmit_FS>
	write_new_line_usb(1);
 80008a4:	2001      	movs	r0, #1
 80008a6:	f7ff ffbf 	bl	8000828 <write_new_line_usb>
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	080076c4 	.word	0x080076c4
 80008b4:	080076e4 	.word	0x080076e4
 80008b8:	080076cc 	.word	0x080076cc
 80008bc:	080076ec 	.word	0x080076ec
 80008c0:	080076d4 	.word	0x080076d4

080008c4 <show_data>:
#define response_show_bits "\n\r received bits:\n\r"
#define response_show_bytes "\n\r received bytes:"
#define response_read "\n\r starting reading routine\n\r"
#define response_done "\n\r done reading\n\r"
#define response_d "\n\r invalid input \n\r try help\n\r"
void show_data(){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	    // Diese funktion soll die gemessenen Daten anzeigen
            CDC_Transmit_FS(response_show_bits, strlen(response_show_bits));
 80008c8:	2113      	movs	r1, #19
 80008ca:	480b      	ldr	r0, [pc, #44]	; (80008f8 <show_data+0x34>)
 80008cc:	f006 f916 	bl	8006afc <CDC_Transmit_FS>
	    HAL_Delay(usb_delay);
 80008d0:	2001      	movs	r0, #1
 80008d2:	f000 fa13 	bl	8000cfc <HAL_Delay>
	    CDC_Transmit_FS(datenpaket.bit,strlen(datenpaket.bit));
 80008d6:	4809      	ldr	r0, [pc, #36]	; (80008fc <show_data+0x38>)
 80008d8:	f7ff fc92 	bl	8000200 <strlen>
 80008dc:	4603      	mov	r3, r0
 80008de:	b29b      	uxth	r3, r3
 80008e0:	4619      	mov	r1, r3
 80008e2:	4806      	ldr	r0, [pc, #24]	; (80008fc <show_data+0x38>)
 80008e4:	f006 f90a 	bl	8006afc <CDC_Transmit_FS>
	    HAL_Delay(usb_delay);
 80008e8:	2001      	movs	r0, #1
 80008ea:	f000 fa07 	bl	8000cfc <HAL_Delay>
	    write_new_line_usb(0);
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff ff9a 	bl	8000828 <write_new_line_usb>
	    /*
	    CDC_Transmit_FS(response_show_bytes,strlen(response_show_bytes));
	    HAL_Delay(usb_delay);
	    CDC_Transmit_FS(datenpaket.byte,strlen(datenpaket.byte));
	*/
}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	080076f8 	.word	0x080076f8
 80008fc:	20000000 	.word	0x20000000

08000900 <answer_command>:

void answer_command() {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
    uint8_t cmd=check_command();
 8000906:	f7ff fdff 	bl	8000508 <check_command>
 800090a:	4603      	mov	r3, r0
 800090c:	71fb      	strb	r3, [r7, #7]
    if(fifo_buffer.changed) {
 800090e:	4b38      	ldr	r3, [pc, #224]	; (80009f0 <answer_command+0xf0>)
 8000910:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000914:	2b00      	cmp	r3, #0
 8000916:	d053      	beq.n	80009c0 <answer_command+0xc0>
        switch (cmd) {
 8000918:	79fb      	ldrb	r3, [r7, #7]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d84b      	bhi.n	80009b6 <answer_command+0xb6>
 800091e:	a201      	add	r2, pc, #4	; (adr r2, 8000924 <answer_command+0x24>)
 8000920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000924:	080009ad 	.word	0x080009ad
 8000928:	08000941 	.word	0x08000941
 800092c:	0800094f 	.word	0x0800094f
 8000930:	0800095d 	.word	0x0800095d
 8000934:	080009c5 	.word	0x080009c5
 8000938:	08000991 	.word	0x08000991
 800093c:	080009a7 	.word	0x080009a7
        case 1:
            CDC_Transmit_FS(response_1, strlen(response_1));
 8000940:	2124      	movs	r1, #36	; 0x24
 8000942:	482c      	ldr	r0, [pc, #176]	; (80009f4 <answer_command+0xf4>)
 8000944:	f006 f8da 	bl	8006afc <CDC_Transmit_FS>
	    show_commands();	
 8000948:	f7ff ff8a 	bl	8000860 <show_commands>
            break;
 800094c:	e03b      	b.n	80009c6 <answer_command+0xc6>
        case 2:
            CDC_Transmit_FS(response_2, strlen(response_2));
 800094e:	211a      	movs	r1, #26
 8000950:	4829      	ldr	r0, [pc, #164]	; (80009f8 <answer_command+0xf8>)
 8000952:	f006 f8d3 	bl	8006afc <CDC_Transmit_FS>
	    calculate_data();
 8000956:	f7ff fee5 	bl	8000724 <calculate_data>
            break;
 800095a:	e034      	b.n	80009c6 <answer_command+0xc6>
        case 3:
	    // neue clk einstellungen
            CDC_Transmit_FS(response_3, strlen(response_3));
 800095c:	211a      	movs	r1, #26
 800095e:	4827      	ldr	r0, [pc, #156]	; (80009fc <answer_command+0xfc>)
 8000960:	f006 f8cc 	bl	8006afc <CDC_Transmit_FS>
	   	
		while(fifo_buffer.next==fifo_buffer.last){
 8000964:	e007      	b.n	8000976 <answer_command+0x76>
			check_usb_buffer();
 8000966:	f7ff fd33 	bl	80003d0 <check_usb_buffer>
			datenpaket.clk=check_number();
 800096a:	f7ff fe59 	bl	8000620 <check_number>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b23      	ldr	r3, [pc, #140]	; (8000a00 <answer_command+0x100>)
 8000974:	841a      	strh	r2, [r3, #32]
		while(fifo_buffer.next==fifo_buffer.last){
 8000976:	4b1e      	ldr	r3, [pc, #120]	; (80009f0 <answer_command+0xf0>)
 8000978:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800097c:	4b1c      	ldr	r3, [pc, #112]	; (80009f0 <answer_command+0xf0>)
 800097e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000982:	429a      	cmp	r2, r3
 8000984:	d0ef      	beq.n	8000966 <answer_command+0x66>
		}
	    //bestätigung neuer clk einstellung
            CDC_Transmit_FS(response_4, strlen(response_4));
 8000986:	2120      	movs	r1, #32
 8000988:	481e      	ldr	r0, [pc, #120]	; (8000a04 <answer_command+0x104>)
 800098a:	f006 f8b7 	bl	8006afc <CDC_Transmit_FS>
	    break;
 800098e:	e01a      	b.n	80009c6 <answer_command+0xc6>
        case 4:
	
            break;
        case 5:
            CDC_Transmit_FS(response_read, strlen(response_read));
 8000990:	211d      	movs	r1, #29
 8000992:	481d      	ldr	r0, [pc, #116]	; (8000a08 <answer_command+0x108>)
 8000994:	f006 f8b2 	bl	8006afc <CDC_Transmit_FS>
            start_reading_Spi();
 8000998:	f7ff fee2 	bl	8000760 <start_reading_Spi>
            CDC_Transmit_FS(response_done, strlen(response_done));
 800099c:	2111      	movs	r1, #17
 800099e:	481b      	ldr	r0, [pc, #108]	; (8000a0c <answer_command+0x10c>)
 80009a0:	f006 f8ac 	bl	8006afc <CDC_Transmit_FS>
            break;
 80009a4:	e00f      	b.n	80009c6 <answer_command+0xc6>
        case 6:
	    show_data();
 80009a6:	f7ff ff8d 	bl	80008c4 <show_data>
	    break;
 80009aa:	e00c      	b.n	80009c6 <answer_command+0xc6>
	case 0:
            CDC_Transmit_FS(response_d, strlen(response_d));
 80009ac:	211e      	movs	r1, #30
 80009ae:	4818      	ldr	r0, [pc, #96]	; (8000a10 <answer_command+0x110>)
 80009b0:	f006 f8a4 	bl	8006afc <CDC_Transmit_FS>
            break;
 80009b4:	e007      	b.n	80009c6 <answer_command+0xc6>
        default:
            CDC_Transmit_FS(response_d, strlen(response_d));
 80009b6:	211e      	movs	r1, #30
 80009b8:	4815      	ldr	r0, [pc, #84]	; (8000a10 <answer_command+0x110>)
 80009ba:	f006 f89f 	bl	8006afc <CDC_Transmit_FS>
            break;
 80009be:	e002      	b.n	80009c6 <answer_command+0xc6>
        }
    }
 80009c0:	bf00      	nop
 80009c2:	e000      	b.n	80009c6 <answer_command+0xc6>
            break;
 80009c4:	bf00      	nop

    if((fifo_buffer.next==fifo_buffer.last) && (fifo_buffer.changed)) {
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <answer_command+0xf0>)
 80009c8:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <answer_command+0xf0>)
 80009ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d108      	bne.n	80009e8 <answer_command+0xe8>
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <answer_command+0xf0>)
 80009d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d003      	beq.n	80009e8 <answer_command+0xe8>
        fifo_buffer.changed=0;
 80009e0:	4b03      	ldr	r3, [pc, #12]	; (80009f0 <answer_command+0xf0>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    }
}
 80009e8:	bf00      	nop
 80009ea:	3708      	adds	r7, #8
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	200001d0 	.word	0x200001d0
 80009f4:	0800770c 	.word	0x0800770c
 80009f8:	08007734 	.word	0x08007734
 80009fc:	08007750 	.word	0x08007750
 8000a00:	20000000 	.word	0x20000000
 8000a04:	0800776c 	.word	0x0800776c
 8000a08:	08007790 	.word	0x08007790
 8000a0c:	080077b0 	.word	0x080077b0
 8000a10:	080077c4 	.word	0x080077c4

08000a14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a18:	f000 f8fb 	bl	8000c12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a1c:	f000 f80b 	bl	8000a36 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a20:	f7ff fbf6 	bl	8000210 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000a24:	f005 ff9c 	bl	8006960 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        // Lebenszeichen durch blinken(rot) der LED3
        show_lifesigns();
 8000a28:	f7ff fd28 	bl	800047c <show_lifesigns>

        // USB_buffer in Ringbuffer übertragen
        check_usb_buffer();
 8000a2c:	f7ff fcd0 	bl	80003d0 <check_usb_buffer>

        // Eingegangene Befehle beantworten
        answer_command();
 8000a30:	f7ff ff66 	bl	8000900 <answer_command>
        show_lifesigns();
 8000a34:	e7f8      	b.n	8000a28 <main+0x14>

08000a36 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b096      	sub	sp, #88	; 0x58
 8000a3a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	2244      	movs	r2, #68	; 0x44
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f006 fe29 	bl	800769c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a4a:	463b      	mov	r3, r7
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
 8000a56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a58:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a5c:	f001 fd02 	bl	8002464 <HAL_PWREx_ControlVoltageScaling>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a66:	f000 f83c 	bl	8000ae2 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000a6a:	2314      	movs	r3, #20
 8000a6c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a72:	2301      	movs	r3, #1
 8000a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a7a:	2360      	movs	r3, #96	; 0x60
 8000a7c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a82:	2301      	movs	r3, #1
 8000a84:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a86:	2301      	movs	r3, #1
 8000a88:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000a8a:	2328      	movs	r3, #40	; 0x28
 8000a8c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a92:	2302      	movs	r3, #2
 8000a94:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a9a:	f107 0314 	add.w	r3, r7, #20
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f001 fd46 	bl	8002530 <HAL_RCC_OscConfig>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000aaa:	f000 f81a 	bl	8000ae2 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000aae:	230f      	movs	r3, #15
 8000ab0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ab2:	2303      	movs	r3, #3
 8000ab4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ac2:	463b      	mov	r3, r7
 8000ac4:	2104      	movs	r1, #4
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f002 f958 	bl	8002d7c <HAL_RCC_ClockConfig>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8000ad2:	f000 f806 	bl	8000ae2 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000ad6:	f002 fe27 	bl	8003728 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000ada:	bf00      	nop
 8000adc:	3758      	adds	r7, #88	; 0x58
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}

08000ae2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae6:	b672      	cpsid	i
}
 8000ae8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000aea:	e7fe      	b.n	8000aea <Error_Handler+0x8>

08000aec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	b083      	sub	sp, #12
 8000af0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000af2:	4b0f      	ldr	r3, [pc, #60]	; (8000b30 <HAL_MspInit+0x44>)
 8000af4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af6:	4a0e      	ldr	r2, [pc, #56]	; (8000b30 <HAL_MspInit+0x44>)
 8000af8:	f043 0301 	orr.w	r3, r3, #1
 8000afc:	6613      	str	r3, [r2, #96]	; 0x60
 8000afe:	4b0c      	ldr	r3, [pc, #48]	; (8000b30 <HAL_MspInit+0x44>)
 8000b00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b02:	f003 0301 	and.w	r3, r3, #1
 8000b06:	607b      	str	r3, [r7, #4]
 8000b08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b0a:	4b09      	ldr	r3, [pc, #36]	; (8000b30 <HAL_MspInit+0x44>)
 8000b0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b0e:	4a08      	ldr	r2, [pc, #32]	; (8000b30 <HAL_MspInit+0x44>)
 8000b10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b14:	6593      	str	r3, [r2, #88]	; 0x58
 8000b16:	4b06      	ldr	r3, [pc, #24]	; (8000b30 <HAL_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	603b      	str	r3, [r7, #0]
 8000b20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b22:	bf00      	nop
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	40021000 	.word	0x40021000

08000b34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <NMI_Handler+0x4>

08000b3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3e:	e7fe      	b.n	8000b3e <HardFault_Handler+0x4>

08000b40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b44:	e7fe      	b.n	8000b44 <MemManage_Handler+0x4>

08000b46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b46:	b480      	push	{r7}
 8000b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b4a:	e7fe      	b.n	8000b4a <BusFault_Handler+0x4>

08000b4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b50:	e7fe      	b.n	8000b50 <UsageFault_Handler+0x4>

08000b52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b52:	b480      	push	{r7}
 8000b54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b56:	bf00      	nop
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b64:	bf00      	nop
 8000b66:	46bd      	mov	sp, r7
 8000b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b6c:	4770      	bx	lr

08000b6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6e:	b480      	push	{r7}
 8000b70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b80:	f000 f89c 	bl	8000cbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	bd80      	pop	{r7, pc}

08000b88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b8c:	4802      	ldr	r0, [pc, #8]	; (8000b98 <OTG_FS_IRQHandler+0x10>)
 8000b8e:	f000 fd1a 	bl	80015c6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20001950 	.word	0x20001950

08000b9c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <SystemInit+0x20>)
 8000ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba6:	4a05      	ldr	r2, [pc, #20]	; (8000bbc <SystemInit+0x20>)
 8000ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bc4:	f7ff ffea 	bl	8000b9c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bc8:	480c      	ldr	r0, [pc, #48]	; (8000bfc <LoopForever+0x6>)
  ldr r1, =_edata
 8000bca:	490d      	ldr	r1, [pc, #52]	; (8000c00 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <LoopForever+0xe>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0a      	ldr	r2, [pc, #40]	; (8000c08 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000be0:	4c0a      	ldr	r4, [pc, #40]	; (8000c0c <LoopForever+0x16>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bee:	f006 fd23 	bl	8007638 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000bf2:	f7ff ff0f 	bl	8000a14 <main>

08000bf6 <LoopForever>:

LoopForever:
    b LoopForever
 8000bf6:	e7fe      	b.n	8000bf6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000bfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c00:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 8000c04:	08007874 	.word	0x08007874
  ldr r2, =_sbss
 8000c08:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 8000c0c:	20001d58 	.word	0x20001d58

08000c10 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c10:	e7fe      	b.n	8000c10 <ADC1_2_IRQHandler>

08000c12 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1c:	2003      	movs	r0, #3
 8000c1e:	f000 f961 	bl	8000ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 f80e 	bl	8000c44 <HAL_InitTick>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d002      	beq.n	8000c34 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	71fb      	strb	r3, [r7, #7]
 8000c32:	e001      	b.n	8000c38 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c34:	f7ff ff5a 	bl	8000aec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c38:	79fb      	ldrb	r3, [r7, #7]
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}
	...

08000c44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000c50:	4b17      	ldr	r3, [pc, #92]	; (8000cb0 <HAL_InitTick+0x6c>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d023      	beq.n	8000ca0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_InitTick+0x70>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b14      	ldr	r3, [pc, #80]	; (8000cb0 <HAL_InitTick+0x6c>)
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	4619      	mov	r1, r3
 8000c62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c66:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f96d 	bl	8000f4e <HAL_SYSTICK_Config>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d10f      	bne.n	8000c9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	2b0f      	cmp	r3, #15
 8000c7e:	d809      	bhi.n	8000c94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c80:	2200      	movs	r2, #0
 8000c82:	6879      	ldr	r1, [r7, #4]
 8000c84:	f04f 30ff 	mov.w	r0, #4294967295
 8000c88:	f000 f937 	bl	8000efa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c8c:	4a0a      	ldr	r2, [pc, #40]	; (8000cb8 <HAL_InitTick+0x74>)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e007      	b.n	8000ca4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	73fb      	strb	r3, [r7, #15]
 8000c98:	e004      	b.n	8000ca4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	73fb      	strb	r3, [r7, #15]
 8000c9e:	e001      	b.n	8000ca4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ca0:	2301      	movs	r3, #1
 8000ca2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	2000002c 	.word	0x2000002c
 8000cb4:	20000024 	.word	0x20000024
 8000cb8:	20000028 	.word	0x20000028

08000cbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <HAL_IncTick+0x20>)
 8000cc2:	781b      	ldrb	r3, [r3, #0]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4b06      	ldr	r3, [pc, #24]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <HAL_IncTick+0x24>)
 8000cce:	6013      	str	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr
 8000cda:	bf00      	nop
 8000cdc:	2000002c 	.word	0x2000002c
 8000ce0:	2000047c 	.word	0x2000047c

08000ce4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce8:	4b03      	ldr	r3, [pc, #12]	; (8000cf8 <HAL_GetTick+0x14>)
 8000cea:	681b      	ldr	r3, [r3, #0]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop
 8000cf8:	2000047c 	.word	0x2000047c

08000cfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b084      	sub	sp, #16
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d04:	f7ff ffee 	bl	8000ce4 <HAL_GetTick>
 8000d08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d14:	d005      	beq.n	8000d22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <HAL_Delay+0x44>)
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	461a      	mov	r2, r3
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	4413      	add	r3, r2
 8000d20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000d22:	bf00      	nop
 8000d24:	f7ff ffde 	bl	8000ce4 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	429a      	cmp	r2, r3
 8000d32:	d8f7      	bhi.n	8000d24 <HAL_Delay+0x28>
  {
  }
}
 8000d34:	bf00      	nop
 8000d36:	bf00      	nop
 8000d38:	3710      	adds	r7, #16
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	2000002c 	.word	0x2000002c

08000d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <__NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <__NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	db0b      	blt.n	8000dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dba:	79fb      	ldrb	r3, [r7, #7]
 8000dbc:	f003 021f 	and.w	r2, r3, #31
 8000dc0:	4907      	ldr	r1, [pc, #28]	; (8000de0 <__NVIC_EnableIRQ+0x38>)
 8000dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc6:	095b      	lsrs	r3, r3, #5
 8000dc8:	2001      	movs	r0, #1
 8000dca:	fa00 f202 	lsl.w	r2, r0, r2
 8000dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	e000e100 	.word	0xe000e100

08000de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	6039      	str	r1, [r7, #0]
 8000dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	db0a      	blt.n	8000e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	b2da      	uxtb	r2, r3
 8000dfc:	490c      	ldr	r1, [pc, #48]	; (8000e30 <__NVIC_SetPriority+0x4c>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	0112      	lsls	r2, r2, #4
 8000e04:	b2d2      	uxtb	r2, r2
 8000e06:	440b      	add	r3, r1
 8000e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e0c:	e00a      	b.n	8000e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	b2da      	uxtb	r2, r3
 8000e12:	4908      	ldr	r1, [pc, #32]	; (8000e34 <__NVIC_SetPriority+0x50>)
 8000e14:	79fb      	ldrb	r3, [r7, #7]
 8000e16:	f003 030f 	and.w	r3, r3, #15
 8000e1a:	3b04      	subs	r3, #4
 8000e1c:	0112      	lsls	r2, r2, #4
 8000e1e:	b2d2      	uxtb	r2, r2
 8000e20:	440b      	add	r3, r1
 8000e22:	761a      	strb	r2, [r3, #24]
}
 8000e24:	bf00      	nop
 8000e26:	370c      	adds	r7, #12
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000e100 	.word	0xe000e100
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b089      	sub	sp, #36	; 0x24
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	60f8      	str	r0, [r7, #12]
 8000e40:	60b9      	str	r1, [r7, #8]
 8000e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	f003 0307 	and.w	r3, r3, #7
 8000e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	f1c3 0307 	rsb	r3, r3, #7
 8000e52:	2b04      	cmp	r3, #4
 8000e54:	bf28      	it	cs
 8000e56:	2304      	movcs	r3, #4
 8000e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e5a:	69fb      	ldr	r3, [r7, #28]
 8000e5c:	3304      	adds	r3, #4
 8000e5e:	2b06      	cmp	r3, #6
 8000e60:	d902      	bls.n	8000e68 <NVIC_EncodePriority+0x30>
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	3b03      	subs	r3, #3
 8000e66:	e000      	b.n	8000e6a <NVIC_EncodePriority+0x32>
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	43da      	mvns	r2, r3
 8000e78:	68bb      	ldr	r3, [r7, #8]
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e80:	f04f 31ff 	mov.w	r1, #4294967295
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	fa01 f303 	lsl.w	r3, r1, r3
 8000e8a:	43d9      	mvns	r1, r3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	4313      	orrs	r3, r2
         );
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3724      	adds	r7, #36	; 0x24
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
	...

08000ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b082      	sub	sp, #8
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3b01      	subs	r3, #1
 8000eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000eb0:	d301      	bcc.n	8000eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00f      	b.n	8000ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <SysTick_Config+0x40>)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ebe:	210f      	movs	r1, #15
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f7ff ff8e 	bl	8000de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <SysTick_Config+0x40>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ece:	4b04      	ldr	r3, [pc, #16]	; (8000ee0 <SysTick_Config+0x40>)
 8000ed0:	2207      	movs	r2, #7
 8000ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	e000e010 	.word	0xe000e010

08000ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ff29 	bl	8000d44 <__NVIC_SetPriorityGrouping>
}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	4603      	mov	r3, r0
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f0c:	f7ff ff3e 	bl	8000d8c <__NVIC_GetPriorityGrouping>
 8000f10:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f12:	687a      	ldr	r2, [r7, #4]
 8000f14:	68b9      	ldr	r1, [r7, #8]
 8000f16:	6978      	ldr	r0, [r7, #20]
 8000f18:	f7ff ff8e 	bl	8000e38 <NVIC_EncodePriority>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f22:	4611      	mov	r1, r2
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff5d 	bl	8000de4 <__NVIC_SetPriority>
}
 8000f2a:	bf00      	nop
 8000f2c:	3718      	adds	r7, #24
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}

08000f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	b082      	sub	sp, #8
 8000f36:	af00      	add	r7, sp, #0
 8000f38:	4603      	mov	r3, r0
 8000f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f40:	4618      	mov	r0, r3
 8000f42:	f7ff ff31 	bl	8000da8 <__NVIC_EnableIRQ>
}
 8000f46:	bf00      	nop
 8000f48:	3708      	adds	r7, #8
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}

08000f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ffa2 	bl	8000ea0 <SysTick_Config>
 8000f5c:	4603      	mov	r3, r0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	3708      	adds	r7, #8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
	...

08000f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b087      	sub	sp, #28
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f76:	e166      	b.n	8001246 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	681a      	ldr	r2, [r3, #0]
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	697b      	ldr	r3, [r7, #20]
 8000f80:	fa01 f303 	lsl.w	r3, r1, r3
 8000f84:	4013      	ands	r3, r2
 8000f86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	f000 8158 	beq.w	8001240 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	f003 0303 	and.w	r3, r3, #3
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d005      	beq.n	8000fa8 <HAL_GPIO_Init+0x40>
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b02      	cmp	r3, #2
 8000fa6:	d130      	bne.n	800100a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000fae:	697b      	ldr	r3, [r7, #20]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	68da      	ldr	r2, [r3, #12]
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fde:	2201      	movs	r2, #1
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	f003 0201 	and.w	r2, r3, #1
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	693a      	ldr	r2, [r7, #16]
 8001008:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 0303 	and.w	r3, r3, #3
 8001012:	2b03      	cmp	r3, #3
 8001014:	d017      	beq.n	8001046 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	005b      	lsls	r3, r3, #1
 8001020:	2203      	movs	r2, #3
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43db      	mvns	r3, r3
 8001028:	693a      	ldr	r2, [r7, #16]
 800102a:	4013      	ands	r3, r2
 800102c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	689a      	ldr	r2, [r3, #8]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	fa02 f303 	lsl.w	r3, r2, r3
 800103a:	693a      	ldr	r2, [r7, #16]
 800103c:	4313      	orrs	r3, r2
 800103e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f003 0303 	and.w	r3, r3, #3
 800104e:	2b02      	cmp	r3, #2
 8001050:	d123      	bne.n	800109a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001052:	697b      	ldr	r3, [r7, #20]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800105e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	693a      	ldr	r2, [r7, #16]
 8001072:	4013      	ands	r3, r2
 8001074:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	691a      	ldr	r2, [r3, #16]
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	009b      	lsls	r3, r3, #2
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4313      	orrs	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	08da      	lsrs	r2, r3, #3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	3208      	adds	r2, #8
 8001094:	6939      	ldr	r1, [r7, #16]
 8001096:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	005b      	lsls	r3, r3, #1
 80010a4:	2203      	movs	r2, #3
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	693a      	ldr	r2, [r7, #16]
 80010ae:	4013      	ands	r3, r2
 80010b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 0203 	and.w	r2, r3, #3
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4313      	orrs	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	f000 80b2 	beq.w	8001240 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010dc:	4b61      	ldr	r3, [pc, #388]	; (8001264 <HAL_GPIO_Init+0x2fc>)
 80010de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e0:	4a60      	ldr	r2, [pc, #384]	; (8001264 <HAL_GPIO_Init+0x2fc>)
 80010e2:	f043 0301 	orr.w	r3, r3, #1
 80010e6:	6613      	str	r3, [r2, #96]	; 0x60
 80010e8:	4b5e      	ldr	r3, [pc, #376]	; (8001264 <HAL_GPIO_Init+0x2fc>)
 80010ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	60bb      	str	r3, [r7, #8]
 80010f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010f4:	4a5c      	ldr	r2, [pc, #368]	; (8001268 <HAL_GPIO_Init+0x300>)
 80010f6:	697b      	ldr	r3, [r7, #20]
 80010f8:	089b      	lsrs	r3, r3, #2
 80010fa:	3302      	adds	r3, #2
 80010fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001100:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	f003 0303 	and.w	r3, r3, #3
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	220f      	movs	r2, #15
 800110c:	fa02 f303 	lsl.w	r3, r2, r3
 8001110:	43db      	mvns	r3, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4013      	ands	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800111e:	d02b      	beq.n	8001178 <HAL_GPIO_Init+0x210>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	4a52      	ldr	r2, [pc, #328]	; (800126c <HAL_GPIO_Init+0x304>)
 8001124:	4293      	cmp	r3, r2
 8001126:	d025      	beq.n	8001174 <HAL_GPIO_Init+0x20c>
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a51      	ldr	r2, [pc, #324]	; (8001270 <HAL_GPIO_Init+0x308>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d01f      	beq.n	8001170 <HAL_GPIO_Init+0x208>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4a50      	ldr	r2, [pc, #320]	; (8001274 <HAL_GPIO_Init+0x30c>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d019      	beq.n	800116c <HAL_GPIO_Init+0x204>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a4f      	ldr	r2, [pc, #316]	; (8001278 <HAL_GPIO_Init+0x310>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d013      	beq.n	8001168 <HAL_GPIO_Init+0x200>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	4a4e      	ldr	r2, [pc, #312]	; (800127c <HAL_GPIO_Init+0x314>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d00d      	beq.n	8001164 <HAL_GPIO_Init+0x1fc>
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4a4d      	ldr	r2, [pc, #308]	; (8001280 <HAL_GPIO_Init+0x318>)
 800114c:	4293      	cmp	r3, r2
 800114e:	d007      	beq.n	8001160 <HAL_GPIO_Init+0x1f8>
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	4a4c      	ldr	r2, [pc, #304]	; (8001284 <HAL_GPIO_Init+0x31c>)
 8001154:	4293      	cmp	r3, r2
 8001156:	d101      	bne.n	800115c <HAL_GPIO_Init+0x1f4>
 8001158:	2307      	movs	r3, #7
 800115a:	e00e      	b.n	800117a <HAL_GPIO_Init+0x212>
 800115c:	2308      	movs	r3, #8
 800115e:	e00c      	b.n	800117a <HAL_GPIO_Init+0x212>
 8001160:	2306      	movs	r3, #6
 8001162:	e00a      	b.n	800117a <HAL_GPIO_Init+0x212>
 8001164:	2305      	movs	r3, #5
 8001166:	e008      	b.n	800117a <HAL_GPIO_Init+0x212>
 8001168:	2304      	movs	r3, #4
 800116a:	e006      	b.n	800117a <HAL_GPIO_Init+0x212>
 800116c:	2303      	movs	r3, #3
 800116e:	e004      	b.n	800117a <HAL_GPIO_Init+0x212>
 8001170:	2302      	movs	r3, #2
 8001172:	e002      	b.n	800117a <HAL_GPIO_Init+0x212>
 8001174:	2301      	movs	r3, #1
 8001176:	e000      	b.n	800117a <HAL_GPIO_Init+0x212>
 8001178:	2300      	movs	r3, #0
 800117a:	697a      	ldr	r2, [r7, #20]
 800117c:	f002 0203 	and.w	r2, r2, #3
 8001180:	0092      	lsls	r2, r2, #2
 8001182:	4093      	lsls	r3, r2
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	4313      	orrs	r3, r2
 8001188:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800118a:	4937      	ldr	r1, [pc, #220]	; (8001268 <HAL_GPIO_Init+0x300>)
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	089b      	lsrs	r3, r3, #2
 8001190:	3302      	adds	r3, #2
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001198:	4b3b      	ldr	r3, [pc, #236]	; (8001288 <HAL_GPIO_Init+0x320>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800119e:	68fb      	ldr	r3, [r7, #12]
 80011a0:	43db      	mvns	r3, r3
 80011a2:	693a      	ldr	r2, [r7, #16]
 80011a4:	4013      	ands	r3, r2
 80011a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d003      	beq.n	80011bc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	4313      	orrs	r3, r2
 80011ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80011bc:	4a32      	ldr	r2, [pc, #200]	; (8001288 <HAL_GPIO_Init+0x320>)
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80011c2:	4b31      	ldr	r3, [pc, #196]	; (8001288 <HAL_GPIO_Init+0x320>)
 80011c4:	68db      	ldr	r3, [r3, #12]
 80011c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	43db      	mvns	r3, r3
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	4013      	ands	r3, r2
 80011d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	4313      	orrs	r3, r2
 80011e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011e6:	4a28      	ldr	r2, [pc, #160]	; (8001288 <HAL_GPIO_Init+0x320>)
 80011e8:	693b      	ldr	r3, [r7, #16]
 80011ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011ec:	4b26      	ldr	r3, [pc, #152]	; (8001288 <HAL_GPIO_Init+0x320>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	43db      	mvns	r3, r3
 80011f6:	693a      	ldr	r2, [r7, #16]
 80011f8:	4013      	ands	r3, r2
 80011fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d003      	beq.n	8001210 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	4313      	orrs	r3, r2
 800120e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001210:	4a1d      	ldr	r2, [pc, #116]	; (8001288 <HAL_GPIO_Init+0x320>)
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001216:	4b1c      	ldr	r3, [pc, #112]	; (8001288 <HAL_GPIO_Init+0x320>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	43db      	mvns	r3, r3
 8001220:	693a      	ldr	r2, [r7, #16]
 8001222:	4013      	ands	r3, r2
 8001224:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800122e:	2b00      	cmp	r3, #0
 8001230:	d003      	beq.n	800123a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001232:	693a      	ldr	r2, [r7, #16]
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	4313      	orrs	r3, r2
 8001238:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800123a:	4a13      	ldr	r2, [pc, #76]	; (8001288 <HAL_GPIO_Init+0x320>)
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	3301      	adds	r3, #1
 8001244:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa22 f303 	lsr.w	r3, r2, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	f47f ae91 	bne.w	8000f78 <HAL_GPIO_Init+0x10>
  }
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	371c      	adds	r7, #28
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	40021000 	.word	0x40021000
 8001268:	40010000 	.word	0x40010000
 800126c:	48000400 	.word	0x48000400
 8001270:	48000800 	.word	0x48000800
 8001274:	48000c00 	.word	0x48000c00
 8001278:	48001000 	.word	0x48001000
 800127c:	48001400 	.word	0x48001400
 8001280:	48001800 	.word	0x48001800
 8001284:	48001c00 	.word	0x48001c00
 8001288:	40010400 	.word	0x40010400

0800128c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	460b      	mov	r3, r1
 8001296:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	691a      	ldr	r2, [r3, #16]
 800129c:	887b      	ldrh	r3, [r7, #2]
 800129e:	4013      	ands	r3, r2
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d002      	beq.n	80012aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012a4:	2301      	movs	r3, #1
 80012a6:	73fb      	strb	r3, [r7, #15]
 80012a8:	e001      	b.n	80012ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80012ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80012b0:	4618      	mov	r0, r3
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr

080012bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	460b      	mov	r3, r1
 80012c6:	807b      	strh	r3, [r7, #2]
 80012c8:	4613      	mov	r3, r2
 80012ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012cc:	787b      	ldrb	r3, [r7, #1]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012d2:	887a      	ldrh	r2, [r7, #2]
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012d8:	e002      	b.n	80012e0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	460b      	mov	r3, r1
 80012f6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	695b      	ldr	r3, [r3, #20]
 80012fc:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012fe:	887a      	ldrh	r2, [r7, #2]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4013      	ands	r3, r2
 8001304:	041a      	lsls	r2, r3, #16
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	43d9      	mvns	r1, r3
 800130a:	887b      	ldrh	r3, [r7, #2]
 800130c:	400b      	ands	r3, r1
 800130e:	431a      	orrs	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	619a      	str	r2, [r3, #24]
}
 8001314:	bf00      	nop
 8001316:	3714      	adds	r7, #20
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001320:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001322:	b08f      	sub	sp, #60	; 0x3c
 8001324:	af0a      	add	r7, sp, #40	; 0x28
 8001326:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d101      	bne.n	8001332 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800132e:	2301      	movs	r3, #1
 8001330:	e116      	b.n	8001560 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d106      	bne.n	8001352 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	2200      	movs	r2, #0
 8001348:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f005 fd2f 	bl	8006db0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2203      	movs	r2, #3
 8001356:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800135e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001362:	2b00      	cmp	r3, #0
 8001364:	d102      	bne.n	800136c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4618      	mov	r0, r3
 8001372:	f002 fc90 	bl	8003c96 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	603b      	str	r3, [r7, #0]
 800137c:	687e      	ldr	r6, [r7, #4]
 800137e:	466d      	mov	r5, sp
 8001380:	f106 0410 	add.w	r4, r6, #16
 8001384:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001386:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001388:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001390:	e885 0003 	stmia.w	r5, {r0, r1}
 8001394:	1d33      	adds	r3, r6, #4
 8001396:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001398:	6838      	ldr	r0, [r7, #0]
 800139a:	f002 fba3 	bl	8003ae4 <USB_CoreInit>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d005      	beq.n	80013b0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2202      	movs	r2, #2
 80013a8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80013ac:	2301      	movs	r3, #1
 80013ae:	e0d7      	b.n	8001560 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f002 fc7e 	bl	8003cb8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013bc:	2300      	movs	r3, #0
 80013be:	73fb      	strb	r3, [r7, #15]
 80013c0:	e04a      	b.n	8001458 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013c2:	7bfa      	ldrb	r2, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	4613      	mov	r3, r2
 80013c8:	00db      	lsls	r3, r3, #3
 80013ca:	1a9b      	subs	r3, r3, r2
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	440b      	add	r3, r1
 80013d0:	333d      	adds	r3, #61	; 0x3d
 80013d2:	2201      	movs	r2, #1
 80013d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	6879      	ldr	r1, [r7, #4]
 80013da:	4613      	mov	r3, r2
 80013dc:	00db      	lsls	r3, r3, #3
 80013de:	1a9b      	subs	r3, r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	440b      	add	r3, r1
 80013e4:	333c      	adds	r3, #60	; 0x3c
 80013e6:	7bfa      	ldrb	r2, [r7, #15]
 80013e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	b298      	uxth	r0, r3
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	00db      	lsls	r3, r3, #3
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3342      	adds	r3, #66	; 0x42
 80013fe:	4602      	mov	r2, r0
 8001400:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001402:	7bfa      	ldrb	r2, [r7, #15]
 8001404:	6879      	ldr	r1, [r7, #4]
 8001406:	4613      	mov	r3, r2
 8001408:	00db      	lsls	r3, r3, #3
 800140a:	1a9b      	subs	r3, r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	440b      	add	r3, r1
 8001410:	333f      	adds	r3, #63	; 0x3f
 8001412:	2200      	movs	r2, #0
 8001414:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001416:	7bfa      	ldrb	r2, [r7, #15]
 8001418:	6879      	ldr	r1, [r7, #4]
 800141a:	4613      	mov	r3, r2
 800141c:	00db      	lsls	r3, r3, #3
 800141e:	1a9b      	subs	r3, r3, r2
 8001420:	009b      	lsls	r3, r3, #2
 8001422:	440b      	add	r3, r1
 8001424:	3344      	adds	r3, #68	; 0x44
 8001426:	2200      	movs	r2, #0
 8001428:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800142a:	7bfa      	ldrb	r2, [r7, #15]
 800142c:	6879      	ldr	r1, [r7, #4]
 800142e:	4613      	mov	r3, r2
 8001430:	00db      	lsls	r3, r3, #3
 8001432:	1a9b      	subs	r3, r3, r2
 8001434:	009b      	lsls	r3, r3, #2
 8001436:	440b      	add	r3, r1
 8001438:	3348      	adds	r3, #72	; 0x48
 800143a:	2200      	movs	r2, #0
 800143c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800143e:	7bfa      	ldrb	r2, [r7, #15]
 8001440:	6879      	ldr	r1, [r7, #4]
 8001442:	4613      	mov	r3, r2
 8001444:	00db      	lsls	r3, r3, #3
 8001446:	1a9b      	subs	r3, r3, r2
 8001448:	009b      	lsls	r3, r3, #2
 800144a:	440b      	add	r3, r1
 800144c:	3350      	adds	r3, #80	; 0x50
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	3301      	adds	r3, #1
 8001456:	73fb      	strb	r3, [r7, #15]
 8001458:	7bfa      	ldrb	r2, [r7, #15]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	429a      	cmp	r2, r3
 8001460:	d3af      	bcc.n	80013c2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e044      	b.n	80014f2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001468:	7bfa      	ldrb	r2, [r7, #15]
 800146a:	6879      	ldr	r1, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800147a:	2200      	movs	r2, #0
 800147c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	6879      	ldr	r1, [r7, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	1a9b      	subs	r3, r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	440b      	add	r3, r1
 800148c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8001490:	7bfa      	ldrb	r2, [r7, #15]
 8001492:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001494:	7bfa      	ldrb	r2, [r7, #15]
 8001496:	6879      	ldr	r1, [r7, #4]
 8001498:	4613      	mov	r3, r2
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	1a9b      	subs	r3, r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	440b      	add	r3, r1
 80014a2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80014a6:	2200      	movs	r2, #0
 80014a8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80014aa:	7bfa      	ldrb	r2, [r7, #15]
 80014ac:	6879      	ldr	r1, [r7, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	00db      	lsls	r3, r3, #3
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	440b      	add	r3, r1
 80014b8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014c0:	7bfa      	ldrb	r2, [r7, #15]
 80014c2:	6879      	ldr	r1, [r7, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	00db      	lsls	r3, r3, #3
 80014c8:	1a9b      	subs	r3, r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	440b      	add	r3, r1
 80014ce:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014d6:	7bfa      	ldrb	r2, [r7, #15]
 80014d8:	6879      	ldr	r1, [r7, #4]
 80014da:	4613      	mov	r3, r2
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	1a9b      	subs	r3, r3, r2
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	440b      	add	r3, r1
 80014e4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	3301      	adds	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d3b5      	bcc.n	8001468 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	603b      	str	r3, [r7, #0]
 8001502:	687e      	ldr	r6, [r7, #4]
 8001504:	466d      	mov	r5, sp
 8001506:	f106 0410 	add.w	r4, r6, #16
 800150a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800150c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800150e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001510:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001512:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001516:	e885 0003 	stmia.w	r5, {r0, r1}
 800151a:	1d33      	adds	r3, r6, #4
 800151c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800151e:	6838      	ldr	r0, [r7, #0]
 8001520:	f002 fc16 	bl	8003d50 <USB_DevInit>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d005      	beq.n	8001536 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2202      	movs	r2, #2
 800152e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e014      	b.n	8001560 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	2200      	movs	r2, #0
 800153a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2201      	movs	r2, #1
 8001542:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154a:	2b01      	cmp	r3, #1
 800154c:	d102      	bne.n	8001554 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 ff56 	bl	8002400 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	4618      	mov	r0, r3
 800155a:	f003 fbe8 	bl	8004d2e <USB_DevDisconnect>

  return HAL_OK;
 800155e:	2300      	movs	r3, #0
}
 8001560:	4618      	mov	r0, r3
 8001562:	3714      	adds	r7, #20
 8001564:	46bd      	mov	sp, r7
 8001566:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001568 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800157c:	2b01      	cmp	r3, #1
 800157e:	d101      	bne.n	8001584 <HAL_PCD_Start+0x1c>
 8001580:	2302      	movs	r3, #2
 8001582:	e01c      	b.n	80015be <HAL_PCD_Start+0x56>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2201      	movs	r2, #1
 8001588:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001590:	2b01      	cmp	r3, #1
 8001592:	d105      	bne.n	80015a0 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001598:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f002 fb65 	bl	8003c74 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f003 fb9c 	bl	8004cec <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80015bc:	2300      	movs	r3, #0
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}

080015c6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80015c6:	b590      	push	{r4, r7, lr}
 80015c8:	b08d      	sub	sp, #52	; 0x34
 80015ca:	af00      	add	r7, sp, #0
 80015cc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 fc5a 	bl	8004e96 <USB_GetMode>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f040 8384 	bne.w	8001cf2 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f003 fbbe 	bl	8004d70 <USB_ReadInterrupts>
 80015f4:	4603      	mov	r3, r0
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	f000 837a 	beq.w	8001cf0 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4618      	mov	r0, r3
 8001602:	f003 fbb5 	bl	8004d70 <USB_ReadInterrupts>
 8001606:	4603      	mov	r3, r0
 8001608:	f003 0302 	and.w	r3, r3, #2
 800160c:	2b02      	cmp	r3, #2
 800160e:	d107      	bne.n	8001620 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	695a      	ldr	r2, [r3, #20]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f002 0202 	and.w	r2, r2, #2
 800161e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4618      	mov	r0, r3
 8001626:	f003 fba3 	bl	8004d70 <USB_ReadInterrupts>
 800162a:	4603      	mov	r3, r0
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b10      	cmp	r3, #16
 8001632:	d161      	bne.n	80016f8 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699a      	ldr	r2, [r3, #24]
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f022 0210 	bic.w	r2, r2, #16
 8001642:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001644:	6a3b      	ldr	r3, [r7, #32]
 8001646:	6a1b      	ldr	r3, [r3, #32]
 8001648:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	f003 020f 	and.w	r2, r3, #15
 8001650:	4613      	mov	r3, r2
 8001652:	00db      	lsls	r3, r3, #3
 8001654:	1a9b      	subs	r3, r3, r2
 8001656:	009b      	lsls	r3, r3, #2
 8001658:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	4413      	add	r3, r2
 8001660:	3304      	adds	r3, #4
 8001662:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	0c5b      	lsrs	r3, r3, #17
 8001668:	f003 030f 	and.w	r3, r3, #15
 800166c:	2b02      	cmp	r3, #2
 800166e:	d124      	bne.n	80016ba <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001676:	4013      	ands	r3, r2
 8001678:	2b00      	cmp	r3, #0
 800167a:	d035      	beq.n	80016e8 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001680:	69bb      	ldr	r3, [r7, #24]
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800168a:	b29b      	uxth	r3, r3
 800168c:	461a      	mov	r2, r3
 800168e:	6a38      	ldr	r0, [r7, #32]
 8001690:	f003 f9da 	bl	8004a48 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	69bb      	ldr	r3, [r7, #24]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016a0:	441a      	add	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	699a      	ldr	r2, [r3, #24]
 80016aa:	69bb      	ldr	r3, [r7, #24]
 80016ac:	091b      	lsrs	r3, r3, #4
 80016ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016b2:	441a      	add	r2, r3
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	619a      	str	r2, [r3, #24]
 80016b8:	e016      	b.n	80016e8 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80016ba:	69bb      	ldr	r3, [r7, #24]
 80016bc:	0c5b      	lsrs	r3, r3, #17
 80016be:	f003 030f 	and.w	r3, r3, #15
 80016c2:	2b06      	cmp	r3, #6
 80016c4:	d110      	bne.n	80016e8 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80016cc:	2208      	movs	r2, #8
 80016ce:	4619      	mov	r1, r3
 80016d0:	6a38      	ldr	r0, [r7, #32]
 80016d2:	f003 f9b9 	bl	8004a48 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	699a      	ldr	r2, [r3, #24]
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	091b      	lsrs	r3, r3, #4
 80016de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80016e2:	441a      	add	r2, r3
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	699a      	ldr	r2, [r3, #24]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 0210 	orr.w	r2, r2, #16
 80016f6:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f003 fb37 	bl	8004d70 <USB_ReadInterrupts>
 8001702:	4603      	mov	r3, r0
 8001704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001708:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800170c:	d16e      	bne.n	80017ec <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 800170e:	2300      	movs	r3, #0
 8001710:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4618      	mov	r0, r3
 8001718:	f003 fb3d 	bl	8004d96 <USB_ReadDevAllOutEpInterrupt>
 800171c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800171e:	e062      	b.n	80017e6 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001720:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001722:	f003 0301 	and.w	r3, r3, #1
 8001726:	2b00      	cmp	r3, #0
 8001728:	d057      	beq.n	80017da <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001730:	b2d2      	uxtb	r2, r2
 8001732:	4611      	mov	r1, r2
 8001734:	4618      	mov	r0, r3
 8001736:	f003 fb62 	bl	8004dfe <USB_ReadDevOutEPInterrupt>
 800173a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d00c      	beq.n	8001760 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001748:	015a      	lsls	r2, r3, #5
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	4413      	add	r3, r2
 800174e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001752:	461a      	mov	r2, r3
 8001754:	2301      	movs	r3, #1
 8001756:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001758:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800175a:	6878      	ldr	r0, [r7, #4]
 800175c:	f000 fd76 	bl	800224c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	f003 0308 	and.w	r3, r3, #8
 8001766:	2b00      	cmp	r3, #0
 8001768:	d00c      	beq.n	8001784 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800176a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800176c:	015a      	lsls	r2, r3, #5
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	4413      	add	r3, r2
 8001772:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001776:	461a      	mov	r2, r3
 8001778:	2308      	movs	r3, #8
 800177a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800177c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f000 fdb2 	bl	80022e8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001784:	693b      	ldr	r3, [r7, #16]
 8001786:	f003 0310 	and.w	r3, r3, #16
 800178a:	2b00      	cmp	r3, #0
 800178c:	d008      	beq.n	80017a0 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800178e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001790:	015a      	lsls	r2, r3, #5
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	4413      	add	r3, r2
 8001796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800179a:	461a      	mov	r2, r3
 800179c:	2310      	movs	r3, #16
 800179e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f003 0320 	and.w	r3, r3, #32
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d008      	beq.n	80017bc <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80017aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ac:	015a      	lsls	r2, r3, #5
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	4413      	add	r3, r2
 80017b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017b6:	461a      	mov	r2, r3
 80017b8:	2320      	movs	r3, #32
 80017ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d009      	beq.n	80017da <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80017c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c8:	015a      	lsls	r2, r3, #5
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	4413      	add	r3, r2
 80017ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80017d2:	461a      	mov	r2, r3
 80017d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	3301      	adds	r3, #1
 80017de:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e2:	085b      	lsrs	r3, r3, #1
 80017e4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d199      	bne.n	8001720 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	4618      	mov	r0, r3
 80017f2:	f003 fabd 	bl	8004d70 <USB_ReadInterrupts>
 80017f6:	4603      	mov	r3, r0
 80017f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80017fc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001800:	f040 808c 	bne.w	800191c <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4618      	mov	r0, r3
 800180a:	f003 fade 	bl	8004dca <USB_ReadDevAllInEpInterrupt>
 800180e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001810:	2300      	movs	r3, #0
 8001812:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001814:	e07e      	b.n	8001914 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	2b00      	cmp	r3, #0
 800181e:	d073      	beq.n	8001908 <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001826:	b2d2      	uxtb	r2, r2
 8001828:	4611      	mov	r1, r2
 800182a:	4618      	mov	r0, r3
 800182c:	f003 fb05 	bl	8004e3a <USB_ReadDevInEPInterrupt>
 8001830:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	f003 0301 	and.w	r3, r3, #1
 8001838:	2b00      	cmp	r3, #0
 800183a:	d020      	beq.n	800187e <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800183c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183e:	f003 030f 	and.w	r3, r3, #15
 8001842:	2201      	movs	r2, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001850:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	43db      	mvns	r3, r3
 8001856:	69f9      	ldr	r1, [r7, #28]
 8001858:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800185c:	4013      	ands	r3, r2
 800185e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001860:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001862:	015a      	lsls	r2, r3, #5
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	4413      	add	r3, r2
 8001868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800186c:	461a      	mov	r2, r3
 800186e:	2301      	movs	r3, #1
 8001870:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001874:	b2db      	uxtb	r3, r3
 8001876:	4619      	mov	r1, r3
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f005 fb58 	bl	8006f2e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	f003 0308 	and.w	r3, r3, #8
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188a:	015a      	lsls	r2, r3, #5
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	4413      	add	r3, r2
 8001890:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001894:	461a      	mov	r2, r3
 8001896:	2308      	movs	r3, #8
 8001898:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	f003 0310 	and.w	r3, r3, #16
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d008      	beq.n	80018b6 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80018a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a6:	015a      	lsls	r2, r3, #5
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	4413      	add	r3, r2
 80018ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018b0:	461a      	mov	r2, r3
 80018b2:	2310      	movs	r3, #16
 80018b4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d008      	beq.n	80018d2 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	015a      	lsls	r2, r3, #5
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	4413      	add	r3, r2
 80018c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018cc:	461a      	mov	r2, r3
 80018ce:	2340      	movs	r3, #64	; 0x40
 80018d0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d00c      	beq.n	80018f6 <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80018dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018de:	6a38      	ldr	r0, [r7, #32]
 80018e0:	f002 fb82 	bl	8003fe8 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	015a      	lsls	r2, r3, #5
 80018e8:	69fb      	ldr	r3, [r7, #28]
 80018ea:	4413      	add	r3, r2
 80018ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018f0:	461a      	mov	r2, r3
 80018f2:	2302      	movs	r3, #2
 80018f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001902:	6878      	ldr	r0, [r7, #4]
 8001904:	f000 fc1a 	bl	800213c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190a:	3301      	adds	r3, #1
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800190e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001910:	085b      	lsrs	r3, r3, #1
 8001912:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001916:	2b00      	cmp	r3, #0
 8001918:	f47f af7d 	bne.w	8001816 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4618      	mov	r0, r3
 8001922:	f003 fa25 	bl	8004d70 <USB_ReadInterrupts>
 8001926:	4603      	mov	r3, r0
 8001928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800192c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001930:	d122      	bne.n	8001978 <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	69fa      	ldr	r2, [r7, #28]
 800193c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001940:	f023 0301 	bic.w	r3, r3, #1
 8001944:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800194c:	2b01      	cmp	r3, #1
 800194e:	d108      	bne.n	8001962 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2200      	movs	r2, #0
 8001954:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001958:	2100      	movs	r1, #0
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f005 fe00 	bl	8007560 <HAL_PCDEx_LPM_Callback>
 8001960:	e002      	b.n	8001968 <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f005 fb50 	bl	8007008 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	695a      	ldr	r2, [r3, #20]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001976:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4618      	mov	r0, r3
 800197e:	f003 f9f7 	bl	8004d70 <USB_ReadInterrupts>
 8001982:	4603      	mov	r3, r0
 8001984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001988:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800198c:	d112      	bne.n	80019b4 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 0301 	and.w	r3, r3, #1
 800199a:	2b01      	cmp	r3, #1
 800199c:	d102      	bne.n	80019a4 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800199e:	6878      	ldr	r0, [r7, #4]
 80019a0:	f005 fb0c 	bl	8006fbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	695a      	ldr	r2, [r3, #20]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80019b2:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 f9d9 	bl	8004d70 <USB_ReadInterrupts>
 80019be:	4603      	mov	r3, r0
 80019c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80019c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80019c8:	d121      	bne.n	8001a0e <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	695a      	ldr	r2, [r3, #20]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80019d8:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d111      	bne.n	8001a08 <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f2:	089b      	lsrs	r3, r3, #2
 80019f4:	f003 020f 	and.w	r2, r3, #15
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80019fe:	2101      	movs	r1, #1
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f005 fdad 	bl	8007560 <HAL_PCDEx_LPM_Callback>
 8001a06:	e002      	b.n	8001a0e <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f005 fad7 	bl	8006fbc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4618      	mov	r0, r3
 8001a14:	f003 f9ac 	bl	8004d70 <USB_ReadInterrupts>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a22:	f040 80b5 	bne.w	8001b90 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	69fa      	ldr	r2, [r7, #28]
 8001a30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a34:	f023 0301 	bic.w	r3, r3, #1
 8001a38:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2110      	movs	r1, #16
 8001a40:	4618      	mov	r0, r3
 8001a42:	f002 fad1 	bl	8003fe8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a46:	2300      	movs	r3, #0
 8001a48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a4a:	e046      	b.n	8001ada <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a4e:	015a      	lsls	r2, r3, #5
 8001a50:	69fb      	ldr	r3, [r7, #28]
 8001a52:	4413      	add	r3, r2
 8001a54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a5e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a62:	015a      	lsls	r2, r3, #5
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	4413      	add	r3, r2
 8001a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a70:	0151      	lsls	r1, r2, #5
 8001a72:	69fa      	ldr	r2, [r7, #28]
 8001a74:	440a      	add	r2, r1
 8001a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001a7a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001a7e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a82:	015a      	lsls	r2, r3, #5
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	4413      	add	r3, r2
 8001a88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001a92:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001a96:	015a      	lsls	r2, r3, #5
 8001a98:	69fb      	ldr	r3, [r7, #28]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001aa4:	0151      	lsls	r1, r2, #5
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	440a      	add	r2, r1
 8001aaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001aae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001ab2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001ab4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab6:	015a      	lsls	r2, r3, #5
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	4413      	add	r3, r2
 8001abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac4:	0151      	lsls	r1, r2, #5
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	440a      	add	r2, r1
 8001aca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001ace:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ad2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3b3      	bcc.n	8001a4c <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001aea:	69db      	ldr	r3, [r3, #28]
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001af2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001af6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d016      	beq.n	8001b2e <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001b00:	69fb      	ldr	r3, [r7, #28]
 8001b02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b0a:	69fa      	ldr	r2, [r7, #28]
 8001b0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b10:	f043 030b 	orr.w	r3, r3, #11
 8001b14:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b20:	69fa      	ldr	r2, [r7, #28]
 8001b22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b26:	f043 030b 	orr.w	r3, r3, #11
 8001b2a:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2c:	e015      	b.n	8001b5a <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b34:	695b      	ldr	r3, [r3, #20]
 8001b36:	69fa      	ldr	r2, [r7, #28]
 8001b38:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001b40:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001b44:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	69fa      	ldr	r2, [r7, #28]
 8001b50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b54:	f043 030b 	orr.w	r3, r3, #11
 8001b58:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001b5a:	69fb      	ldr	r3, [r7, #28]
 8001b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001b68:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001b6c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001b78:	4619      	mov	r1, r3
 8001b7a:	4610      	mov	r0, r2
 8001b7c:	f003 f9bc 	bl	8004ef8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	695a      	ldr	r2, [r3, #20]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4618      	mov	r0, r3
 8001b96:	f003 f8eb 	bl	8004d70 <USB_ReadInterrupts>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ba4:	d124      	bne.n	8001bf0 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	f003 f981 	bl	8004eb2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f002 fa90 	bl	80040da <USB_GetDevSpeed>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681c      	ldr	r4, [r3, #0]
 8001bc6:	f001 fa47 	bl	8003058 <HAL_RCC_GetHCLKFreq>
 8001bca:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	4620      	mov	r0, r4
 8001bd6:	f001 ffb1 	bl	8003b3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f005 f9cf 	bl	8006f7e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001bee:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f003 f8bb 	bl	8004d70 <USB_ReadInterrupts>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d10a      	bne.n	8001c1a <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f005 f9ac 	bl	8006f62 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	695a      	ldr	r2, [r3, #20]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f002 0208 	and.w	r2, r2, #8
 8001c18:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f003 f8a6 	bl	8004d70 <USB_ReadInterrupts>
 8001c24:	4603      	mov	r3, r0
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c2e:	d10f      	bne.n	8001c50 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c30:	2300      	movs	r3, #0
 8001c32:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	4619      	mov	r1, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f005 fa1e 	bl	800707c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	695a      	ldr	r2, [r3, #20]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001c4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f003 f88b 	bl	8004d70 <USB_ReadInterrupts>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c60:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001c64:	d10f      	bne.n	8001c86 <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001c66:	2300      	movs	r3, #0
 8001c68:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f005 f9f1 	bl	8007058 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	695a      	ldr	r2, [r3, #20]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c84:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f003 f870 	bl	8004d70 <USB_ReadInterrupts>
 8001c90:	4603      	mov	r3, r0
 8001c92:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c9a:	d10a      	bne.n	8001cb2 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c9c:	6878      	ldr	r0, [r7, #4]
 8001c9e:	f005 f9ff 	bl	80070a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	695a      	ldr	r2, [r3, #20]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001cb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f003 f85a 	bl	8004d70 <USB_ReadInterrupts>
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b04      	cmp	r3, #4
 8001cc4:	d115      	bne.n	8001cf2 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	f003 0304 	and.w	r3, r3, #4
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d002      	beq.n	8001cde <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001cd8:	6878      	ldr	r0, [r7, #4]
 8001cda:	f005 f9ef 	bl	80070bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6859      	ldr	r1, [r3, #4]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	430a      	orrs	r2, r1
 8001cec:	605a      	str	r2, [r3, #4]
 8001cee:	e000      	b.n	8001cf2 <HAL_PCD_IRQHandler+0x72c>
      return;
 8001cf0:	bf00      	nop
    }
  }
}
 8001cf2:	3734      	adds	r7, #52	; 0x34
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd90      	pop	{r4, r7, pc}

08001cf8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d101      	bne.n	8001d12 <HAL_PCD_SetAddress+0x1a>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	e013      	b.n	8001d3a <HAL_PCD_SetAddress+0x42>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	78fa      	ldrb	r2, [r7, #3]
 8001d1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	78fa      	ldrb	r2, [r7, #3]
 8001d28:	4611      	mov	r1, r2
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f002 ffb8 	bl	8004ca0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001d38:	2300      	movs	r3, #0
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}

08001d42 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001d42:	b580      	push	{r7, lr}
 8001d44:	b084      	sub	sp, #16
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
 8001d4a:	4608      	mov	r0, r1
 8001d4c:	4611      	mov	r1, r2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4603      	mov	r3, r0
 8001d52:	70fb      	strb	r3, [r7, #3]
 8001d54:	460b      	mov	r3, r1
 8001d56:	803b      	strh	r3, [r7, #0]
 8001d58:	4613      	mov	r3, r2
 8001d5a:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d60:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	da0f      	bge.n	8001d88 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	f003 020f 	and.w	r2, r3, #15
 8001d6e:	4613      	mov	r3, r2
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	1a9b      	subs	r3, r3, r2
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	3338      	adds	r3, #56	; 0x38
 8001d78:	687a      	ldr	r2, [r7, #4]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	3304      	adds	r3, #4
 8001d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2201      	movs	r2, #1
 8001d84:	705a      	strb	r2, [r3, #1]
 8001d86:	e00f      	b.n	8001da8 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d88:	78fb      	ldrb	r3, [r7, #3]
 8001d8a:	f003 020f 	and.w	r2, r3, #15
 8001d8e:	4613      	mov	r3, r2
 8001d90:	00db      	lsls	r3, r3, #3
 8001d92:	1a9b      	subs	r3, r3, r2
 8001d94:	009b      	lsls	r3, r3, #2
 8001d96:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	3304      	adds	r3, #4
 8001da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2200      	movs	r2, #0
 8001da6:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	f003 030f 	and.w	r3, r3, #15
 8001dae:	b2da      	uxtb	r2, r3
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001db4:	883a      	ldrh	r2, [r7, #0]
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	78ba      	ldrb	r2, [r7, #2]
 8001dbe:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	785b      	ldrb	r3, [r3, #1]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d004      	beq.n	8001dd2 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	b29a      	uxth	r2, r3
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001dd2:	78bb      	ldrb	r3, [r7, #2]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d102      	bne.n	8001dde <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d101      	bne.n	8001dec <HAL_PCD_EP_Open+0xaa>
 8001de8:	2302      	movs	r3, #2
 8001dea:	e00e      	b.n	8001e0a <HAL_PCD_EP_Open+0xc8>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	68f9      	ldr	r1, [r7, #12]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 f98c 	bl	8004118 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	2200      	movs	r2, #0
 8001e04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001e08:	7afb      	ldrb	r3, [r7, #11]
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3710      	adds	r7, #16
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}

08001e12 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e12:	b580      	push	{r7, lr}
 8001e14:	b084      	sub	sp, #16
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001e1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	da0f      	bge.n	8001e46 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e26:	78fb      	ldrb	r3, [r7, #3]
 8001e28:	f003 020f 	and.w	r2, r3, #15
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	1a9b      	subs	r3, r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	3338      	adds	r3, #56	; 0x38
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	4413      	add	r3, r2
 8001e3a:	3304      	adds	r3, #4
 8001e3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2201      	movs	r2, #1
 8001e42:	705a      	strb	r2, [r3, #1]
 8001e44:	e00f      	b.n	8001e66 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e46:	78fb      	ldrb	r3, [r7, #3]
 8001e48:	f003 020f 	and.w	r2, r3, #15
 8001e4c:	4613      	mov	r3, r2
 8001e4e:	00db      	lsls	r3, r3, #3
 8001e50:	1a9b      	subs	r3, r3, r2
 8001e52:	009b      	lsls	r3, r3, #2
 8001e54:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001e58:	687a      	ldr	r2, [r7, #4]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	2200      	movs	r2, #0
 8001e64:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001e66:	78fb      	ldrb	r3, [r7, #3]
 8001e68:	f003 030f 	and.w	r3, r3, #15
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d101      	bne.n	8001e80 <HAL_PCD_EP_Close+0x6e>
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	e00e      	b.n	8001e9e <HAL_PCD_EP_Close+0x8c>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	68f9      	ldr	r1, [r7, #12]
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f002 f9ca 	bl	8004228 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001e9c:	2300      	movs	r3, #0
}
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b086      	sub	sp, #24
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	60f8      	str	r0, [r7, #12]
 8001eae:	607a      	str	r2, [r7, #4]
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	460b      	mov	r3, r1
 8001eb4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001eb6:	7afb      	ldrb	r3, [r7, #11]
 8001eb8:	f003 020f 	and.w	r2, r3, #15
 8001ebc:	4613      	mov	r3, r2
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	1a9b      	subs	r3, r3, r2
 8001ec2:	009b      	lsls	r3, r3, #2
 8001ec4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ec8:	68fa      	ldr	r2, [r7, #12]
 8001eca:	4413      	add	r3, r2
 8001ecc:	3304      	adds	r3, #4
 8001ece:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	683a      	ldr	r2, [r7, #0]
 8001eda:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001edc:	697b      	ldr	r3, [r7, #20]
 8001ede:	2200      	movs	r2, #0
 8001ee0:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001ee2:	697b      	ldr	r3, [r7, #20]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ee8:	7afb      	ldrb	r3, [r7, #11]
 8001eea:	f003 030f 	and.w	r3, r3, #15
 8001eee:	b2da      	uxtb	r2, r3
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ef4:	7afb      	ldrb	r3, [r7, #11]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d106      	bne.n	8001f0c <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	6979      	ldr	r1, [r7, #20]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f002 fc47 	bl	8004798 <USB_EP0StartXfer>
 8001f0a:	e005      	b.n	8001f18 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6979      	ldr	r1, [r7, #20]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f002 fa64 	bl	80043e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	460b      	mov	r3, r1
 8001f2c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001f2e:	78fb      	ldrb	r3, [r7, #3]
 8001f30:	f003 020f 	and.w	r2, r3, #15
 8001f34:	6879      	ldr	r1, [r7, #4]
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	1a9b      	subs	r3, r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	440b      	add	r3, r1
 8001f40:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001f44:	681b      	ldr	r3, [r3, #0]
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	607a      	str	r2, [r7, #4]
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f62:	7afb      	ldrb	r3, [r7, #11]
 8001f64:	f003 020f 	and.w	r2, r3, #15
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	1a9b      	subs	r3, r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	3338      	adds	r3, #56	; 0x38
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	4413      	add	r3, r2
 8001f76:	3304      	adds	r3, #4
 8001f78:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	683a      	ldr	r2, [r7, #0]
 8001f84:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001f86:	697b      	ldr	r3, [r7, #20]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f92:	7afb      	ldrb	r3, [r7, #11]
 8001f94:	f003 030f 	and.w	r3, r3, #15
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f9e:	7afb      	ldrb	r3, [r7, #11]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d106      	bne.n	8001fb6 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	6979      	ldr	r1, [r7, #20]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 fbf2 	bl	8004798 <USB_EP0StartXfer>
 8001fb4:	e005      	b.n	8001fc2 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6979      	ldr	r1, [r7, #20]
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	f002 fa0f 	bl	80043e0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b084      	sub	sp, #16
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	f003 020f 	and.w	r2, r3, #15
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d901      	bls.n	8001fea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e04e      	b.n	8002088 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da0f      	bge.n	8002012 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ff2:	78fb      	ldrb	r3, [r7, #3]
 8001ff4:	f003 020f 	and.w	r2, r3, #15
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	1a9b      	subs	r3, r3, r2
 8001ffe:	009b      	lsls	r3, r3, #2
 8002000:	3338      	adds	r3, #56	; 0x38
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	4413      	add	r3, r2
 8002006:	3304      	adds	r3, #4
 8002008:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2201      	movs	r2, #1
 800200e:	705a      	strb	r2, [r3, #1]
 8002010:	e00d      	b.n	800202e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002012:	78fa      	ldrb	r2, [r7, #3]
 8002014:	4613      	mov	r3, r2
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	1a9b      	subs	r3, r3, r2
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8002020:	687a      	ldr	r2, [r7, #4]
 8002022:	4413      	add	r3, r2
 8002024:	3304      	adds	r3, #4
 8002026:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2201      	movs	r2, #1
 8002032:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	b2da      	uxtb	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002046:	2b01      	cmp	r3, #1
 8002048:	d101      	bne.n	800204e <HAL_PCD_EP_SetStall+0x82>
 800204a:	2302      	movs	r3, #2
 800204c:	e01c      	b.n	8002088 <HAL_PCD_EP_SetStall+0xbc>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2201      	movs	r2, #1
 8002052:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68f9      	ldr	r1, [r7, #12]
 800205c:	4618      	mov	r0, r3
 800205e:	f002 fd4b 	bl	8004af8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002062:	78fb      	ldrb	r3, [r7, #3]
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	2b00      	cmp	r3, #0
 800206a:	d108      	bne.n	800207e <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681a      	ldr	r2, [r3, #0]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8002076:	4619      	mov	r1, r3
 8002078:	4610      	mov	r0, r2
 800207a:	f002 ff3d 	bl	8004ef8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3710      	adds	r7, #16
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b084      	sub	sp, #16
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
 8002098:	460b      	mov	r3, r1
 800209a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800209c:	78fb      	ldrb	r3, [r7, #3]
 800209e:	f003 020f 	and.w	r2, r3, #15
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d901      	bls.n	80020ae <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e042      	b.n	8002134 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80020ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	da0f      	bge.n	80020d6 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80020b6:	78fb      	ldrb	r3, [r7, #3]
 80020b8:	f003 020f 	and.w	r2, r3, #15
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	3338      	adds	r3, #56	; 0x38
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	4413      	add	r3, r2
 80020ca:	3304      	adds	r3, #4
 80020cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	2201      	movs	r2, #1
 80020d2:	705a      	strb	r2, [r3, #1]
 80020d4:	e00f      	b.n	80020f6 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80020d6:	78fb      	ldrb	r3, [r7, #3]
 80020d8:	f003 020f 	and.w	r2, r3, #15
 80020dc:	4613      	mov	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	1a9b      	subs	r3, r3, r2
 80020e2:	009b      	lsls	r3, r3, #2
 80020e4:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	4413      	add	r3, r2
 80020ec:	3304      	adds	r3, #4
 80020ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	b2da      	uxtb	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 800210e:	2b01      	cmp	r3, #1
 8002110:	d101      	bne.n	8002116 <HAL_PCD_EP_ClrStall+0x86>
 8002112:	2302      	movs	r3, #2
 8002114:	e00e      	b.n	8002134 <HAL_PCD_EP_ClrStall+0xa4>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2201      	movs	r2, #1
 800211a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68f9      	ldr	r1, [r7, #12]
 8002124:	4618      	mov	r0, r3
 8002126:	f002 fd55 	bl	8004bd4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002132:	2300      	movs	r3, #0
}
 8002134:	4618      	mov	r0, r3
 8002136:	3710      	adds	r7, #16
 8002138:	46bd      	mov	sp, r7
 800213a:	bd80      	pop	{r7, pc}

0800213c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b088      	sub	sp, #32
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002150:	683a      	ldr	r2, [r7, #0]
 8002152:	4613      	mov	r3, r2
 8002154:	00db      	lsls	r3, r3, #3
 8002156:	1a9b      	subs	r3, r3, r2
 8002158:	009b      	lsls	r3, r3, #2
 800215a:	3338      	adds	r3, #56	; 0x38
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	4413      	add	r3, r2
 8002160:	3304      	adds	r3, #4
 8002162:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	699a      	ldr	r2, [r3, #24]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	429a      	cmp	r2, r3
 800216e:	d901      	bls.n	8002174 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002170:	2301      	movs	r3, #1
 8002172:	e067      	b.n	8002244 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	695a      	ldr	r2, [r3, #20]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	1ad3      	subs	r3, r2, r3
 800217e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	69fa      	ldr	r2, [r7, #28]
 8002186:	429a      	cmp	r2, r3
 8002188:	d902      	bls.n	8002190 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	3303      	adds	r3, #3
 8002194:	089b      	lsrs	r3, r3, #2
 8002196:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002198:	e026      	b.n	80021e8 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	695a      	ldr	r2, [r3, #20]
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	699b      	ldr	r3, [r3, #24]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	69fa      	ldr	r2, [r7, #28]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d902      	bls.n	80021b6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021b6:	69fb      	ldr	r3, [r7, #28]
 80021b8:	3303      	adds	r3, #3
 80021ba:	089b      	lsrs	r3, r3, #2
 80021bc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	68d9      	ldr	r1, [r3, #12]
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	b2da      	uxtb	r2, r3
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f002 fc02 	bl	80049d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	68da      	ldr	r2, [r3, #12]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	441a      	add	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	699a      	ldr	r2, [r3, #24]
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	441a      	add	r2, r3
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	015a      	lsls	r2, r3, #5
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	4413      	add	r3, r2
 80021f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80021f4:	699b      	ldr	r3, [r3, #24]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d809      	bhi.n	8002212 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	699a      	ldr	r2, [r3, #24]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002206:	429a      	cmp	r2, r3
 8002208:	d203      	bcs.n	8002212 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	695b      	ldr	r3, [r3, #20]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d1c3      	bne.n	800219a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	695a      	ldr	r2, [r3, #20]
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	699b      	ldr	r3, [r3, #24]
 800221a:	429a      	cmp	r2, r3
 800221c:	d811      	bhi.n	8002242 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	2201      	movs	r2, #1
 8002226:	fa02 f303 	lsl.w	r3, r2, r3
 800222a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002232:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	43db      	mvns	r3, r3
 8002238:	6939      	ldr	r1, [r7, #16]
 800223a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800223e:	4013      	ands	r3, r2
 8002240:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3720      	adds	r7, #32
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
 8002254:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	333c      	adds	r3, #60	; 0x3c
 8002264:	3304      	adds	r3, #4
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	015a      	lsls	r2, r3, #5
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	4413      	add	r3, r2
 8002272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002276:	689b      	ldr	r3, [r3, #8]
 8002278:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a19      	ldr	r2, [pc, #100]	; (80022e4 <PCD_EP_OutXfrComplete_int+0x98>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d124      	bne.n	80022cc <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	015a      	lsls	r2, r3, #5
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	4413      	add	r3, r2
 8002294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002298:	461a      	mov	r2, r3
 800229a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800229e:	6093      	str	r3, [r2, #8]
 80022a0:	e01a      	b.n	80022d8 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80022a2:	68bb      	ldr	r3, [r7, #8]
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d008      	beq.n	80022be <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	015a      	lsls	r2, r3, #5
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	4413      	add	r3, r2
 80022b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022b8:	461a      	mov	r2, r3
 80022ba:	2320      	movs	r3, #32
 80022bc:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	4619      	mov	r1, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f004 fe17 	bl	8006ef8 <HAL_PCD_DataOutStageCallback>
 80022ca:	e005      	b.n	80022d8 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	4619      	mov	r1, r3
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	f004 fe10 	bl	8006ef8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	4f54310a 	.word	0x4f54310a

080022e8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b086      	sub	sp, #24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	333c      	adds	r3, #60	; 0x3c
 8002300:	3304      	adds	r3, #4
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	015a      	lsls	r2, r3, #5
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	4413      	add	r3, r2
 800230e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	4a0c      	ldr	r2, [pc, #48]	; (800234c <PCD_EP_OutSetupPacket_int+0x64>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d90e      	bls.n	800233c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002324:	2b00      	cmp	r3, #0
 8002326:	d009      	beq.n	800233c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	015a      	lsls	r2, r3, #5
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4413      	add	r3, r2
 8002330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002334:	461a      	mov	r2, r3
 8002336:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800233a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f004 fdc9 	bl	8006ed4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002342:	2300      	movs	r3, #0
}
 8002344:	4618      	mov	r0, r3
 8002346:	3718      	adds	r7, #24
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	4f54300a 	.word	0x4f54300a

08002350 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002350:	b480      	push	{r7}
 8002352:	b085      	sub	sp, #20
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	460b      	mov	r3, r1
 800235a:	70fb      	strb	r3, [r7, #3]
 800235c:	4613      	mov	r3, r2
 800235e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002366:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d107      	bne.n	800237e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800236e:	883b      	ldrh	r3, [r7, #0]
 8002370:	0419      	lsls	r1, r3, #16
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	430a      	orrs	r2, r1
 800237a:	629a      	str	r2, [r3, #40]	; 0x28
 800237c:	e028      	b.n	80023d0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002384:	0c1b      	lsrs	r3, r3, #16
 8002386:	68ba      	ldr	r2, [r7, #8]
 8002388:	4413      	add	r3, r2
 800238a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800238c:	2300      	movs	r3, #0
 800238e:	73fb      	strb	r3, [r7, #15]
 8002390:	e00d      	b.n	80023ae <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681a      	ldr	r2, [r3, #0]
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	3340      	adds	r3, #64	; 0x40
 800239a:	009b      	lsls	r3, r3, #2
 800239c:	4413      	add	r3, r2
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	0c1b      	lsrs	r3, r3, #16
 80023a2:	68ba      	ldr	r2, [r7, #8]
 80023a4:	4413      	add	r3, r2
 80023a6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80023a8:	7bfb      	ldrb	r3, [r7, #15]
 80023aa:	3301      	adds	r3, #1
 80023ac:	73fb      	strb	r3, [r7, #15]
 80023ae:	7bfa      	ldrb	r2, [r7, #15]
 80023b0:	78fb      	ldrb	r3, [r7, #3]
 80023b2:	3b01      	subs	r3, #1
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d3ec      	bcc.n	8002392 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80023b8:	883b      	ldrh	r3, [r7, #0]
 80023ba:	0418      	lsls	r0, r3, #16
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6819      	ldr	r1, [r3, #0]
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	68ba      	ldr	r2, [r7, #8]
 80023c6:	4302      	orrs	r2, r0
 80023c8:	3340      	adds	r3, #64	; 0x40
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	440b      	add	r3, r1
 80023ce:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3714      	adds	r7, #20
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	887a      	ldrh	r2, [r7, #2]
 80023f0:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	370c      	adds	r7, #12
 80023f8:	46bd      	mov	sp, r7
 80023fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fe:	4770      	bx	lr

08002400 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002400:	b480      	push	{r7}
 8002402:	b085      	sub	sp, #20
 8002404:	af00      	add	r7, sp, #0
 8002406:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2201      	movs	r2, #1
 8002412:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002432:	f043 0303 	orr.w	r3, r3, #3
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800243a:	2300      	movs	r3, #0
}
 800243c:	4618      	mov	r0, r3
 800243e:	3714      	adds	r7, #20
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002448:	b480      	push	{r7}
 800244a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800244c:	4b04      	ldr	r3, [pc, #16]	; (8002460 <HAL_PWREx_GetVoltageRange+0x18>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002454:	4618      	mov	r0, r3
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40007000 	.word	0x40007000

08002464 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002464:	b480      	push	{r7}
 8002466:	b085      	sub	sp, #20
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002472:	d130      	bne.n	80024d6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002474:	4b23      	ldr	r3, [pc, #140]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800247c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002480:	d038      	beq.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002482:	4b20      	ldr	r3, [pc, #128]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800248a:	4a1e      	ldr	r2, [pc, #120]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800248c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002490:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002492:	4b1d      	ldr	r3, [pc, #116]	; (8002508 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2232      	movs	r2, #50	; 0x32
 8002498:	fb02 f303 	mul.w	r3, r2, r3
 800249c:	4a1b      	ldr	r2, [pc, #108]	; (800250c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800249e:	fba2 2303 	umull	r2, r3, r2, r3
 80024a2:	0c9b      	lsrs	r3, r3, #18
 80024a4:	3301      	adds	r3, #1
 80024a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024a8:	e002      	b.n	80024b0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	3b01      	subs	r3, #1
 80024ae:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80024b0:	4b14      	ldr	r3, [pc, #80]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024b2:	695b      	ldr	r3, [r3, #20]
 80024b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024bc:	d102      	bne.n	80024c4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d1f2      	bne.n	80024aa <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80024c4:	4b0f      	ldr	r3, [pc, #60]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024c6:	695b      	ldr	r3, [r3, #20]
 80024c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024d0:	d110      	bne.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e00f      	b.n	80024f6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80024d6:	4b0b      	ldr	r3, [pc, #44]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80024de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80024e2:	d007      	beq.n	80024f4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80024e4:	4b07      	ldr	r3, [pc, #28]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80024ec:	4a05      	ldr	r2, [pc, #20]	; (8002504 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80024ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024f2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80024f4:	2300      	movs	r3, #0
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40007000 	.word	0x40007000
 8002508:	20000024 	.word	0x20000024
 800250c:	431bde83 	.word	0x431bde83

08002510 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002514:	4b05      	ldr	r3, [pc, #20]	; (800252c <HAL_PWREx_EnableVddUSB+0x1c>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	4a04      	ldr	r2, [pc, #16]	; (800252c <HAL_PWREx_EnableVddUSB+0x1c>)
 800251a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800251e:	6053      	str	r3, [r2, #4]
}
 8002520:	bf00      	nop
 8002522:	46bd      	mov	sp, r7
 8002524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	40007000 	.word	0x40007000

08002530 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d102      	bne.n	8002544 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800253e:	2301      	movs	r3, #1
 8002540:	f000 bc16 	b.w	8002d70 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002544:	4ba0      	ldr	r3, [pc, #640]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002546:	689b      	ldr	r3, [r3, #8]
 8002548:	f003 030c 	and.w	r3, r3, #12
 800254c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800254e:	4b9e      	ldr	r3, [pc, #632]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002550:	68db      	ldr	r3, [r3, #12]
 8002552:	f003 0303 	and.w	r3, r3, #3
 8002556:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	f000 80e4 	beq.w	800272e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d007      	beq.n	800257c <HAL_RCC_OscConfig+0x4c>
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b0c      	cmp	r3, #12
 8002570:	f040 808b 	bne.w	800268a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	2b01      	cmp	r3, #1
 8002578:	f040 8087 	bne.w	800268a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800257c:	4b92      	ldr	r3, [pc, #584]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0302 	and.w	r3, r3, #2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d005      	beq.n	8002594 <HAL_RCC_OscConfig+0x64>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	699b      	ldr	r3, [r3, #24]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d101      	bne.n	8002594 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e3ed      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6a1a      	ldr	r2, [r3, #32]
 8002598:	4b8b      	ldr	r3, [pc, #556]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0308 	and.w	r3, r3, #8
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d004      	beq.n	80025ae <HAL_RCC_OscConfig+0x7e>
 80025a4:	4b88      	ldr	r3, [pc, #544]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ac:	e005      	b.n	80025ba <HAL_RCC_OscConfig+0x8a>
 80025ae:	4b86      	ldr	r3, [pc, #536]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d223      	bcs.n	8002606 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	4618      	mov	r0, r3
 80025c4:	f000 fd54 	bl	8003070 <RCC_SetFlashLatencyFromMSIRange>
 80025c8:	4603      	mov	r3, r0
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d001      	beq.n	80025d2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80025ce:	2301      	movs	r3, #1
 80025d0:	e3ce      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d2:	4b7d      	ldr	r3, [pc, #500]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a7c      	ldr	r2, [pc, #496]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025d8:	f043 0308 	orr.w	r3, r3, #8
 80025dc:	6013      	str	r3, [r2, #0]
 80025de:	4b7a      	ldr	r3, [pc, #488]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a1b      	ldr	r3, [r3, #32]
 80025ea:	4977      	ldr	r1, [pc, #476]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f0:	4b75      	ldr	r3, [pc, #468]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	69db      	ldr	r3, [r3, #28]
 80025fc:	021b      	lsls	r3, r3, #8
 80025fe:	4972      	ldr	r1, [pc, #456]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002600:	4313      	orrs	r3, r2
 8002602:	604b      	str	r3, [r1, #4]
 8002604:	e025      	b.n	8002652 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002606:	4b70      	ldr	r3, [pc, #448]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a6f      	ldr	r2, [pc, #444]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800260c:	f043 0308 	orr.w	r3, r3, #8
 8002610:	6013      	str	r3, [r2, #0]
 8002612:	4b6d      	ldr	r3, [pc, #436]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a1b      	ldr	r3, [r3, #32]
 800261e:	496a      	ldr	r1, [pc, #424]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002624:	4b68      	ldr	r3, [pc, #416]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	69db      	ldr	r3, [r3, #28]
 8002630:	021b      	lsls	r3, r3, #8
 8002632:	4965      	ldr	r1, [pc, #404]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002634:	4313      	orrs	r3, r2
 8002636:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d109      	bne.n	8002652 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 fd14 	bl	8003070 <RCC_SetFlashLatencyFromMSIRange>
 8002648:	4603      	mov	r3, r0
 800264a:	2b00      	cmp	r3, #0
 800264c:	d001      	beq.n	8002652 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e38e      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002652:	f000 fc75 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002656:	4602      	mov	r2, r0
 8002658:	4b5b      	ldr	r3, [pc, #364]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	091b      	lsrs	r3, r3, #4
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	495a      	ldr	r1, [pc, #360]	; (80027cc <HAL_RCC_OscConfig+0x29c>)
 8002664:	5ccb      	ldrb	r3, [r1, r3]
 8002666:	f003 031f 	and.w	r3, r3, #31
 800266a:	fa22 f303 	lsr.w	r3, r2, r3
 800266e:	4a58      	ldr	r2, [pc, #352]	; (80027d0 <HAL_RCC_OscConfig+0x2a0>)
 8002670:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002672:	4b58      	ldr	r3, [pc, #352]	; (80027d4 <HAL_RCC_OscConfig+0x2a4>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fe fae4 	bl	8000c44 <HAL_InitTick>
 800267c:	4603      	mov	r3, r0
 800267e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002680:	7bfb      	ldrb	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d052      	beq.n	800272c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002686:	7bfb      	ldrb	r3, [r7, #15]
 8002688:	e372      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d032      	beq.n	80026f8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002692:	4b4d      	ldr	r3, [pc, #308]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a4c      	ldr	r2, [pc, #304]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800269e:	f7fe fb21 	bl	8000ce4 <HAL_GetTick>
 80026a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026a4:	e008      	b.n	80026b8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80026a6:	f7fe fb1d 	bl	8000ce4 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b02      	cmp	r3, #2
 80026b2:	d901      	bls.n	80026b8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80026b4:	2303      	movs	r3, #3
 80026b6:	e35b      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80026b8:	4b43      	ldr	r3, [pc, #268]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0f0      	beq.n	80026a6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80026c4:	4b40      	ldr	r3, [pc, #256]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a3f      	ldr	r2, [pc, #252]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026ca:	f043 0308 	orr.w	r3, r3, #8
 80026ce:	6013      	str	r3, [r2, #0]
 80026d0:	4b3d      	ldr	r3, [pc, #244]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	493a      	ldr	r1, [pc, #232]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80026e2:	4b39      	ldr	r3, [pc, #228]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	021b      	lsls	r3, r3, #8
 80026f0:	4935      	ldr	r1, [pc, #212]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	604b      	str	r3, [r1, #4]
 80026f6:	e01a      	b.n	800272e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80026f8:	4b33      	ldr	r3, [pc, #204]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a32      	ldr	r2, [pc, #200]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80026fe:	f023 0301 	bic.w	r3, r3, #1
 8002702:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002704:	f7fe faee 	bl	8000ce4 <HAL_GetTick>
 8002708:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800270a:	e008      	b.n	800271e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800270c:	f7fe faea 	bl	8000ce4 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d901      	bls.n	800271e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	e328      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800271e:	4b2a      	ldr	r3, [pc, #168]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1f0      	bne.n	800270c <HAL_RCC_OscConfig+0x1dc>
 800272a:	e000      	b.n	800272e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800272c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0301 	and.w	r3, r3, #1
 8002736:	2b00      	cmp	r3, #0
 8002738:	d073      	beq.n	8002822 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	2b08      	cmp	r3, #8
 800273e:	d005      	beq.n	800274c <HAL_RCC_OscConfig+0x21c>
 8002740:	69bb      	ldr	r3, [r7, #24]
 8002742:	2b0c      	cmp	r3, #12
 8002744:	d10e      	bne.n	8002764 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	2b03      	cmp	r3, #3
 800274a:	d10b      	bne.n	8002764 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274c:	4b1e      	ldr	r3, [pc, #120]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002754:	2b00      	cmp	r3, #0
 8002756:	d063      	beq.n	8002820 <HAL_RCC_OscConfig+0x2f0>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d15f      	bne.n	8002820 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e305      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800276c:	d106      	bne.n	800277c <HAL_RCC_OscConfig+0x24c>
 800276e:	4b16      	ldr	r3, [pc, #88]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4a15      	ldr	r2, [pc, #84]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002774:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002778:	6013      	str	r3, [r2, #0]
 800277a:	e01d      	b.n	80027b8 <HAL_RCC_OscConfig+0x288>
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCC_OscConfig+0x270>
 8002786:	4b10      	ldr	r3, [pc, #64]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a0f      	ldr	r2, [pc, #60]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 800278c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002790:	6013      	str	r3, [r2, #0]
 8002792:	4b0d      	ldr	r3, [pc, #52]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4a0c      	ldr	r2, [pc, #48]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 8002798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800279c:	6013      	str	r3, [r2, #0]
 800279e:	e00b      	b.n	80027b8 <HAL_RCC_OscConfig+0x288>
 80027a0:	4b09      	ldr	r3, [pc, #36]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a08      	ldr	r2, [pc, #32]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80027a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027aa:	6013      	str	r3, [r2, #0]
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a05      	ldr	r2, [pc, #20]	; (80027c8 <HAL_RCC_OscConfig+0x298>)
 80027b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d01b      	beq.n	80027f8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027c0:	f7fe fa90 	bl	8000ce4 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027c6:	e010      	b.n	80027ea <HAL_RCC_OscConfig+0x2ba>
 80027c8:	40021000 	.word	0x40021000
 80027cc:	0800782c 	.word	0x0800782c
 80027d0:	20000024 	.word	0x20000024
 80027d4:	20000028 	.word	0x20000028
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027d8:	f7fe fa84 	bl	8000ce4 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b64      	cmp	r3, #100	; 0x64
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e2c2      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ea:	4baf      	ldr	r3, [pc, #700]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d0f0      	beq.n	80027d8 <HAL_RCC_OscConfig+0x2a8>
 80027f6:	e014      	b.n	8002822 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7fe fa74 	bl	8000ce4 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002800:	f7fe fa70 	bl	8000ce4 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b64      	cmp	r3, #100	; 0x64
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e2ae      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002812:	4ba5      	ldr	r3, [pc, #660]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d1f0      	bne.n	8002800 <HAL_RCC_OscConfig+0x2d0>
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002820:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d060      	beq.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800282e:	69bb      	ldr	r3, [r7, #24]
 8002830:	2b04      	cmp	r3, #4
 8002832:	d005      	beq.n	8002840 <HAL_RCC_OscConfig+0x310>
 8002834:	69bb      	ldr	r3, [r7, #24]
 8002836:	2b0c      	cmp	r3, #12
 8002838:	d119      	bne.n	800286e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	2b02      	cmp	r3, #2
 800283e:	d116      	bne.n	800286e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002840:	4b99      	ldr	r3, [pc, #612]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_OscConfig+0x328>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e28b      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002858:	4b93      	ldr	r3, [pc, #588]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	061b      	lsls	r3, r3, #24
 8002866:	4990      	ldr	r1, [pc, #576]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800286c:	e040      	b.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d023      	beq.n	80028be <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002876:	4b8c      	ldr	r3, [pc, #560]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a8b      	ldr	r2, [pc, #556]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002880:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002882:	f7fe fa2f 	bl	8000ce4 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800288a:	f7fe fa2b 	bl	8000ce4 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e269      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800289c:	4b82      	ldr	r3, [pc, #520]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	4b7f      	ldr	r3, [pc, #508]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	497c      	ldr	r1, [pc, #496]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]
 80028bc:	e018      	b.n	80028f0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028be:	4b7a      	ldr	r3, [pc, #488]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a79      	ldr	r2, [pc, #484]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80028c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028ca:	f7fe fa0b 	bl	8000ce4 <HAL_GetTick>
 80028ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028d0:	e008      	b.n	80028e4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028d2:	f7fe fa07 	bl	8000ce4 <HAL_GetTick>
 80028d6:	4602      	mov	r2, r0
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b02      	cmp	r3, #2
 80028de:	d901      	bls.n	80028e4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80028e0:	2303      	movs	r3, #3
 80028e2:	e245      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80028e4:	4b70      	ldr	r3, [pc, #448]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d1f0      	bne.n	80028d2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d03c      	beq.n	8002976 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	695b      	ldr	r3, [r3, #20]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01c      	beq.n	800293e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002904:	4b68      	ldr	r3, [pc, #416]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002906:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800290a:	4a67      	ldr	r2, [pc, #412]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002914:	f7fe f9e6 	bl	8000ce4 <HAL_GetTick>
 8002918:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800291a:	e008      	b.n	800292e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800291c:	f7fe f9e2 	bl	8000ce4 <HAL_GetTick>
 8002920:	4602      	mov	r2, r0
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	2b02      	cmp	r3, #2
 8002928:	d901      	bls.n	800292e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800292a:	2303      	movs	r3, #3
 800292c:	e220      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800292e:	4b5e      	ldr	r3, [pc, #376]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002930:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0ef      	beq.n	800291c <HAL_RCC_OscConfig+0x3ec>
 800293c:	e01b      	b.n	8002976 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800293e:	4b5a      	ldr	r3, [pc, #360]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002940:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002944:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7fe f9c9 	bl	8000ce4 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002956:	f7fe f9c5 	bl	8000ce4 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e203      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002968:	4b4f      	ldr	r3, [pc, #316]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800296a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1ef      	bne.n	8002956 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	f000 80a6 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002984:	2300      	movs	r3, #0
 8002986:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002988:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800298a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800298c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10d      	bne.n	80029b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002994:	4b44      	ldr	r3, [pc, #272]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002996:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002998:	4a43      	ldr	r2, [pc, #268]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 800299a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800299e:	6593      	str	r3, [r2, #88]	; 0x58
 80029a0:	4b41      	ldr	r3, [pc, #260]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80029a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a8:	60bb      	str	r3, [r7, #8]
 80029aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029ac:	2301      	movs	r3, #1
 80029ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029b0:	4b3e      	ldr	r3, [pc, #248]	; (8002aac <HAL_RCC_OscConfig+0x57c>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d118      	bne.n	80029ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029bc:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <HAL_RCC_OscConfig+0x57c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a3a      	ldr	r2, [pc, #232]	; (8002aac <HAL_RCC_OscConfig+0x57c>)
 80029c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029c8:	f7fe f98c 	bl	8000ce4 <HAL_GetTick>
 80029cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ce:	e008      	b.n	80029e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d0:	f7fe f988 	bl	8000ce4 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e1c6      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029e2:	4b32      	ldr	r3, [pc, #200]	; (8002aac <HAL_RCC_OscConfig+0x57c>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d0f0      	beq.n	80029d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d108      	bne.n	8002a08 <HAL_RCC_OscConfig+0x4d8>
 80029f6:	4b2c      	ldr	r3, [pc, #176]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a06:	e024      	b.n	8002a52 <HAL_RCC_OscConfig+0x522>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d110      	bne.n	8002a32 <HAL_RCC_OscConfig+0x502>
 8002a10:	4b25      	ldr	r3, [pc, #148]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a16:	4a24      	ldr	r2, [pc, #144]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a18:	f043 0304 	orr.w	r3, r3, #4
 8002a1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a20:	4b21      	ldr	r3, [pc, #132]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a26:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a28:	f043 0301 	orr.w	r3, r3, #1
 8002a2c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a30:	e00f      	b.n	8002a52 <HAL_RCC_OscConfig+0x522>
 8002a32:	4b1d      	ldr	r3, [pc, #116]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a38:	4a1b      	ldr	r2, [pc, #108]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	4a17      	ldr	r2, [pc, #92]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a4a:	f023 0304 	bic.w	r3, r3, #4
 8002a4e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d016      	beq.n	8002a88 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f7fe f943 	bl	8000ce4 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a60:	e00a      	b.n	8002a78 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a62:	f7fe f93f 	bl	8000ce4 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d901      	bls.n	8002a78 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002a74:	2303      	movs	r3, #3
 8002a76:	e17b      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_OscConfig+0x578>)
 8002a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a7e:	f003 0302 	and.w	r3, r3, #2
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d0ed      	beq.n	8002a62 <HAL_RCC_OscConfig+0x532>
 8002a86:	e01a      	b.n	8002abe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f7fe f92c 	bl	8000ce4 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a8e:	e00f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe f928 	bl	8000ce4 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d906      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	e164      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
 8002aa6:	bf00      	nop
 8002aa8:	40021000 	.word	0x40021000
 8002aac:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002ab0:	4ba8      	ldr	r3, [pc, #672]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ab6:	f003 0302 	and.w	r3, r3, #2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e8      	bne.n	8002a90 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002abe:	7ffb      	ldrb	r3, [r7, #31]
 8002ac0:	2b01      	cmp	r3, #1
 8002ac2:	d105      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ac4:	4ba3      	ldr	r3, [pc, #652]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	4aa2      	ldr	r2, [pc, #648]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002aca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ace:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0320 	and.w	r3, r3, #32
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d03c      	beq.n	8002b56 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d01c      	beq.n	8002b1e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ae4:	4b9b      	ldr	r3, [pc, #620]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002ae6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002aea:	4a9a      	ldr	r2, [pc, #616]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7fe f8f6 	bl	8000ce4 <HAL_GetTick>
 8002af8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002afc:	f7fe f8f2 	bl	8000ce4 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e130      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b0e:	4b91      	ldr	r3, [pc, #580]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002b10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b14:	f003 0302 	and.w	r3, r3, #2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d0ef      	beq.n	8002afc <HAL_RCC_OscConfig+0x5cc>
 8002b1c:	e01b      	b.n	8002b56 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b1e:	4b8d      	ldr	r3, [pc, #564]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002b20:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b24:	4a8b      	ldr	r2, [pc, #556]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b2e:	f7fe f8d9 	bl	8000ce4 <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b36:	f7fe f8d5 	bl	8000ce4 <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e113      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b48:	4b82      	ldr	r3, [pc, #520]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002b4a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b4e:	f003 0302 	and.w	r3, r3, #2
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d1ef      	bne.n	8002b36 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 8107 	beq.w	8002d6e <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	f040 80cb 	bne.w	8002d00 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b6a:	4b7a      	ldr	r3, [pc, #488]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002b6c:	68db      	ldr	r3, [r3, #12]
 8002b6e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f003 0203 	and.w	r2, r3, #3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7a:	429a      	cmp	r2, r3
 8002b7c:	d12c      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b8c:	429a      	cmp	r2, r3
 8002b8e:	d123      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b9a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b9c:	429a      	cmp	r2, r3
 8002b9e:	d11b      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002baa:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d113      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bba:	085b      	lsrs	r3, r3, #1
 8002bbc:	3b01      	subs	r3, #1
 8002bbe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bc0:	429a      	cmp	r2, r3
 8002bc2:	d109      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	085b      	lsrs	r3, r3, #1
 8002bd0:	3b01      	subs	r3, #1
 8002bd2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	d06d      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	2b0c      	cmp	r3, #12
 8002bdc:	d068      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bde:	4b5d      	ldr	r3, [pc, #372]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bea:	4b5a      	ldr	r3, [pc, #360]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e0ba      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bfa:	4b56      	ldr	r3, [pc, #344]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a55      	ldr	r2, [pc, #340]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c04:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c06:	f7fe f86d 	bl	8000ce4 <HAL_GetTick>
 8002c0a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c0c:	e008      	b.n	8002c20 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c0e:	f7fe f869 	bl	8000ce4 <HAL_GetTick>
 8002c12:	4602      	mov	r2, r0
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d901      	bls.n	8002c20 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002c1c:	2303      	movs	r3, #3
 8002c1e:	e0a7      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c20:	4b4c      	ldr	r3, [pc, #304]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d1f0      	bne.n	8002c0e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c2c:	4b49      	ldr	r3, [pc, #292]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c2e:	68da      	ldr	r2, [r3, #12]
 8002c30:	4b49      	ldr	r3, [pc, #292]	; (8002d58 <HAL_RCC_OscConfig+0x828>)
 8002c32:	4013      	ands	r3, r2
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002c38:	687a      	ldr	r2, [r7, #4]
 8002c3a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002c3c:	3a01      	subs	r2, #1
 8002c3e:	0112      	lsls	r2, r2, #4
 8002c40:	4311      	orrs	r1, r2
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c46:	0212      	lsls	r2, r2, #8
 8002c48:	4311      	orrs	r1, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c4e:	0852      	lsrs	r2, r2, #1
 8002c50:	3a01      	subs	r2, #1
 8002c52:	0552      	lsls	r2, r2, #21
 8002c54:	4311      	orrs	r1, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c5a:	0852      	lsrs	r2, r2, #1
 8002c5c:	3a01      	subs	r2, #1
 8002c5e:	0652      	lsls	r2, r2, #25
 8002c60:	4311      	orrs	r1, r2
 8002c62:	687a      	ldr	r2, [r7, #4]
 8002c64:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c66:	06d2      	lsls	r2, r2, #27
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	493a      	ldr	r1, [pc, #232]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c70:	4b38      	ldr	r3, [pc, #224]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a37      	ldr	r2, [pc, #220]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c7a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c7c:	4b35      	ldr	r3, [pc, #212]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	4a34      	ldr	r2, [pc, #208]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002c82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c86:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c88:	f7fe f82c 	bl	8000ce4 <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c90:	f7fe f828 	bl	8000ce4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e066      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ca2:	4b2c      	ldr	r3, [pc, #176]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cae:	e05e      	b.n	8002d6e <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e05d      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb4:	4b27      	ldr	r3, [pc, #156]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d156      	bne.n	8002d6e <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cc0:	4b24      	ldr	r3, [pc, #144]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a23      	ldr	r2, [pc, #140]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cca:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ccc:	4b21      	ldr	r3, [pc, #132]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002cce:	68db      	ldr	r3, [r3, #12]
 8002cd0:	4a20      	ldr	r2, [pc, #128]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cd8:	f7fe f804 	bl	8000ce4 <HAL_GetTick>
 8002cdc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cde:	e008      	b.n	8002cf2 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce0:	f7fe f800 	bl	8000ce4 <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d901      	bls.n	8002cf2 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	e03e      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cf2:	4b18      	ldr	r3, [pc, #96]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0f0      	beq.n	8002ce0 <HAL_RCC_OscConfig+0x7b0>
 8002cfe:	e036      	b.n	8002d6e <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d00:	69bb      	ldr	r3, [r7, #24]
 8002d02:	2b0c      	cmp	r3, #12
 8002d04:	d031      	beq.n	8002d6a <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d06:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a12      	ldr	r2, [pc, #72]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002d0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d10:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d12:	4b10      	ldr	r3, [pc, #64]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d105      	bne.n	8002d2a <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d1e:	4b0d      	ldr	r3, [pc, #52]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002d20:	68db      	ldr	r3, [r3, #12]
 8002d22:	4a0c      	ldr	r2, [pc, #48]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002d24:	f023 0303 	bic.w	r3, r3, #3
 8002d28:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <HAL_RCC_OscConfig+0x824>)
 8002d30:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d38:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3a:	f7fd ffd3 	bl	8000ce4 <HAL_GetTick>
 8002d3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d40:	e00c      	b.n	8002d5c <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fd ffcf 	bl	8000ce4 <HAL_GetTick>
 8002d46:	4602      	mov	r2, r0
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	1ad3      	subs	r3, r2, r3
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	d905      	bls.n	8002d5c <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e00d      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
 8002d54:	40021000 	.word	0x40021000
 8002d58:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d5c:	4b06      	ldr	r3, [pc, #24]	; (8002d78 <HAL_RCC_OscConfig+0x848>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ec      	bne.n	8002d42 <HAL_RCC_OscConfig+0x812>
 8002d68:	e001      	b.n	8002d6e <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3720      	adds	r7, #32
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000

08002d7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e0c8      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d90:	4b66      	ldr	r3, [pc, #408]	; (8002f2c <HAL_RCC_ClockConfig+0x1b0>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d910      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b63      	ldr	r3, [pc, #396]	; (8002f2c <HAL_RCC_ClockConfig+0x1b0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 0207 	bic.w	r2, r3, #7
 8002da6:	4961      	ldr	r1, [pc, #388]	; (8002f2c <HAL_RCC_ClockConfig+0x1b0>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b5f      	ldr	r3, [pc, #380]	; (8002f2c <HAL_RCC_ClockConfig+0x1b0>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0307 	and.w	r3, r3, #7
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e0b0      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d04c      	beq.n	8002e66 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d107      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd4:	4b56      	ldr	r3, [pc, #344]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d121      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e09e      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	2b02      	cmp	r3, #2
 8002dea:	d107      	bne.n	8002dfc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002dec:	4b50      	ldr	r3, [pc, #320]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d115      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e092      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d107      	bne.n	8002e14 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e04:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 0302 	and.w	r3, r3, #2
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d109      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	e086      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e14:	4b46      	ldr	r3, [pc, #280]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d101      	bne.n	8002e24 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e07e      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e24:	4b42      	ldr	r3, [pc, #264]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f023 0203 	bic.w	r2, r3, #3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	493f      	ldr	r1, [pc, #252]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002e32:	4313      	orrs	r3, r2
 8002e34:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e36:	f7fd ff55 	bl	8000ce4 <HAL_GetTick>
 8002e3a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e3e:	f7fd ff51 	bl	8000ce4 <HAL_GetTick>
 8002e42:	4602      	mov	r2, r0
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d901      	bls.n	8002e54 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002e50:	2303      	movs	r3, #3
 8002e52:	e066      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e54:	4b36      	ldr	r3, [pc, #216]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f003 020c 	and.w	r2, r3, #12
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	009b      	lsls	r3, r3, #2
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d1eb      	bne.n	8002e3e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d008      	beq.n	8002e84 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e72:	4b2f      	ldr	r3, [pc, #188]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	689b      	ldr	r3, [r3, #8]
 8002e7e:	492c      	ldr	r1, [pc, #176]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e84:	4b29      	ldr	r3, [pc, #164]	; (8002f2c <HAL_RCC_ClockConfig+0x1b0>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0307 	and.w	r3, r3, #7
 8002e8c:	683a      	ldr	r2, [r7, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d210      	bcs.n	8002eb4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e92:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <HAL_RCC_ClockConfig+0x1b0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f023 0207 	bic.w	r2, r3, #7
 8002e9a:	4924      	ldr	r1, [pc, #144]	; (8002f2c <HAL_RCC_ClockConfig+0x1b0>)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea2:	4b22      	ldr	r3, [pc, #136]	; (8002f2c <HAL_RCC_ClockConfig+0x1b0>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	683a      	ldr	r2, [r7, #0]
 8002eac:	429a      	cmp	r2, r3
 8002eae:	d001      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	e036      	b.n	8002f22 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d008      	beq.n	8002ed2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ec0:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4918      	ldr	r1, [pc, #96]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d009      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ede:	4b14      	ldr	r3, [pc, #80]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002ee0:	689b      	ldr	r3, [r3, #8]
 8002ee2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	00db      	lsls	r3, r3, #3
 8002eec:	4910      	ldr	r1, [pc, #64]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ef2:	f000 f825 	bl	8002f40 <HAL_RCC_GetSysClockFreq>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	4b0d      	ldr	r3, [pc, #52]	; (8002f30 <HAL_RCC_ClockConfig+0x1b4>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 030f 	and.w	r3, r3, #15
 8002f02:	490c      	ldr	r1, [pc, #48]	; (8002f34 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	5ccb      	ldrb	r3, [r1, r3]
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8002f0e:	4a0a      	ldr	r2, [pc, #40]	; (8002f38 <HAL_RCC_ClockConfig+0x1bc>)
 8002f10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f12:	4b0a      	ldr	r3, [pc, #40]	; (8002f3c <HAL_RCC_ClockConfig+0x1c0>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd fe94 	bl	8000c44 <HAL_InitTick>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002f20:	7afb      	ldrb	r3, [r7, #11]
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3710      	adds	r7, #16
 8002f26:	46bd      	mov	sp, r7
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	bf00      	nop
 8002f2c:	40022000 	.word	0x40022000
 8002f30:	40021000 	.word	0x40021000
 8002f34:	0800782c 	.word	0x0800782c
 8002f38:	20000024 	.word	0x20000024
 8002f3c:	20000028 	.word	0x20000028

08002f40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b089      	sub	sp, #36	; 0x24
 8002f44:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	61fb      	str	r3, [r7, #28]
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f4e:	4b3e      	ldr	r3, [pc, #248]	; (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	f003 030c 	and.w	r3, r3, #12
 8002f56:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002f58:	4b3b      	ldr	r3, [pc, #236]	; (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0303 	and.w	r3, r3, #3
 8002f60:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d005      	beq.n	8002f74 <HAL_RCC_GetSysClockFreq+0x34>
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	2b0c      	cmp	r3, #12
 8002f6c:	d121      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d11e      	bne.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002f74:	4b34      	ldr	r3, [pc, #208]	; (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 0308 	and.w	r3, r3, #8
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d107      	bne.n	8002f90 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002f80:	4b31      	ldr	r3, [pc, #196]	; (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002f86:	0a1b      	lsrs	r3, r3, #8
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	61fb      	str	r3, [r7, #28]
 8002f8e:	e005      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002f90:	4b2d      	ldr	r3, [pc, #180]	; (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	091b      	lsrs	r3, r3, #4
 8002f96:	f003 030f 	and.w	r3, r3, #15
 8002f9a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002f9c:	4a2b      	ldr	r2, [pc, #172]	; (800304c <HAL_RCC_GetSysClockFreq+0x10c>)
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fa4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d10d      	bne.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002fb0:	e00a      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b04      	cmp	r3, #4
 8002fb6:	d102      	bne.n	8002fbe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002fb8:	4b25      	ldr	r3, [pc, #148]	; (8003050 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fba:	61bb      	str	r3, [r7, #24]
 8002fbc:	e004      	b.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	2b08      	cmp	r3, #8
 8002fc2:	d101      	bne.n	8002fc8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002fc4:	4b23      	ldr	r3, [pc, #140]	; (8003054 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fc6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	2b0c      	cmp	r3, #12
 8002fcc:	d134      	bne.n	8003038 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002fce:	4b1e      	ldr	r3, [pc, #120]	; (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002fd0:	68db      	ldr	r3, [r3, #12]
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d003      	beq.n	8002fe6 <HAL_RCC_GetSysClockFreq+0xa6>
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	2b03      	cmp	r3, #3
 8002fe2:	d003      	beq.n	8002fec <HAL_RCC_GetSysClockFreq+0xac>
 8002fe4:	e005      	b.n	8002ff2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002fe6:	4b1a      	ldr	r3, [pc, #104]	; (8003050 <HAL_RCC_GetSysClockFreq+0x110>)
 8002fe8:	617b      	str	r3, [r7, #20]
      break;
 8002fea:	e005      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_RCC_GetSysClockFreq+0x114>)
 8002fee:	617b      	str	r3, [r7, #20]
      break;
 8002ff0:	e002      	b.n	8002ff8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	617b      	str	r3, [r7, #20]
      break;
 8002ff6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ff8:	4b13      	ldr	r3, [pc, #76]	; (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	091b      	lsrs	r3, r3, #4
 8002ffe:	f003 0307 	and.w	r3, r3, #7
 8003002:	3301      	adds	r3, #1
 8003004:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003006:	4b10      	ldr	r3, [pc, #64]	; (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	0a1b      	lsrs	r3, r3, #8
 800300c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003010:	697a      	ldr	r2, [r7, #20]
 8003012:	fb02 f203 	mul.w	r2, r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	fbb2 f3f3 	udiv	r3, r2, r3
 800301c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800301e:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <HAL_RCC_GetSysClockFreq+0x108>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	0e5b      	lsrs	r3, r3, #25
 8003024:	f003 0303 	and.w	r3, r3, #3
 8003028:	3301      	adds	r3, #1
 800302a:	005b      	lsls	r3, r3, #1
 800302c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800302e:	697a      	ldr	r2, [r7, #20]
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	fbb2 f3f3 	udiv	r3, r2, r3
 8003036:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003038:	69bb      	ldr	r3, [r7, #24]
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	0800783c 	.word	0x0800783c
 8003050:	00f42400 	.word	0x00f42400
 8003054:	007a1200 	.word	0x007a1200

08003058 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800305c:	4b03      	ldr	r3, [pc, #12]	; (800306c <HAL_RCC_GetHCLKFreq+0x14>)
 800305e:	681b      	ldr	r3, [r3, #0]
}
 8003060:	4618      	mov	r0, r3
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	20000024 	.word	0x20000024

08003070 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b086      	sub	sp, #24
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003078:	2300      	movs	r3, #0
 800307a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800307c:	4b2a      	ldr	r3, [pc, #168]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003080:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003084:	2b00      	cmp	r3, #0
 8003086:	d003      	beq.n	8003090 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003088:	f7ff f9de 	bl	8002448 <HAL_PWREx_GetVoltageRange>
 800308c:	6178      	str	r0, [r7, #20]
 800308e:	e014      	b.n	80030ba <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003090:	4b25      	ldr	r3, [pc, #148]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003094:	4a24      	ldr	r2, [pc, #144]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800309a:	6593      	str	r3, [r2, #88]	; 0x58
 800309c:	4b22      	ldr	r3, [pc, #136]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800309e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80030a8:	f7ff f9ce 	bl	8002448 <HAL_PWREx_GetVoltageRange>
 80030ac:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80030ae:	4b1e      	ldr	r3, [pc, #120]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030b2:	4a1d      	ldr	r2, [pc, #116]	; (8003128 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030b8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80030ba:	697b      	ldr	r3, [r7, #20]
 80030bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c0:	d10b      	bne.n	80030da <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b80      	cmp	r3, #128	; 0x80
 80030c6:	d919      	bls.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2ba0      	cmp	r3, #160	; 0xa0
 80030cc:	d902      	bls.n	80030d4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ce:	2302      	movs	r3, #2
 80030d0:	613b      	str	r3, [r7, #16]
 80030d2:	e013      	b.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030d4:	2301      	movs	r3, #1
 80030d6:	613b      	str	r3, [r7, #16]
 80030d8:	e010      	b.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b80      	cmp	r3, #128	; 0x80
 80030de:	d902      	bls.n	80030e6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80030e0:	2303      	movs	r3, #3
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	e00a      	b.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2b80      	cmp	r3, #128	; 0x80
 80030ea:	d102      	bne.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80030ec:	2302      	movs	r3, #2
 80030ee:	613b      	str	r3, [r7, #16]
 80030f0:	e004      	b.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b70      	cmp	r3, #112	; 0x70
 80030f6:	d101      	bne.n	80030fc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80030f8:	2301      	movs	r3, #1
 80030fa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030fc:	4b0b      	ldr	r3, [pc, #44]	; (800312c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f023 0207 	bic.w	r2, r3, #7
 8003104:	4909      	ldr	r1, [pc, #36]	; (800312c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4313      	orrs	r3, r2
 800310a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800310c:	4b07      	ldr	r3, [pc, #28]	; (800312c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	693a      	ldr	r2, [r7, #16]
 8003116:	429a      	cmp	r2, r3
 8003118:	d001      	beq.n	800311e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3718      	adds	r7, #24
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40021000 	.word	0x40021000
 800312c:	40022000 	.word	0x40022000

08003130 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b086      	sub	sp, #24
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003138:	2300      	movs	r3, #0
 800313a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800313c:	2300      	movs	r3, #0
 800313e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003148:	2b00      	cmp	r3, #0
 800314a:	d041      	beq.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003150:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003154:	d02a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003156:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800315a:	d824      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800315c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003160:	d008      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003162:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003166:	d81e      	bhi.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00a      	beq.n	8003182 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800316c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003170:	d010      	beq.n	8003194 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003172:	e018      	b.n	80031a6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003174:	4b86      	ldr	r3, [pc, #536]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003176:	68db      	ldr	r3, [r3, #12]
 8003178:	4a85      	ldr	r2, [pc, #532]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003180:	e015      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	3304      	adds	r3, #4
 8003186:	2100      	movs	r1, #0
 8003188:	4618      	mov	r0, r3
 800318a:	f000 fadd 	bl	8003748 <RCCEx_PLLSAI1_Config>
 800318e:	4603      	mov	r3, r0
 8003190:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003192:	e00c      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	3320      	adds	r3, #32
 8003198:	2100      	movs	r1, #0
 800319a:	4618      	mov	r0, r3
 800319c:	f000 fbc6 	bl	800392c <RCCEx_PLLSAI2_Config>
 80031a0:	4603      	mov	r3, r0
 80031a2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80031a4:	e003      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	74fb      	strb	r3, [r7, #19]
      break;
 80031aa:	e000      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80031ac:	bf00      	nop
    }

    if(ret == HAL_OK)
 80031ae:	7cfb      	ldrb	r3, [r7, #19]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d10b      	bne.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80031b4:	4b76      	ldr	r3, [pc, #472]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ba:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031c2:	4973      	ldr	r1, [pc, #460]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80031ca:	e001      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031cc:	7cfb      	ldrb	r3, [r7, #19]
 80031ce:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d041      	beq.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80031e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031e4:	d02a      	beq.n	800323c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80031e6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80031ea:	d824      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031f0:	d008      	beq.n	8003204 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80031f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80031f6:	d81e      	bhi.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80031fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003200:	d010      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003202:	e018      	b.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003204:	4b62      	ldr	r3, [pc, #392]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003206:	68db      	ldr	r3, [r3, #12]
 8003208:	4a61      	ldr	r2, [pc, #388]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003210:	e015      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	3304      	adds	r3, #4
 8003216:	2100      	movs	r1, #0
 8003218:	4618      	mov	r0, r3
 800321a:	f000 fa95 	bl	8003748 <RCCEx_PLLSAI1_Config>
 800321e:	4603      	mov	r3, r0
 8003220:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003222:	e00c      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	3320      	adds	r3, #32
 8003228:	2100      	movs	r1, #0
 800322a:	4618      	mov	r0, r3
 800322c:	f000 fb7e 	bl	800392c <RCCEx_PLLSAI2_Config>
 8003230:	4603      	mov	r3, r0
 8003232:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003234:	e003      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	74fb      	strb	r3, [r7, #19]
      break;
 800323a:	e000      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800323c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800323e:	7cfb      	ldrb	r3, [r7, #19]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d10b      	bne.n	800325c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003244:	4b52      	ldr	r3, [pc, #328]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800324a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003252:	494f      	ldr	r1, [pc, #316]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003254:	4313      	orrs	r3, r2
 8003256:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800325a:	e001      	b.n	8003260 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800325c:	7cfb      	ldrb	r3, [r7, #19]
 800325e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a0 	beq.w	80033ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800326e:	2300      	movs	r3, #0
 8003270:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003272:	4b47      	ldr	r3, [pc, #284]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003274:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003276:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d101      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x152>
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003282:	2300      	movs	r3, #0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d00d      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003288:	4b41      	ldr	r3, [pc, #260]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800328c:	4a40      	ldr	r2, [pc, #256]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800328e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003292:	6593      	str	r3, [r2, #88]	; 0x58
 8003294:	4b3e      	ldr	r3, [pc, #248]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800329c:	60bb      	str	r3, [r7, #8]
 800329e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032a0:	2301      	movs	r3, #1
 80032a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032a4:	4b3b      	ldr	r3, [pc, #236]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a3a      	ldr	r2, [pc, #232]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80032b0:	f7fd fd18 	bl	8000ce4 <HAL_GetTick>
 80032b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032b6:	e009      	b.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032b8:	f7fd fd14 	bl	8000ce4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d902      	bls.n	80032cc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	74fb      	strb	r3, [r7, #19]
        break;
 80032ca:	e005      	b.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80032cc:	4b31      	ldr	r3, [pc, #196]	; (8003394 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d0ef      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80032d8:	7cfb      	ldrb	r3, [r7, #19]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d15c      	bne.n	8003398 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80032de:	4b2c      	ldr	r3, [pc, #176]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d01f      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	697a      	ldr	r2, [r7, #20]
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d019      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032fc:	4b24      	ldr	r3, [pc, #144]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003306:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003308:	4b21      	ldr	r3, [pc, #132]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800330a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800330e:	4a20      	ldr	r2, [pc, #128]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003318:	4b1d      	ldr	r3, [pc, #116]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800331e:	4a1c      	ldr	r2, [pc, #112]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003328:	4a19      	ldr	r2, [pc, #100]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f003 0301 	and.w	r3, r3, #1
 8003336:	2b00      	cmp	r3, #0
 8003338:	d016      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800333a:	f7fd fcd3 	bl	8000ce4 <HAL_GetTick>
 800333e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003340:	e00b      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003342:	f7fd fccf 	bl	8000ce4 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003350:	4293      	cmp	r3, r2
 8003352:	d902      	bls.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003354:	2303      	movs	r3, #3
 8003356:	74fb      	strb	r3, [r7, #19]
            break;
 8003358:	e006      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800335a:	4b0d      	ldr	r3, [pc, #52]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800335c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003360:	f003 0302 	and.w	r3, r3, #2
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ec      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d10c      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800336e:	4b08      	ldr	r3, [pc, #32]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003370:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003374:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	4904      	ldr	r1, [pc, #16]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003380:	4313      	orrs	r3, r2
 8003382:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003386:	e009      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003388:	7cfb      	ldrb	r3, [r7, #19]
 800338a:	74bb      	strb	r3, [r7, #18]
 800338c:	e006      	b.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003398:	7cfb      	ldrb	r3, [r7, #19]
 800339a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800339c:	7c7b      	ldrb	r3, [r7, #17]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d105      	bne.n	80033ae <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033a2:	4ba6      	ldr	r3, [pc, #664]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a6:	4aa5      	ldr	r2, [pc, #660]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033ac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0301 	and.w	r3, r3, #1
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d00a      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033ba:	4ba0      	ldr	r3, [pc, #640]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c0:	f023 0203 	bic.w	r2, r3, #3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c8:	499c      	ldr	r1, [pc, #624]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033ca:	4313      	orrs	r3, r2
 80033cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0302 	and.w	r3, r3, #2
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00a      	beq.n	80033f2 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80033dc:	4b97      	ldr	r3, [pc, #604]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e2:	f023 020c 	bic.w	r2, r3, #12
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033ea:	4994      	ldr	r1, [pc, #592]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033ec:	4313      	orrs	r3, r2
 80033ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00a      	beq.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033fe:	4b8f      	ldr	r3, [pc, #572]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003400:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003404:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800340c:	498b      	ldr	r1, [pc, #556]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800340e:	4313      	orrs	r3, r2
 8003410:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0308 	and.w	r3, r3, #8
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003420:	4b86      	ldr	r3, [pc, #536]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003426:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800342e:	4983      	ldr	r1, [pc, #524]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0310 	and.w	r3, r3, #16
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003442:	4b7e      	ldr	r3, [pc, #504]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003448:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003450:	497a      	ldr	r1, [pc, #488]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003452:	4313      	orrs	r3, r2
 8003454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0320 	and.w	r3, r3, #32
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003464:	4b75      	ldr	r3, [pc, #468]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003472:	4972      	ldr	r1, [pc, #456]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003474:	4313      	orrs	r3, r2
 8003476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003486:	4b6d      	ldr	r3, [pc, #436]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800348c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003494:	4969      	ldr	r1, [pc, #420]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003496:	4313      	orrs	r3, r2
 8003498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80034a8:	4b64      	ldr	r3, [pc, #400]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ae:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80034b6:	4961      	ldr	r1, [pc, #388]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034b8:	4313      	orrs	r3, r2
 80034ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034ca:	4b5c      	ldr	r3, [pc, #368]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034d0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034d8:	4958      	ldr	r1, [pc, #352]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d00a      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80034ec:	4b53      	ldr	r3, [pc, #332]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034f2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fa:	4950      	ldr	r1, [pc, #320]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350a:	2b00      	cmp	r3, #0
 800350c:	d00a      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800350e:	4b4b      	ldr	r3, [pc, #300]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800351c:	4947      	ldr	r1, [pc, #284]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d00a      	beq.n	8003546 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003530:	4b42      	ldr	r3, [pc, #264]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003532:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003536:	f023 0203 	bic.w	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800353e:	493f      	ldr	r1, [pc, #252]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003540:	4313      	orrs	r3, r2
 8003542:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800354e:	2b00      	cmp	r3, #0
 8003550:	d028      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003552:	4b3a      	ldr	r3, [pc, #232]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003560:	4936      	ldr	r1, [pc, #216]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003562:	4313      	orrs	r3, r2
 8003564:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800356c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003570:	d106      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003572:	4b32      	ldr	r3, [pc, #200]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003574:	68db      	ldr	r3, [r3, #12]
 8003576:	4a31      	ldr	r2, [pc, #196]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800357c:	60d3      	str	r3, [r2, #12]
 800357e:	e011      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003584:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003588:	d10c      	bne.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	3304      	adds	r3, #4
 800358e:	2101      	movs	r1, #1
 8003590:	4618      	mov	r0, r3
 8003592:	f000 f8d9 	bl	8003748 <RCCEx_PLLSAI1_Config>
 8003596:	4603      	mov	r3, r0
 8003598:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800359a:	7cfb      	ldrb	r3, [r7, #19]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d001      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80035a0:	7cfb      	ldrb	r3, [r7, #19]
 80035a2:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d028      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80035b0:	4b22      	ldr	r3, [pc, #136]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035be:	491f      	ldr	r1, [pc, #124]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035ca:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80035ce:	d106      	bne.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035d0:	4b1a      	ldr	r3, [pc, #104]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4a19      	ldr	r2, [pc, #100]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80035d6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80035da:	60d3      	str	r3, [r2, #12]
 80035dc:	e011      	b.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80035e6:	d10c      	bne.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	3304      	adds	r3, #4
 80035ec:	2101      	movs	r1, #1
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 f8aa 	bl	8003748 <RCCEx_PLLSAI1_Config>
 80035f4:	4603      	mov	r3, r0
 80035f6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035f8:	7cfb      	ldrb	r3, [r7, #19]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80035fe:	7cfb      	ldrb	r3, [r7, #19]
 8003600:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d02a      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800360e:	4b0b      	ldr	r3, [pc, #44]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003614:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800361c:	4907      	ldr	r1, [pc, #28]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800361e:	4313      	orrs	r3, r2
 8003620:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003628:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800362c:	d108      	bne.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800362e:	4b03      	ldr	r3, [pc, #12]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	4a02      	ldr	r2, [pc, #8]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003638:	60d3      	str	r3, [r2, #12]
 800363a:	e013      	b.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x534>
 800363c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003644:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003648:	d10c      	bne.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	3304      	adds	r3, #4
 800364e:	2101      	movs	r1, #1
 8003650:	4618      	mov	r0, r3
 8003652:	f000 f879 	bl	8003748 <RCCEx_PLLSAI1_Config>
 8003656:	4603      	mov	r3, r0
 8003658:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800365a:	7cfb      	ldrb	r3, [r7, #19]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d001      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003660:	7cfb      	ldrb	r3, [r7, #19]
 8003662:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d02f      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003670:	4b2c      	ldr	r3, [pc, #176]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003676:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800367e:	4929      	ldr	r1, [pc, #164]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003680:	4313      	orrs	r3, r2
 8003682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800368a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800368e:	d10d      	bne.n	80036ac <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	3304      	adds	r3, #4
 8003694:	2102      	movs	r1, #2
 8003696:	4618      	mov	r0, r3
 8003698:	f000 f856 	bl	8003748 <RCCEx_PLLSAI1_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036a0:	7cfb      	ldrb	r3, [r7, #19]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d014      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80036a6:	7cfb      	ldrb	r3, [r7, #19]
 80036a8:	74bb      	strb	r3, [r7, #18]
 80036aa:	e011      	b.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036b0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036b4:	d10c      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	3320      	adds	r3, #32
 80036ba:	2102      	movs	r1, #2
 80036bc:	4618      	mov	r0, r3
 80036be:	f000 f935 	bl	800392c <RCCEx_PLLSAI2_Config>
 80036c2:	4603      	mov	r3, r0
 80036c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80036c6:	7cfb      	ldrb	r3, [r7, #19]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80036cc:	7cfb      	ldrb	r3, [r7, #19]
 80036ce:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00b      	beq.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80036dc:	4b11      	ldr	r3, [pc, #68]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80036de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036ec:	490d      	ldr	r1, [pc, #52]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80036ee:	4313      	orrs	r3, r2
 80036f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d00b      	beq.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003700:	4b08      	ldr	r3, [pc, #32]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003702:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003706:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003710:	4904      	ldr	r1, [pc, #16]	; (8003724 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003712:	4313      	orrs	r3, r2
 8003714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003718:	7cbb      	ldrb	r3, [r7, #18]
}
 800371a:	4618      	mov	r0, r3
 800371c:	3718      	adds	r7, #24
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	40021000 	.word	0x40021000

08003728 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800372c:	4b05      	ldr	r3, [pc, #20]	; (8003744 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	4a04      	ldr	r2, [pc, #16]	; (8003744 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003732:	f043 0304 	orr.w	r3, r3, #4
 8003736:	6013      	str	r3, [r2, #0]
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40021000 	.word	0x40021000

08003748 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003752:	2300      	movs	r3, #0
 8003754:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003756:	4b74      	ldr	r3, [pc, #464]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f003 0303 	and.w	r3, r3, #3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d018      	beq.n	8003794 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003762:	4b71      	ldr	r3, [pc, #452]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	f003 0203 	and.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	429a      	cmp	r2, r3
 8003770:	d10d      	bne.n	800378e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
       ||
 8003776:	2b00      	cmp	r3, #0
 8003778:	d009      	beq.n	800378e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800377a:	4b6b      	ldr	r3, [pc, #428]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800377c:	68db      	ldr	r3, [r3, #12]
 800377e:	091b      	lsrs	r3, r3, #4
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	1c5a      	adds	r2, r3, #1
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	685b      	ldr	r3, [r3, #4]
       ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d047      	beq.n	800381e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	73fb      	strb	r3, [r7, #15]
 8003792:	e044      	b.n	800381e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b03      	cmp	r3, #3
 800379a:	d018      	beq.n	80037ce <RCCEx_PLLSAI1_Config+0x86>
 800379c:	2b03      	cmp	r3, #3
 800379e:	d825      	bhi.n	80037ec <RCCEx_PLLSAI1_Config+0xa4>
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d002      	beq.n	80037aa <RCCEx_PLLSAI1_Config+0x62>
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d009      	beq.n	80037bc <RCCEx_PLLSAI1_Config+0x74>
 80037a8:	e020      	b.n	80037ec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80037aa:	4b5f      	ldr	r3, [pc, #380]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 0302 	and.w	r3, r3, #2
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11d      	bne.n	80037f2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ba:	e01a      	b.n	80037f2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80037bc:	4b5a      	ldr	r3, [pc, #360]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d116      	bne.n	80037f6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037cc:	e013      	b.n	80037f6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80037ce:	4b56      	ldr	r3, [pc, #344]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d10f      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80037da:	4b53      	ldr	r3, [pc, #332]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d109      	bne.n	80037fa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80037ea:	e006      	b.n	80037fa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	73fb      	strb	r3, [r7, #15]
      break;
 80037f0:	e004      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037f2:	bf00      	nop
 80037f4:	e002      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037f6:	bf00      	nop
 80037f8:	e000      	b.n	80037fc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80037fa:	bf00      	nop
    }

    if(status == HAL_OK)
 80037fc:	7bfb      	ldrb	r3, [r7, #15]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10d      	bne.n	800381e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003802:	4b49      	ldr	r3, [pc, #292]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6819      	ldr	r1, [r3, #0]
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	3b01      	subs	r3, #1
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	430b      	orrs	r3, r1
 8003818:	4943      	ldr	r1, [pc, #268]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800381a:	4313      	orrs	r3, r2
 800381c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d17c      	bne.n	800391e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003824:	4b40      	ldr	r3, [pc, #256]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a3f      	ldr	r2, [pc, #252]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800382a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800382e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003830:	f7fd fa58 	bl	8000ce4 <HAL_GetTick>
 8003834:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003836:	e009      	b.n	800384c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003838:	f7fd fa54 	bl	8000ce4 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d902      	bls.n	800384c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	73fb      	strb	r3, [r7, #15]
        break;
 800384a:	e005      	b.n	8003858 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800384c:	4b36      	ldr	r3, [pc, #216]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ef      	bne.n	8003838 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003858:	7bfb      	ldrb	r3, [r7, #15]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d15f      	bne.n	800391e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d110      	bne.n	8003886 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003864:	4b30      	ldr	r3, [pc, #192]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800386c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6892      	ldr	r2, [r2, #8]
 8003874:	0211      	lsls	r1, r2, #8
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68d2      	ldr	r2, [r2, #12]
 800387a:	06d2      	lsls	r2, r2, #27
 800387c:	430a      	orrs	r2, r1
 800387e:	492a      	ldr	r1, [pc, #168]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003880:	4313      	orrs	r3, r2
 8003882:	610b      	str	r3, [r1, #16]
 8003884:	e027      	b.n	80038d6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	2b01      	cmp	r3, #1
 800388a:	d112      	bne.n	80038b2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800388c:	4b26      	ldr	r3, [pc, #152]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800388e:	691b      	ldr	r3, [r3, #16]
 8003890:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003894:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6892      	ldr	r2, [r2, #8]
 800389c:	0211      	lsls	r1, r2, #8
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	6912      	ldr	r2, [r2, #16]
 80038a2:	0852      	lsrs	r2, r2, #1
 80038a4:	3a01      	subs	r2, #1
 80038a6:	0552      	lsls	r2, r2, #21
 80038a8:	430a      	orrs	r2, r1
 80038aa:	491f      	ldr	r1, [pc, #124]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	610b      	str	r3, [r1, #16]
 80038b0:	e011      	b.n	80038d6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80038b2:	4b1d      	ldr	r3, [pc, #116]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038b4:	691b      	ldr	r3, [r3, #16]
 80038b6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80038ba:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6892      	ldr	r2, [r2, #8]
 80038c2:	0211      	lsls	r1, r2, #8
 80038c4:	687a      	ldr	r2, [r7, #4]
 80038c6:	6952      	ldr	r2, [r2, #20]
 80038c8:	0852      	lsrs	r2, r2, #1
 80038ca:	3a01      	subs	r2, #1
 80038cc:	0652      	lsls	r2, r2, #25
 80038ce:	430a      	orrs	r2, r1
 80038d0:	4915      	ldr	r1, [pc, #84]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80038d6:	4b14      	ldr	r3, [pc, #80]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a13      	ldr	r2, [pc, #76]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 80038dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80038e0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038e2:	f7fd f9ff 	bl	8000ce4 <HAL_GetTick>
 80038e6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038e8:	e009      	b.n	80038fe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80038ea:	f7fd f9fb 	bl	8000ce4 <HAL_GetTick>
 80038ee:	4602      	mov	r2, r0
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d902      	bls.n	80038fe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	73fb      	strb	r3, [r7, #15]
          break;
 80038fc:	e005      	b.n	800390a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80038fe:	4b0a      	ldr	r3, [pc, #40]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d0ef      	beq.n	80038ea <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800390a:	7bfb      	ldrb	r3, [r7, #15]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d106      	bne.n	800391e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003910:	4b05      	ldr	r3, [pc, #20]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003912:	691a      	ldr	r2, [r3, #16]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	4903      	ldr	r1, [pc, #12]	; (8003928 <RCCEx_PLLSAI1_Config+0x1e0>)
 800391a:	4313      	orrs	r3, r2
 800391c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800391e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3710      	adds	r7, #16
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40021000 	.word	0x40021000

0800392c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b084      	sub	sp, #16
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003936:	2300      	movs	r3, #0
 8003938:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800393a:	4b69      	ldr	r3, [pc, #420]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 800393c:	68db      	ldr	r3, [r3, #12]
 800393e:	f003 0303 	and.w	r3, r3, #3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d018      	beq.n	8003978 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003946:	4b66      	ldr	r3, [pc, #408]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	f003 0203 	and.w	r2, r3, #3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	429a      	cmp	r2, r3
 8003954:	d10d      	bne.n	8003972 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
       ||
 800395a:	2b00      	cmp	r3, #0
 800395c:	d009      	beq.n	8003972 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800395e:	4b60      	ldr	r3, [pc, #384]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	091b      	lsrs	r3, r3, #4
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	1c5a      	adds	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
       ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d047      	beq.n	8003a02 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
 8003976:	e044      	b.n	8003a02 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2b03      	cmp	r3, #3
 800397e:	d018      	beq.n	80039b2 <RCCEx_PLLSAI2_Config+0x86>
 8003980:	2b03      	cmp	r3, #3
 8003982:	d825      	bhi.n	80039d0 <RCCEx_PLLSAI2_Config+0xa4>
 8003984:	2b01      	cmp	r3, #1
 8003986:	d002      	beq.n	800398e <RCCEx_PLLSAI2_Config+0x62>
 8003988:	2b02      	cmp	r3, #2
 800398a:	d009      	beq.n	80039a0 <RCCEx_PLLSAI2_Config+0x74>
 800398c:	e020      	b.n	80039d0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800398e:	4b54      	ldr	r3, [pc, #336]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d11d      	bne.n	80039d6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800399e:	e01a      	b.n	80039d6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80039a0:	4b4f      	ldr	r3, [pc, #316]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d116      	bne.n	80039da <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80039b0:	e013      	b.n	80039da <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80039b2:	4b4b      	ldr	r3, [pc, #300]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10f      	bne.n	80039de <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80039be:	4b48      	ldr	r3, [pc, #288]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d109      	bne.n	80039de <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80039ce:	e006      	b.n	80039de <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	73fb      	strb	r3, [r7, #15]
      break;
 80039d4:	e004      	b.n	80039e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039d6:	bf00      	nop
 80039d8:	e002      	b.n	80039e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039da:	bf00      	nop
 80039dc:	e000      	b.n	80039e0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80039de:	bf00      	nop
    }

    if(status == HAL_OK)
 80039e0:	7bfb      	ldrb	r3, [r7, #15]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d10d      	bne.n	8003a02 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80039e6:	4b3e      	ldr	r3, [pc, #248]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80039e8:	68db      	ldr	r3, [r3, #12]
 80039ea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6819      	ldr	r1, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	3b01      	subs	r3, #1
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	430b      	orrs	r3, r1
 80039fc:	4938      	ldr	r1, [pc, #224]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d166      	bne.n	8003ad6 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003a08:	4b35      	ldr	r3, [pc, #212]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a34      	ldr	r2, [pc, #208]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a14:	f7fd f966 	bl	8000ce4 <HAL_GetTick>
 8003a18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a1a:	e009      	b.n	8003a30 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003a1c:	f7fd f962 	bl	8000ce4 <HAL_GetTick>
 8003a20:	4602      	mov	r2, r0
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d902      	bls.n	8003a30 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	73fb      	strb	r3, [r7, #15]
        break;
 8003a2e:	e005      	b.n	8003a3c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003a30:	4b2b      	ldr	r3, [pc, #172]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1ef      	bne.n	8003a1c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003a3c:	7bfb      	ldrb	r3, [r7, #15]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d149      	bne.n	8003ad6 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d110      	bne.n	8003a6a <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a48:	4b25      	ldr	r3, [pc, #148]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a4a:	695b      	ldr	r3, [r3, #20]
 8003a4c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003a50:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6892      	ldr	r2, [r2, #8]
 8003a58:	0211      	lsls	r1, r2, #8
 8003a5a:	687a      	ldr	r2, [r7, #4]
 8003a5c:	68d2      	ldr	r2, [r2, #12]
 8003a5e:	06d2      	lsls	r2, r2, #27
 8003a60:	430a      	orrs	r2, r1
 8003a62:	491f      	ldr	r1, [pc, #124]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a64:	4313      	orrs	r3, r2
 8003a66:	614b      	str	r3, [r1, #20]
 8003a68:	e011      	b.n	8003a8e <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003a6a:	4b1d      	ldr	r3, [pc, #116]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a6c:	695b      	ldr	r3, [r3, #20]
 8003a6e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003a72:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	6892      	ldr	r2, [r2, #8]
 8003a7a:	0211      	lsls	r1, r2, #8
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6912      	ldr	r2, [r2, #16]
 8003a80:	0852      	lsrs	r2, r2, #1
 8003a82:	3a01      	subs	r2, #1
 8003a84:	0652      	lsls	r2, r2, #25
 8003a86:	430a      	orrs	r2, r1
 8003a88:	4915      	ldr	r1, [pc, #84]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003a8e:	4b14      	ldr	r3, [pc, #80]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a13      	ldr	r2, [pc, #76]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003a94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a98:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a9a:	f7fd f923 	bl	8000ce4 <HAL_GetTick>
 8003a9e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003aa0:	e009      	b.n	8003ab6 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003aa2:	f7fd f91f 	bl	8000ce4 <HAL_GetTick>
 8003aa6:	4602      	mov	r2, r0
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	1ad3      	subs	r3, r2, r3
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d902      	bls.n	8003ab6 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	73fb      	strb	r3, [r7, #15]
          break;
 8003ab4:	e005      	b.n	8003ac2 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003ab6:	4b0a      	ldr	r3, [pc, #40]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0ef      	beq.n	8003aa2 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 8003ac2:	7bfb      	ldrb	r3, [r7, #15]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d106      	bne.n	8003ad6 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003ac8:	4b05      	ldr	r3, [pc, #20]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003aca:	695a      	ldr	r2, [r3, #20]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	695b      	ldr	r3, [r3, #20]
 8003ad0:	4903      	ldr	r1, [pc, #12]	; (8003ae0 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3710      	adds	r7, #16
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	40021000 	.word	0x40021000

08003ae4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003ae4:	b084      	sub	sp, #16
 8003ae6:	b580      	push	{r7, lr}
 8003ae8:	b084      	sub	sp, #16
 8003aea:	af00      	add	r7, sp, #0
 8003aec:	6078      	str	r0, [r7, #4]
 8003aee:	f107 001c 	add.w	r0, r7, #28
 8003af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f001 fa40 	bl	8004f88 <USB_CoreReset>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003b0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b16:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	639a      	str	r2, [r3, #56]	; 0x38
 8003b1e:	e005      	b.n	8003b2c <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b24:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3710      	adds	r7, #16
 8003b32:	46bd      	mov	sp, r7
 8003b34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b38:	b004      	add	sp, #16
 8003b3a:	4770      	bx	lr

08003b3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003b4a:	79fb      	ldrb	r3, [r7, #7]
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d165      	bne.n	8003c1c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4a3e      	ldr	r2, [pc, #248]	; (8003c4c <USB_SetTurnaroundTime+0x110>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d906      	bls.n	8003b66 <USB_SetTurnaroundTime+0x2a>
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	4a3d      	ldr	r2, [pc, #244]	; (8003c50 <USB_SetTurnaroundTime+0x114>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d202      	bcs.n	8003b66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003b60:	230f      	movs	r3, #15
 8003b62:	617b      	str	r3, [r7, #20]
 8003b64:	e05c      	b.n	8003c20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	4a39      	ldr	r2, [pc, #228]	; (8003c50 <USB_SetTurnaroundTime+0x114>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d306      	bcc.n	8003b7c <USB_SetTurnaroundTime+0x40>
 8003b6e:	68bb      	ldr	r3, [r7, #8]
 8003b70:	4a38      	ldr	r2, [pc, #224]	; (8003c54 <USB_SetTurnaroundTime+0x118>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d202      	bcs.n	8003b7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003b76:	230e      	movs	r3, #14
 8003b78:	617b      	str	r3, [r7, #20]
 8003b7a:	e051      	b.n	8003c20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	4a35      	ldr	r2, [pc, #212]	; (8003c54 <USB_SetTurnaroundTime+0x118>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d306      	bcc.n	8003b92 <USB_SetTurnaroundTime+0x56>
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	4a34      	ldr	r2, [pc, #208]	; (8003c58 <USB_SetTurnaroundTime+0x11c>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d202      	bcs.n	8003b92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003b8c:	230d      	movs	r3, #13
 8003b8e:	617b      	str	r3, [r7, #20]
 8003b90:	e046      	b.n	8003c20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4a30      	ldr	r2, [pc, #192]	; (8003c58 <USB_SetTurnaroundTime+0x11c>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d306      	bcc.n	8003ba8 <USB_SetTurnaroundTime+0x6c>
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4a2f      	ldr	r2, [pc, #188]	; (8003c5c <USB_SetTurnaroundTime+0x120>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d802      	bhi.n	8003ba8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ba2:	230c      	movs	r3, #12
 8003ba4:	617b      	str	r3, [r7, #20]
 8003ba6:	e03b      	b.n	8003c20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	4a2c      	ldr	r2, [pc, #176]	; (8003c5c <USB_SetTurnaroundTime+0x120>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d906      	bls.n	8003bbe <USB_SetTurnaroundTime+0x82>
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	4a2b      	ldr	r2, [pc, #172]	; (8003c60 <USB_SetTurnaroundTime+0x124>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d802      	bhi.n	8003bbe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003bb8:	230b      	movs	r3, #11
 8003bba:	617b      	str	r3, [r7, #20]
 8003bbc:	e030      	b.n	8003c20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	4a27      	ldr	r2, [pc, #156]	; (8003c60 <USB_SetTurnaroundTime+0x124>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d906      	bls.n	8003bd4 <USB_SetTurnaroundTime+0x98>
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	4a26      	ldr	r2, [pc, #152]	; (8003c64 <USB_SetTurnaroundTime+0x128>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d802      	bhi.n	8003bd4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003bce:	230a      	movs	r3, #10
 8003bd0:	617b      	str	r3, [r7, #20]
 8003bd2:	e025      	b.n	8003c20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	4a23      	ldr	r2, [pc, #140]	; (8003c64 <USB_SetTurnaroundTime+0x128>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d906      	bls.n	8003bea <USB_SetTurnaroundTime+0xae>
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	4a22      	ldr	r2, [pc, #136]	; (8003c68 <USB_SetTurnaroundTime+0x12c>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d202      	bcs.n	8003bea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003be4:	2309      	movs	r3, #9
 8003be6:	617b      	str	r3, [r7, #20]
 8003be8:	e01a      	b.n	8003c20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4a1e      	ldr	r2, [pc, #120]	; (8003c68 <USB_SetTurnaroundTime+0x12c>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d306      	bcc.n	8003c00 <USB_SetTurnaroundTime+0xc4>
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	4a1d      	ldr	r2, [pc, #116]	; (8003c6c <USB_SetTurnaroundTime+0x130>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d802      	bhi.n	8003c00 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003bfa:	2308      	movs	r3, #8
 8003bfc:	617b      	str	r3, [r7, #20]
 8003bfe:	e00f      	b.n	8003c20 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	4a1a      	ldr	r2, [pc, #104]	; (8003c6c <USB_SetTurnaroundTime+0x130>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d906      	bls.n	8003c16 <USB_SetTurnaroundTime+0xda>
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	4a19      	ldr	r2, [pc, #100]	; (8003c70 <USB_SetTurnaroundTime+0x134>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d202      	bcs.n	8003c16 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003c10:	2307      	movs	r3, #7
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	e004      	b.n	8003c20 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003c16:	2306      	movs	r3, #6
 8003c18:	617b      	str	r3, [r7, #20]
 8003c1a:	e001      	b.n	8003c20 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003c1c:	2309      	movs	r3, #9
 8003c1e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	68da      	ldr	r2, [r3, #12]
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	029b      	lsls	r3, r3, #10
 8003c34:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003c38:	431a      	orrs	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003c3e:	2300      	movs	r3, #0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	00d8acbf 	.word	0x00d8acbf
 8003c50:	00e4e1c0 	.word	0x00e4e1c0
 8003c54:	00f42400 	.word	0x00f42400
 8003c58:	01067380 	.word	0x01067380
 8003c5c:	011a499f 	.word	0x011a499f
 8003c60:	01312cff 	.word	0x01312cff
 8003c64:	014ca43f 	.word	0x014ca43f
 8003c68:	016e3600 	.word	0x016e3600
 8003c6c:	01a6ab1f 	.word	0x01a6ab1f
 8003c70:	01e84800 	.word	0x01e84800

08003c74 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	f043 0201 	orr.w	r2, r3, #1
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	370c      	adds	r7, #12
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b083      	sub	sp, #12
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f023 0201 	bic.w	r2, r3, #1
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003caa:	2300      	movs	r3, #0
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	370c      	adds	r7, #12
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003cd4:	78fb      	ldrb	r3, [r7, #3]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d115      	bne.n	8003d06 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	68db      	ldr	r3, [r3, #12]
 8003cde:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	f7fd f808 	bl	8000cfc <HAL_Delay>
      ms++;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	3301      	adds	r3, #1
 8003cf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f001 f8cf 	bl	8004e96 <USB_GetMode>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b01      	cmp	r3, #1
 8003cfc:	d01e      	beq.n	8003d3c <USB_SetCurrentMode+0x84>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	2b31      	cmp	r3, #49	; 0x31
 8003d02:	d9f0      	bls.n	8003ce6 <USB_SetCurrentMode+0x2e>
 8003d04:	e01a      	b.n	8003d3c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003d06:	78fb      	ldrb	r3, [r7, #3]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d115      	bne.n	8003d38 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	68db      	ldr	r3, [r3, #12]
 8003d10:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003d18:	2001      	movs	r0, #1
 8003d1a:	f7fc ffef 	bl	8000cfc <HAL_Delay>
      ms++;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	3301      	adds	r3, #1
 8003d22:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f001 f8b6 	bl	8004e96 <USB_GetMode>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d005      	beq.n	8003d3c <USB_SetCurrentMode+0x84>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2b31      	cmp	r3, #49	; 0x31
 8003d34:	d9f0      	bls.n	8003d18 <USB_SetCurrentMode+0x60>
 8003d36:	e001      	b.n	8003d3c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e005      	b.n	8003d48 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b32      	cmp	r3, #50	; 0x32
 8003d40:	d101      	bne.n	8003d46 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e000      	b.n	8003d48 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3710      	adds	r7, #16
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}

08003d50 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d50:	b084      	sub	sp, #16
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b086      	sub	sp, #24
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
 8003d6e:	e009      	b.n	8003d84 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	3340      	adds	r3, #64	; 0x40
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4413      	add	r3, r2
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	3301      	adds	r3, #1
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]
 8003d86:	2b0e      	cmp	r3, #14
 8003d88:	d9f2      	bls.n	8003d70 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003d8a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d11c      	bne.n	8003dca <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d96:	685b      	ldr	r3, [r3, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d9e:	f043 0302 	orr.w	r3, r3, #2
 8003da2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e005      	b.n	8003dd6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003ddc:	461a      	mov	r2, r3
 8003dde:	2300      	movs	r3, #0
 8003de0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003de8:	4619      	mov	r1, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003df0:	461a      	mov	r2, r3
 8003df2:	680b      	ldr	r3, [r1, #0]
 8003df4:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003df6:	2103      	movs	r1, #3
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	f000 f955 	bl	80040a8 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003dfe:	2110      	movs	r1, #16
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f8f1 	bl	8003fe8 <USB_FlushTxFifo>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 f91b 	bl	800404c <USB_FlushRxFifo>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d001      	beq.n	8003e20 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e26:	461a      	mov	r2, r3
 8003e28:	2300      	movs	r3, #0
 8003e2a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e32:	461a      	mov	r2, r3
 8003e34:	2300      	movs	r3, #0
 8003e36:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e3e:	461a      	mov	r2, r3
 8003e40:	2300      	movs	r3, #0
 8003e42:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e44:	2300      	movs	r3, #0
 8003e46:	613b      	str	r3, [r7, #16]
 8003e48:	e043      	b.n	8003ed2 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	015a      	lsls	r2, r3, #5
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4413      	add	r3, r2
 8003e52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e60:	d118      	bne.n	8003e94 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d10a      	bne.n	8003e7e <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e74:	461a      	mov	r2, r3
 8003e76:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	e013      	b.n	8003ea6 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	e008      	b.n	8003ea6 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	015a      	lsls	r2, r3, #5
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003ea6:	693b      	ldr	r3, [r7, #16]
 8003ea8:	015a      	lsls	r2, r3, #5
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4413      	add	r3, r2
 8003eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	015a      	lsls	r2, r3, #5
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec4:	461a      	mov	r2, r3
 8003ec6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003eca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	613b      	str	r3, [r7, #16]
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	693a      	ldr	r2, [r7, #16]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	d3b7      	bcc.n	8003e4a <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	e043      	b.n	8003f68 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	015a      	lsls	r2, r3, #5
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ef2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ef6:	d118      	bne.n	8003f2a <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d10a      	bne.n	8003f14 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	015a      	lsls	r2, r3, #5
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4413      	add	r3, r2
 8003f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f0a:	461a      	mov	r2, r3
 8003f0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f10:	6013      	str	r3, [r2, #0]
 8003f12:	e013      	b.n	8003f3c <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	015a      	lsls	r2, r3, #5
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f20:	461a      	mov	r2, r3
 8003f22:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003f26:	6013      	str	r3, [r2, #0]
 8003f28:	e008      	b.n	8003f3c <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	015a      	lsls	r2, r3, #5
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	4413      	add	r3, r2
 8003f32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f36:	461a      	mov	r2, r3
 8003f38:	2300      	movs	r3, #0
 8003f3a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	015a      	lsls	r2, r3, #5
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4413      	add	r3, r2
 8003f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f48:	461a      	mov	r2, r3
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003f60:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	3301      	adds	r3, #1
 8003f66:	613b      	str	r3, [r7, #16]
 8003f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f6a:	693a      	ldr	r2, [r7, #16]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d3b7      	bcc.n	8003ee0 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f76:	691b      	ldr	r3, [r3, #16]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003f7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f82:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2200      	movs	r2, #0
 8003f88:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003f90:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	699b      	ldr	r3, [r3, #24]
 8003f96:	f043 0210 	orr.w	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	699a      	ldr	r2, [r3, #24]
 8003fa2:	4b10      	ldr	r3, [pc, #64]	; (8003fe4 <USB_DevInit+0x294>)
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003faa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d005      	beq.n	8003fbc <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	f043 0208 	orr.w	r2, r3, #8
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003fbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d107      	bne.n	8003fd2 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	699b      	ldr	r3, [r3, #24]
 8003fc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003fca:	f043 0304 	orr.w	r3, r3, #4
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003fde:	b004      	add	sp, #16
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	803c3800 	.word	0x803c3800

08003fe8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b085      	sub	sp, #20
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	3301      	adds	r3, #1
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	4a12      	ldr	r2, [pc, #72]	; (8004048 <USB_FlushTxFifo+0x60>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d901      	bls.n	8004006 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e01a      	b.n	800403c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	691b      	ldr	r3, [r3, #16]
 800400a:	2b00      	cmp	r3, #0
 800400c:	daf3      	bge.n	8003ff6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800400e:	2300      	movs	r3, #0
 8004010:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	019b      	lsls	r3, r3, #6
 8004016:	f043 0220 	orr.w	r2, r3, #32
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	3301      	adds	r3, #1
 8004022:	60fb      	str	r3, [r7, #12]
 8004024:	4a08      	ldr	r2, [pc, #32]	; (8004048 <USB_FlushTxFifo+0x60>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d901      	bls.n	800402e <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e006      	b.n	800403c <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b20      	cmp	r3, #32
 8004038:	d0f1      	beq.n	800401e <USB_FlushTxFifo+0x36>

  return HAL_OK;
 800403a:	2300      	movs	r3, #0
}
 800403c:	4618      	mov	r0, r3
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr
 8004048:	00030d40 	.word	0x00030d40

0800404c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004054:	2300      	movs	r3, #0
 8004056:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	3301      	adds	r3, #1
 800405c:	60fb      	str	r3, [r7, #12]
 800405e:	4a11      	ldr	r2, [pc, #68]	; (80040a4 <USB_FlushRxFifo+0x58>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d901      	bls.n	8004068 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e017      	b.n	8004098 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	2b00      	cmp	r3, #0
 800406e:	daf3      	bge.n	8004058 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2210      	movs	r2, #16
 8004078:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	3301      	adds	r3, #1
 800407e:	60fb      	str	r3, [r7, #12]
 8004080:	4a08      	ldr	r2, [pc, #32]	; (80040a4 <USB_FlushRxFifo+0x58>)
 8004082:	4293      	cmp	r3, r2
 8004084:	d901      	bls.n	800408a <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8004086:	2303      	movs	r3, #3
 8004088:	e006      	b.n	8004098 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	691b      	ldr	r3, [r3, #16]
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b10      	cmp	r3, #16
 8004094:	d0f1      	beq.n	800407a <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3714      	adds	r7, #20
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr
 80040a4:	00030d40 	.word	0x00030d40

080040a8 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b085      	sub	sp, #20
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040be:	681a      	ldr	r2, [r3, #0]
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	68f9      	ldr	r1, [r7, #12]
 80040c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040c8:	4313      	orrs	r3, r2
 80040ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80040cc:	2300      	movs	r3, #0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3714      	adds	r7, #20
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr

080040da <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80040da:	b480      	push	{r7}
 80040dc:	b087      	sub	sp, #28
 80040de:	af00      	add	r7, sp, #0
 80040e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ec:	689b      	ldr	r3, [r3, #8]
 80040ee:	f003 0306 	and.w	r3, r3, #6
 80040f2:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d002      	beq.n	8004100 <USB_GetDevSpeed+0x26>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2b06      	cmp	r3, #6
 80040fe:	d102      	bne.n	8004106 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004100:	2302      	movs	r3, #2
 8004102:	75fb      	strb	r3, [r7, #23]
 8004104:	e001      	b.n	800410a <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8004106:	230f      	movs	r3, #15
 8004108:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800410a:	7dfb      	ldrb	r3, [r7, #23]
}
 800410c:	4618      	mov	r0, r3
 800410e:	371c      	adds	r7, #28
 8004110:	46bd      	mov	sp, r7
 8004112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004116:	4770      	bx	lr

08004118 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	781b      	ldrb	r3, [r3, #0]
 800412a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d13a      	bne.n	80041aa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800413a:	69da      	ldr	r2, [r3, #28]
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	f003 030f 	and.w	r3, r3, #15
 8004144:	2101      	movs	r1, #1
 8004146:	fa01 f303 	lsl.w	r3, r1, r3
 800414a:	b29b      	uxth	r3, r3
 800414c:	68f9      	ldr	r1, [r7, #12]
 800414e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004152:	4313      	orrs	r3, r2
 8004154:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	015a      	lsls	r2, r3, #5
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4413      	add	r3, r2
 800415e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004168:	2b00      	cmp	r3, #0
 800416a:	d155      	bne.n	8004218 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	015a      	lsls	r2, r3, #5
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	4413      	add	r3, r2
 8004174:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	683b      	ldr	r3, [r7, #0]
 800417c:	689b      	ldr	r3, [r3, #8]
 800417e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	78db      	ldrb	r3, [r3, #3]
 8004186:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004188:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	059b      	lsls	r3, r3, #22
 800418e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004190:	4313      	orrs	r3, r2
 8004192:	68ba      	ldr	r2, [r7, #8]
 8004194:	0151      	lsls	r1, r2, #5
 8004196:	68fa      	ldr	r2, [r7, #12]
 8004198:	440a      	add	r2, r1
 800419a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800419e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041a6:	6013      	str	r3, [r2, #0]
 80041a8:	e036      	b.n	8004218 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b0:	69da      	ldr	r2, [r3, #28]
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	f003 030f 	and.w	r3, r3, #15
 80041ba:	2101      	movs	r1, #1
 80041bc:	fa01 f303 	lsl.w	r3, r1, r3
 80041c0:	041b      	lsls	r3, r3, #16
 80041c2:	68f9      	ldr	r1, [r7, #12]
 80041c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041c8:	4313      	orrs	r3, r2
 80041ca:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	015a      	lsls	r2, r3, #5
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	4413      	add	r3, r2
 80041d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d11a      	bne.n	8004218 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	015a      	lsls	r2, r3, #5
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4413      	add	r3, r2
 80041ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	78db      	ldrb	r3, [r3, #3]
 80041fc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80041fe:	430b      	orrs	r3, r1
 8004200:	4313      	orrs	r3, r2
 8004202:	68ba      	ldr	r2, [r7, #8]
 8004204:	0151      	lsls	r1, r2, #5
 8004206:	68fa      	ldr	r2, [r7, #12]
 8004208:	440a      	add	r2, r1
 800420a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800420e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004212:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004216:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004218:	2300      	movs	r3, #0
}
 800421a:	4618      	mov	r0, r3
 800421c:	3714      	adds	r7, #20
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004228:	b480      	push	{r7}
 800422a:	b085      	sub	sp, #20
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	785b      	ldrb	r3, [r3, #1]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d161      	bne.n	8004308 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004256:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800425a:	d11f      	bne.n	800429c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800425c:	68bb      	ldr	r3, [r7, #8]
 800425e:	015a      	lsls	r2, r3, #5
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4413      	add	r3, r2
 8004264:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	0151      	lsls	r1, r2, #5
 800426e:	68fa      	ldr	r2, [r7, #12]
 8004270:	440a      	add	r2, r1
 8004272:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004276:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800427a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800427c:	68bb      	ldr	r3, [r7, #8]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	4413      	add	r3, r2
 8004284:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	0151      	lsls	r1, r2, #5
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	440a      	add	r2, r1
 8004292:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004296:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800429a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	f003 030f 	and.w	r3, r3, #15
 80042ac:	2101      	movs	r1, #1
 80042ae:	fa01 f303 	lsl.w	r3, r1, r3
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	43db      	mvns	r3, r3
 80042b6:	68f9      	ldr	r1, [r7, #12]
 80042b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042bc:	4013      	ands	r3, r2
 80042be:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042c6:	69da      	ldr	r2, [r3, #28]
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	f003 030f 	and.w	r3, r3, #15
 80042d0:	2101      	movs	r1, #1
 80042d2:	fa01 f303 	lsl.w	r3, r1, r3
 80042d6:	b29b      	uxth	r3, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	68f9      	ldr	r1, [r7, #12]
 80042dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042e0:	4013      	ands	r3, r2
 80042e2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	015a      	lsls	r2, r3, #5
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4413      	add	r3, r2
 80042ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f0:	681a      	ldr	r2, [r3, #0]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	0159      	lsls	r1, r3, #5
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	440b      	add	r3, r1
 80042fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042fe:	4619      	mov	r1, r3
 8004300:	4b35      	ldr	r3, [pc, #212]	; (80043d8 <USB_DeactivateEndpoint+0x1b0>)
 8004302:	4013      	ands	r3, r2
 8004304:	600b      	str	r3, [r1, #0]
 8004306:	e060      	b.n	80043ca <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800431a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800431e:	d11f      	bne.n	8004360 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	015a      	lsls	r2, r3, #5
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	4413      	add	r3, r2
 8004328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	0151      	lsls	r1, r2, #5
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	440a      	add	r2, r1
 8004336:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800433e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	015a      	lsls	r2, r3, #5
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	4413      	add	r3, r2
 8004348:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	0151      	lsls	r1, r2, #5
 8004352:	68fa      	ldr	r2, [r7, #12]
 8004354:	440a      	add	r2, r1
 8004356:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800435a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800435e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004366:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	f003 030f 	and.w	r3, r3, #15
 8004370:	2101      	movs	r1, #1
 8004372:	fa01 f303 	lsl.w	r3, r1, r3
 8004376:	041b      	lsls	r3, r3, #16
 8004378:	43db      	mvns	r3, r3
 800437a:	68f9      	ldr	r1, [r7, #12]
 800437c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004380:	4013      	ands	r3, r2
 8004382:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800438a:	69da      	ldr	r2, [r3, #28]
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	781b      	ldrb	r3, [r3, #0]
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	2101      	movs	r1, #1
 8004396:	fa01 f303 	lsl.w	r3, r1, r3
 800439a:	041b      	lsls	r3, r3, #16
 800439c:	43db      	mvns	r3, r3
 800439e:	68f9      	ldr	r1, [r7, #12]
 80043a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a4:	4013      	ands	r3, r2
 80043a6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	015a      	lsls	r2, r3, #5
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4413      	add	r3, r2
 80043b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	0159      	lsls	r1, r3, #5
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	440b      	add	r3, r1
 80043be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043c2:	4619      	mov	r1, r3
 80043c4:	4b05      	ldr	r3, [pc, #20]	; (80043dc <USB_DeactivateEndpoint+0x1b4>)
 80043c6:	4013      	ands	r3, r2
 80043c8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80043ca:	2300      	movs	r3, #0
}
 80043cc:	4618      	mov	r0, r3
 80043ce:	3714      	adds	r7, #20
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr
 80043d8:	ec337800 	.word	0xec337800
 80043dc:	eff37800 	.word	0xeff37800

080043e0 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	785b      	ldrb	r3, [r3, #1]
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	f040 810a 	bne.w	8004612 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d132      	bne.n	800446c <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	015a      	lsls	r2, r3, #5
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	4413      	add	r3, r2
 800440e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004412:	691b      	ldr	r3, [r3, #16]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	0151      	lsls	r1, r2, #5
 8004418:	697a      	ldr	r2, [r7, #20]
 800441a:	440a      	add	r2, r1
 800441c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004420:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004424:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004428:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004448:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	440a      	add	r2, r1
 8004460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004464:	0cdb      	lsrs	r3, r3, #19
 8004466:	04db      	lsls	r3, r3, #19
 8004468:	6113      	str	r3, [r2, #16]
 800446a:	e074      	b.n	8004556 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	0151      	lsls	r1, r2, #5
 800447e:	697a      	ldr	r2, [r7, #20]
 8004480:	440a      	add	r2, r1
 8004482:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004486:	0cdb      	lsrs	r3, r3, #19
 8004488:	04db      	lsls	r3, r3, #19
 800448a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044a6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80044aa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80044ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	015a      	lsls	r2, r3, #5
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	4413      	add	r3, r2
 80044b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044bc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	6959      	ldr	r1, [r3, #20]
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	440b      	add	r3, r1
 80044c8:	1e59      	subs	r1, r3, #1
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80044d2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80044d4:	4baf      	ldr	r3, [pc, #700]	; (8004794 <USB_EPStartXfer+0x3b4>)
 80044d6:	400b      	ands	r3, r1
 80044d8:	6939      	ldr	r1, [r7, #16]
 80044da:	0148      	lsls	r0, r1, #5
 80044dc:	6979      	ldr	r1, [r7, #20]
 80044de:	4401      	add	r1, r0
 80044e0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80044e4:	4313      	orrs	r3, r2
 80044e6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80044e8:	693b      	ldr	r3, [r7, #16]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f4:	691a      	ldr	r2, [r3, #16]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044fe:	6939      	ldr	r1, [r7, #16]
 8004500:	0148      	lsls	r0, r1, #5
 8004502:	6979      	ldr	r1, [r7, #20]
 8004504:	4401      	add	r1, r0
 8004506:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800450a:	4313      	orrs	r3, r2
 800450c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	78db      	ldrb	r3, [r3, #3]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d11f      	bne.n	8004556 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	015a      	lsls	r2, r3, #5
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	4413      	add	r3, r2
 800451e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004522:	691b      	ldr	r3, [r3, #16]
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	0151      	lsls	r1, r2, #5
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	440a      	add	r2, r1
 800452c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004530:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004534:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	0151      	lsls	r1, r2, #5
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	440a      	add	r2, r1
 800454c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004550:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004554:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	015a      	lsls	r2, r3, #5
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	4413      	add	r3, r2
 800455e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	0151      	lsls	r1, r2, #5
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	440a      	add	r2, r1
 800456c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004574:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	78db      	ldrb	r3, [r3, #3]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d015      	beq.n	80045aa <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	695b      	ldr	r3, [r3, #20]
 8004582:	2b00      	cmp	r3, #0
 8004584:	f000 8100 	beq.w	8004788 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800458e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	2101      	movs	r1, #1
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	6979      	ldr	r1, [r7, #20]
 80045a0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a4:	4313      	orrs	r3, r2
 80045a6:	634b      	str	r3, [r1, #52]	; 0x34
 80045a8:	e0ee      	b.n	8004788 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d110      	bne.n	80045dc <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	0151      	lsls	r1, r2, #5
 80045cc:	697a      	ldr	r2, [r7, #20]
 80045ce:	440a      	add	r2, r1
 80045d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80045d8:	6013      	str	r3, [r2, #0]
 80045da:	e00f      	b.n	80045fc <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	0151      	lsls	r1, r2, #5
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	440a      	add	r2, r1
 80045f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045fa:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	68d9      	ldr	r1, [r3, #12]
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	781a      	ldrb	r2, [r3, #0]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	695b      	ldr	r3, [r3, #20]
 8004608:	b29b      	uxth	r3, r3
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 f9e2 	bl	80049d4 <USB_WritePacket>
 8004610:	e0ba      	b.n	8004788 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	015a      	lsls	r2, r3, #5
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	4413      	add	r3, r2
 800461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461e:	691b      	ldr	r3, [r3, #16]
 8004620:	693a      	ldr	r2, [r7, #16]
 8004622:	0151      	lsls	r1, r2, #5
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	440a      	add	r2, r1
 8004628:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800462c:	0cdb      	lsrs	r3, r3, #19
 800462e:	04db      	lsls	r3, r3, #19
 8004630:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	693a      	ldr	r2, [r7, #16]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800464c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004650:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004654:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	695b      	ldr	r3, [r3, #20]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d123      	bne.n	80046a6 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	015a      	lsls	r2, r3, #5
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	4413      	add	r3, r2
 8004666:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800466a:	691a      	ldr	r2, [r3, #16]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004674:	6939      	ldr	r1, [r7, #16]
 8004676:	0148      	lsls	r0, r1, #5
 8004678:	6979      	ldr	r1, [r7, #20]
 800467a:	4401      	add	r1, r0
 800467c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004680:	4313      	orrs	r3, r2
 8004682:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	4413      	add	r3, r2
 800468c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004690:	691b      	ldr	r3, [r3, #16]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	0151      	lsls	r1, r2, #5
 8004696:	697a      	ldr	r2, [r7, #20]
 8004698:	440a      	add	r2, r1
 800469a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800469e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046a2:	6113      	str	r3, [r2, #16]
 80046a4:	e033      	b.n	800470e <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	695a      	ldr	r2, [r3, #20]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	4413      	add	r3, r2
 80046b0:	1e5a      	subs	r2, r3, #1
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ba:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046c8:	691a      	ldr	r2, [r3, #16]
 80046ca:	89fb      	ldrh	r3, [r7, #14]
 80046cc:	04d9      	lsls	r1, r3, #19
 80046ce:	4b31      	ldr	r3, [pc, #196]	; (8004794 <USB_EPStartXfer+0x3b4>)
 80046d0:	400b      	ands	r3, r1
 80046d2:	6939      	ldr	r1, [r7, #16]
 80046d4:	0148      	lsls	r0, r1, #5
 80046d6:	6979      	ldr	r1, [r7, #20]
 80046d8:	4401      	add	r1, r0
 80046da:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80046de:	4313      	orrs	r3, r2
 80046e0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	015a      	lsls	r2, r3, #5
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	4413      	add	r3, r2
 80046ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	89f9      	ldrh	r1, [r7, #14]
 80046f6:	fb01 f303 	mul.w	r3, r1, r3
 80046fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046fe:	6939      	ldr	r1, [r7, #16]
 8004700:	0148      	lsls	r0, r1, #5
 8004702:	6979      	ldr	r1, [r7, #20]
 8004704:	4401      	add	r1, r0
 8004706:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800470a:	4313      	orrs	r3, r2
 800470c:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	78db      	ldrb	r3, [r3, #3]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d128      	bne.n	8004768 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004722:	2b00      	cmp	r3, #0
 8004724:	d110      	bne.n	8004748 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	4413      	add	r3, r2
 800472e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	693a      	ldr	r2, [r7, #16]
 8004736:	0151      	lsls	r1, r2, #5
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	440a      	add	r2, r1
 800473c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004740:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e00f      	b.n	8004768 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	440a      	add	r2, r1
 800475e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004766:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	015a      	lsls	r2, r3, #5
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	4413      	add	r3, r2
 8004770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	693a      	ldr	r2, [r7, #16]
 8004778:	0151      	lsls	r1, r2, #5
 800477a:	697a      	ldr	r2, [r7, #20]
 800477c:	440a      	add	r2, r1
 800477e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004782:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004786:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	3718      	adds	r7, #24
 800478e:	46bd      	mov	sp, r7
 8004790:	bd80      	pop	{r7, pc}
 8004792:	bf00      	nop
 8004794:	1ff80000 	.word	0x1ff80000

08004798 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004798:	b480      	push	{r7}
 800479a:	b085      	sub	sp, #20
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
 80047a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	785b      	ldrb	r3, [r3, #1]
 80047b0:	2b01      	cmp	r3, #1
 80047b2:	f040 80ab 	bne.w	800490c <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d132      	bne.n	8004824 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	015a      	lsls	r2, r3, #5
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	4413      	add	r3, r2
 80047c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	0151      	lsls	r1, r2, #5
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	440a      	add	r2, r1
 80047d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047dc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	68ba      	ldr	r2, [r7, #8]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	68fa      	ldr	r2, [r7, #12]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004800:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	015a      	lsls	r2, r3, #5
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	4413      	add	r3, r2
 800480a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	68ba      	ldr	r2, [r7, #8]
 8004812:	0151      	lsls	r1, r2, #5
 8004814:	68fa      	ldr	r2, [r7, #12]
 8004816:	440a      	add	r2, r1
 8004818:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800481c:	0cdb      	lsrs	r3, r3, #19
 800481e:	04db      	lsls	r3, r3, #19
 8004820:	6113      	str	r3, [r2, #16]
 8004822:	e04e      	b.n	80048c2 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	015a      	lsls	r2, r3, #5
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	4413      	add	r3, r2
 800482c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	68ba      	ldr	r2, [r7, #8]
 8004834:	0151      	lsls	r1, r2, #5
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	440a      	add	r2, r1
 800483a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800483e:	0cdb      	lsrs	r3, r3, #19
 8004840:	04db      	lsls	r3, r3, #19
 8004842:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4413      	add	r3, r2
 800484c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	0151      	lsls	r1, r2, #5
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	440a      	add	r2, r1
 800485a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004862:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004866:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	695a      	ldr	r2, [r3, #20]
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	429a      	cmp	r2, r3
 8004872:	d903      	bls.n	800487c <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	689a      	ldr	r2, [r3, #8]
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	691b      	ldr	r3, [r3, #16]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	0151      	lsls	r1, r2, #5
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	440a      	add	r2, r1
 8004892:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004896:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800489a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a8:	691a      	ldr	r2, [r3, #16]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048b2:	68b9      	ldr	r1, [r7, #8]
 80048b4:	0148      	lsls	r0, r1, #5
 80048b6:	68f9      	ldr	r1, [r7, #12]
 80048b8:	4401      	add	r1, r0
 80048ba:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048be:	4313      	orrs	r3, r2
 80048c0:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	015a      	lsls	r2, r3, #5
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	4413      	add	r3, r2
 80048ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68ba      	ldr	r2, [r7, #8]
 80048d2:	0151      	lsls	r1, r2, #5
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	440a      	add	r2, r1
 80048d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048dc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048e0:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	695b      	ldr	r3, [r3, #20]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d06d      	beq.n	80049c6 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	f003 030f 	and.w	r3, r3, #15
 80048fa:	2101      	movs	r1, #1
 80048fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004900:	68f9      	ldr	r1, [r7, #12]
 8004902:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004906:	4313      	orrs	r3, r2
 8004908:	634b      	str	r3, [r1, #52]	; 0x34
 800490a:	e05c      	b.n	80049c6 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	015a      	lsls	r2, r3, #5
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	4413      	add	r3, r2
 8004914:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	68ba      	ldr	r2, [r7, #8]
 800491c:	0151      	lsls	r1, r2, #5
 800491e:	68fa      	ldr	r2, [r7, #12]
 8004920:	440a      	add	r2, r1
 8004922:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004926:	0cdb      	lsrs	r3, r3, #19
 8004928:	04db      	lsls	r3, r3, #19
 800492a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	015a      	lsls	r2, r3, #5
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	4413      	add	r3, r2
 8004934:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	0151      	lsls	r1, r2, #5
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	440a      	add	r2, r1
 8004942:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004946:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800494a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800494e:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	695b      	ldr	r3, [r3, #20]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d003      	beq.n	8004960 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	689a      	ldr	r2, [r3, #8]
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	015a      	lsls	r2, r3, #5
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4413      	add	r3, r2
 8004968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	68ba      	ldr	r2, [r7, #8]
 8004970:	0151      	lsls	r1, r2, #5
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	440a      	add	r2, r1
 8004976:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800497a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800497e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	015a      	lsls	r2, r3, #5
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	4413      	add	r3, r2
 8004988:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800498c:	691a      	ldr	r2, [r3, #16]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004996:	68b9      	ldr	r1, [r7, #8]
 8004998:	0148      	lsls	r0, r1, #5
 800499a:	68f9      	ldr	r1, [r7, #12]
 800499c:	4401      	add	r1, r0
 800499e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80049a2:	4313      	orrs	r3, r2
 80049a4:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68ba      	ldr	r2, [r7, #8]
 80049b6:	0151      	lsls	r1, r2, #5
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	440a      	add	r2, r1
 80049bc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049c4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80049c6:	2300      	movs	r3, #0
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	; 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	4611      	mov	r1, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	460b      	mov	r3, r1
 80049e4:	71fb      	strb	r3, [r7, #7]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80049f2:	88bb      	ldrh	r3, [r7, #4]
 80049f4:	3303      	adds	r3, #3
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80049fa:	2300      	movs	r3, #0
 80049fc:	61bb      	str	r3, [r7, #24]
 80049fe:	e018      	b.n	8004a32 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	031a      	lsls	r2, r3, #12
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	4413      	add	r3, r2
 8004a08:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a0c:	461a      	mov	r2, r3
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	3301      	adds	r3, #1
 8004a18:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3301      	adds	r3, #1
 8004a1e:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	3301      	adds	r3, #1
 8004a24:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004a2c:	69bb      	ldr	r3, [r7, #24]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	61bb      	str	r3, [r7, #24]
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	429a      	cmp	r2, r3
 8004a38:	d3e2      	bcc.n	8004a00 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3724      	adds	r7, #36	; 0x24
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr

08004a48 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b08b      	sub	sp, #44	; 0x2c
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	4613      	mov	r3, r2
 8004a54:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a5a:	68bb      	ldr	r3, [r7, #8]
 8004a5c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	089b      	lsrs	r3, r3, #2
 8004a62:	b29b      	uxth	r3, r3
 8004a64:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a66:	88fb      	ldrh	r3, [r7, #6]
 8004a68:	f003 0303 	and.w	r3, r3, #3
 8004a6c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a6e:	2300      	movs	r3, #0
 8004a70:	623b      	str	r3, [r7, #32]
 8004a72:	e014      	b.n	8004a9e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a7e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a82:	3301      	adds	r3, #1
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a88:	3301      	adds	r3, #1
 8004a8a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	3301      	adds	r3, #1
 8004a90:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	3301      	adds	r3, #1
 8004a96:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004a98:	6a3b      	ldr	r3, [r7, #32]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	623b      	str	r3, [r7, #32]
 8004a9e:	6a3a      	ldr	r2, [r7, #32]
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	d3e6      	bcc.n	8004a74 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004aa6:	8bfb      	ldrh	r3, [r7, #30]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d01e      	beq.n	8004aea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004aac:	2300      	movs	r3, #0
 8004aae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	f107 0310 	add.w	r3, r7, #16
 8004abc:	6812      	ldr	r2, [r2, #0]
 8004abe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ac0:	693a      	ldr	r2, [r7, #16]
 8004ac2:	6a3b      	ldr	r3, [r7, #32]
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	fa22 f303 	lsr.w	r3, r2, r3
 8004acc:	b2da      	uxtb	r2, r3
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	701a      	strb	r2, [r3, #0]
      i++;
 8004ad2:	6a3b      	ldr	r3, [r7, #32]
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ada:	3301      	adds	r3, #1
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004ade:	8bfb      	ldrh	r3, [r7, #30]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004ae4:	8bfb      	ldrh	r3, [r7, #30]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1ea      	bne.n	8004ac0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	372c      	adds	r7, #44	; 0x2c
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004af8:	b480      	push	{r7}
 8004afa:	b085      	sub	sp, #20
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	6078      	str	r0, [r7, #4]
 8004b00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	785b      	ldrb	r3, [r3, #1]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d12c      	bne.n	8004b6e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	db12      	blt.n	8004b4c <USB_EPSetStall+0x54>
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d00f      	beq.n	8004b4c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b46:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b4a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b66:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	e02b      	b.n	8004bc6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	015a      	lsls	r2, r3, #5
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	4413      	add	r3, r2
 8004b76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	db12      	blt.n	8004ba6 <USB_EPSetStall+0xae>
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00f      	beq.n	8004ba6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	0151      	lsls	r1, r2, #5
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	440a      	add	r2, r1
 8004b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ba4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68ba      	ldr	r2, [r7, #8]
 8004bb6:	0151      	lsls	r1, r2, #5
 8004bb8:	68fa      	ldr	r2, [r7, #12]
 8004bba:	440a      	add	r2, r1
 8004bbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bc4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	3714      	adds	r7, #20
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	785b      	ldrb	r3, [r3, #1]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d128      	bne.n	8004c42 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	0151      	lsls	r1, r2, #5
 8004c02:	68fa      	ldr	r2, [r7, #12]
 8004c04:	440a      	add	r2, r1
 8004c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c0a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c0e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	78db      	ldrb	r3, [r3, #3]
 8004c14:	2b03      	cmp	r3, #3
 8004c16:	d003      	beq.n	8004c20 <USB_EPClearStall+0x4c>
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	78db      	ldrb	r3, [r3, #3]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d138      	bne.n	8004c92 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	015a      	lsls	r2, r3, #5
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4413      	add	r3, r2
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68ba      	ldr	r2, [r7, #8]
 8004c30:	0151      	lsls	r1, r2, #5
 8004c32:	68fa      	ldr	r2, [r7, #12]
 8004c34:	440a      	add	r2, r1
 8004c36:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c3e:	6013      	str	r3, [r2, #0]
 8004c40:	e027      	b.n	8004c92 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	015a      	lsls	r2, r3, #5
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4413      	add	r3, r2
 8004c4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	68ba      	ldr	r2, [r7, #8]
 8004c52:	0151      	lsls	r1, r2, #5
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	440a      	add	r2, r1
 8004c58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c5c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c60:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	78db      	ldrb	r3, [r3, #3]
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d003      	beq.n	8004c72 <USB_EPClearStall+0x9e>
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	78db      	ldrb	r3, [r3, #3]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d10f      	bne.n	8004c92 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	68ba      	ldr	r2, [r7, #8]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c90:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3714      	adds	r7, #20
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68fa      	ldr	r2, [r7, #12]
 8004cba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cbe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004cc2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	011b      	lsls	r3, r3, #4
 8004cd0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004cd4:	68f9      	ldr	r1, [r7, #12]
 8004cd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004cde:	2300      	movs	r3, #0
}
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	3714      	adds	r7, #20
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004cec:	b480      	push	{r7}
 8004cee:	b085      	sub	sp, #20
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	68fa      	ldr	r2, [r7, #12]
 8004d02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d06:	f023 0303 	bic.w	r3, r3, #3
 8004d0a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d1a:	f023 0302 	bic.w	r3, r3, #2
 8004d1e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d48:	f023 0303 	bic.w	r3, r3, #3
 8004d4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d5c:	f043 0302 	orr.w	r3, r3, #2
 8004d60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	699b      	ldr	r3, [r3, #24]
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4013      	ands	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d88:	68fb      	ldr	r3, [r7, #12]
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3714      	adds	r7, #20
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d96:	b480      	push	{r7}
 8004d98:	b085      	sub	sp, #20
 8004d9a:	af00      	add	r7, sp, #0
 8004d9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da8:	699b      	ldr	r3, [r3, #24]
 8004daa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db2:	69db      	ldr	r3, [r3, #28]
 8004db4:	68ba      	ldr	r2, [r7, #8]
 8004db6:	4013      	ands	r3, r2
 8004db8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	0c1b      	lsrs	r3, r3, #16
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3714      	adds	r7, #20
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc8:	4770      	bx	lr

08004dca <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dca:	b480      	push	{r7}
 8004dcc:	b085      	sub	sp, #20
 8004dce:	af00      	add	r7, sp, #0
 8004dd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de6:	69db      	ldr	r3, [r3, #28]
 8004de8:	68ba      	ldr	r2, [r7, #8]
 8004dea:	4013      	ands	r3, r2
 8004dec:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	b29b      	uxth	r3, r3
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
 8004e06:	460b      	mov	r3, r1
 8004e08:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e0e:	78fb      	ldrb	r3, [r7, #3]
 8004e10:	015a      	lsls	r2, r3, #5
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	4413      	add	r3, r2
 8004e16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	68ba      	ldr	r2, [r7, #8]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e2c:	68bb      	ldr	r3, [r7, #8]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3714      	adds	r7, #20
 8004e32:	46bd      	mov	sp, r7
 8004e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e38:	4770      	bx	lr

08004e3a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b087      	sub	sp, #28
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	460b      	mov	r3, r1
 8004e44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e5c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e5e:	78fb      	ldrb	r3, [r7, #3]
 8004e60:	f003 030f 	and.w	r3, r3, #15
 8004e64:	68fa      	ldr	r2, [r7, #12]
 8004e66:	fa22 f303 	lsr.w	r3, r2, r3
 8004e6a:	01db      	lsls	r3, r3, #7
 8004e6c:	b2db      	uxtb	r3, r3
 8004e6e:	693a      	ldr	r2, [r7, #16]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4013      	ands	r3, r2
 8004e86:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e88:	68bb      	ldr	r3, [r7, #8]
}
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	371c      	adds	r7, #28
 8004e8e:	46bd      	mov	sp, r7
 8004e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e94:	4770      	bx	lr

08004e96 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e96:	b480      	push	{r7}
 8004e98:	b083      	sub	sp, #12
 8004e9a:	af00      	add	r7, sp, #0
 8004e9c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	695b      	ldr	r3, [r3, #20]
 8004ea2:	f003 0301 	and.w	r3, r3, #1
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr

08004eb2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004eb2:	b480      	push	{r7}
 8004eb4:	b085      	sub	sp, #20
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68fa      	ldr	r2, [r7, #12]
 8004ec8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ecc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ed0:	f023 0307 	bic.w	r3, r3, #7
 8004ed4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ee4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ee8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3714      	adds	r7, #20
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b085      	sub	sp, #20
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	333c      	adds	r3, #60	; 0x3c
 8004f0a:	3304      	adds	r3, #4
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	4a1c      	ldr	r2, [pc, #112]	; (8004f84 <USB_EP0_OutStart+0x8c>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d90a      	bls.n	8004f2e <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f28:	d101      	bne.n	8004f2e <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e024      	b.n	8004f78 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f34:	461a      	mov	r2, r3
 8004f36:	2300      	movs	r3, #0
 8004f38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f40:	691b      	ldr	r3, [r3, #16]
 8004f42:	68fa      	ldr	r2, [r7, #12]
 8004f44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f54:	691b      	ldr	r3, [r3, #16]
 8004f56:	68fa      	ldr	r2, [r7, #12]
 8004f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5c:	f043 0318 	orr.w	r3, r3, #24
 8004f60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	68fa      	ldr	r2, [r7, #12]
 8004f6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f70:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004f74:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004f76:	2300      	movs	r3, #0
}
 8004f78:	4618      	mov	r0, r3
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f82:	4770      	bx	lr
 8004f84:	4f54300a 	.word	0x4f54300a

08004f88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b085      	sub	sp, #20
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	3301      	adds	r3, #1
 8004f98:	60fb      	str	r3, [r7, #12]
 8004f9a:	4a13      	ldr	r2, [pc, #76]	; (8004fe8 <USB_CoreReset+0x60>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d901      	bls.n	8004fa4 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e01a      	b.n	8004fda <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	691b      	ldr	r3, [r3, #16]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	daf3      	bge.n	8004f94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fac:	2300      	movs	r3, #0
 8004fae:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	f043 0201 	orr.w	r2, r3, #1
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	60fb      	str	r3, [r7, #12]
 8004fc2:	4a09      	ldr	r2, [pc, #36]	; (8004fe8 <USB_CoreReset+0x60>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d901      	bls.n	8004fcc <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	e006      	b.n	8004fda <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d0f1      	beq.n	8004fbc <USB_CoreReset+0x34>

  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr
 8004fe6:	bf00      	nop
 8004fe8:	00030d40 	.word	0x00030d40

08004fec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b084      	sub	sp, #16
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004ff8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004ffc:	f002 fafe 	bl	80075fc <USBD_static_malloc>
 8005000:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d105      	bne.n	8005014 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2200      	movs	r2, #0
 800500c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8005010:	2302      	movs	r3, #2
 8005012:	e066      	b.n	80050e2 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	7c1b      	ldrb	r3, [r3, #16]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d119      	bne.n	8005058 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005024:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005028:	2202      	movs	r2, #2
 800502a:	2181      	movs	r1, #129	; 0x81
 800502c:	6878      	ldr	r0, [r7, #4]
 800502e:	f002 f8d1 	bl	80071d4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005038:	f44f 7300 	mov.w	r3, #512	; 0x200
 800503c:	2202      	movs	r2, #2
 800503e:	2101      	movs	r1, #1
 8005040:	6878      	ldr	r0, [r7, #4]
 8005042:	f002 f8c7 	bl	80071d4 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	2201      	movs	r2, #1
 800504a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2210      	movs	r2, #16
 8005052:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8005056:	e016      	b.n	8005086 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005058:	2340      	movs	r3, #64	; 0x40
 800505a:	2202      	movs	r2, #2
 800505c:	2181      	movs	r1, #129	; 0x81
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f002 f8b8 	bl	80071d4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2201      	movs	r2, #1
 8005068:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800506a:	2340      	movs	r3, #64	; 0x40
 800506c:	2202      	movs	r2, #2
 800506e:	2101      	movs	r1, #1
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f002 f8af 	bl	80071d4 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2201      	movs	r2, #1
 800507a:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2210      	movs	r2, #16
 8005082:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005086:	2308      	movs	r3, #8
 8005088:	2203      	movs	r2, #3
 800508a:	2182      	movs	r1, #130	; 0x82
 800508c:	6878      	ldr	r0, [r7, #4]
 800508e:	f002 f8a1 	bl	80071d4 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2201      	movs	r2, #1
 8005096:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	7c1b      	ldrb	r3, [r3, #16]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050c2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050c6:	2101      	movs	r1, #1
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f002 f9fd 	bl	80074c8 <USBD_LL_PrepareReceive>
 80050ce:	e007      	b.n	80050e0 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050d6:	2340      	movs	r3, #64	; 0x40
 80050d8:	2101      	movs	r1, #1
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f002 f9f4 	bl	80074c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}

080050ea <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050ea:	b580      	push	{r7, lr}
 80050ec:	b082      	sub	sp, #8
 80050ee:	af00      	add	r7, sp, #0
 80050f0:	6078      	str	r0, [r7, #4]
 80050f2:	460b      	mov	r3, r1
 80050f4:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80050f6:	2181      	movs	r1, #129	; 0x81
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f002 f8a9 	bl	8007250 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005104:	2101      	movs	r1, #1
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f002 f8a2 	bl	8007250 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2200      	movs	r2, #0
 8005110:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005114:	2182      	movs	r1, #130	; 0x82
 8005116:	6878      	ldr	r0, [r7, #4]
 8005118:	f002 f89a 	bl	8007250 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2200      	movs	r2, #0
 8005120:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00e      	beq.n	8005154 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005146:	4618      	mov	r0, r3
 8005148:	f002 fa66 	bl	8007618 <USBD_static_free>
    pdev->pClassData = NULL;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005154:	2300      	movs	r3, #0
}
 8005156:	4618      	mov	r0, r3
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005170:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005172:	2300      	movs	r3, #0
 8005174:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005184:	2303      	movs	r3, #3
 8005186:	e0af      	b.n	80052e8 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005190:	2b00      	cmp	r3, #0
 8005192:	d03f      	beq.n	8005214 <USBD_CDC_Setup+0xb4>
 8005194:	2b20      	cmp	r3, #32
 8005196:	f040 809f 	bne.w	80052d8 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	88db      	ldrh	r3, [r3, #6]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d02e      	beq.n	8005200 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	b25b      	sxtb	r3, r3
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	da16      	bge.n	80051da <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80051b2:	689b      	ldr	r3, [r3, #8]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80051b8:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80051ba:	683a      	ldr	r2, [r7, #0]
 80051bc:	88d2      	ldrh	r2, [r2, #6]
 80051be:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	88db      	ldrh	r3, [r3, #6]
 80051c4:	2b07      	cmp	r3, #7
 80051c6:	bf28      	it	cs
 80051c8:	2307      	movcs	r3, #7
 80051ca:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	89fa      	ldrh	r2, [r7, #14]
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f001 fb43 	bl	800685e <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80051d8:	e085      	b.n	80052e6 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	785a      	ldrb	r2, [r3, #1]
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	88db      	ldrh	r3, [r3, #6]
 80051e8:	b2da      	uxtb	r2, r3
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 80051f0:	6939      	ldr	r1, [r7, #16]
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	88db      	ldrh	r3, [r3, #6]
 80051f6:	461a      	mov	r2, r3
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f001 fb5c 	bl	80068b6 <USBD_CtlPrepareRx>
      break;
 80051fe:	e072      	b.n	80052e6 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	7850      	ldrb	r0, [r2, #1]
 800520c:	2200      	movs	r2, #0
 800520e:	6839      	ldr	r1, [r7, #0]
 8005210:	4798      	blx	r3
      break;
 8005212:	e068      	b.n	80052e6 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	785b      	ldrb	r3, [r3, #1]
 8005218:	2b0b      	cmp	r3, #11
 800521a:	d852      	bhi.n	80052c2 <USBD_CDC_Setup+0x162>
 800521c:	a201      	add	r2, pc, #4	; (adr r2, 8005224 <USBD_CDC_Setup+0xc4>)
 800521e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005222:	bf00      	nop
 8005224:	08005255 	.word	0x08005255
 8005228:	080052d1 	.word	0x080052d1
 800522c:	080052c3 	.word	0x080052c3
 8005230:	080052c3 	.word	0x080052c3
 8005234:	080052c3 	.word	0x080052c3
 8005238:	080052c3 	.word	0x080052c3
 800523c:	080052c3 	.word	0x080052c3
 8005240:	080052c3 	.word	0x080052c3
 8005244:	080052c3 	.word	0x080052c3
 8005248:	080052c3 	.word	0x080052c3
 800524c:	0800527f 	.word	0x0800527f
 8005250:	080052a9 	.word	0x080052a9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b03      	cmp	r3, #3
 800525e:	d107      	bne.n	8005270 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005260:	f107 030a 	add.w	r3, r7, #10
 8005264:	2202      	movs	r2, #2
 8005266:	4619      	mov	r1, r3
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f001 faf8 	bl	800685e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800526e:	e032      	b.n	80052d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005270:	6839      	ldr	r1, [r7, #0]
 8005272:	6878      	ldr	r0, [r7, #4]
 8005274:	f001 fa82 	bl	800677c <USBD_CtlError>
            ret = USBD_FAIL;
 8005278:	2303      	movs	r3, #3
 800527a:	75fb      	strb	r3, [r7, #23]
          break;
 800527c:	e02b      	b.n	80052d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b03      	cmp	r3, #3
 8005288:	d107      	bne.n	800529a <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800528a:	f107 030d 	add.w	r3, r7, #13
 800528e:	2201      	movs	r2, #1
 8005290:	4619      	mov	r1, r3
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f001 fae3 	bl	800685e <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005298:	e01d      	b.n	80052d6 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 800529a:	6839      	ldr	r1, [r7, #0]
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 fa6d 	bl	800677c <USBD_CtlError>
            ret = USBD_FAIL;
 80052a2:	2303      	movs	r3, #3
 80052a4:	75fb      	strb	r3, [r7, #23]
          break;
 80052a6:	e016      	b.n	80052d6 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b03      	cmp	r3, #3
 80052b2:	d00f      	beq.n	80052d4 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80052b4:	6839      	ldr	r1, [r7, #0]
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f001 fa60 	bl	800677c <USBD_CtlError>
            ret = USBD_FAIL;
 80052bc:	2303      	movs	r3, #3
 80052be:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80052c0:	e008      	b.n	80052d4 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80052c2:	6839      	ldr	r1, [r7, #0]
 80052c4:	6878      	ldr	r0, [r7, #4]
 80052c6:	f001 fa59 	bl	800677c <USBD_CtlError>
          ret = USBD_FAIL;
 80052ca:	2303      	movs	r3, #3
 80052cc:	75fb      	strb	r3, [r7, #23]
          break;
 80052ce:	e002      	b.n	80052d6 <USBD_CDC_Setup+0x176>
          break;
 80052d0:	bf00      	nop
 80052d2:	e008      	b.n	80052e6 <USBD_CDC_Setup+0x186>
          break;
 80052d4:	bf00      	nop
      }
      break;
 80052d6:	e006      	b.n	80052e6 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80052d8:	6839      	ldr	r1, [r7, #0]
 80052da:	6878      	ldr	r0, [r7, #4]
 80052dc:	f001 fa4e 	bl	800677c <USBD_CtlError>
      ret = USBD_FAIL;
 80052e0:	2303      	movs	r3, #3
 80052e2:	75fb      	strb	r3, [r7, #23]
      break;
 80052e4:	bf00      	nop
  }

  return (uint8_t)ret;
 80052e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3718      	adds	r7, #24
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}

080052f0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b084      	sub	sp, #16
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	460b      	mov	r3, r1
 80052fa:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005302:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800530a:	2b00      	cmp	r3, #0
 800530c:	d101      	bne.n	8005312 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800530e:	2303      	movs	r3, #3
 8005310:	e04f      	b.n	80053b2 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005318:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800531a:	78fa      	ldrb	r2, [r7, #3]
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	4613      	mov	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4413      	add	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	440b      	add	r3, r1
 8005328:	3318      	adds	r3, #24
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d029      	beq.n	8005384 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005330:	78fa      	ldrb	r2, [r7, #3]
 8005332:	6879      	ldr	r1, [r7, #4]
 8005334:	4613      	mov	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	4413      	add	r3, r2
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	440b      	add	r3, r1
 800533e:	3318      	adds	r3, #24
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	78f9      	ldrb	r1, [r7, #3]
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	460b      	mov	r3, r1
 8005348:	00db      	lsls	r3, r3, #3
 800534a:	1a5b      	subs	r3, r3, r1
 800534c:	009b      	lsls	r3, r3, #2
 800534e:	4403      	add	r3, r0
 8005350:	3344      	adds	r3, #68	; 0x44
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	fbb2 f1f3 	udiv	r1, r2, r3
 8005358:	fb03 f301 	mul.w	r3, r3, r1
 800535c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800535e:	2b00      	cmp	r3, #0
 8005360:	d110      	bne.n	8005384 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005362:	78fa      	ldrb	r2, [r7, #3]
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	3318      	adds	r3, #24
 8005372:	2200      	movs	r2, #0
 8005374:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005376:	78f9      	ldrb	r1, [r7, #3]
 8005378:	2300      	movs	r3, #0
 800537a:	2200      	movs	r2, #0
 800537c:	6878      	ldr	r0, [r7, #4]
 800537e:	f002 f86b 	bl	8007458 <USBD_LL_Transmit>
 8005382:	e015      	b.n	80053b0 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	2200      	movs	r2, #0
 8005388:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00b      	beq.n	80053b0 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80053a6:	68ba      	ldr	r2, [r7, #8]
 80053a8:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80053ac:	78fa      	ldrb	r2, [r7, #3]
 80053ae:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80053b0:	2300      	movs	r3, #0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3710      	adds	r7, #16
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}

080053ba <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80053ba:	b580      	push	{r7, lr}
 80053bc:	b084      	sub	sp, #16
 80053be:	af00      	add	r7, sp, #0
 80053c0:	6078      	str	r0, [r7, #4]
 80053c2:	460b      	mov	r3, r1
 80053c4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053cc:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80053d8:	2303      	movs	r3, #3
 80053da:	e015      	b.n	8005408 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80053dc:	78fb      	ldrb	r3, [r7, #3]
 80053de:	4619      	mov	r1, r3
 80053e0:	6878      	ldr	r0, [r7, #4]
 80053e2:	f002 f8a9 	bl	8007538 <USBD_LL_GetRxDataSize>
 80053e6:	4602      	mov	r2, r0
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	68fa      	ldr	r2, [r7, #12]
 80053f8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80053fc:	68fa      	ldr	r2, [r7, #12]
 80053fe:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005402:	4611      	mov	r1, r2
 8005404:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3710      	adds	r7, #16
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}

08005410 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	b084      	sub	sp, #16
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800541e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8005426:	2303      	movs	r3, #3
 8005428:	e01b      	b.n	8005462 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d015      	beq.n	8005460 <USBD_CDC_EP0_RxReady+0x50>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800543a:	2bff      	cmp	r3, #255	; 0xff
 800543c:	d010      	beq.n	8005460 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	68fa      	ldr	r2, [r7, #12]
 8005448:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 800544c:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800544e:	68fa      	ldr	r2, [r7, #12]
 8005450:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005454:	b292      	uxth	r2, r2
 8005456:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	22ff      	movs	r2, #255	; 0xff
 800545c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}
	...

0800546c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800546c:	b480      	push	{r7}
 800546e:	b083      	sub	sp, #12
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2243      	movs	r2, #67	; 0x43
 8005478:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800547a:	4b03      	ldr	r3, [pc, #12]	; (8005488 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800547c:	4618      	mov	r0, r3
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	200000b8 	.word	0x200000b8

0800548c <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2243      	movs	r2, #67	; 0x43
 8005498:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 800549a:	4b03      	ldr	r3, [pc, #12]	; (80054a8 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800549c:	4618      	mov	r0, r3
 800549e:	370c      	adds	r7, #12
 80054a0:	46bd      	mov	sp, r7
 80054a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a6:	4770      	bx	lr
 80054a8:	20000074 	.word	0x20000074

080054ac <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2243      	movs	r2, #67	; 0x43
 80054b8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80054ba:	4b03      	ldr	r3, [pc, #12]	; (80054c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80054bc:	4618      	mov	r0, r3
 80054be:	370c      	adds	r7, #12
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr
 80054c8:	200000fc 	.word	0x200000fc

080054cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b083      	sub	sp, #12
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	220a      	movs	r2, #10
 80054d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80054da:	4b03      	ldr	r3, [pc, #12]	; (80054e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80054dc:	4618      	mov	r0, r3
 80054de:	370c      	adds	r7, #12
 80054e0:	46bd      	mov	sp, r7
 80054e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e6:	4770      	bx	lr
 80054e8:	20000030 	.word	0x20000030

080054ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d101      	bne.n	8005500 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80054fc:	2303      	movs	r3, #3
 80054fe:	e004      	b.n	800550a <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	683a      	ldr	r2, [r7, #0]
 8005504:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	370c      	adds	r7, #12
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8005516:	b480      	push	{r7}
 8005518:	b087      	sub	sp, #28
 800551a:	af00      	add	r7, sp, #0
 800551c:	60f8      	str	r0, [r7, #12]
 800551e:	60b9      	str	r1, [r7, #8]
 8005520:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005528:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800552a:	697b      	ldr	r3, [r7, #20]
 800552c:	2b00      	cmp	r3, #0
 800552e:	d101      	bne.n	8005534 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005530:	2303      	movs	r3, #3
 8005532:	e008      	b.n	8005546 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	687a      	ldr	r2, [r7, #4]
 8005540:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	371c      	adds	r7, #28
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005552:	b480      	push	{r7}
 8005554:	b085      	sub	sp, #20
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005562:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d101      	bne.n	800556e <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800556a:	2303      	movs	r3, #3
 800556c:	e004      	b.n	8005578 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	683a      	ldr	r2, [r7, #0]
 8005572:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005576:	2300      	movs	r3, #0
}
 8005578:	4618      	mov	r0, r3
 800557a:	3714      	adds	r7, #20
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005592:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005594:	2301      	movs	r3, #1
 8005596:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d101      	bne.n	80055a6 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80055a2:	2303      	movs	r3, #3
 80055a4:	e01a      	b.n	80055dc <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d114      	bne.n	80055da <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2201      	movs	r2, #1
 80055b4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80055ce:	2181      	movs	r1, #129	; 0x81
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f001 ff41 	bl	8007458 <USBD_LL_Transmit>

    ret = USBD_OK;
 80055d6:	2300      	movs	r3, #0
 80055d8:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80055da:	7bfb      	ldrb	r3, [r7, #15]
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d101      	bne.n	8005602 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80055fe:	2303      	movs	r3, #3
 8005600:	e016      	b.n	8005630 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	7c1b      	ldrb	r3, [r3, #16]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005610:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005614:	2101      	movs	r1, #1
 8005616:	6878      	ldr	r0, [r7, #4]
 8005618:	f001 ff56 	bl	80074c8 <USBD_LL_PrepareReceive>
 800561c:	e007      	b.n	800562e <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005624:	2340      	movs	r3, #64	; 0x40
 8005626:	2101      	movs	r1, #1
 8005628:	6878      	ldr	r0, [r7, #4]
 800562a:	f001 ff4d 	bl	80074c8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800562e:	2300      	movs	r3, #0
}
 8005630:	4618      	mov	r0, r3
 8005632:	3710      	adds	r7, #16
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}

08005638 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d101      	bne.n	8005650 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800564c:	2303      	movs	r3, #3
 800564e:	e01f      	b.n	8005690 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	2200      	movs	r2, #0
 8005654:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2200      	movs	r2, #0
 8005664:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	68ba      	ldr	r2, [r7, #8]
 8005672:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	2201      	movs	r2, #1
 800567a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	79fa      	ldrb	r2, [r7, #7]
 8005682:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f001 fd27 	bl	80070d8 <USBD_LL_Init>
 800568a:	4603      	mov	r3, r0
 800568c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800568e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005690:	4618      	mov	r0, r3
 8005692:	3718      	adds	r7, #24
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d101      	bne.n	80056b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80056ac:	2303      	movs	r3, #3
 80056ae:	e016      	b.n	80056de <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d00b      	beq.n	80056dc <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056cc:	f107 020e 	add.w	r2, r7, #14
 80056d0:	4610      	mov	r0, r2
 80056d2:	4798      	blx	r3
 80056d4:	4602      	mov	r2, r0
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80056dc:	2300      	movs	r3, #0
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3710      	adds	r7, #16
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}

080056e6 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80056e6:	b580      	push	{r7, lr}
 80056e8:	b082      	sub	sp, #8
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80056ee:	6878      	ldr	r0, [r7, #4]
 80056f0:	f001 fd3e 	bl	8007170 <USBD_LL_Start>
 80056f4:	4603      	mov	r3, r0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80056fe:	b480      	push	{r7}
 8005700:	b083      	sub	sp, #12
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005706:	2300      	movs	r3, #0
}
 8005708:	4618      	mov	r0, r3
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	460b      	mov	r3, r1
 800571e:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005720:	2303      	movs	r3, #3
 8005722:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800572a:	2b00      	cmp	r3, #0
 800572c:	d009      	beq.n	8005742 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	78fa      	ldrb	r2, [r7, #3]
 8005738:	4611      	mov	r1, r2
 800573a:	6878      	ldr	r0, [r7, #4]
 800573c:	4798      	blx	r3
 800573e:	4603      	mov	r3, r0
 8005740:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005742:	7bfb      	ldrb	r3, [r7, #15]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3710      	adds	r7, #16
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}

0800574c <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	4611      	mov	r1, r2
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	4798      	blx	r3
  }

  return USBD_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b084      	sub	sp, #16
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800578c:	6839      	ldr	r1, [r7, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f000 ffba 	bl	8006708 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2201      	movs	r2, #1
 8005798:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80057a2:	461a      	mov	r2, r3
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80057b0:	f003 031f 	and.w	r3, r3, #31
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d01a      	beq.n	80057ee <USBD_LL_SetupStage+0x72>
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	d822      	bhi.n	8005802 <USBD_LL_SetupStage+0x86>
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d002      	beq.n	80057c6 <USBD_LL_SetupStage+0x4a>
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d00a      	beq.n	80057da <USBD_LL_SetupStage+0x5e>
 80057c4:	e01d      	b.n	8005802 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057cc:	4619      	mov	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	f000 fa62 	bl	8005c98 <USBD_StdDevReq>
 80057d4:	4603      	mov	r3, r0
 80057d6:	73fb      	strb	r3, [r7, #15]
      break;
 80057d8:	e020      	b.n	800581c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057e0:	4619      	mov	r1, r3
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fac6 	bl	8005d74 <USBD_StdItfReq>
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]
      break;
 80057ec:	e016      	b.n	800581c <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 fb05 	bl	8005e06 <USBD_StdEPReq>
 80057fc:	4603      	mov	r3, r0
 80057fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005800:	e00c      	b.n	800581c <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005808:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800580c:	b2db      	uxtb	r3, r3
 800580e:	4619      	mov	r1, r3
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f001 fd53 	bl	80072bc <USBD_LL_StallEP>
 8005816:	4603      	mov	r3, r0
 8005818:	73fb      	strb	r3, [r7, #15]
      break;
 800581a:	bf00      	nop
  }

  return ret;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}

08005826 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005826:	b580      	push	{r7, lr}
 8005828:	b086      	sub	sp, #24
 800582a:	af00      	add	r7, sp, #0
 800582c:	60f8      	str	r0, [r7, #12]
 800582e:	460b      	mov	r3, r1
 8005830:	607a      	str	r2, [r7, #4]
 8005832:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005834:	7afb      	ldrb	r3, [r7, #11]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d138      	bne.n	80058ac <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005840:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005848:	2b03      	cmp	r3, #3
 800584a:	d14a      	bne.n	80058e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	689a      	ldr	r2, [r3, #8]
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	68db      	ldr	r3, [r3, #12]
 8005854:	429a      	cmp	r2, r3
 8005856:	d913      	bls.n	8005880 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	689a      	ldr	r2, [r3, #8]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	68db      	ldr	r3, [r3, #12]
 8005860:	1ad2      	subs	r2, r2, r3
 8005862:	693b      	ldr	r3, [r7, #16]
 8005864:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	68da      	ldr	r2, [r3, #12]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	4293      	cmp	r3, r2
 8005870:	bf28      	it	cs
 8005872:	4613      	movcs	r3, r2
 8005874:	461a      	mov	r2, r3
 8005876:	6879      	ldr	r1, [r7, #4]
 8005878:	68f8      	ldr	r0, [r7, #12]
 800587a:	f001 f839 	bl	80068f0 <USBD_CtlContinueRx>
 800587e:	e030      	b.n	80058e2 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b03      	cmp	r3, #3
 800588a:	d10b      	bne.n	80058a4 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d005      	beq.n	80058a4 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800589e:	691b      	ldr	r3, [r3, #16]
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f001 f834 	bl	8006912 <USBD_CtlSendStatus>
 80058aa:	e01a      	b.n	80058e2 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b03      	cmp	r3, #3
 80058b6:	d114      	bne.n	80058e2 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058be:	699b      	ldr	r3, [r3, #24]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d00e      	beq.n	80058e2 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058ca:	699b      	ldr	r3, [r3, #24]
 80058cc:	7afa      	ldrb	r2, [r7, #11]
 80058ce:	4611      	mov	r1, r2
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	4798      	blx	r3
 80058d4:	4603      	mov	r3, r0
 80058d6:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80058d8:	7dfb      	ldrb	r3, [r7, #23]
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80058de:	7dfb      	ldrb	r3, [r7, #23]
 80058e0:	e000      	b.n	80058e4 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	60f8      	str	r0, [r7, #12]
 80058f4:	460b      	mov	r3, r1
 80058f6:	607a      	str	r2, [r7, #4]
 80058f8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80058fa:	7afb      	ldrb	r3, [r7, #11]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d16b      	bne.n	80059d8 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	3314      	adds	r3, #20
 8005904:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800590c:	2b02      	cmp	r3, #2
 800590e:	d156      	bne.n	80059be <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005910:	693b      	ldr	r3, [r7, #16]
 8005912:	689a      	ldr	r2, [r3, #8]
 8005914:	693b      	ldr	r3, [r7, #16]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	429a      	cmp	r2, r3
 800591a:	d914      	bls.n	8005946 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	1ad2      	subs	r2, r2, r3
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	461a      	mov	r2, r3
 8005930:	6879      	ldr	r1, [r7, #4]
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f000 ffae 	bl	8006894 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005938:	2300      	movs	r3, #0
 800593a:	2200      	movs	r2, #0
 800593c:	2100      	movs	r1, #0
 800593e:	68f8      	ldr	r0, [r7, #12]
 8005940:	f001 fdc2 	bl	80074c8 <USBD_LL_PrepareReceive>
 8005944:	e03b      	b.n	80059be <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	689b      	ldr	r3, [r3, #8]
 800594e:	429a      	cmp	r2, r3
 8005950:	d11c      	bne.n	800598c <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	685a      	ldr	r2, [r3, #4]
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800595a:	429a      	cmp	r2, r3
 800595c:	d316      	bcc.n	800598c <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005968:	429a      	cmp	r2, r3
 800596a:	d20f      	bcs.n	800598c <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800596c:	2200      	movs	r2, #0
 800596e:	2100      	movs	r1, #0
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f000 ff8f 	bl	8006894 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800597e:	2300      	movs	r3, #0
 8005980:	2200      	movs	r2, #0
 8005982:	2100      	movs	r1, #0
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f001 fd9f 	bl	80074c8 <USBD_LL_PrepareReceive>
 800598a:	e018      	b.n	80059be <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005992:	b2db      	uxtb	r3, r3
 8005994:	2b03      	cmp	r3, #3
 8005996:	d10b      	bne.n	80059b0 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800599e:	68db      	ldr	r3, [r3, #12]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d005      	beq.n	80059b0 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80059b0:	2180      	movs	r1, #128	; 0x80
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f001 fc82 	bl	80072bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 ffbd 	bl	8006938 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d122      	bne.n	8005a0e <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80059c8:	68f8      	ldr	r0, [r7, #12]
 80059ca:	f7ff fe98 	bl	80056fe <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80059d6:	e01a      	b.n	8005a0e <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059de:	b2db      	uxtb	r3, r3
 80059e0:	2b03      	cmp	r3, #3
 80059e2:	d114      	bne.n	8005a0e <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ea:	695b      	ldr	r3, [r3, #20]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00e      	beq.n	8005a0e <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f6:	695b      	ldr	r3, [r3, #20]
 80059f8:	7afa      	ldrb	r2, [r7, #11]
 80059fa:	4611      	mov	r1, r2
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	4798      	blx	r3
 8005a00:	4603      	mov	r3, r0
 8005a02:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005a04:	7dfb      	ldrb	r3, [r7, #23]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d001      	beq.n	8005a0e <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8005a0a:	7dfb      	ldrb	r3, [r7, #23]
 8005a0c:	e000      	b.n	8005a10 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005a48:	2303      	movs	r3, #3
 8005a4a:	e02f      	b.n	8005aac <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d00f      	beq.n	8005a76 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a5c:	685b      	ldr	r3, [r3, #4]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d009      	beq.n	8005a76 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	6852      	ldr	r2, [r2, #4]
 8005a6e:	b2d2      	uxtb	r2, r2
 8005a70:	4611      	mov	r1, r2
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a76:	2340      	movs	r3, #64	; 0x40
 8005a78:	2200      	movs	r2, #0
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 fba9 	bl	80071d4 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2201      	movs	r2, #1
 8005a86:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2240      	movs	r2, #64	; 0x40
 8005a8e:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a92:	2340      	movs	r3, #64	; 0x40
 8005a94:	2200      	movs	r2, #0
 8005a96:	2180      	movs	r1, #128	; 0x80
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f001 fb9b 	bl	80071d4 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2240      	movs	r2, #64	; 0x40
 8005aa8:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005aaa:	2300      	movs	r3, #0
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3708      	adds	r7, #8
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	460b      	mov	r3, r1
 8005abe:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005ac6:	2300      	movs	r3, #0
}
 8005ac8:	4618      	mov	r0, r3
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2204      	movs	r2, #4
 8005aee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005af2:	2300      	movs	r3, #0
}
 8005af4:	4618      	mov	r0, r3
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afe:	4770      	bx	lr

08005b00 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b04      	cmp	r3, #4
 8005b12:	d106      	bne.n	8005b22 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005b1a:	b2da      	uxtb	r2, r3
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b082      	sub	sp, #8
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d101      	bne.n	8005b46 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005b42:	2303      	movs	r3, #3
 8005b44:	e012      	b.n	8005b6c <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b03      	cmp	r3, #3
 8005b50:	d10b      	bne.n	8005b6a <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b58:	69db      	ldr	r3, [r3, #28]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d005      	beq.n	8005b6a <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	460b      	mov	r3, r1
 8005b7e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d101      	bne.n	8005b8e <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e014      	b.n	8005bb8 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	2b03      	cmp	r3, #3
 8005b98:	d10d      	bne.n	8005bb6 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ba0:	6a1b      	ldr	r3, [r3, #32]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d007      	beq.n	8005bb6 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bac:	6a1b      	ldr	r3, [r3, #32]
 8005bae:	78fa      	ldrb	r2, [r7, #3]
 8005bb0:	4611      	mov	r1, r2
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bb6:	2300      	movs	r3, #0
}
 8005bb8:	4618      	mov	r0, r3
 8005bba:	3708      	adds	r7, #8
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d101      	bne.n	8005bda <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e014      	b.n	8005c04 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d10d      	bne.n	8005c02 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d007      	beq.n	8005c02 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bfa:	78fa      	ldrb	r2, [r7, #3]
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005c02:	2300      	movs	r3, #0
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3708      	adds	r7, #8
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}

08005c0c <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	370c      	adds	r7, #12
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr

08005c22 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005c22:	b580      	push	{r7, lr}
 8005c24:	b082      	sub	sp, #8
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d009      	beq.n	8005c50 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	6852      	ldr	r2, [r2, #4]
 8005c48:	b2d2      	uxtb	r2, r2
 8005c4a:	4611      	mov	r1, r2
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	4798      	blx	r3
  }

  return USBD_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3708      	adds	r7, #8
 8005c56:	46bd      	mov	sp, r7
 8005c58:	bd80      	pop	{r7, pc}

08005c5a <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005c5a:	b480      	push	{r7}
 8005c5c:	b087      	sub	sp, #28
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	781b      	ldrb	r3, [r3, #0]
 8005c6a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	3301      	adds	r3, #1
 8005c70:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005c72:	697b      	ldr	r3, [r7, #20]
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005c78:	8a3b      	ldrh	r3, [r7, #16]
 8005c7a:	021b      	lsls	r3, r3, #8
 8005c7c:	b21a      	sxth	r2, r3
 8005c7e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005c82:	4313      	orrs	r3, r2
 8005c84:	b21b      	sxth	r3, r3
 8005c86:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005c88:	89fb      	ldrh	r3, [r7, #14]
}
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	371c      	adds	r7, #28
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c94:	4770      	bx	lr
	...

08005c98 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
 8005ca0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005cae:	2b40      	cmp	r3, #64	; 0x40
 8005cb0:	d005      	beq.n	8005cbe <USBD_StdDevReq+0x26>
 8005cb2:	2b40      	cmp	r3, #64	; 0x40
 8005cb4:	d853      	bhi.n	8005d5e <USBD_StdDevReq+0xc6>
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d00b      	beq.n	8005cd2 <USBD_StdDevReq+0x3a>
 8005cba:	2b20      	cmp	r3, #32
 8005cbc:	d14f      	bne.n	8005d5e <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	6839      	ldr	r1, [r7, #0]
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	4798      	blx	r3
 8005ccc:	4603      	mov	r3, r0
 8005cce:	73fb      	strb	r3, [r7, #15]
      break;
 8005cd0:	e04a      	b.n	8005d68 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	785b      	ldrb	r3, [r3, #1]
 8005cd6:	2b09      	cmp	r3, #9
 8005cd8:	d83b      	bhi.n	8005d52 <USBD_StdDevReq+0xba>
 8005cda:	a201      	add	r2, pc, #4	; (adr r2, 8005ce0 <USBD_StdDevReq+0x48>)
 8005cdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ce0:	08005d35 	.word	0x08005d35
 8005ce4:	08005d49 	.word	0x08005d49
 8005ce8:	08005d53 	.word	0x08005d53
 8005cec:	08005d3f 	.word	0x08005d3f
 8005cf0:	08005d53 	.word	0x08005d53
 8005cf4:	08005d13 	.word	0x08005d13
 8005cf8:	08005d09 	.word	0x08005d09
 8005cfc:	08005d53 	.word	0x08005d53
 8005d00:	08005d2b 	.word	0x08005d2b
 8005d04:	08005d1d 	.word	0x08005d1d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005d08:	6839      	ldr	r1, [r7, #0]
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f000 f9de 	bl	80060cc <USBD_GetDescriptor>
          break;
 8005d10:	e024      	b.n	8005d5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005d12:	6839      	ldr	r1, [r7, #0]
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 fb6d 	bl	80063f4 <USBD_SetAddress>
          break;
 8005d1a:	e01f      	b.n	8005d5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 fbac 	bl	800647c <USBD_SetConfig>
 8005d24:	4603      	mov	r3, r0
 8005d26:	73fb      	strb	r3, [r7, #15]
          break;
 8005d28:	e018      	b.n	8005d5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f000 fc4b 	bl	80065c8 <USBD_GetConfig>
          break;
 8005d32:	e013      	b.n	8005d5c <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005d34:	6839      	ldr	r1, [r7, #0]
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fc7c 	bl	8006634 <USBD_GetStatus>
          break;
 8005d3c:	e00e      	b.n	8005d5c <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fcab 	bl	800669c <USBD_SetFeature>
          break;
 8005d46:	e009      	b.n	8005d5c <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 fcba 	bl	80066c4 <USBD_ClrFeature>
          break;
 8005d50:	e004      	b.n	8005d5c <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 fd11 	bl	800677c <USBD_CtlError>
          break;
 8005d5a:	bf00      	nop
      }
      break;
 8005d5c:	e004      	b.n	8005d68 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005d5e:	6839      	ldr	r1, [r7, #0]
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f000 fd0b 	bl	800677c <USBD_CtlError>
      break;
 8005d66:	bf00      	nop
  }

  return ret;
 8005d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3710      	adds	r7, #16
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop

08005d74 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d82:	683b      	ldr	r3, [r7, #0]
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d8a:	2b40      	cmp	r3, #64	; 0x40
 8005d8c:	d005      	beq.n	8005d9a <USBD_StdItfReq+0x26>
 8005d8e:	2b40      	cmp	r3, #64	; 0x40
 8005d90:	d82f      	bhi.n	8005df2 <USBD_StdItfReq+0x7e>
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d001      	beq.n	8005d9a <USBD_StdItfReq+0x26>
 8005d96:	2b20      	cmp	r3, #32
 8005d98:	d12b      	bne.n	8005df2 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	3b01      	subs	r3, #1
 8005da4:	2b02      	cmp	r3, #2
 8005da6:	d81d      	bhi.n	8005de4 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	889b      	ldrh	r3, [r3, #4]
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d813      	bhi.n	8005dda <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	4798      	blx	r3
 8005dc0:	4603      	mov	r3, r0
 8005dc2:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	88db      	ldrh	r3, [r3, #6]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d110      	bne.n	8005dee <USBD_StdItfReq+0x7a>
 8005dcc:	7bfb      	ldrb	r3, [r7, #15]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d10d      	bne.n	8005dee <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f000 fd9d 	bl	8006912 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005dd8:	e009      	b.n	8005dee <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005dda:	6839      	ldr	r1, [r7, #0]
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fccd 	bl	800677c <USBD_CtlError>
          break;
 8005de2:	e004      	b.n	8005dee <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005de4:	6839      	ldr	r1, [r7, #0]
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f000 fcc8 	bl	800677c <USBD_CtlError>
          break;
 8005dec:	e000      	b.n	8005df0 <USBD_StdItfReq+0x7c>
          break;
 8005dee:	bf00      	nop
      }
      break;
 8005df0:	e004      	b.n	8005dfc <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005df2:	6839      	ldr	r1, [r7, #0]
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fcc1 	bl	800677c <USBD_CtlError>
      break;
 8005dfa:	bf00      	nop
  }

  return ret;
 8005dfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3710      	adds	r7, #16
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}

08005e06 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e06:	b580      	push	{r7, lr}
 8005e08:	b084      	sub	sp, #16
 8005e0a:	af00      	add	r7, sp, #0
 8005e0c:	6078      	str	r0, [r7, #4]
 8005e0e:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	889b      	ldrh	r3, [r3, #4]
 8005e18:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e22:	2b40      	cmp	r3, #64	; 0x40
 8005e24:	d007      	beq.n	8005e36 <USBD_StdEPReq+0x30>
 8005e26:	2b40      	cmp	r3, #64	; 0x40
 8005e28:	f200 8145 	bhi.w	80060b6 <USBD_StdEPReq+0x2b0>
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d00c      	beq.n	8005e4a <USBD_StdEPReq+0x44>
 8005e30:	2b20      	cmp	r3, #32
 8005e32:	f040 8140 	bne.w	80060b6 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	6839      	ldr	r1, [r7, #0]
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	4798      	blx	r3
 8005e44:	4603      	mov	r3, r0
 8005e46:	73fb      	strb	r3, [r7, #15]
      break;
 8005e48:	e13a      	b.n	80060c0 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	785b      	ldrb	r3, [r3, #1]
 8005e4e:	2b03      	cmp	r3, #3
 8005e50:	d007      	beq.n	8005e62 <USBD_StdEPReq+0x5c>
 8005e52:	2b03      	cmp	r3, #3
 8005e54:	f300 8129 	bgt.w	80060aa <USBD_StdEPReq+0x2a4>
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d07f      	beq.n	8005f5c <USBD_StdEPReq+0x156>
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d03c      	beq.n	8005eda <USBD_StdEPReq+0xd4>
 8005e60:	e123      	b.n	80060aa <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e68:	b2db      	uxtb	r3, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d002      	beq.n	8005e74 <USBD_StdEPReq+0x6e>
 8005e6e:	2b03      	cmp	r3, #3
 8005e70:	d016      	beq.n	8005ea0 <USBD_StdEPReq+0x9a>
 8005e72:	e02c      	b.n	8005ece <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e74:	7bbb      	ldrb	r3, [r7, #14]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00d      	beq.n	8005e96 <USBD_StdEPReq+0x90>
 8005e7a:	7bbb      	ldrb	r3, [r7, #14]
 8005e7c:	2b80      	cmp	r3, #128	; 0x80
 8005e7e:	d00a      	beq.n	8005e96 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e80:	7bbb      	ldrb	r3, [r7, #14]
 8005e82:	4619      	mov	r1, r3
 8005e84:	6878      	ldr	r0, [r7, #4]
 8005e86:	f001 fa19 	bl	80072bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e8a:	2180      	movs	r1, #128	; 0x80
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f001 fa15 	bl	80072bc <USBD_LL_StallEP>
 8005e92:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e94:	e020      	b.n	8005ed8 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 fc6f 	bl	800677c <USBD_CtlError>
              break;
 8005e9e:	e01b      	b.n	8005ed8 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	885b      	ldrh	r3, [r3, #2]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10e      	bne.n	8005ec6 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ea8:	7bbb      	ldrb	r3, [r7, #14]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d00b      	beq.n	8005ec6 <USBD_StdEPReq+0xc0>
 8005eae:	7bbb      	ldrb	r3, [r7, #14]
 8005eb0:	2b80      	cmp	r3, #128	; 0x80
 8005eb2:	d008      	beq.n	8005ec6 <USBD_StdEPReq+0xc0>
 8005eb4:	683b      	ldr	r3, [r7, #0]
 8005eb6:	88db      	ldrh	r3, [r3, #6]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d104      	bne.n	8005ec6 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ebc:	7bbb      	ldrb	r3, [r7, #14]
 8005ebe:	4619      	mov	r1, r3
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f001 f9fb 	bl	80072bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fd23 	bl	8006912 <USBD_CtlSendStatus>

              break;
 8005ecc:	e004      	b.n	8005ed8 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005ece:	6839      	ldr	r1, [r7, #0]
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f000 fc53 	bl	800677c <USBD_CtlError>
              break;
 8005ed6:	bf00      	nop
          }
          break;
 8005ed8:	e0ec      	b.n	80060b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ee0:	b2db      	uxtb	r3, r3
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d002      	beq.n	8005eec <USBD_StdEPReq+0xe6>
 8005ee6:	2b03      	cmp	r3, #3
 8005ee8:	d016      	beq.n	8005f18 <USBD_StdEPReq+0x112>
 8005eea:	e030      	b.n	8005f4e <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005eec:	7bbb      	ldrb	r3, [r7, #14]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d00d      	beq.n	8005f0e <USBD_StdEPReq+0x108>
 8005ef2:	7bbb      	ldrb	r3, [r7, #14]
 8005ef4:	2b80      	cmp	r3, #128	; 0x80
 8005ef6:	d00a      	beq.n	8005f0e <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ef8:	7bbb      	ldrb	r3, [r7, #14]
 8005efa:	4619      	mov	r1, r3
 8005efc:	6878      	ldr	r0, [r7, #4]
 8005efe:	f001 f9dd 	bl	80072bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f02:	2180      	movs	r1, #128	; 0x80
 8005f04:	6878      	ldr	r0, [r7, #4]
 8005f06:	f001 f9d9 	bl	80072bc <USBD_LL_StallEP>
 8005f0a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005f0c:	e025      	b.n	8005f5a <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fc33 	bl	800677c <USBD_CtlError>
              break;
 8005f16:	e020      	b.n	8005f5a <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	885b      	ldrh	r3, [r3, #2]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	d11b      	bne.n	8005f58 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005f20:	7bbb      	ldrb	r3, [r7, #14]
 8005f22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d004      	beq.n	8005f34 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005f2a:	7bbb      	ldrb	r3, [r7, #14]
 8005f2c:	4619      	mov	r1, r3
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f001 f9fa 	bl	8007328 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005f34:	6878      	ldr	r0, [r7, #4]
 8005f36:	f000 fcec 	bl	8006912 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f40:	689b      	ldr	r3, [r3, #8]
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	4798      	blx	r3
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005f4c:	e004      	b.n	8005f58 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005f4e:	6839      	ldr	r1, [r7, #0]
 8005f50:	6878      	ldr	r0, [r7, #4]
 8005f52:	f000 fc13 	bl	800677c <USBD_CtlError>
              break;
 8005f56:	e000      	b.n	8005f5a <USBD_StdEPReq+0x154>
              break;
 8005f58:	bf00      	nop
          }
          break;
 8005f5a:	e0ab      	b.n	80060b4 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	2b02      	cmp	r3, #2
 8005f66:	d002      	beq.n	8005f6e <USBD_StdEPReq+0x168>
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d032      	beq.n	8005fd2 <USBD_StdEPReq+0x1cc>
 8005f6c:	e097      	b.n	800609e <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005f6e:	7bbb      	ldrb	r3, [r7, #14]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d007      	beq.n	8005f84 <USBD_StdEPReq+0x17e>
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	2b80      	cmp	r3, #128	; 0x80
 8005f78:	d004      	beq.n	8005f84 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005f7a:	6839      	ldr	r1, [r7, #0]
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f000 fbfd 	bl	800677c <USBD_CtlError>
                break;
 8005f82:	e091      	b.n	80060a8 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	da0b      	bge.n	8005fa4 <USBD_StdEPReq+0x19e>
 8005f8c:	7bbb      	ldrb	r3, [r7, #14]
 8005f8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f92:	4613      	mov	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	4413      	add	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	3310      	adds	r3, #16
 8005f9c:	687a      	ldr	r2, [r7, #4]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	e00b      	b.n	8005fbc <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005fa4:	7bbb      	ldrb	r3, [r7, #14]
 8005fa6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005faa:	4613      	mov	r3, r2
 8005fac:	009b      	lsls	r3, r3, #2
 8005fae:	4413      	add	r3, r2
 8005fb0:	009b      	lsls	r3, r3, #2
 8005fb2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005fb6:	687a      	ldr	r2, [r7, #4]
 8005fb8:	4413      	add	r3, r2
 8005fba:	3304      	adds	r3, #4
 8005fbc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	2202      	movs	r2, #2
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f000 fc47 	bl	800685e <USBD_CtlSendData>
              break;
 8005fd0:	e06a      	b.n	80060a8 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005fd2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	da11      	bge.n	8005ffe <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005fda:	7bbb      	ldrb	r3, [r7, #14]
 8005fdc:	f003 020f 	and.w	r2, r3, #15
 8005fe0:	6879      	ldr	r1, [r7, #4]
 8005fe2:	4613      	mov	r3, r2
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	4413      	add	r3, r2
 8005fe8:	009b      	lsls	r3, r3, #2
 8005fea:	440b      	add	r3, r1
 8005fec:	3324      	adds	r3, #36	; 0x24
 8005fee:	881b      	ldrh	r3, [r3, #0]
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d117      	bne.n	8006024 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fbc0 	bl	800677c <USBD_CtlError>
                  break;
 8005ffc:	e054      	b.n	80060a8 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ffe:	7bbb      	ldrb	r3, [r7, #14]
 8006000:	f003 020f 	and.w	r2, r3, #15
 8006004:	6879      	ldr	r1, [r7, #4]
 8006006:	4613      	mov	r3, r2
 8006008:	009b      	lsls	r3, r3, #2
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	440b      	add	r3, r1
 8006010:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d104      	bne.n	8006024 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 800601a:	6839      	ldr	r1, [r7, #0]
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fbad 	bl	800677c <USBD_CtlError>
                  break;
 8006022:	e041      	b.n	80060a8 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006024:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006028:	2b00      	cmp	r3, #0
 800602a:	da0b      	bge.n	8006044 <USBD_StdEPReq+0x23e>
 800602c:	7bbb      	ldrb	r3, [r7, #14]
 800602e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006032:	4613      	mov	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4413      	add	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	3310      	adds	r3, #16
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	4413      	add	r3, r2
 8006040:	3304      	adds	r3, #4
 8006042:	e00b      	b.n	800605c <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006044:	7bbb      	ldrb	r3, [r7, #14]
 8006046:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800604a:	4613      	mov	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	4413      	add	r3, r2
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	4413      	add	r3, r2
 800605a:	3304      	adds	r3, #4
 800605c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800605e:	7bbb      	ldrb	r3, [r7, #14]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <USBD_StdEPReq+0x264>
 8006064:	7bbb      	ldrb	r3, [r7, #14]
 8006066:	2b80      	cmp	r3, #128	; 0x80
 8006068:	d103      	bne.n	8006072 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	2200      	movs	r2, #0
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	e00e      	b.n	8006090 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f001 f98c 	bl	8007394 <USBD_LL_IsStallEP>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d003      	beq.n	800608a <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	2201      	movs	r2, #1
 8006086:	601a      	str	r2, [r3, #0]
 8006088:	e002      	b.n	8006090 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2200      	movs	r2, #0
 800608e:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	2202      	movs	r2, #2
 8006094:	4619      	mov	r1, r3
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f000 fbe1 	bl	800685e <USBD_CtlSendData>
              break;
 800609c:	e004      	b.n	80060a8 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 fb6b 	bl	800677c <USBD_CtlError>
              break;
 80060a6:	bf00      	nop
          }
          break;
 80060a8:	e004      	b.n	80060b4 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fb65 	bl	800677c <USBD_CtlError>
          break;
 80060b2:	bf00      	nop
      }
      break;
 80060b4:	e004      	b.n	80060c0 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 80060b6:	6839      	ldr	r1, [r7, #0]
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fb5f 	bl	800677c <USBD_CtlError>
      break;
 80060be:	bf00      	nop
  }

  return ret;
 80060c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c2:	4618      	mov	r0, r3
 80060c4:	3710      	adds	r7, #16
 80060c6:	46bd      	mov	sp, r7
 80060c8:	bd80      	pop	{r7, pc}
	...

080060cc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80060cc:	b580      	push	{r7, lr}
 80060ce:	b084      	sub	sp, #16
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
 80060d4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80060d6:	2300      	movs	r3, #0
 80060d8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80060da:	2300      	movs	r3, #0
 80060dc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80060de:	2300      	movs	r3, #0
 80060e0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	885b      	ldrh	r3, [r3, #2]
 80060e6:	0a1b      	lsrs	r3, r3, #8
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	3b01      	subs	r3, #1
 80060ec:	2b0e      	cmp	r3, #14
 80060ee:	f200 8152 	bhi.w	8006396 <USBD_GetDescriptor+0x2ca>
 80060f2:	a201      	add	r2, pc, #4	; (adr r2, 80060f8 <USBD_GetDescriptor+0x2c>)
 80060f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f8:	08006169 	.word	0x08006169
 80060fc:	08006181 	.word	0x08006181
 8006100:	080061c1 	.word	0x080061c1
 8006104:	08006397 	.word	0x08006397
 8006108:	08006397 	.word	0x08006397
 800610c:	08006337 	.word	0x08006337
 8006110:	08006363 	.word	0x08006363
 8006114:	08006397 	.word	0x08006397
 8006118:	08006397 	.word	0x08006397
 800611c:	08006397 	.word	0x08006397
 8006120:	08006397 	.word	0x08006397
 8006124:	08006397 	.word	0x08006397
 8006128:	08006397 	.word	0x08006397
 800612c:	08006397 	.word	0x08006397
 8006130:	08006135 	.word	0x08006135
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800613a:	69db      	ldr	r3, [r3, #28]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006146:	69db      	ldr	r3, [r3, #28]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	7c12      	ldrb	r2, [r2, #16]
 800614c:	f107 0108 	add.w	r1, r7, #8
 8006150:	4610      	mov	r0, r2
 8006152:	4798      	blx	r3
 8006154:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006156:	e126      	b.n	80063a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fb0e 	bl	800677c <USBD_CtlError>
        err++;
 8006160:	7afb      	ldrb	r3, [r7, #11]
 8006162:	3301      	adds	r3, #1
 8006164:	72fb      	strb	r3, [r7, #11]
      break;
 8006166:	e11e      	b.n	80063a6 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	687a      	ldr	r2, [r7, #4]
 8006172:	7c12      	ldrb	r2, [r2, #16]
 8006174:	f107 0108 	add.w	r1, r7, #8
 8006178:	4610      	mov	r0, r2
 800617a:	4798      	blx	r3
 800617c:	60f8      	str	r0, [r7, #12]
      break;
 800617e:	e112      	b.n	80063a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	7c1b      	ldrb	r3, [r3, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d10d      	bne.n	80061a4 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	f107 0208 	add.w	r2, r7, #8
 8006194:	4610      	mov	r0, r2
 8006196:	4798      	blx	r3
 8006198:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	2202      	movs	r2, #2
 80061a0:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80061a2:	e100      	b.n	80063a6 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	f107 0208 	add.w	r2, r7, #8
 80061b0:	4610      	mov	r0, r2
 80061b2:	4798      	blx	r3
 80061b4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	3301      	adds	r3, #1
 80061ba:	2202      	movs	r2, #2
 80061bc:	701a      	strb	r2, [r3, #0]
      break;
 80061be:	e0f2      	b.n	80063a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	885b      	ldrh	r3, [r3, #2]
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b05      	cmp	r3, #5
 80061c8:	f200 80ac 	bhi.w	8006324 <USBD_GetDescriptor+0x258>
 80061cc:	a201      	add	r2, pc, #4	; (adr r2, 80061d4 <USBD_GetDescriptor+0x108>)
 80061ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061d2:	bf00      	nop
 80061d4:	080061ed 	.word	0x080061ed
 80061d8:	08006221 	.word	0x08006221
 80061dc:	08006255 	.word	0x08006255
 80061e0:	08006289 	.word	0x08006289
 80061e4:	080062bd 	.word	0x080062bd
 80061e8:	080062f1 	.word	0x080062f1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061f2:	685b      	ldr	r3, [r3, #4]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d00b      	beq.n	8006210 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061fe:	685b      	ldr	r3, [r3, #4]
 8006200:	687a      	ldr	r2, [r7, #4]
 8006202:	7c12      	ldrb	r2, [r2, #16]
 8006204:	f107 0108 	add.w	r1, r7, #8
 8006208:	4610      	mov	r0, r2
 800620a:	4798      	blx	r3
 800620c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800620e:	e091      	b.n	8006334 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 fab2 	bl	800677c <USBD_CtlError>
            err++;
 8006218:	7afb      	ldrb	r3, [r7, #11]
 800621a:	3301      	adds	r3, #1
 800621c:	72fb      	strb	r3, [r7, #11]
          break;
 800621e:	e089      	b.n	8006334 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00b      	beq.n	8006244 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	687a      	ldr	r2, [r7, #4]
 8006236:	7c12      	ldrb	r2, [r2, #16]
 8006238:	f107 0108 	add.w	r1, r7, #8
 800623c:	4610      	mov	r0, r2
 800623e:	4798      	blx	r3
 8006240:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006242:	e077      	b.n	8006334 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006244:	6839      	ldr	r1, [r7, #0]
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa98 	bl	800677c <USBD_CtlError>
            err++;
 800624c:	7afb      	ldrb	r3, [r7, #11]
 800624e:	3301      	adds	r3, #1
 8006250:	72fb      	strb	r3, [r7, #11]
          break;
 8006252:	e06f      	b.n	8006334 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800625a:	68db      	ldr	r3, [r3, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d00b      	beq.n	8006278 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	7c12      	ldrb	r2, [r2, #16]
 800626c:	f107 0108 	add.w	r1, r7, #8
 8006270:	4610      	mov	r0, r2
 8006272:	4798      	blx	r3
 8006274:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006276:	e05d      	b.n	8006334 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006278:	6839      	ldr	r1, [r7, #0]
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 fa7e 	bl	800677c <USBD_CtlError>
            err++;
 8006280:	7afb      	ldrb	r3, [r7, #11]
 8006282:	3301      	adds	r3, #1
 8006284:	72fb      	strb	r3, [r7, #11]
          break;
 8006286:	e055      	b.n	8006334 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800628e:	691b      	ldr	r3, [r3, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d00b      	beq.n	80062ac <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800629a:	691b      	ldr	r3, [r3, #16]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	7c12      	ldrb	r2, [r2, #16]
 80062a0:	f107 0108 	add.w	r1, r7, #8
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062aa:	e043      	b.n	8006334 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fa64 	bl	800677c <USBD_CtlError>
            err++;
 80062b4:	7afb      	ldrb	r3, [r7, #11]
 80062b6:	3301      	adds	r3, #1
 80062b8:	72fb      	strb	r3, [r7, #11]
          break;
 80062ba:	e03b      	b.n	8006334 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d00b      	beq.n	80062e0 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062ce:	695b      	ldr	r3, [r3, #20]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	7c12      	ldrb	r2, [r2, #16]
 80062d4:	f107 0108 	add.w	r1, r7, #8
 80062d8:	4610      	mov	r0, r2
 80062da:	4798      	blx	r3
 80062dc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80062de:	e029      	b.n	8006334 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80062e0:	6839      	ldr	r1, [r7, #0]
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa4a 	bl	800677c <USBD_CtlError>
            err++;
 80062e8:	7afb      	ldrb	r3, [r7, #11]
 80062ea:	3301      	adds	r3, #1
 80062ec:	72fb      	strb	r3, [r7, #11]
          break;
 80062ee:	e021      	b.n	8006334 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80062f6:	699b      	ldr	r3, [r3, #24]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00b      	beq.n	8006314 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006302:	699b      	ldr	r3, [r3, #24]
 8006304:	687a      	ldr	r2, [r7, #4]
 8006306:	7c12      	ldrb	r2, [r2, #16]
 8006308:	f107 0108 	add.w	r1, r7, #8
 800630c:	4610      	mov	r0, r2
 800630e:	4798      	blx	r3
 8006310:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006312:	e00f      	b.n	8006334 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006314:	6839      	ldr	r1, [r7, #0]
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fa30 	bl	800677c <USBD_CtlError>
            err++;
 800631c:	7afb      	ldrb	r3, [r7, #11]
 800631e:	3301      	adds	r3, #1
 8006320:	72fb      	strb	r3, [r7, #11]
          break;
 8006322:	e007      	b.n	8006334 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006324:	6839      	ldr	r1, [r7, #0]
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 fa28 	bl	800677c <USBD_CtlError>
          err++;
 800632c:	7afb      	ldrb	r3, [r7, #11]
 800632e:	3301      	adds	r3, #1
 8006330:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006332:	bf00      	nop
      }
      break;
 8006334:	e037      	b.n	80063a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	7c1b      	ldrb	r3, [r3, #16]
 800633a:	2b00      	cmp	r3, #0
 800633c:	d109      	bne.n	8006352 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006344:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006346:	f107 0208 	add.w	r2, r7, #8
 800634a:	4610      	mov	r0, r2
 800634c:	4798      	blx	r3
 800634e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006350:	e029      	b.n	80063a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fa11 	bl	800677c <USBD_CtlError>
        err++;
 800635a:	7afb      	ldrb	r3, [r7, #11]
 800635c:	3301      	adds	r3, #1
 800635e:	72fb      	strb	r3, [r7, #11]
      break;
 8006360:	e021      	b.n	80063a6 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	7c1b      	ldrb	r3, [r3, #16]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d10d      	bne.n	8006386 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006372:	f107 0208 	add.w	r2, r7, #8
 8006376:	4610      	mov	r0, r2
 8006378:	4798      	blx	r3
 800637a:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	3301      	adds	r3, #1
 8006380:	2207      	movs	r2, #7
 8006382:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006384:	e00f      	b.n	80063a6 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006386:	6839      	ldr	r1, [r7, #0]
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 f9f7 	bl	800677c <USBD_CtlError>
        err++;
 800638e:	7afb      	ldrb	r3, [r7, #11]
 8006390:	3301      	adds	r3, #1
 8006392:	72fb      	strb	r3, [r7, #11]
      break;
 8006394:	e007      	b.n	80063a6 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8006396:	6839      	ldr	r1, [r7, #0]
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 f9ef 	bl	800677c <USBD_CtlError>
      err++;
 800639e:	7afb      	ldrb	r3, [r7, #11]
 80063a0:	3301      	adds	r3, #1
 80063a2:	72fb      	strb	r3, [r7, #11]
      break;
 80063a4:	bf00      	nop
  }

  if (err != 0U)
 80063a6:	7afb      	ldrb	r3, [r7, #11]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d11e      	bne.n	80063ea <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	88db      	ldrh	r3, [r3, #6]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d016      	beq.n	80063e2 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80063b4:	893b      	ldrh	r3, [r7, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d00e      	beq.n	80063d8 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	88da      	ldrh	r2, [r3, #6]
 80063be:	893b      	ldrh	r3, [r7, #8]
 80063c0:	4293      	cmp	r3, r2
 80063c2:	bf28      	it	cs
 80063c4:	4613      	movcs	r3, r2
 80063c6:	b29b      	uxth	r3, r3
 80063c8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80063ca:	893b      	ldrh	r3, [r7, #8]
 80063cc:	461a      	mov	r2, r3
 80063ce:	68f9      	ldr	r1, [r7, #12]
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	f000 fa44 	bl	800685e <USBD_CtlSendData>
 80063d6:	e009      	b.n	80063ec <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f9ce 	bl	800677c <USBD_CtlError>
 80063e0:	e004      	b.n	80063ec <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa95 	bl	8006912 <USBD_CtlSendStatus>
 80063e8:	e000      	b.n	80063ec <USBD_GetDescriptor+0x320>
    return;
 80063ea:	bf00      	nop
  }
}
 80063ec:	3710      	adds	r7, #16
 80063ee:	46bd      	mov	sp, r7
 80063f0:	bd80      	pop	{r7, pc}
 80063f2:	bf00      	nop

080063f4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063f4:	b580      	push	{r7, lr}
 80063f6:	b084      	sub	sp, #16
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	889b      	ldrh	r3, [r3, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d131      	bne.n	800646a <USBD_SetAddress+0x76>
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	88db      	ldrh	r3, [r3, #6]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d12d      	bne.n	800646a <USBD_SetAddress+0x76>
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	885b      	ldrh	r3, [r3, #2]
 8006412:	2b7f      	cmp	r3, #127	; 0x7f
 8006414:	d829      	bhi.n	800646a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	885b      	ldrh	r3, [r3, #2]
 800641a:	b2db      	uxtb	r3, r3
 800641c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006420:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2b03      	cmp	r3, #3
 800642c:	d104      	bne.n	8006438 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800642e:	6839      	ldr	r1, [r7, #0]
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f9a3 	bl	800677c <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006436:	e01d      	b.n	8006474 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	7bfa      	ldrb	r2, [r7, #15]
 800643c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006440:	7bfb      	ldrb	r3, [r7, #15]
 8006442:	4619      	mov	r1, r3
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 ffd1 	bl	80073ec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800644a:	6878      	ldr	r0, [r7, #4]
 800644c:	f000 fa61 	bl	8006912 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006450:	7bfb      	ldrb	r3, [r7, #15]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d004      	beq.n	8006460 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2202      	movs	r2, #2
 800645a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800645e:	e009      	b.n	8006474 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006468:	e004      	b.n	8006474 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800646a:	6839      	ldr	r1, [r7, #0]
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 f985 	bl	800677c <USBD_CtlError>
  }
}
 8006472:	bf00      	nop
 8006474:	bf00      	nop
 8006476:	3710      	adds	r7, #16
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006486:	2300      	movs	r3, #0
 8006488:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	885b      	ldrh	r3, [r3, #2]
 800648e:	b2da      	uxtb	r2, r3
 8006490:	4b4c      	ldr	r3, [pc, #304]	; (80065c4 <USBD_SetConfig+0x148>)
 8006492:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006494:	4b4b      	ldr	r3, [pc, #300]	; (80065c4 <USBD_SetConfig+0x148>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	2b01      	cmp	r3, #1
 800649a:	d905      	bls.n	80064a8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800649c:	6839      	ldr	r1, [r7, #0]
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f96c 	bl	800677c <USBD_CtlError>
    return USBD_FAIL;
 80064a4:	2303      	movs	r3, #3
 80064a6:	e088      	b.n	80065ba <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	2b02      	cmp	r3, #2
 80064b2:	d002      	beq.n	80064ba <USBD_SetConfig+0x3e>
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d025      	beq.n	8006504 <USBD_SetConfig+0x88>
 80064b8:	e071      	b.n	800659e <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80064ba:	4b42      	ldr	r3, [pc, #264]	; (80065c4 <USBD_SetConfig+0x148>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d01c      	beq.n	80064fc <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80064c2:	4b40      	ldr	r3, [pc, #256]	; (80065c4 <USBD_SetConfig+0x148>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	461a      	mov	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80064cc:	4b3d      	ldr	r3, [pc, #244]	; (80065c4 <USBD_SetConfig+0x148>)
 80064ce:	781b      	ldrb	r3, [r3, #0]
 80064d0:	4619      	mov	r1, r3
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f7ff f91e 	bl	8005714 <USBD_SetClassConfig>
 80064d8:	4603      	mov	r3, r0
 80064da:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80064dc:	7bfb      	ldrb	r3, [r7, #15]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d004      	beq.n	80064ec <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80064e2:	6839      	ldr	r1, [r7, #0]
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 f949 	bl	800677c <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80064ea:	e065      	b.n	80065b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 fa10 	bl	8006912 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2203      	movs	r2, #3
 80064f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80064fa:	e05d      	b.n	80065b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa08 	bl	8006912 <USBD_CtlSendStatus>
      break;
 8006502:	e059      	b.n	80065b8 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006504:	4b2f      	ldr	r3, [pc, #188]	; (80065c4 <USBD_SetConfig+0x148>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d112      	bne.n	8006532 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2202      	movs	r2, #2
 8006510:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006514:	4b2b      	ldr	r3, [pc, #172]	; (80065c4 <USBD_SetConfig+0x148>)
 8006516:	781b      	ldrb	r3, [r3, #0]
 8006518:	461a      	mov	r2, r3
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800651e:	4b29      	ldr	r3, [pc, #164]	; (80065c4 <USBD_SetConfig+0x148>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	4619      	mov	r1, r3
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f7ff f911 	bl	800574c <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 f9f1 	bl	8006912 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006530:	e042      	b.n	80065b8 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006532:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <USBD_SetConfig+0x148>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	461a      	mov	r2, r3
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	685b      	ldr	r3, [r3, #4]
 800653c:	429a      	cmp	r2, r3
 800653e:	d02a      	beq.n	8006596 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	685b      	ldr	r3, [r3, #4]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f7ff f8ff 	bl	800574c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800654e:	4b1d      	ldr	r3, [pc, #116]	; (80065c4 <USBD_SetConfig+0x148>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	461a      	mov	r2, r3
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006558:	4b1a      	ldr	r3, [pc, #104]	; (80065c4 <USBD_SetConfig+0x148>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	4619      	mov	r1, r3
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7ff f8d8 	bl	8005714 <USBD_SetClassConfig>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d00f      	beq.n	800658e <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 f903 	bl	800677c <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	b2db      	uxtb	r3, r3
 800657c:	4619      	mov	r1, r3
 800657e:	6878      	ldr	r0, [r7, #4]
 8006580:	f7ff f8e4 	bl	800574c <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800658c:	e014      	b.n	80065b8 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	f000 f9bf 	bl	8006912 <USBD_CtlSendStatus>
      break;
 8006594:	e010      	b.n	80065b8 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f9bb 	bl	8006912 <USBD_CtlSendStatus>
      break;
 800659c:	e00c      	b.n	80065b8 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f8eb 	bl	800677c <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80065a6:	4b07      	ldr	r3, [pc, #28]	; (80065c4 <USBD_SetConfig+0x148>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	4619      	mov	r1, r3
 80065ac:	6878      	ldr	r0, [r7, #4]
 80065ae:	f7ff f8cd 	bl	800574c <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80065b2:	2303      	movs	r3, #3
 80065b4:	73fb      	strb	r3, [r7, #15]
      break;
 80065b6:	bf00      	nop
  }

  return ret;
 80065b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000218 	.word	0x20000218

080065c8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	88db      	ldrh	r3, [r3, #6]
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d004      	beq.n	80065e4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80065da:	6839      	ldr	r1, [r7, #0]
 80065dc:	6878      	ldr	r0, [r7, #4]
 80065de:	f000 f8cd 	bl	800677c <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80065e2:	e023      	b.n	800662c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	dc02      	bgt.n	80065f6 <USBD_GetConfig+0x2e>
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	dc03      	bgt.n	80065fc <USBD_GetConfig+0x34>
 80065f4:	e015      	b.n	8006622 <USBD_GetConfig+0x5a>
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d00b      	beq.n	8006612 <USBD_GetConfig+0x4a>
 80065fa:	e012      	b.n	8006622 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	3308      	adds	r3, #8
 8006606:	2201      	movs	r2, #1
 8006608:	4619      	mov	r1, r3
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f927 	bl	800685e <USBD_CtlSendData>
        break;
 8006610:	e00c      	b.n	800662c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	3304      	adds	r3, #4
 8006616:	2201      	movs	r2, #1
 8006618:	4619      	mov	r1, r3
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 f91f 	bl	800685e <USBD_CtlSendData>
        break;
 8006620:	e004      	b.n	800662c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006622:	6839      	ldr	r1, [r7, #0]
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 f8a9 	bl	800677c <USBD_CtlError>
        break;
 800662a:	bf00      	nop
}
 800662c:	bf00      	nop
 800662e:	3708      	adds	r7, #8
 8006630:	46bd      	mov	sp, r7
 8006632:	bd80      	pop	{r7, pc}

08006634 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006644:	b2db      	uxtb	r3, r3
 8006646:	3b01      	subs	r3, #1
 8006648:	2b02      	cmp	r3, #2
 800664a:	d81e      	bhi.n	800668a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	88db      	ldrh	r3, [r3, #6]
 8006650:	2b02      	cmp	r3, #2
 8006652:	d004      	beq.n	800665e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006654:	6839      	ldr	r1, [r7, #0]
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f890 	bl	800677c <USBD_CtlError>
        break;
 800665c:	e01a      	b.n	8006694 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2201      	movs	r2, #1
 8006662:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800666a:	2b00      	cmp	r3, #0
 800666c:	d005      	beq.n	800667a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	68db      	ldr	r3, [r3, #12]
 8006672:	f043 0202 	orr.w	r2, r3, #2
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	330c      	adds	r3, #12
 800667e:	2202      	movs	r2, #2
 8006680:	4619      	mov	r1, r3
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8eb 	bl	800685e <USBD_CtlSendData>
      break;
 8006688:	e004      	b.n	8006694 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800668a:	6839      	ldr	r1, [r7, #0]
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	f000 f875 	bl	800677c <USBD_CtlError>
      break;
 8006692:	bf00      	nop
  }
}
 8006694:	bf00      	nop
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b082      	sub	sp, #8
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	885b      	ldrh	r3, [r3, #2]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d106      	bne.n	80066bc <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2201      	movs	r2, #1
 80066b2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f92b 	bl	8006912 <USBD_CtlSendStatus>
  }
}
 80066bc:	bf00      	nop
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
 80066cc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	3b01      	subs	r3, #1
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d80b      	bhi.n	80066f4 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	885b      	ldrh	r3, [r3, #2]
 80066e0:	2b01      	cmp	r3, #1
 80066e2:	d10c      	bne.n	80066fe <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80066ec:	6878      	ldr	r0, [r7, #4]
 80066ee:	f000 f910 	bl	8006912 <USBD_CtlSendStatus>
      }
      break;
 80066f2:	e004      	b.n	80066fe <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80066f4:	6839      	ldr	r1, [r7, #0]
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f840 	bl	800677c <USBD_CtlError>
      break;
 80066fc:	e000      	b.n	8006700 <USBD_ClrFeature+0x3c>
      break;
 80066fe:	bf00      	nop
  }
}
 8006700:	bf00      	nop
 8006702:	3708      	adds	r7, #8
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b084      	sub	sp, #16
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
 8006710:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006712:	683b      	ldr	r3, [r7, #0]
 8006714:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	781a      	ldrb	r2, [r3, #0]
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	3301      	adds	r3, #1
 8006722:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	781a      	ldrb	r2, [r3, #0]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	3301      	adds	r3, #1
 8006730:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff fa91 	bl	8005c5a <SWAPBYTE>
 8006738:	4603      	mov	r3, r0
 800673a:	461a      	mov	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	3301      	adds	r3, #1
 8006744:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	3301      	adds	r3, #1
 800674a:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800674c:	68f8      	ldr	r0, [r7, #12]
 800674e:	f7ff fa84 	bl	8005c5a <SWAPBYTE>
 8006752:	4603      	mov	r3, r0
 8006754:	461a      	mov	r2, r3
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	3301      	adds	r3, #1
 800675e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	3301      	adds	r3, #1
 8006764:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff fa77 	bl	8005c5a <SWAPBYTE>
 800676c:	4603      	mov	r3, r0
 800676e:	461a      	mov	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	80da      	strh	r2, [r3, #6]
}
 8006774:	bf00      	nop
 8006776:	3710      	adds	r7, #16
 8006778:	46bd      	mov	sp, r7
 800677a:	bd80      	pop	{r7, pc}

0800677c <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006786:	2180      	movs	r1, #128	; 0x80
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fd97 	bl	80072bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800678e:	2100      	movs	r1, #0
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fd93 	bl	80072bc <USBD_LL_StallEP>
}
 8006796:	bf00      	nop
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b086      	sub	sp, #24
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	60f8      	str	r0, [r7, #12]
 80067a6:	60b9      	str	r1, [r7, #8]
 80067a8:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80067aa:	2300      	movs	r3, #0
 80067ac:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d036      	beq.n	8006822 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80067b8:	6938      	ldr	r0, [r7, #16]
 80067ba:	f000 f836 	bl	800682a <USBD_GetLen>
 80067be:	4603      	mov	r3, r0
 80067c0:	3301      	adds	r3, #1
 80067c2:	b29b      	uxth	r3, r3
 80067c4:	005b      	lsls	r3, r3, #1
 80067c6:	b29a      	uxth	r2, r3
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80067cc:	7dfb      	ldrb	r3, [r7, #23]
 80067ce:	68ba      	ldr	r2, [r7, #8]
 80067d0:	4413      	add	r3, r2
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	7812      	ldrb	r2, [r2, #0]
 80067d6:	701a      	strb	r2, [r3, #0]
  idx++;
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
 80067da:	3301      	adds	r3, #1
 80067dc:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80067de:	7dfb      	ldrb	r3, [r7, #23]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	4413      	add	r3, r2
 80067e4:	2203      	movs	r2, #3
 80067e6:	701a      	strb	r2, [r3, #0]
  idx++;
 80067e8:	7dfb      	ldrb	r3, [r7, #23]
 80067ea:	3301      	adds	r3, #1
 80067ec:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80067ee:	e013      	b.n	8006818 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80067f0:	7dfb      	ldrb	r3, [r7, #23]
 80067f2:	68ba      	ldr	r2, [r7, #8]
 80067f4:	4413      	add	r3, r2
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	7812      	ldrb	r2, [r2, #0]
 80067fa:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	3301      	adds	r3, #1
 8006800:	613b      	str	r3, [r7, #16]
    idx++;
 8006802:	7dfb      	ldrb	r3, [r7, #23]
 8006804:	3301      	adds	r3, #1
 8006806:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006808:	7dfb      	ldrb	r3, [r7, #23]
 800680a:	68ba      	ldr	r2, [r7, #8]
 800680c:	4413      	add	r3, r2
 800680e:	2200      	movs	r2, #0
 8006810:	701a      	strb	r2, [r3, #0]
    idx++;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	3301      	adds	r3, #1
 8006816:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	781b      	ldrb	r3, [r3, #0]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d1e7      	bne.n	80067f0 <USBD_GetString+0x52>
 8006820:	e000      	b.n	8006824 <USBD_GetString+0x86>
    return;
 8006822:	bf00      	nop
  }
}
 8006824:	3718      	adds	r7, #24
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}

0800682a <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800682a:	b480      	push	{r7}
 800682c:	b085      	sub	sp, #20
 800682e:	af00      	add	r7, sp, #0
 8006830:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006832:	2300      	movs	r3, #0
 8006834:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800683a:	e005      	b.n	8006848 <USBD_GetLen+0x1e>
  {
    len++;
 800683c:	7bfb      	ldrb	r3, [r7, #15]
 800683e:	3301      	adds	r3, #1
 8006840:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006842:	68bb      	ldr	r3, [r7, #8]
 8006844:	3301      	adds	r3, #1
 8006846:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d1f5      	bne.n	800683c <USBD_GetLen+0x12>
  }

  return len;
 8006850:	7bfb      	ldrb	r3, [r7, #15]
}
 8006852:	4618      	mov	r0, r3
 8006854:	3714      	adds	r7, #20
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800685e:	b580      	push	{r7, lr}
 8006860:	b084      	sub	sp, #16
 8006862:	af00      	add	r7, sp, #0
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	60b9      	str	r1, [r7, #8]
 8006868:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	2202      	movs	r2, #2
 800686e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	687a      	ldr	r2, [r7, #4]
 8006876:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	687a      	ldr	r2, [r7, #4]
 800687c:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	68ba      	ldr	r2, [r7, #8]
 8006882:	2100      	movs	r1, #0
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 fde7 	bl	8007458 <USBD_LL_Transmit>

  return USBD_OK;
 800688a:	2300      	movs	r3, #0
}
 800688c:	4618      	mov	r0, r3
 800688e:	3710      	adds	r7, #16
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	60f8      	str	r0, [r7, #12]
 800689c:	60b9      	str	r1, [r7, #8]
 800689e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	2100      	movs	r1, #0
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 fdd6 	bl	8007458 <USBD_LL_Transmit>

  return USBD_OK;
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3710      	adds	r7, #16
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b084      	sub	sp, #16
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2203      	movs	r2, #3
 80068c6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	687a      	ldr	r2, [r7, #4]
 80068ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	687a      	ldr	r2, [r7, #4]
 80068d6:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	68ba      	ldr	r2, [r7, #8]
 80068de:	2100      	movs	r1, #0
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 fdf1 	bl	80074c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80068e6:	2300      	movs	r3, #0
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}

080068f0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	60f8      	str	r0, [r7, #12]
 80068f8:	60b9      	str	r1, [r7, #8]
 80068fa:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	2100      	movs	r1, #0
 8006902:	68f8      	ldr	r0, [r7, #12]
 8006904:	f000 fde0 	bl	80074c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3710      	adds	r7, #16
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	2204      	movs	r2, #4
 800691e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006922:	2300      	movs	r3, #0
 8006924:	2200      	movs	r2, #0
 8006926:	2100      	movs	r1, #0
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fd95 	bl	8007458 <USBD_LL_Transmit>

  return USBD_OK;
 800692e:	2300      	movs	r3, #0
}
 8006930:	4618      	mov	r0, r3
 8006932:	3708      	adds	r7, #8
 8006934:	46bd      	mov	sp, r7
 8006936:	bd80      	pop	{r7, pc}

08006938 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
 800693e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2205      	movs	r2, #5
 8006944:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006948:	2300      	movs	r3, #0
 800694a:	2200      	movs	r2, #0
 800694c:	2100      	movs	r1, #0
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 fdba 	bl	80074c8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3708      	adds	r7, #8
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006960:	b580      	push	{r7, lr}
 8006962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006964:	2200      	movs	r2, #0
 8006966:	4912      	ldr	r1, [pc, #72]	; (80069b0 <MX_USB_DEVICE_Init+0x50>)
 8006968:	4812      	ldr	r0, [pc, #72]	; (80069b4 <MX_USB_DEVICE_Init+0x54>)
 800696a:	f7fe fe65 	bl	8005638 <USBD_Init>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d001      	beq.n	8006978 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006974:	f7fa f8b5 	bl	8000ae2 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006978:	490f      	ldr	r1, [pc, #60]	; (80069b8 <MX_USB_DEVICE_Init+0x58>)
 800697a:	480e      	ldr	r0, [pc, #56]	; (80069b4 <MX_USB_DEVICE_Init+0x54>)
 800697c:	f7fe fe8c 	bl	8005698 <USBD_RegisterClass>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d001      	beq.n	800698a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006986:	f7fa f8ac 	bl	8000ae2 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800698a:	490c      	ldr	r1, [pc, #48]	; (80069bc <MX_USB_DEVICE_Init+0x5c>)
 800698c:	4809      	ldr	r0, [pc, #36]	; (80069b4 <MX_USB_DEVICE_Init+0x54>)
 800698e:	f7fe fdad 	bl	80054ec <USBD_CDC_RegisterInterface>
 8006992:	4603      	mov	r3, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	d001      	beq.n	800699c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006998:	f7fa f8a3 	bl	8000ae2 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800699c:	4805      	ldr	r0, [pc, #20]	; (80069b4 <MX_USB_DEVICE_Init+0x54>)
 800699e:	f7fe fea2 	bl	80056e6 <USBD_Start>
 80069a2:	4603      	mov	r3, r0
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d001      	beq.n	80069ac <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80069a8:	f7fa f89b 	bl	8000ae2 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80069ac:	bf00      	nop
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	20000154 	.word	0x20000154
 80069b4:	20000480 	.word	0x20000480
 80069b8:	2000003c 	.word	0x2000003c
 80069bc:	20000140 	.word	0x20000140

080069c0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80069c4:	2200      	movs	r2, #0
 80069c6:	4905      	ldr	r1, [pc, #20]	; (80069dc <CDC_Init_FS+0x1c>)
 80069c8:	4805      	ldr	r0, [pc, #20]	; (80069e0 <CDC_Init_FS+0x20>)
 80069ca:	f7fe fda4 	bl	8005516 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80069ce:	4905      	ldr	r1, [pc, #20]	; (80069e4 <CDC_Init_FS+0x24>)
 80069d0:	4803      	ldr	r0, [pc, #12]	; (80069e0 <CDC_Init_FS+0x20>)
 80069d2:	f7fe fdbe 	bl	8005552 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80069d6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80069d8:	4618      	mov	r0, r3
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	20000f50 	.word	0x20000f50
 80069e0:	20000480 	.word	0x20000480
 80069e4:	20000750 	.word	0x20000750

080069e8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80069ec:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	46bd      	mov	sp, r7
 80069f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f6:	4770      	bx	lr

080069f8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80069f8:	b480      	push	{r7}
 80069fa:	b083      	sub	sp, #12
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	4603      	mov	r3, r0
 8006a00:	6039      	str	r1, [r7, #0]
 8006a02:	71fb      	strb	r3, [r7, #7]
 8006a04:	4613      	mov	r3, r2
 8006a06:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8006a08:	79fb      	ldrb	r3, [r7, #7]
 8006a0a:	2b23      	cmp	r3, #35	; 0x23
 8006a0c:	d84a      	bhi.n	8006aa4 <CDC_Control_FS+0xac>
 8006a0e:	a201      	add	r2, pc, #4	; (adr r2, 8006a14 <CDC_Control_FS+0x1c>)
 8006a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a14:	08006aa5 	.word	0x08006aa5
 8006a18:	08006aa5 	.word	0x08006aa5
 8006a1c:	08006aa5 	.word	0x08006aa5
 8006a20:	08006aa5 	.word	0x08006aa5
 8006a24:	08006aa5 	.word	0x08006aa5
 8006a28:	08006aa5 	.word	0x08006aa5
 8006a2c:	08006aa5 	.word	0x08006aa5
 8006a30:	08006aa5 	.word	0x08006aa5
 8006a34:	08006aa5 	.word	0x08006aa5
 8006a38:	08006aa5 	.word	0x08006aa5
 8006a3c:	08006aa5 	.word	0x08006aa5
 8006a40:	08006aa5 	.word	0x08006aa5
 8006a44:	08006aa5 	.word	0x08006aa5
 8006a48:	08006aa5 	.word	0x08006aa5
 8006a4c:	08006aa5 	.word	0x08006aa5
 8006a50:	08006aa5 	.word	0x08006aa5
 8006a54:	08006aa5 	.word	0x08006aa5
 8006a58:	08006aa5 	.word	0x08006aa5
 8006a5c:	08006aa5 	.word	0x08006aa5
 8006a60:	08006aa5 	.word	0x08006aa5
 8006a64:	08006aa5 	.word	0x08006aa5
 8006a68:	08006aa5 	.word	0x08006aa5
 8006a6c:	08006aa5 	.word	0x08006aa5
 8006a70:	08006aa5 	.word	0x08006aa5
 8006a74:	08006aa5 	.word	0x08006aa5
 8006a78:	08006aa5 	.word	0x08006aa5
 8006a7c:	08006aa5 	.word	0x08006aa5
 8006a80:	08006aa5 	.word	0x08006aa5
 8006a84:	08006aa5 	.word	0x08006aa5
 8006a88:	08006aa5 	.word	0x08006aa5
 8006a8c:	08006aa5 	.word	0x08006aa5
 8006a90:	08006aa5 	.word	0x08006aa5
 8006a94:	08006aa5 	.word	0x08006aa5
 8006a98:	08006aa5 	.word	0x08006aa5
 8006a9c:	08006aa5 	.word	0x08006aa5
 8006aa0:	08006aa5 	.word	0x08006aa5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006aa4:	bf00      	nop
  }

  return (USBD_OK);
 8006aa6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	370c      	adds	r7, #12
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <CDC_Receive_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
#define buffergroesse 64
extern uint8_t bufferdata[buffergroesse];
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006abe:	6879      	ldr	r1, [r7, #4]
 8006ac0:	480c      	ldr	r0, [pc, #48]	; (8006af4 <CDC_Receive_FS+0x40>)
 8006ac2:	f7fe fd46 	bl	8005552 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006ac6:	480b      	ldr	r0, [pc, #44]	; (8006af4 <CDC_Receive_FS+0x40>)
 8006ac8:	f7fe fd8c 	bl	80055e4 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	73fb      	strb	r3, [r7, #15]

  memcpy (bufferdata,Buf,len);
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	4807      	ldr	r0, [pc, #28]	; (8006af8 <CDC_Receive_FS+0x44>)
 8006ada:	f000 fdd1 	bl	8007680 <memcpy>
  memset (Buf,'\0', len);
 8006ade:	7bfb      	ldrb	r3, [r7, #15]
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 fdd9 	bl	800769c <memset>

  return (USBD_OK);
 8006aea:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	20000480 	.word	0x20000480
 8006af8:	2000043c 	.word	0x2000043c

08006afc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b084      	sub	sp, #16
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006b0c:	4b0d      	ldr	r3, [pc, #52]	; (8006b44 <CDC_Transmit_FS+0x48>)
 8006b0e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006b12:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d001      	beq.n	8006b22 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	e00b      	b.n	8006b3a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006b22:	887b      	ldrh	r3, [r7, #2]
 8006b24:	461a      	mov	r2, r3
 8006b26:	6879      	ldr	r1, [r7, #4]
 8006b28:	4806      	ldr	r0, [pc, #24]	; (8006b44 <CDC_Transmit_FS+0x48>)
 8006b2a:	f7fe fcf4 	bl	8005516 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006b2e:	4805      	ldr	r0, [pc, #20]	; (8006b44 <CDC_Transmit_FS+0x48>)
 8006b30:	f7fe fd28 	bl	8005584 <USBD_CDC_TransmitPacket>
 8006b34:	4603      	mov	r3, r0
 8006b36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b3a:	4618      	mov	r0, r3
 8006b3c:	3710      	adds	r7, #16
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}
 8006b42:	bf00      	nop
 8006b44:	20000480 	.word	0x20000480

08006b48 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b087      	sub	sp, #28
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	60f8      	str	r0, [r7, #12]
 8006b50:	60b9      	str	r1, [r7, #8]
 8006b52:	4613      	mov	r3, r2
 8006b54:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006b56:	2300      	movs	r3, #0
 8006b58:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006b5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006b5e:	4618      	mov	r0, r3
 8006b60:	371c      	adds	r7, #28
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
	...

08006b6c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	4603      	mov	r3, r0
 8006b74:	6039      	str	r1, [r7, #0]
 8006b76:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	2212      	movs	r2, #18
 8006b7c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006b7e:	4b03      	ldr	r3, [pc, #12]	; (8006b8c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006b80:	4618      	mov	r0, r3
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr
 8006b8c:	20000174 	.word	0x20000174

08006b90 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	4603      	mov	r3, r0
 8006b98:	6039      	str	r1, [r7, #0]
 8006b9a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2204      	movs	r2, #4
 8006ba0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ba2:	4b03      	ldr	r3, [pc, #12]	; (8006bb0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	370c      	adds	r7, #12
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	20000194 	.word	0x20000194

08006bb4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bb4:	b580      	push	{r7, lr}
 8006bb6:	b082      	sub	sp, #8
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	4603      	mov	r3, r0
 8006bbc:	6039      	str	r1, [r7, #0]
 8006bbe:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006bc0:	79fb      	ldrb	r3, [r7, #7]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d105      	bne.n	8006bd2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	4907      	ldr	r1, [pc, #28]	; (8006be8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bca:	4808      	ldr	r0, [pc, #32]	; (8006bec <USBD_FS_ProductStrDescriptor+0x38>)
 8006bcc:	f7ff fde7 	bl	800679e <USBD_GetString>
 8006bd0:	e004      	b.n	8006bdc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	4904      	ldr	r1, [pc, #16]	; (8006be8 <USBD_FS_ProductStrDescriptor+0x34>)
 8006bd6:	4805      	ldr	r0, [pc, #20]	; (8006bec <USBD_FS_ProductStrDescriptor+0x38>)
 8006bd8:	f7ff fde1 	bl	800679e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bdc:	4b02      	ldr	r3, [pc, #8]	; (8006be8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3708      	adds	r7, #8
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20001750 	.word	0x20001750
 8006bec:	080077e4 	.word	0x080077e4

08006bf0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	6039      	str	r1, [r7, #0]
 8006bfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	4904      	ldr	r1, [pc, #16]	; (8006c10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006c00:	4804      	ldr	r0, [pc, #16]	; (8006c14 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006c02:	f7ff fdcc 	bl	800679e <USBD_GetString>
  return USBD_StrDesc;
 8006c06:	4b02      	ldr	r3, [pc, #8]	; (8006c10 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20001750 	.word	0x20001750
 8006c14:	080077fc 	.word	0x080077fc

08006c18 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	4603      	mov	r3, r0
 8006c20:	6039      	str	r1, [r7, #0]
 8006c22:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	221a      	movs	r2, #26
 8006c28:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006c2a:	f000 f855 	bl	8006cd8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006c2e:	4b02      	ldr	r3, [pc, #8]	; (8006c38 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006c30:	4618      	mov	r0, r3
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}
 8006c38:	20000198 	.word	0x20000198

08006c3c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b082      	sub	sp, #8
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	4603      	mov	r3, r0
 8006c44:	6039      	str	r1, [r7, #0]
 8006c46:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006c48:	79fb      	ldrb	r3, [r7, #7]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d105      	bne.n	8006c5a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	4907      	ldr	r1, [pc, #28]	; (8006c70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c52:	4808      	ldr	r0, [pc, #32]	; (8006c74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c54:	f7ff fda3 	bl	800679e <USBD_GetString>
 8006c58:	e004      	b.n	8006c64 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006c5a:	683a      	ldr	r2, [r7, #0]
 8006c5c:	4904      	ldr	r1, [pc, #16]	; (8006c70 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006c5e:	4805      	ldr	r0, [pc, #20]	; (8006c74 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006c60:	f7ff fd9d 	bl	800679e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c64:	4b02      	ldr	r3, [pc, #8]	; (8006c70 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3708      	adds	r7, #8
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}
 8006c6e:	bf00      	nop
 8006c70:	20001750 	.word	0x20001750
 8006c74:	08007810 	.word	0x08007810

08006c78 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	4603      	mov	r3, r0
 8006c80:	6039      	str	r1, [r7, #0]
 8006c82:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006c84:	79fb      	ldrb	r3, [r7, #7]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d105      	bne.n	8006c96 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c8a:	683a      	ldr	r2, [r7, #0]
 8006c8c:	4907      	ldr	r1, [pc, #28]	; (8006cac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c8e:	4808      	ldr	r0, [pc, #32]	; (8006cb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c90:	f7ff fd85 	bl	800679e <USBD_GetString>
 8006c94:	e004      	b.n	8006ca0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006c96:	683a      	ldr	r2, [r7, #0]
 8006c98:	4904      	ldr	r1, [pc, #16]	; (8006cac <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006c9a:	4805      	ldr	r0, [pc, #20]	; (8006cb0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c9c:	f7ff fd7f 	bl	800679e <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ca0:	4b02      	ldr	r3, [pc, #8]	; (8006cac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20001750 	.word	0x20001750
 8006cb0:	0800781c 	.word	0x0800781c

08006cb4 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	4603      	mov	r3, r0
 8006cbc:	6039      	str	r1, [r7, #0]
 8006cbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	220c      	movs	r2, #12
 8006cc4:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006cc6:	4b03      	ldr	r3, [pc, #12]	; (8006cd4 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	370c      	adds	r7, #12
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd2:	4770      	bx	lr
 8006cd4:	20000188 	.word	0x20000188

08006cd8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b084      	sub	sp, #16
 8006cdc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006cde:	4b0f      	ldr	r3, [pc, #60]	; (8006d1c <Get_SerialNum+0x44>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <Get_SerialNum+0x48>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006cea:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <Get_SerialNum+0x4c>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006cf0:	68fa      	ldr	r2, [r7, #12]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d009      	beq.n	8006d12 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006cfe:	2208      	movs	r2, #8
 8006d00:	4909      	ldr	r1, [pc, #36]	; (8006d28 <Get_SerialNum+0x50>)
 8006d02:	68f8      	ldr	r0, [r7, #12]
 8006d04:	f000 f814 	bl	8006d30 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006d08:	2204      	movs	r2, #4
 8006d0a:	4908      	ldr	r1, [pc, #32]	; (8006d2c <Get_SerialNum+0x54>)
 8006d0c:	68b8      	ldr	r0, [r7, #8]
 8006d0e:	f000 f80f 	bl	8006d30 <IntToUnicode>
  }
}
 8006d12:	bf00      	nop
 8006d14:	3710      	adds	r7, #16
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	1fff7590 	.word	0x1fff7590
 8006d20:	1fff7594 	.word	0x1fff7594
 8006d24:	1fff7598 	.word	0x1fff7598
 8006d28:	2000019a 	.word	0x2000019a
 8006d2c:	200001aa 	.word	0x200001aa

08006d30 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	4613      	mov	r3, r2
 8006d3c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006d42:	2300      	movs	r3, #0
 8006d44:	75fb      	strb	r3, [r7, #23]
 8006d46:	e027      	b.n	8006d98 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	0f1b      	lsrs	r3, r3, #28
 8006d4c:	2b09      	cmp	r3, #9
 8006d4e:	d80b      	bhi.n	8006d68 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	0f1b      	lsrs	r3, r3, #28
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	7dfb      	ldrb	r3, [r7, #23]
 8006d58:	005b      	lsls	r3, r3, #1
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	440b      	add	r3, r1
 8006d60:	3230      	adds	r2, #48	; 0x30
 8006d62:	b2d2      	uxtb	r2, r2
 8006d64:	701a      	strb	r2, [r3, #0]
 8006d66:	e00a      	b.n	8006d7e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	0f1b      	lsrs	r3, r3, #28
 8006d6c:	b2da      	uxtb	r2, r3
 8006d6e:	7dfb      	ldrb	r3, [r7, #23]
 8006d70:	005b      	lsls	r3, r3, #1
 8006d72:	4619      	mov	r1, r3
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	440b      	add	r3, r1
 8006d78:	3237      	adds	r2, #55	; 0x37
 8006d7a:	b2d2      	uxtb	r2, r2
 8006d7c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	011b      	lsls	r3, r3, #4
 8006d82:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006d84:	7dfb      	ldrb	r3, [r7, #23]
 8006d86:	005b      	lsls	r3, r3, #1
 8006d88:	3301      	adds	r3, #1
 8006d8a:	68ba      	ldr	r2, [r7, #8]
 8006d8c:	4413      	add	r3, r2
 8006d8e:	2200      	movs	r2, #0
 8006d90:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006d92:	7dfb      	ldrb	r3, [r7, #23]
 8006d94:	3301      	adds	r3, #1
 8006d96:	75fb      	strb	r3, [r7, #23]
 8006d98:	7dfa      	ldrb	r2, [r7, #23]
 8006d9a:	79fb      	ldrb	r3, [r7, #7]
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d3d3      	bcc.n	8006d48 <IntToUnicode+0x18>
  }
}
 8006da0:	bf00      	nop
 8006da2:	bf00      	nop
 8006da4:	371c      	adds	r7, #28
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
	...

08006db0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b0ae      	sub	sp, #184	; 0xb8
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006db8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	601a      	str	r2, [r3, #0]
 8006dc0:	605a      	str	r2, [r3, #4]
 8006dc2:	609a      	str	r2, [r3, #8]
 8006dc4:	60da      	str	r2, [r3, #12]
 8006dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006dc8:	f107 0318 	add.w	r3, r7, #24
 8006dcc:	228c      	movs	r2, #140	; 0x8c
 8006dce:	2100      	movs	r1, #0
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 fc63 	bl	800769c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006dde:	d173      	bne.n	8006ec8 <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006de0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006de4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8006de6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006dea:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8006dee:	2301      	movs	r3, #1
 8006df0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006df2:	2301      	movs	r3, #1
 8006df4:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8006df6:	2318      	movs	r3, #24
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006dfe:	2302      	movs	r3, #2
 8006e00:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006e02:	2302      	movs	r3, #2
 8006e04:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8006e06:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006e0a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006e0c:	f107 0318 	add.w	r3, r7, #24
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7fc f98d 	bl	8003130 <HAL_RCCEx_PeriphCLKConfig>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d001      	beq.n	8006e20 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8006e1c:	f7f9 fe61 	bl	8000ae2 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e20:	4b2b      	ldr	r3, [pc, #172]	; (8006ed0 <HAL_PCD_MspInit+0x120>)
 8006e22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e24:	4a2a      	ldr	r2, [pc, #168]	; (8006ed0 <HAL_PCD_MspInit+0x120>)
 8006e26:	f043 0301 	orr.w	r3, r3, #1
 8006e2a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e2c:	4b28      	ldr	r3, [pc, #160]	; (8006ed0 <HAL_PCD_MspInit+0x120>)
 8006e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	617b      	str	r3, [r7, #20]
 8006e36:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006e38:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006e3c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e40:	2302      	movs	r3, #2
 8006e42:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e46:	2300      	movs	r3, #0
 8006e48:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e4c:	2303      	movs	r3, #3
 8006e4e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006e52:	230a      	movs	r3, #10
 8006e54:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e58:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006e5c:	4619      	mov	r1, r3
 8006e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006e62:	f7fa f881 	bl	8000f68 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006e66:	4b1a      	ldr	r3, [pc, #104]	; (8006ed0 <HAL_PCD_MspInit+0x120>)
 8006e68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e6a:	4a19      	ldr	r2, [pc, #100]	; (8006ed0 <HAL_PCD_MspInit+0x120>)
 8006e6c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006e70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006e72:	4b17      	ldr	r3, [pc, #92]	; (8006ed0 <HAL_PCD_MspInit+0x120>)
 8006e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006e7a:	613b      	str	r3, [r7, #16]
 8006e7c:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e7e:	4b14      	ldr	r3, [pc, #80]	; (8006ed0 <HAL_PCD_MspInit+0x120>)
 8006e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d114      	bne.n	8006eb4 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e8a:	4b11      	ldr	r3, [pc, #68]	; (8006ed0 <HAL_PCD_MspInit+0x120>)
 8006e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e8e:	4a10      	ldr	r2, [pc, #64]	; (8006ed0 <HAL_PCD_MspInit+0x120>)
 8006e90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006e94:	6593      	str	r3, [r2, #88]	; 0x58
 8006e96:	4b0e      	ldr	r3, [pc, #56]	; (8006ed0 <HAL_PCD_MspInit+0x120>)
 8006e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006e9e:	60fb      	str	r3, [r7, #12]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8006ea2:	f7fb fb35 	bl	8002510 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ea6:	4b0a      	ldr	r3, [pc, #40]	; (8006ed0 <HAL_PCD_MspInit+0x120>)
 8006ea8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006eaa:	4a09      	ldr	r2, [pc, #36]	; (8006ed0 <HAL_PCD_MspInit+0x120>)
 8006eac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006eb0:	6593      	str	r3, [r2, #88]	; 0x58
 8006eb2:	e001      	b.n	8006eb8 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006eb4:	f7fb fb2c 	bl	8002510 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006eb8:	2200      	movs	r2, #0
 8006eba:	2100      	movs	r1, #0
 8006ebc:	2043      	movs	r0, #67	; 0x43
 8006ebe:	f7fa f81c 	bl	8000efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006ec2:	2043      	movs	r0, #67	; 0x43
 8006ec4:	f7fa f835 	bl	8000f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ec8:	bf00      	nop
 8006eca:	37b8      	adds	r7, #184	; 0xb8
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	40021000 	.word	0x40021000

08006ed4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	f7fe fc46 	bl	800577c <USBD_LL_SetupStage>
}
 8006ef0:	bf00      	nop
 8006ef2:	3708      	adds	r7, #8
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}

08006ef8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b082      	sub	sp, #8
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
 8006f00:	460b      	mov	r3, r1
 8006f02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	00db      	lsls	r3, r3, #3
 8006f12:	1a9b      	subs	r3, r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	440b      	add	r3, r1
 8006f18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	78fb      	ldrb	r3, [r7, #3]
 8006f20:	4619      	mov	r1, r3
 8006f22:	f7fe fc80 	bl	8005826 <USBD_LL_DataOutStage>
}
 8006f26:	bf00      	nop
 8006f28:	3708      	adds	r7, #8
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}

08006f2e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f2e:	b580      	push	{r7, lr}
 8006f30:	b082      	sub	sp, #8
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
 8006f36:	460b      	mov	r3, r1
 8006f38:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006f40:	78fa      	ldrb	r2, [r7, #3]
 8006f42:	6879      	ldr	r1, [r7, #4]
 8006f44:	4613      	mov	r3, r2
 8006f46:	00db      	lsls	r3, r3, #3
 8006f48:	1a9b      	subs	r3, r3, r2
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	440b      	add	r3, r1
 8006f4e:	3348      	adds	r3, #72	; 0x48
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	78fb      	ldrb	r3, [r7, #3]
 8006f54:	4619      	mov	r1, r3
 8006f56:	f7fe fcc9 	bl	80058ec <USBD_LL_DataInStage>
}
 8006f5a:	bf00      	nop
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b082      	sub	sp, #8
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f70:	4618      	mov	r0, r3
 8006f72:	f7fe fddd 	bl	8005b30 <USBD_LL_SOF>
}
 8006f76:	bf00      	nop
 8006f78:	3708      	adds	r7, #8
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	bd80      	pop	{r7, pc}

08006f7e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f7e:	b580      	push	{r7, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
 8006f84:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006f86:	2301      	movs	r3, #1
 8006f88:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	68db      	ldr	r3, [r3, #12]
 8006f8e:	2b02      	cmp	r3, #2
 8006f90:	d001      	beq.n	8006f96 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006f92:	f7f9 fda6 	bl	8000ae2 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f9c:	7bfa      	ldrb	r2, [r7, #15]
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f7fe fd87 	bl	8005ab4 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fac:	4618      	mov	r0, r3
 8006fae:	f7fe fd33 	bl	8005a18 <USBD_LL_Reset>
}
 8006fb2:	bf00      	nop
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b082      	sub	sp, #8
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	687a      	ldr	r2, [r7, #4]
 8006fd0:	6812      	ldr	r2, [r2, #0]
 8006fd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006fd6:	f043 0301 	orr.w	r3, r3, #1
 8006fda:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f7fe fd76 	bl	8005ad4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	6a1b      	ldr	r3, [r3, #32]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d005      	beq.n	8006ffc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006ff0:	4b04      	ldr	r3, [pc, #16]	; (8007004 <HAL_PCD_SuspendCallback+0x48>)
 8006ff2:	691b      	ldr	r3, [r3, #16]
 8006ff4:	4a03      	ldr	r2, [pc, #12]	; (8007004 <HAL_PCD_SuspendCallback+0x48>)
 8006ff6:	f043 0306 	orr.w	r3, r3, #6
 8006ffa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ffc:	bf00      	nop
 8006ffe:	3708      	adds	r7, #8
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}
 8007004:	e000ed00 	.word	0xe000ed00

08007008 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b082      	sub	sp, #8
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	687a      	ldr	r2, [r7, #4]
 800701c:	6812      	ldr	r2, [r2, #0]
 800701e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007022:	f023 0301 	bic.w	r3, r3, #1
 8007026:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	6a1b      	ldr	r3, [r3, #32]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d007      	beq.n	8007040 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007030:	4b08      	ldr	r3, [pc, #32]	; (8007054 <HAL_PCD_ResumeCallback+0x4c>)
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	4a07      	ldr	r2, [pc, #28]	; (8007054 <HAL_PCD_ResumeCallback+0x4c>)
 8007036:	f023 0306 	bic.w	r3, r3, #6
 800703a:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 800703c:	f000 faf6 	bl	800762c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007046:	4618      	mov	r0, r3
 8007048:	f7fe fd5a 	bl	8005b00 <USBD_LL_Resume>
}
 800704c:	bf00      	nop
 800704e:	3708      	adds	r7, #8
 8007050:	46bd      	mov	sp, r7
 8007052:	bd80      	pop	{r7, pc}
 8007054:	e000ed00 	.word	0xe000ed00

08007058 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800706a:	78fa      	ldrb	r2, [r7, #3]
 800706c:	4611      	mov	r1, r2
 800706e:	4618      	mov	r0, r3
 8007070:	f7fe fda6 	bl	8005bc0 <USBD_LL_IsoOUTIncomplete>
}
 8007074:	bf00      	nop
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800707c:	b580      	push	{r7, lr}
 800707e:	b082      	sub	sp, #8
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
 8007084:	460b      	mov	r3, r1
 8007086:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800708e:	78fa      	ldrb	r2, [r7, #3]
 8007090:	4611      	mov	r1, r2
 8007092:	4618      	mov	r0, r3
 8007094:	f7fe fd6e 	bl	8005b74 <USBD_LL_IsoINIncomplete>
}
 8007098:	bf00      	nop
 800709a:	3708      	adds	r7, #8
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b082      	sub	sp, #8
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070ae:	4618      	mov	r0, r3
 80070b0:	f7fe fdac 	bl	8005c0c <USBD_LL_DevConnected>
}
 80070b4:	bf00      	nop
 80070b6:	3708      	adds	r7, #8
 80070b8:	46bd      	mov	sp, r7
 80070ba:	bd80      	pop	{r7, pc}

080070bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b082      	sub	sp, #8
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe fda9 	bl	8005c22 <USBD_LL_DevDisconnected>
}
 80070d0:	bf00      	nop
 80070d2:	3708      	adds	r7, #8
 80070d4:	46bd      	mov	sp, r7
 80070d6:	bd80      	pop	{r7, pc}

080070d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b082      	sub	sp, #8
 80070dc:	af00      	add	r7, sp, #0
 80070de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	781b      	ldrb	r3, [r3, #0]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d13c      	bne.n	8007162 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80070e8:	4a20      	ldr	r2, [pc, #128]	; (800716c <USBD_LL_Init+0x94>)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a1e      	ldr	r2, [pc, #120]	; (800716c <USBD_LL_Init+0x94>)
 80070f4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80070f8:	4b1c      	ldr	r3, [pc, #112]	; (800716c <USBD_LL_Init+0x94>)
 80070fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80070fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007100:	4b1a      	ldr	r3, [pc, #104]	; (800716c <USBD_LL_Init+0x94>)
 8007102:	2206      	movs	r2, #6
 8007104:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007106:	4b19      	ldr	r3, [pc, #100]	; (800716c <USBD_LL_Init+0x94>)
 8007108:	2202      	movs	r2, #2
 800710a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800710c:	4b17      	ldr	r3, [pc, #92]	; (800716c <USBD_LL_Init+0x94>)
 800710e:	2202      	movs	r2, #2
 8007110:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007112:	4b16      	ldr	r3, [pc, #88]	; (800716c <USBD_LL_Init+0x94>)
 8007114:	2200      	movs	r2, #0
 8007116:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007118:	4b14      	ldr	r3, [pc, #80]	; (800716c <USBD_LL_Init+0x94>)
 800711a:	2200      	movs	r2, #0
 800711c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800711e:	4b13      	ldr	r3, [pc, #76]	; (800716c <USBD_LL_Init+0x94>)
 8007120:	2200      	movs	r2, #0
 8007122:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007124:	4b11      	ldr	r3, [pc, #68]	; (800716c <USBD_LL_Init+0x94>)
 8007126:	2200      	movs	r2, #0
 8007128:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800712a:	4b10      	ldr	r3, [pc, #64]	; (800716c <USBD_LL_Init+0x94>)
 800712c:	2200      	movs	r2, #0
 800712e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007130:	4b0e      	ldr	r3, [pc, #56]	; (800716c <USBD_LL_Init+0x94>)
 8007132:	2200      	movs	r2, #0
 8007134:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007136:	480d      	ldr	r0, [pc, #52]	; (800716c <USBD_LL_Init+0x94>)
 8007138:	f7fa f8f2 	bl	8001320 <HAL_PCD_Init>
 800713c:	4603      	mov	r3, r0
 800713e:	2b00      	cmp	r3, #0
 8007140:	d001      	beq.n	8007146 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007142:	f7f9 fcce 	bl	8000ae2 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007146:	2180      	movs	r1, #128	; 0x80
 8007148:	4808      	ldr	r0, [pc, #32]	; (800716c <USBD_LL_Init+0x94>)
 800714a:	f7fb f948 	bl	80023de <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800714e:	2240      	movs	r2, #64	; 0x40
 8007150:	2100      	movs	r1, #0
 8007152:	4806      	ldr	r0, [pc, #24]	; (800716c <USBD_LL_Init+0x94>)
 8007154:	f7fb f8fc 	bl	8002350 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007158:	2280      	movs	r2, #128	; 0x80
 800715a:	2101      	movs	r1, #1
 800715c:	4803      	ldr	r0, [pc, #12]	; (800716c <USBD_LL_Init+0x94>)
 800715e:	f7fb f8f7 	bl	8002350 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20001950 	.word	0x20001950

08007170 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007178:	2300      	movs	r3, #0
 800717a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007186:	4618      	mov	r0, r3
 8007188:	f7fa f9ee 	bl	8001568 <HAL_PCD_Start>
 800718c:	4603      	mov	r3, r0
 800718e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007190:	7bbb      	ldrb	r3, [r7, #14]
 8007192:	2b03      	cmp	r3, #3
 8007194:	d816      	bhi.n	80071c4 <USBD_LL_Start+0x54>
 8007196:	a201      	add	r2, pc, #4	; (adr r2, 800719c <USBD_LL_Start+0x2c>)
 8007198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800719c:	080071ad 	.word	0x080071ad
 80071a0:	080071b3 	.word	0x080071b3
 80071a4:	080071b9 	.word	0x080071b9
 80071a8:	080071bf 	.word	0x080071bf
    case HAL_OK :
      usb_status = USBD_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	73fb      	strb	r3, [r7, #15]
    break;
 80071b0:	e00b      	b.n	80071ca <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071b2:	2303      	movs	r3, #3
 80071b4:	73fb      	strb	r3, [r7, #15]
    break;
 80071b6:	e008      	b.n	80071ca <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071b8:	2301      	movs	r3, #1
 80071ba:	73fb      	strb	r3, [r7, #15]
    break;
 80071bc:	e005      	b.n	80071ca <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071be:	2303      	movs	r3, #3
 80071c0:	73fb      	strb	r3, [r7, #15]
    break;
 80071c2:	e002      	b.n	80071ca <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80071c4:	2303      	movs	r3, #3
 80071c6:	73fb      	strb	r3, [r7, #15]
    break;
 80071c8:	bf00      	nop
  }
  return usb_status;
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80071cc:	4618      	mov	r0, r3
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	4608      	mov	r0, r1
 80071de:	4611      	mov	r1, r2
 80071e0:	461a      	mov	r2, r3
 80071e2:	4603      	mov	r3, r0
 80071e4:	70fb      	strb	r3, [r7, #3]
 80071e6:	460b      	mov	r3, r1
 80071e8:	70bb      	strb	r3, [r7, #2]
 80071ea:	4613      	mov	r3, r2
 80071ec:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071ee:	2300      	movs	r3, #0
 80071f0:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071f2:	2300      	movs	r3, #0
 80071f4:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80071fc:	78bb      	ldrb	r3, [r7, #2]
 80071fe:	883a      	ldrh	r2, [r7, #0]
 8007200:	78f9      	ldrb	r1, [r7, #3]
 8007202:	f7fa fd9e 	bl	8001d42 <HAL_PCD_EP_Open>
 8007206:	4603      	mov	r3, r0
 8007208:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800720a:	7bbb      	ldrb	r3, [r7, #14]
 800720c:	2b03      	cmp	r3, #3
 800720e:	d817      	bhi.n	8007240 <USBD_LL_OpenEP+0x6c>
 8007210:	a201      	add	r2, pc, #4	; (adr r2, 8007218 <USBD_LL_OpenEP+0x44>)
 8007212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007216:	bf00      	nop
 8007218:	08007229 	.word	0x08007229
 800721c:	0800722f 	.word	0x0800722f
 8007220:	08007235 	.word	0x08007235
 8007224:	0800723b 	.word	0x0800723b
    case HAL_OK :
      usb_status = USBD_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	73fb      	strb	r3, [r7, #15]
    break;
 800722c:	e00b      	b.n	8007246 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800722e:	2303      	movs	r3, #3
 8007230:	73fb      	strb	r3, [r7, #15]
    break;
 8007232:	e008      	b.n	8007246 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007234:	2301      	movs	r3, #1
 8007236:	73fb      	strb	r3, [r7, #15]
    break;
 8007238:	e005      	b.n	8007246 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800723a:	2303      	movs	r3, #3
 800723c:	73fb      	strb	r3, [r7, #15]
    break;
 800723e:	e002      	b.n	8007246 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007240:	2303      	movs	r3, #3
 8007242:	73fb      	strb	r3, [r7, #15]
    break;
 8007244:	bf00      	nop
  }
  return usb_status;
 8007246:	7bfb      	ldrb	r3, [r7, #15]
}
 8007248:	4618      	mov	r0, r3
 800724a:	3710      	adds	r7, #16
 800724c:	46bd      	mov	sp, r7
 800724e:	bd80      	pop	{r7, pc}

08007250 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800726a:	78fa      	ldrb	r2, [r7, #3]
 800726c:	4611      	mov	r1, r2
 800726e:	4618      	mov	r0, r3
 8007270:	f7fa fdcf 	bl	8001e12 <HAL_PCD_EP_Close>
 8007274:	4603      	mov	r3, r0
 8007276:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007278:	7bbb      	ldrb	r3, [r7, #14]
 800727a:	2b03      	cmp	r3, #3
 800727c:	d816      	bhi.n	80072ac <USBD_LL_CloseEP+0x5c>
 800727e:	a201      	add	r2, pc, #4	; (adr r2, 8007284 <USBD_LL_CloseEP+0x34>)
 8007280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007284:	08007295 	.word	0x08007295
 8007288:	0800729b 	.word	0x0800729b
 800728c:	080072a1 	.word	0x080072a1
 8007290:	080072a7 	.word	0x080072a7
    case HAL_OK :
      usb_status = USBD_OK;
 8007294:	2300      	movs	r3, #0
 8007296:	73fb      	strb	r3, [r7, #15]
    break;
 8007298:	e00b      	b.n	80072b2 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800729a:	2303      	movs	r3, #3
 800729c:	73fb      	strb	r3, [r7, #15]
    break;
 800729e:	e008      	b.n	80072b2 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072a0:	2301      	movs	r3, #1
 80072a2:	73fb      	strb	r3, [r7, #15]
    break;
 80072a4:	e005      	b.n	80072b2 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072a6:	2303      	movs	r3, #3
 80072a8:	73fb      	strb	r3, [r7, #15]
    break;
 80072aa:	e002      	b.n	80072b2 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80072ac:	2303      	movs	r3, #3
 80072ae:	73fb      	strb	r3, [r7, #15]
    break;
 80072b0:	bf00      	nop
  }
  return usb_status;
 80072b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3710      	adds	r7, #16
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}

080072bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	460b      	mov	r3, r1
 80072c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072c8:	2300      	movs	r3, #0
 80072ca:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80072cc:	2300      	movs	r3, #0
 80072ce:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072d6:	78fa      	ldrb	r2, [r7, #3]
 80072d8:	4611      	mov	r1, r2
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fa fe76 	bl	8001fcc <HAL_PCD_EP_SetStall>
 80072e0:	4603      	mov	r3, r0
 80072e2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80072e4:	7bbb      	ldrb	r3, [r7, #14]
 80072e6:	2b03      	cmp	r3, #3
 80072e8:	d816      	bhi.n	8007318 <USBD_LL_StallEP+0x5c>
 80072ea:	a201      	add	r2, pc, #4	; (adr r2, 80072f0 <USBD_LL_StallEP+0x34>)
 80072ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f0:	08007301 	.word	0x08007301
 80072f4:	08007307 	.word	0x08007307
 80072f8:	0800730d 	.word	0x0800730d
 80072fc:	08007313 	.word	0x08007313
    case HAL_OK :
      usb_status = USBD_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	73fb      	strb	r3, [r7, #15]
    break;
 8007304:	e00b      	b.n	800731e <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007306:	2303      	movs	r3, #3
 8007308:	73fb      	strb	r3, [r7, #15]
    break;
 800730a:	e008      	b.n	800731e <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800730c:	2301      	movs	r3, #1
 800730e:	73fb      	strb	r3, [r7, #15]
    break;
 8007310:	e005      	b.n	800731e <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007312:	2303      	movs	r3, #3
 8007314:	73fb      	strb	r3, [r7, #15]
    break;
 8007316:	e002      	b.n	800731e <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007318:	2303      	movs	r3, #3
 800731a:	73fb      	strb	r3, [r7, #15]
    break;
 800731c:	bf00      	nop
  }
  return usb_status;
 800731e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007320:	4618      	mov	r0, r3
 8007322:	3710      	adds	r7, #16
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}

08007328 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
 8007330:	460b      	mov	r3, r1
 8007332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007334:	2300      	movs	r3, #0
 8007336:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007338:	2300      	movs	r3, #0
 800733a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007342:	78fa      	ldrb	r2, [r7, #3]
 8007344:	4611      	mov	r1, r2
 8007346:	4618      	mov	r0, r3
 8007348:	f7fa fea2 	bl	8002090 <HAL_PCD_EP_ClrStall>
 800734c:	4603      	mov	r3, r0
 800734e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007350:	7bbb      	ldrb	r3, [r7, #14]
 8007352:	2b03      	cmp	r3, #3
 8007354:	d816      	bhi.n	8007384 <USBD_LL_ClearStallEP+0x5c>
 8007356:	a201      	add	r2, pc, #4	; (adr r2, 800735c <USBD_LL_ClearStallEP+0x34>)
 8007358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800735c:	0800736d 	.word	0x0800736d
 8007360:	08007373 	.word	0x08007373
 8007364:	08007379 	.word	0x08007379
 8007368:	0800737f 	.word	0x0800737f
    case HAL_OK :
      usb_status = USBD_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	73fb      	strb	r3, [r7, #15]
    break;
 8007370:	e00b      	b.n	800738a <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007372:	2303      	movs	r3, #3
 8007374:	73fb      	strb	r3, [r7, #15]
    break;
 8007376:	e008      	b.n	800738a <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007378:	2301      	movs	r3, #1
 800737a:	73fb      	strb	r3, [r7, #15]
    break;
 800737c:	e005      	b.n	800738a <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800737e:	2303      	movs	r3, #3
 8007380:	73fb      	strb	r3, [r7, #15]
    break;
 8007382:	e002      	b.n	800738a <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007384:	2303      	movs	r3, #3
 8007386:	73fb      	strb	r3, [r7, #15]
    break;
 8007388:	bf00      	nop
  }
  return usb_status;
 800738a:	7bfb      	ldrb	r3, [r7, #15]
}
 800738c:	4618      	mov	r0, r3
 800738e:	3710      	adds	r7, #16
 8007390:	46bd      	mov	sp, r7
 8007392:	bd80      	pop	{r7, pc}

08007394 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007394:	b480      	push	{r7}
 8007396:	b085      	sub	sp, #20
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	460b      	mov	r3, r1
 800739e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80073a6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80073a8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	da0b      	bge.n	80073c8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80073b0:	78fb      	ldrb	r3, [r7, #3]
 80073b2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073b6:	68f9      	ldr	r1, [r7, #12]
 80073b8:	4613      	mov	r3, r2
 80073ba:	00db      	lsls	r3, r3, #3
 80073bc:	1a9b      	subs	r3, r3, r2
 80073be:	009b      	lsls	r3, r3, #2
 80073c0:	440b      	add	r3, r1
 80073c2:	333e      	adds	r3, #62	; 0x3e
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	e00b      	b.n	80073e0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80073c8:	78fb      	ldrb	r3, [r7, #3]
 80073ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80073ce:	68f9      	ldr	r1, [r7, #12]
 80073d0:	4613      	mov	r3, r2
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	1a9b      	subs	r3, r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073de:	781b      	ldrb	r3, [r3, #0]
  }
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b084      	sub	sp, #16
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073f8:	2300      	movs	r3, #0
 80073fa:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007406:	78fa      	ldrb	r2, [r7, #3]
 8007408:	4611      	mov	r1, r2
 800740a:	4618      	mov	r0, r3
 800740c:	f7fa fc74 	bl	8001cf8 <HAL_PCD_SetAddress>
 8007410:	4603      	mov	r3, r0
 8007412:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007414:	7bbb      	ldrb	r3, [r7, #14]
 8007416:	2b03      	cmp	r3, #3
 8007418:	d816      	bhi.n	8007448 <USBD_LL_SetUSBAddress+0x5c>
 800741a:	a201      	add	r2, pc, #4	; (adr r2, 8007420 <USBD_LL_SetUSBAddress+0x34>)
 800741c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007420:	08007431 	.word	0x08007431
 8007424:	08007437 	.word	0x08007437
 8007428:	0800743d 	.word	0x0800743d
 800742c:	08007443 	.word	0x08007443
    case HAL_OK :
      usb_status = USBD_OK;
 8007430:	2300      	movs	r3, #0
 8007432:	73fb      	strb	r3, [r7, #15]
    break;
 8007434:	e00b      	b.n	800744e <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007436:	2303      	movs	r3, #3
 8007438:	73fb      	strb	r3, [r7, #15]
    break;
 800743a:	e008      	b.n	800744e <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800743c:	2301      	movs	r3, #1
 800743e:	73fb      	strb	r3, [r7, #15]
    break;
 8007440:	e005      	b.n	800744e <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007442:	2303      	movs	r3, #3
 8007444:	73fb      	strb	r3, [r7, #15]
    break;
 8007446:	e002      	b.n	800744e <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007448:	2303      	movs	r3, #3
 800744a:	73fb      	strb	r3, [r7, #15]
    break;
 800744c:	bf00      	nop
  }
  return usb_status;
 800744e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007450:	4618      	mov	r0, r3
 8007452:	3710      	adds	r7, #16
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007458:	b580      	push	{r7, lr}
 800745a:	b086      	sub	sp, #24
 800745c:	af00      	add	r7, sp, #0
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	607a      	str	r2, [r7, #4]
 8007462:	603b      	str	r3, [r7, #0]
 8007464:	460b      	mov	r3, r1
 8007466:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007468:	2300      	movs	r3, #0
 800746a:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800746c:	2300      	movs	r3, #0
 800746e:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007476:	7af9      	ldrb	r1, [r7, #11]
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	687a      	ldr	r2, [r7, #4]
 800747c:	f7fa fd69 	bl	8001f52 <HAL_PCD_EP_Transmit>
 8007480:	4603      	mov	r3, r0
 8007482:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007484:	7dbb      	ldrb	r3, [r7, #22]
 8007486:	2b03      	cmp	r3, #3
 8007488:	d816      	bhi.n	80074b8 <USBD_LL_Transmit+0x60>
 800748a:	a201      	add	r2, pc, #4	; (adr r2, 8007490 <USBD_LL_Transmit+0x38>)
 800748c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007490:	080074a1 	.word	0x080074a1
 8007494:	080074a7 	.word	0x080074a7
 8007498:	080074ad 	.word	0x080074ad
 800749c:	080074b3 	.word	0x080074b3
    case HAL_OK :
      usb_status = USBD_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	75fb      	strb	r3, [r7, #23]
    break;
 80074a4:	e00b      	b.n	80074be <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80074a6:	2303      	movs	r3, #3
 80074a8:	75fb      	strb	r3, [r7, #23]
    break;
 80074aa:	e008      	b.n	80074be <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80074ac:	2301      	movs	r3, #1
 80074ae:	75fb      	strb	r3, [r7, #23]
    break;
 80074b0:	e005      	b.n	80074be <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80074b2:	2303      	movs	r3, #3
 80074b4:	75fb      	strb	r3, [r7, #23]
    break;
 80074b6:	e002      	b.n	80074be <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80074b8:	2303      	movs	r3, #3
 80074ba:	75fb      	strb	r3, [r7, #23]
    break;
 80074bc:	bf00      	nop
  }
  return usb_status;
 80074be:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	607a      	str	r2, [r7, #4]
 80074d2:	603b      	str	r3, [r7, #0]
 80074d4:	460b      	mov	r3, r1
 80074d6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074d8:	2300      	movs	r3, #0
 80074da:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074dc:	2300      	movs	r3, #0
 80074de:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80074e6:	7af9      	ldrb	r1, [r7, #11]
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	687a      	ldr	r2, [r7, #4]
 80074ec:	f7fa fcdb 	bl	8001ea6 <HAL_PCD_EP_Receive>
 80074f0:	4603      	mov	r3, r0
 80074f2:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80074f4:	7dbb      	ldrb	r3, [r7, #22]
 80074f6:	2b03      	cmp	r3, #3
 80074f8:	d816      	bhi.n	8007528 <USBD_LL_PrepareReceive+0x60>
 80074fa:	a201      	add	r2, pc, #4	; (adr r2, 8007500 <USBD_LL_PrepareReceive+0x38>)
 80074fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007500:	08007511 	.word	0x08007511
 8007504:	08007517 	.word	0x08007517
 8007508:	0800751d 	.word	0x0800751d
 800750c:	08007523 	.word	0x08007523
    case HAL_OK :
      usb_status = USBD_OK;
 8007510:	2300      	movs	r3, #0
 8007512:	75fb      	strb	r3, [r7, #23]
    break;
 8007514:	e00b      	b.n	800752e <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007516:	2303      	movs	r3, #3
 8007518:	75fb      	strb	r3, [r7, #23]
    break;
 800751a:	e008      	b.n	800752e <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800751c:	2301      	movs	r3, #1
 800751e:	75fb      	strb	r3, [r7, #23]
    break;
 8007520:	e005      	b.n	800752e <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007522:	2303      	movs	r3, #3
 8007524:	75fb      	strb	r3, [r7, #23]
    break;
 8007526:	e002      	b.n	800752e <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 8007528:	2303      	movs	r3, #3
 800752a:	75fb      	strb	r3, [r7, #23]
    break;
 800752c:	bf00      	nop
  }
  return usb_status;
 800752e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3718      	adds	r7, #24
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	460b      	mov	r3, r1
 8007542:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800754a:	78fa      	ldrb	r2, [r7, #3]
 800754c:	4611      	mov	r1, r2
 800754e:	4618      	mov	r0, r3
 8007550:	f7fa fce7 	bl	8001f22 <HAL_PCD_EP_GetRxCount>
 8007554:	4603      	mov	r3, r0
}
 8007556:	4618      	mov	r0, r3
 8007558:	3708      	adds	r7, #8
 800755a:	46bd      	mov	sp, r7
 800755c:	bd80      	pop	{r7, pc}
	...

08007560 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 800756c:	78fb      	ldrb	r3, [r7, #3]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <HAL_PCDEx_LPM_Callback+0x18>
 8007572:	2b01      	cmp	r3, #1
 8007574:	d01f      	beq.n	80075b6 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007576:	e03b      	b.n	80075f0 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6a1b      	ldr	r3, [r3, #32]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d007      	beq.n	8007590 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007580:	f000 f854 	bl	800762c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007584:	4b1c      	ldr	r3, [pc, #112]	; (80075f8 <HAL_PCDEx_LPM_Callback+0x98>)
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	4a1b      	ldr	r2, [pc, #108]	; (80075f8 <HAL_PCDEx_LPM_Callback+0x98>)
 800758a:	f023 0306 	bic.w	r3, r3, #6
 800758e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	687a      	ldr	r2, [r7, #4]
 800759c:	6812      	ldr	r2, [r2, #0]
 800759e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075a2:	f023 0301 	bic.w	r3, r3, #1
 80075a6:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075ae:	4618      	mov	r0, r3
 80075b0:	f7fe faa6 	bl	8005b00 <USBD_LL_Resume>
    break;
 80075b4:	e01c      	b.n	80075f0 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	6812      	ldr	r2, [r2, #0]
 80075c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80075c8:	f043 0301 	orr.w	r3, r3, #1
 80075cc:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80075d4:	4618      	mov	r0, r3
 80075d6:	f7fe fa7d 	bl	8005ad4 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6a1b      	ldr	r3, [r3, #32]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d005      	beq.n	80075ee <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80075e2:	4b05      	ldr	r3, [pc, #20]	; (80075f8 <HAL_PCDEx_LPM_Callback+0x98>)
 80075e4:	691b      	ldr	r3, [r3, #16]
 80075e6:	4a04      	ldr	r2, [pc, #16]	; (80075f8 <HAL_PCDEx_LPM_Callback+0x98>)
 80075e8:	f043 0306 	orr.w	r3, r3, #6
 80075ec:	6113      	str	r3, [r2, #16]
    break;
 80075ee:	bf00      	nop
}
 80075f0:	bf00      	nop
 80075f2:	3708      	adds	r7, #8
 80075f4:	46bd      	mov	sp, r7
 80075f6:	bd80      	pop	{r7, pc}
 80075f8:	e000ed00 	.word	0xe000ed00

080075fc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80075fc:	b480      	push	{r7}
 80075fe:	b083      	sub	sp, #12
 8007600:	af00      	add	r7, sp, #0
 8007602:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007604:	4b03      	ldr	r3, [pc, #12]	; (8007614 <USBD_static_malloc+0x18>)
}
 8007606:	4618      	mov	r0, r3
 8007608:	370c      	adds	r7, #12
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	2000021c 	.word	0x2000021c

08007618 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007618:	b480      	push	{r7}
 800761a:	b083      	sub	sp, #12
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]

}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr

0800762c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007630:	f7f9 fa01 	bl	8000a36 <SystemClock_Config>
}
 8007634:	bf00      	nop
 8007636:	bd80      	pop	{r7, pc}

08007638 <__libc_init_array>:
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	4d0d      	ldr	r5, [pc, #52]	; (8007670 <__libc_init_array+0x38>)
 800763c:	4c0d      	ldr	r4, [pc, #52]	; (8007674 <__libc_init_array+0x3c>)
 800763e:	1b64      	subs	r4, r4, r5
 8007640:	10a4      	asrs	r4, r4, #2
 8007642:	2600      	movs	r6, #0
 8007644:	42a6      	cmp	r6, r4
 8007646:	d109      	bne.n	800765c <__libc_init_array+0x24>
 8007648:	4d0b      	ldr	r5, [pc, #44]	; (8007678 <__libc_init_array+0x40>)
 800764a:	4c0c      	ldr	r4, [pc, #48]	; (800767c <__libc_init_array+0x44>)
 800764c:	f000 f82e 	bl	80076ac <_init>
 8007650:	1b64      	subs	r4, r4, r5
 8007652:	10a4      	asrs	r4, r4, #2
 8007654:	2600      	movs	r6, #0
 8007656:	42a6      	cmp	r6, r4
 8007658:	d105      	bne.n	8007666 <__libc_init_array+0x2e>
 800765a:	bd70      	pop	{r4, r5, r6, pc}
 800765c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007660:	4798      	blx	r3
 8007662:	3601      	adds	r6, #1
 8007664:	e7ee      	b.n	8007644 <__libc_init_array+0xc>
 8007666:	f855 3b04 	ldr.w	r3, [r5], #4
 800766a:	4798      	blx	r3
 800766c:	3601      	adds	r6, #1
 800766e:	e7f2      	b.n	8007656 <__libc_init_array+0x1e>
 8007670:	0800786c 	.word	0x0800786c
 8007674:	0800786c 	.word	0x0800786c
 8007678:	0800786c 	.word	0x0800786c
 800767c:	08007870 	.word	0x08007870

08007680 <memcpy>:
 8007680:	440a      	add	r2, r1
 8007682:	4291      	cmp	r1, r2
 8007684:	f100 33ff 	add.w	r3, r0, #4294967295
 8007688:	d100      	bne.n	800768c <memcpy+0xc>
 800768a:	4770      	bx	lr
 800768c:	b510      	push	{r4, lr}
 800768e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007692:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007696:	4291      	cmp	r1, r2
 8007698:	d1f9      	bne.n	800768e <memcpy+0xe>
 800769a:	bd10      	pop	{r4, pc}

0800769c <memset>:
 800769c:	4402      	add	r2, r0
 800769e:	4603      	mov	r3, r0
 80076a0:	4293      	cmp	r3, r2
 80076a2:	d100      	bne.n	80076a6 <memset+0xa>
 80076a4:	4770      	bx	lr
 80076a6:	f803 1b01 	strb.w	r1, [r3], #1
 80076aa:	e7f9      	b.n	80076a0 <memset+0x4>

080076ac <_init>:
 80076ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ae:	bf00      	nop
 80076b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b2:	bc08      	pop	{r3}
 80076b4:	469e      	mov	lr, r3
 80076b6:	4770      	bx	lr

080076b8 <_fini>:
 80076b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ba:	bf00      	nop
 80076bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076be:	bc08      	pop	{r3}
 80076c0:	469e      	mov	lr, r3
 80076c2:	4770      	bx	lr
