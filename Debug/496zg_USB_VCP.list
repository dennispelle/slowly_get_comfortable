
496zg_USB_VCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000742c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  080075d8  080075d8  000175d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077c0  080077c0  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  080077c0  080077c0  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  080077c0  080077c0  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077c0  080077c0  000177c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077c4  080077c4  000177c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  080077c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bd8  20000190  08007958  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d68  08007958  00021d68  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   000178c7  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034d6  00000000  00000000  00037a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e78  00000000  00000000  0003af60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d10  00000000  00000000  0003bdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002afdb  00000000  00000000  0003cae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011bed  00000000  00000000  00067ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f6c44  00000000  00000000  000796b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001702f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003974  00000000  00000000  00170348  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000190 	.word	0x20000190
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080075c0 	.word	0x080075c0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000194 	.word	0x20000194
 80001e8:	080075c0 	.word	0x080075c0

080001ec <strcmp>:
 80001ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f4:	2a01      	cmp	r2, #1
 80001f6:	bf28      	it	cs
 80001f8:	429a      	cmpcs	r2, r3
 80001fa:	d0f7      	beq.n	80001ec <strcmp>
 80001fc:	1ad0      	subs	r0, r2, r3
 80001fe:	4770      	bx	lr

08000200 <strlen>:
 8000200:	4603      	mov	r3, r0
 8000202:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000206:	2a00      	cmp	r2, #0
 8000208:	d1fb      	bne.n	8000202 <strlen+0x2>
 800020a:	1a18      	subs	r0, r3, r0
 800020c:	3801      	subs	r0, #1
 800020e:	4770      	bx	lr

08000210 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	b088      	sub	sp, #32
 8000214:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000216:	f107 030c 	add.w	r3, r7, #12
 800021a:	2200      	movs	r2, #0
 800021c:	601a      	str	r2, [r3, #0]
 800021e:	605a      	str	r2, [r3, #4]
 8000220:	609a      	str	r2, [r3, #8]
 8000222:	60da      	str	r2, [r3, #12]
 8000224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000226:	4b2e      	ldr	r3, [pc, #184]	; (80002e0 <MX_GPIO_Init+0xd0>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	4a2d      	ldr	r2, [pc, #180]	; (80002e0 <MX_GPIO_Init+0xd0>)
 800022c:	f043 0304 	orr.w	r3, r3, #4
 8000230:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000232:	4b2b      	ldr	r3, [pc, #172]	; (80002e0 <MX_GPIO_Init+0xd0>)
 8000234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000236:	f003 0304 	and.w	r3, r3, #4
 800023a:	60bb      	str	r3, [r7, #8]
 800023c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800023e:	4b28      	ldr	r3, [pc, #160]	; (80002e0 <MX_GPIO_Init+0xd0>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000242:	4a27      	ldr	r2, [pc, #156]	; (80002e0 <MX_GPIO_Init+0xd0>)
 8000244:	f043 0302 	orr.w	r3, r3, #2
 8000248:	64d3      	str	r3, [r2, #76]	; 0x4c
 800024a:	4b25      	ldr	r3, [pc, #148]	; (80002e0 <MX_GPIO_Init+0xd0>)
 800024c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800024e:	f003 0302 	and.w	r3, r3, #2
 8000252:	607b      	str	r3, [r7, #4]
 8000254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000256:	4b22      	ldr	r3, [pc, #136]	; (80002e0 <MX_GPIO_Init+0xd0>)
 8000258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800025a:	4a21      	ldr	r2, [pc, #132]	; (80002e0 <MX_GPIO_Init+0xd0>)
 800025c:	f043 0301 	orr.w	r3, r3, #1
 8000260:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000262:	4b1f      	ldr	r3, [pc, #124]	; (80002e0 <MX_GPIO_Init+0xd0>)
 8000264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000266:	f003 0301 	and.w	r3, r3, #1
 800026a:	603b      	str	r3, [r7, #0]
 800026c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800026e:	2200      	movs	r2, #0
 8000270:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000274:	481b      	ldr	r0, [pc, #108]	; (80002e4 <MX_GPIO_Init+0xd4>)
 8000276:	f000 ffab 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800027a:	2200      	movs	r2, #0
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	481a      	ldr	r0, [pc, #104]	; (80002e8 <MX_GPIO_Init+0xd8>)
 8000280:	f000 ffa6 	bl	80011d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000284:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000288:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800028a:	2300      	movs	r3, #0
 800028c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800028e:	2300      	movs	r3, #0
 8000290:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000292:	f107 030c 	add.w	r3, r7, #12
 8000296:	4619      	mov	r1, r3
 8000298:	4813      	ldr	r0, [pc, #76]	; (80002e8 <MX_GPIO_Init+0xd8>)
 800029a:	f000 fdef 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800029e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80002a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002a4:	2301      	movs	r3, #1
 80002a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a8:	2300      	movs	r3, #0
 80002aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002ac:	2300      	movs	r3, #0
 80002ae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80002b0:	f107 030c 	add.w	r3, r7, #12
 80002b4:	4619      	mov	r1, r3
 80002b6:	480b      	ldr	r0, [pc, #44]	; (80002e4 <MX_GPIO_Init+0xd4>)
 80002b8:	f000 fde0 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80002c0:	2301      	movs	r3, #1
 80002c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002c4:	2300      	movs	r3, #0
 80002c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002c8:	2300      	movs	r3, #0
 80002ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80002cc:	f107 030c 	add.w	r3, r7, #12
 80002d0:	4619      	mov	r1, r3
 80002d2:	4805      	ldr	r0, [pc, #20]	; (80002e8 <MX_GPIO_Init+0xd8>)
 80002d4:	f000 fdd2 	bl	8000e7c <HAL_GPIO_Init>

}
 80002d8:	bf00      	nop
 80002da:	3720      	adds	r7, #32
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}
 80002e0:	40021000 	.word	0x40021000
 80002e4:	48000400 	.word	0x48000400
 80002e8:	48000800 	.word	0x48000800

080002ec <buffer_was_raus>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int buffer_was_raus() {
 80002ec:	b480      	push	{r7}
 80002ee:	b083      	sub	sp, #12
 80002f0:	af00      	add	r7, sp, #0
    int save_it;
    // wenn der letzte Speicherpunkt leer ist, dann wird auch nichts rausgebuffert.
    if (fifo_buffer.data[fifo_buffer.last]==0) {
 80002f2:	4b18      	ldr	r3, [pc, #96]	; (8000354 <buffer_was_raus+0x68>)
 80002f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80002f8:	461a      	mov	r2, r3
 80002fa:	4b16      	ldr	r3, [pc, #88]	; (8000354 <buffer_was_raus+0x68>)
 80002fc:	5c9b      	ldrb	r3, [r3, r2]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d101      	bne.n	8000306 <buffer_was_raus+0x1a>
        return 0;
 8000302:	2300      	movs	r3, #0
 8000304:	e01f      	b.n	8000346 <buffer_was_raus+0x5a>
    } else {
        save_it=fifo_buffer.data[fifo_buffer.last];
 8000306:	4b13      	ldr	r3, [pc, #76]	; (8000354 <buffer_was_raus+0x68>)
 8000308:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800030c:	461a      	mov	r2, r3
 800030e:	4b11      	ldr	r3, [pc, #68]	; (8000354 <buffer_was_raus+0x68>)
 8000310:	5c9b      	ldrb	r3, [r3, r2]
 8000312:	607b      	str	r3, [r7, #4]
        fifo_buffer.data[fifo_buffer.last]=0;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <buffer_was_raus+0x68>)
 8000316:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800031a:	461a      	mov	r2, r3
 800031c:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <buffer_was_raus+0x68>)
 800031e:	2100      	movs	r1, #0
 8000320:	5499      	strb	r1, [r3, r2]
        fifo_buffer.last++;
 8000322:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <buffer_was_raus+0x68>)
 8000324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000328:	3301      	adds	r3, #1
 800032a:	b2da      	uxtb	r2, r3
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <buffer_was_raus+0x68>)
 800032e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        if (fifo_buffer.last>=buffergroesse) {
 8000332:	4b08      	ldr	r3, [pc, #32]	; (8000354 <buffer_was_raus+0x68>)
 8000334:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000338:	2b3f      	cmp	r3, #63	; 0x3f
 800033a:	d903      	bls.n	8000344 <buffer_was_raus+0x58>
            fifo_buffer.last=0;
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <buffer_was_raus+0x68>)
 800033e:	2200      	movs	r2, #0
 8000340:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        }
        return save_it;
 8000344:	687b      	ldr	r3, [r7, #4]
    }
}
 8000346:	4618      	mov	r0, r3
 8000348:	370c      	adds	r7, #12
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	200001ac 	.word	0x200001ac

08000358 <buffer_was_rein>:

int buffer_was_rein(uint8_t status) {
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]
    // Eine Null ist nichts, was ich reinbuffern will.
    if (status==0 || status==13) {
 8000362:	79fb      	ldrb	r3, [r7, #7]
 8000364:	2b00      	cmp	r3, #0
 8000366:	d002      	beq.n	800036e <buffer_was_rein+0x16>
 8000368:	79fb      	ldrb	r3, [r7, #7]
 800036a:	2b0d      	cmp	r3, #13
 800036c:	d101      	bne.n	8000372 <buffer_was_rein+0x1a>
        return 0;
 800036e:	2300      	movs	r3, #0
 8000370:	e026      	b.n	80003c0 <buffer_was_rein+0x68>
    }
    // Wenn der nächste Speicherplatz nicht leer ist, dann wird auch nichts reingebuffert.
    else if	(fifo_buffer.data[fifo_buffer.next]) {
 8000372:	4b16      	ldr	r3, [pc, #88]	; (80003cc <buffer_was_rein+0x74>)
 8000374:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000378:	461a      	mov	r2, r3
 800037a:	4b14      	ldr	r3, [pc, #80]	; (80003cc <buffer_was_rein+0x74>)
 800037c:	5c9b      	ldrb	r3, [r3, r2]
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <buffer_was_rein+0x2e>
        return 0;
 8000382:	2300      	movs	r3, #0
 8000384:	e01c      	b.n	80003c0 <buffer_was_rein+0x68>
    }
    else {
        // Wir haben freien speicher und Daten, also wird was reingebuffert.

        fifo_buffer.data[fifo_buffer.next]=status;
 8000386:	4b11      	ldr	r3, [pc, #68]	; (80003cc <buffer_was_rein+0x74>)
 8000388:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800038c:	4619      	mov	r1, r3
 800038e:	4a0f      	ldr	r2, [pc, #60]	; (80003cc <buffer_was_rein+0x74>)
 8000390:	79fb      	ldrb	r3, [r7, #7]
 8000392:	5453      	strb	r3, [r2, r1]
        fifo_buffer.next++;
 8000394:	4b0d      	ldr	r3, [pc, #52]	; (80003cc <buffer_was_rein+0x74>)
 8000396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800039a:	3301      	adds	r3, #1
 800039c:	b2da      	uxtb	r2, r3
 800039e:	4b0b      	ldr	r3, [pc, #44]	; (80003cc <buffer_was_rein+0x74>)
 80003a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        // Wenn fifo_buffer.next größer als der Buffer wird, machen wir mit null weiter.
        if(fifo_buffer.next>=buffergroesse) {
 80003a4:	4b09      	ldr	r3, [pc, #36]	; (80003cc <buffer_was_rein+0x74>)
 80003a6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80003aa:	2b3f      	cmp	r3, #63	; 0x3f
 80003ac:	d903      	bls.n	80003b6 <buffer_was_rein+0x5e>
            fifo_buffer.next=0;
 80003ae:	4b07      	ldr	r3, [pc, #28]	; (80003cc <buffer_was_rein+0x74>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        }
        fifo_buffer.changed=1;
 80003b6:	4b05      	ldr	r3, [pc, #20]	; (80003cc <buffer_was_rein+0x74>)
 80003b8:	2201      	movs	r2, #1
 80003ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        return 1;
 80003be:	2301      	movs	r3, #1
    }
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	370c      	adds	r7, #12
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr
 80003cc:	200001ac 	.word	0x200001ac

080003d0 <check_usb_buffer>:

void check_usb_buffer() {
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af00      	add	r7, sp, #0
    // Der komplette USB-Buffer in unseren Ringbuffer übertragen
    for (uint8_t z=0; z<buffergroesse; z++) {
 80003d6:	2300      	movs	r3, #0
 80003d8:	71fb      	strb	r3, [r7, #7]
 80003da:	e00d      	b.n	80003f8 <check_usb_buffer+0x28>
        buffer_was_rein(bufferdata[z]);
 80003dc:	79fb      	ldrb	r3, [r7, #7]
 80003de:	4a0a      	ldr	r2, [pc, #40]	; (8000408 <check_usb_buffer+0x38>)
 80003e0:	5cd3      	ldrb	r3, [r2, r3]
 80003e2:	b2db      	uxtb	r3, r3
 80003e4:	4618      	mov	r0, r3
 80003e6:	f7ff ffb7 	bl	8000358 <buffer_was_rein>
        bufferdata[z]=0;
 80003ea:	79fb      	ldrb	r3, [r7, #7]
 80003ec:	4a06      	ldr	r2, [pc, #24]	; (8000408 <check_usb_buffer+0x38>)
 80003ee:	2100      	movs	r1, #0
 80003f0:	54d1      	strb	r1, [r2, r3]
    for (uint8_t z=0; z<buffergroesse; z++) {
 80003f2:	79fb      	ldrb	r3, [r7, #7]
 80003f4:	3301      	adds	r3, #1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	79fb      	ldrb	r3, [r7, #7]
 80003fa:	2b3f      	cmp	r3, #63	; 0x3f
 80003fc:	d9ee      	bls.n	80003dc <check_usb_buffer+0xc>
    }
}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	3708      	adds	r7, #8
 8000404:	46bd      	mov	sp, r7
 8000406:	bd80      	pop	{r7, pc}
 8000408:	2000044c 	.word	0x2000044c

0800040c <blink_green>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void blink_green(int power) {
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, power);
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	b2db      	uxtb	r3, r3
 8000418:	461a      	mov	r2, r3
 800041a:	2180      	movs	r1, #128	; 0x80
 800041c:	4803      	ldr	r0, [pc, #12]	; (800042c <blink_green+0x20>)
 800041e:	f000 fed7 	bl	80011d0 <HAL_GPIO_WritePin>
}
 8000422:	bf00      	nop
 8000424:	3708      	adds	r7, #8
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}
 800042a:	bf00      	nop
 800042c:	48000800 	.word	0x48000800

08000430 <blink_blue>:
void blink_blue(int power) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	if (power==2){
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	2b02      	cmp	r3, #2
 800043c:	d104      	bne.n	8000448 <blink_blue+0x18>
		HAL_GPIO_TogglePin(LED2_GPIO_Port,LED2_Pin);
 800043e:	2180      	movs	r1, #128	; 0x80
 8000440:	4807      	ldr	r0, [pc, #28]	; (8000460 <blink_blue+0x30>)
 8000442:	f000 fedd 	bl	8001200 <HAL_GPIO_TogglePin>
	}else{	
    	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, power);
	}
}
 8000446:	e006      	b.n	8000456 <blink_blue+0x26>
    	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, power);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	b2db      	uxtb	r3, r3
 800044c:	461a      	mov	r2, r3
 800044e:	2180      	movs	r1, #128	; 0x80
 8000450:	4803      	ldr	r0, [pc, #12]	; (8000460 <blink_blue+0x30>)
 8000452:	f000 febd 	bl	80011d0 <HAL_GPIO_WritePin>
}
 8000456:	bf00      	nop
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
 800045e:	bf00      	nop
 8000460:	48000400 	.word	0x48000400

08000464 <read_input>:
void blink_red(int power) {
    	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, power);
}
uint8_t read_input(){
 8000464:	b580      	push	{r7, lr}
 8000466:	af00      	add	r7, sp, #0
    return HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000468:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800046c:	4802      	ldr	r0, [pc, #8]	; (8000478 <read_input+0x14>)
 800046e:	f000 fe97 	bl	80011a0 <HAL_GPIO_ReadPin>
 8000472:	4603      	mov	r3, r0
}
 8000474:	4618      	mov	r0, r3
 8000476:	bd80      	pop	{r7, pc}
 8000478:	48000800 	.word	0x48000800

0800047c <show_lifesigns>:
void show_lifesigns() {
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
    static uint32_t time;
    if((HAL_GetTick()-time)>1000) {
 8000480:	f000 fbba 	bl	8000bf8 <HAL_GetTick>
 8000484:	4602      	mov	r2, r0
 8000486:	4b09      	ldr	r3, [pc, #36]	; (80004ac <show_lifesigns+0x30>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	1ad3      	subs	r3, r2, r3
 800048c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000490:	d909      	bls.n	80004a6 <show_lifesigns+0x2a>
        time=HAL_GetTick();
 8000492:	f000 fbb1 	bl	8000bf8 <HAL_GetTick>
 8000496:	4603      	mov	r3, r0
 8000498:	4a04      	ldr	r2, [pc, #16]	; (80004ac <show_lifesigns+0x30>)
 800049a:	6013      	str	r3, [r2, #0]
        HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800049c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80004a0:	4803      	ldr	r0, [pc, #12]	; (80004b0 <show_lifesigns+0x34>)
 80004a2:	f000 fead 	bl	8001200 <HAL_GPIO_TogglePin>
    }
}
 80004a6:	bf00      	nop
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	20000224 	.word	0x20000224
 80004b0:	48000400 	.word	0x48000400

080004b4 <get_fifo_buffer_length>:
uint8_t get_fifo_buffer_length() {
 80004b4:	b480      	push	{r7}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
    uint8_t n;
    if (fifo_buffer.next<fifo_buffer.last) {
 80004ba:	4b12      	ldr	r3, [pc, #72]	; (8000504 <get_fifo_buffer_length+0x50>)
 80004bc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80004c0:	4b10      	ldr	r3, [pc, #64]	; (8000504 <get_fifo_buffer_length+0x50>)
 80004c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80004c6:	429a      	cmp	r2, r3
 80004c8:	d20a      	bcs.n	80004e0 <get_fifo_buffer_length+0x2c>
        n = fifo_buffer.next + buffergroesse - fifo_buffer.last +1;
 80004ca:	4b0e      	ldr	r3, [pc, #56]	; (8000504 <get_fifo_buffer_length+0x50>)
 80004cc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80004d0:	4b0c      	ldr	r3, [pc, #48]	; (8000504 <get_fifo_buffer_length+0x50>)
 80004d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80004d6:	1ad3      	subs	r3, r2, r3
 80004d8:	b2db      	uxtb	r3, r3
 80004da:	3341      	adds	r3, #65	; 0x41
 80004dc:	71fb      	strb	r3, [r7, #7]
 80004de:	e009      	b.n	80004f4 <get_fifo_buffer_length+0x40>
    } else {
        n = fifo_buffer.next - fifo_buffer.last + 1;
 80004e0:	4b08      	ldr	r3, [pc, #32]	; (8000504 <get_fifo_buffer_length+0x50>)
 80004e2:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80004e6:	4b07      	ldr	r3, [pc, #28]	; (8000504 <get_fifo_buffer_length+0x50>)
 80004e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80004ec:	1ad3      	subs	r3, r2, r3
 80004ee:	b2db      	uxtb	r3, r3
 80004f0:	3301      	adds	r3, #1
 80004f2:	71fb      	strb	r3, [r7, #7]
    }
    return n;
 80004f4:	79fb      	ldrb	r3, [r7, #7]
}
 80004f6:	4618      	mov	r0, r3
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000500:	4770      	bx	lr
 8000502:	bf00      	nop
 8000504:	200001ac 	.word	0x200001ac

08000508 <check_command>:
#define input_3 "do 3"
#define input_4 "do 4"
#define input_read "read"
#define input_show "show"

uint8_t check_command(uint8_t length) {
 8000508:	b5b0      	push	{r4, r5, r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	4603      	mov	r3, r0
 8000510:	71fb      	strb	r3, [r7, #7]
 8000512:	466b      	mov	r3, sp
 8000514:	461d      	mov	r5, r3
    uint8_t answer[length];
 8000516:	79fc      	ldrb	r4, [r7, #7]
 8000518:	4623      	mov	r3, r4
 800051a:	3b01      	subs	r3, #1
 800051c:	613b      	str	r3, [r7, #16]
 800051e:	b2e0      	uxtb	r0, r4
 8000520:	f04f 0100 	mov.w	r1, #0
 8000524:	f04f 0200 	mov.w	r2, #0
 8000528:	f04f 0300 	mov.w	r3, #0
 800052c:	00cb      	lsls	r3, r1, #3
 800052e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000532:	00c2      	lsls	r2, r0, #3
 8000534:	b2e0      	uxtb	r0, r4
 8000536:	f04f 0100 	mov.w	r1, #0
 800053a:	f04f 0200 	mov.w	r2, #0
 800053e:	f04f 0300 	mov.w	r3, #0
 8000542:	00cb      	lsls	r3, r1, #3
 8000544:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000548:	00c2      	lsls	r2, r0, #3
 800054a:	4623      	mov	r3, r4
 800054c:	3307      	adds	r3, #7
 800054e:	08db      	lsrs	r3, r3, #3
 8000550:	00db      	lsls	r3, r3, #3
 8000552:	ebad 0d03 	sub.w	sp, sp, r3
 8000556:	466b      	mov	r3, sp
 8000558:	3300      	adds	r3, #0
 800055a:	60fb      	str	r3, [r7, #12]
    for (uint8_t i=0; i<length; i++) {
 800055c:	2300      	movs	r3, #0
 800055e:	75fb      	strb	r3, [r7, #23]
 8000560:	e009      	b.n	8000576 <check_command+0x6e>
        answer[i]=buffer_was_raus();
 8000562:	f7ff fec3 	bl	80002ec <buffer_was_raus>
 8000566:	4602      	mov	r2, r0
 8000568:	7dfb      	ldrb	r3, [r7, #23]
 800056a:	b2d1      	uxtb	r1, r2
 800056c:	68fa      	ldr	r2, [r7, #12]
 800056e:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i=0; i<length; i++) {
 8000570:	7dfb      	ldrb	r3, [r7, #23]
 8000572:	3301      	adds	r3, #1
 8000574:	75fb      	strb	r3, [r7, #23]
 8000576:	7dfa      	ldrb	r2, [r7, #23]
 8000578:	79fb      	ldrb	r3, [r7, #7]
 800057a:	429a      	cmp	r2, r3
 800057c:	d3f1      	bcc.n	8000562 <check_command+0x5a>
    }
	// vergleich der eingaben mit den vordefinierten befehlen
    if 	 (!strcmp(answer,input_help)) {
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	4920      	ldr	r1, [pc, #128]	; (8000604 <check_command+0xfc>)
 8000582:	4618      	mov	r0, r3
 8000584:	f7ff fe32 	bl	80001ec <strcmp>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d101      	bne.n	8000592 <check_command+0x8a>
        return 1;
 800058e:	2301      	movs	r3, #1
 8000590:	e032      	b.n	80005f8 <check_command+0xf0>
    } else if (!strcmp(answer,input_calc)) {
 8000592:	68fb      	ldr	r3, [r7, #12]
 8000594:	491c      	ldr	r1, [pc, #112]	; (8000608 <check_command+0x100>)
 8000596:	4618      	mov	r0, r3
 8000598:	f7ff fe28 	bl	80001ec <strcmp>
 800059c:	4603      	mov	r3, r0
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d101      	bne.n	80005a6 <check_command+0x9e>
        return 2;
 80005a2:	2302      	movs	r3, #2
 80005a4:	e028      	b.n	80005f8 <check_command+0xf0>
    } else if (!strcmp(answer,input_3)) {
 80005a6:	68fb      	ldr	r3, [r7, #12]
 80005a8:	4918      	ldr	r1, [pc, #96]	; (800060c <check_command+0x104>)
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff fe1e 	bl	80001ec <strcmp>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d101      	bne.n	80005ba <check_command+0xb2>
        return 3;
 80005b6:	2303      	movs	r3, #3
 80005b8:	e01e      	b.n	80005f8 <check_command+0xf0>
    } else if (!strcmp(answer,input_4)) {
 80005ba:	68fb      	ldr	r3, [r7, #12]
 80005bc:	4914      	ldr	r1, [pc, #80]	; (8000610 <check_command+0x108>)
 80005be:	4618      	mov	r0, r3
 80005c0:	f7ff fe14 	bl	80001ec <strcmp>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d101      	bne.n	80005ce <check_command+0xc6>
        return 4;
 80005ca:	2304      	movs	r3, #4
 80005cc:	e014      	b.n	80005f8 <check_command+0xf0>
    } else if (!strcmp(answer,input_read)) {
 80005ce:	68fb      	ldr	r3, [r7, #12]
 80005d0:	4910      	ldr	r1, [pc, #64]	; (8000614 <check_command+0x10c>)
 80005d2:	4618      	mov	r0, r3
 80005d4:	f7ff fe0a 	bl	80001ec <strcmp>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d101      	bne.n	80005e2 <check_command+0xda>
        return 5;
 80005de:	2305      	movs	r3, #5
 80005e0:	e00a      	b.n	80005f8 <check_command+0xf0>
    } else if (!strcmp(answer,input_show)) {
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	490c      	ldr	r1, [pc, #48]	; (8000618 <check_command+0x110>)
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff fe00 	bl	80001ec <strcmp>
 80005ec:	4603      	mov	r3, r0
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d101      	bne.n	80005f6 <check_command+0xee>
        return 6;
 80005f2:	2306      	movs	r3, #6
 80005f4:	e000      	b.n	80005f8 <check_command+0xf0>
    } else {
        return 0;
 80005f6:	2300      	movs	r3, #0
 80005f8:	46ad      	mov	sp, r5
    }


}
 80005fa:	4618      	mov	r0, r3
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bdb0      	pop	{r4, r5, r7, pc}
 8000602:	bf00      	nop
 8000604:	080075d8 	.word	0x080075d8
 8000608:	080075e0 	.word	0x080075e0
 800060c:	080075e8 	.word	0x080075e8
 8000610:	080075f0 	.word	0x080075f0
 8000614:	080075f8 	.word	0x080075f8
 8000618:	08007600 	.word	0x08007600

0800061c <calculate_data>:

void calculate_data(){
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
	// hier werden die eingelesenen datenbits konvertriert
	//leere die datenpaketstruktur, das müsste eigentlich schneller gehen, aber schneller dauerte länger als das hier zu tippen.
	datenpaket.byte[0]=0;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <calculate_data+0xbc>)
 8000624:	2200      	movs	r2, #0
 8000626:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	datenpaket.byte[1]=0;
 800062a:	4b2b      	ldr	r3, [pc, #172]	; (80006d8 <calculate_data+0xbc>)
 800062c:	2200      	movs	r2, #0
 800062e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
	datenpaket.byte[2]=0;
 8000632:	4b29      	ldr	r3, [pc, #164]	; (80006d8 <calculate_data+0xbc>)
 8000634:	2200      	movs	r2, #0
 8000636:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
	datenpaket.byte[3]=0;
 800063a:	4b27      	ldr	r3, [pc, #156]	; (80006d8 <calculate_data+0xbc>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
	//fülle hbytes


	// fülle bytes
	for (uint8_t j=0;j<4;j++){
 8000642:	2300      	movs	r3, #0
 8000644:	71fb      	strb	r3, [r7, #7]
 8000646:	e02b      	b.n	80006a0 <calculate_data+0x84>
		for (uint8_t i=0;i<8;i++){ 
 8000648:	2300      	movs	r3, #0
 800064a:	71bb      	strb	r3, [r7, #6]
 800064c:	e022      	b.n	8000694 <calculate_data+0x78>
			uint8_t k=i+j*8;
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	00db      	lsls	r3, r3, #3
 8000652:	b2da      	uxtb	r2, r3
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	4413      	add	r3, r2
 8000658:	713b      	strb	r3, [r7, #4]
			uint8_t l=(1<<i);
 800065a:	79bb      	ldrb	r3, [r7, #6]
 800065c:	2201      	movs	r2, #1
 800065e:	fa02 f303 	lsl.w	r3, r2, r3
 8000662:	70fb      	strb	r3, [r7, #3]
			datenpaket.byte[j]+=datenpaket.bit[k]*(1<<i);
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <calculate_data+0xbc>)
 8000668:	4413      	add	r3, r2
 800066a:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 800066e:	793b      	ldrb	r3, [r7, #4]
 8000670:	4a19      	ldr	r2, [pc, #100]	; (80006d8 <calculate_data+0xbc>)
 8000672:	5cd3      	ldrb	r3, [r2, r3]
 8000674:	461a      	mov	r2, r3
 8000676:	79bb      	ldrb	r3, [r7, #6]
 8000678:	fa02 f303 	lsl.w	r3, r2, r3
 800067c:	b2da      	uxtb	r2, r3
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	440a      	add	r2, r1
 8000682:	b2d1      	uxtb	r1, r2
 8000684:	4a14      	ldr	r2, [pc, #80]	; (80006d8 <calculate_data+0xbc>)
 8000686:	4413      	add	r3, r2
 8000688:	460a      	mov	r2, r1
 800068a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		for (uint8_t i=0;i<8;i++){ 
 800068e:	79bb      	ldrb	r3, [r7, #6]
 8000690:	3301      	adds	r3, #1
 8000692:	71bb      	strb	r3, [r7, #6]
 8000694:	79bb      	ldrb	r3, [r7, #6]
 8000696:	2b07      	cmp	r3, #7
 8000698:	d9d9      	bls.n	800064e <calculate_data+0x32>
	for (uint8_t j=0;j<4;j++){
 800069a:	79fb      	ldrb	r3, [r7, #7]
 800069c:	3301      	adds	r3, #1
 800069e:	71fb      	strb	r3, [r7, #7]
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	2b03      	cmp	r3, #3
 80006a4:	d9d0      	bls.n	8000648 <calculate_data+0x2c>
		}
	}
	
	for (uint8_t j=0;j<32;j++){
 80006a6:	2300      	movs	r3, #0
 80006a8:	717b      	strb	r3, [r7, #5]
 80006aa:	e00a      	b.n	80006c2 <calculate_data+0xa6>
		// mach aus True and False '0' und '1'
		datenpaket.bit[j]+=48;
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <calculate_data+0xbc>)
 80006b0:	5cd2      	ldrb	r2, [r2, r3]
 80006b2:	797b      	ldrb	r3, [r7, #5]
 80006b4:	3230      	adds	r2, #48	; 0x30
 80006b6:	b2d1      	uxtb	r1, r2
 80006b8:	4a07      	ldr	r2, [pc, #28]	; (80006d8 <calculate_data+0xbc>)
 80006ba:	54d1      	strb	r1, [r2, r3]
	for (uint8_t j=0;j<32;j++){
 80006bc:	797b      	ldrb	r3, [r7, #5]
 80006be:	3301      	adds	r3, #1
 80006c0:	717b      	strb	r3, [r7, #5]
 80006c2:	797b      	ldrb	r3, [r7, #5]
 80006c4:	2b1f      	cmp	r3, #31
 80006c6:	d9f1      	bls.n	80006ac <calculate_data+0x90>
	}
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	200001f0 	.word	0x200001f0

080006dc <start_reading_AiSpi>:

#define clock_ms 500
#define waitingtime 500
void start_reading_AiSpi(){
 80006dc:	b590      	push	{r4, r7, lr}
 80006de:	b083      	sub	sp, #12
 80006e0:	af00      	add	r7, sp, #0
	//Diese Funktion soll den SPI_sensor auslesen
	blink_green(1);
 80006e2:	2001      	movs	r0, #1
 80006e4:	f7ff fe92 	bl	800040c <blink_green>
	blink_blue(0);
 80006e8:	2000      	movs	r0, #0
 80006ea:	f7ff fea1 	bl	8000430 <blink_blue>
	HAL_Delay(waitingtime);
 80006ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80006f2:	f000 fa8d 	bl	8000c10 <HAL_Delay>
	blink_green(0);
 80006f6:	2000      	movs	r0, #0
 80006f8:	f7ff fe88 	bl	800040c <blink_green>
	for (uint8_t i=0;i<32;i++){
 80006fc:	2300      	movs	r3, #0
 80006fe:	71fb      	strb	r3, [r7, #7]
 8000700:	e012      	b.n	8000728 <start_reading_AiSpi+0x4c>
		// 0=aus,1=an,2=switch on/off
		blink_blue(2);
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff fe94 	bl	8000430 <blink_blue>
		HAL_Delay(clock_ms/2);
 8000708:	20fa      	movs	r0, #250	; 0xfa
 800070a:	f000 fa81 	bl	8000c10 <HAL_Delay>
		// schreibe den input an die stelle i von datenpaket;
		datenpaket.bit[i]=read_input();
 800070e:	79fc      	ldrb	r4, [r7, #7]
 8000710:	f7ff fea8 	bl	8000464 <read_input>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <start_reading_AiSpi+0x60>)
 800071a:	551a      	strb	r2, [r3, r4]
		HAL_Delay(clock_ms/2);
 800071c:	20fa      	movs	r0, #250	; 0xfa
 800071e:	f000 fa77 	bl	8000c10 <HAL_Delay>
	for (uint8_t i=0;i<32;i++){
 8000722:	79fb      	ldrb	r3, [r7, #7]
 8000724:	3301      	adds	r3, #1
 8000726:	71fb      	strb	r3, [r7, #7]
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b1f      	cmp	r3, #31
 800072c:	d9e9      	bls.n	8000702 <start_reading_AiSpi+0x26>
	}
	blink_green(1);
 800072e:	2001      	movs	r0, #1
 8000730:	f7ff fe6c 	bl	800040c <blink_green>
}
 8000734:	bf00      	nop
 8000736:	370c      	adds	r7, #12
 8000738:	46bd      	mov	sp, r7
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	200001f0 	.word	0x200001f0

08000740 <new_line>:

void new_line(){
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
	CDC_Transmit_FS("\n\r",strlen("\n\r"));
 8000744:	2102      	movs	r1, #2
 8000746:	4802      	ldr	r0, [pc, #8]	; (8000750 <new_line+0x10>)
 8000748:	f006 f962 	bl	8006a10 <CDC_Transmit_FS>
}
 800074c:	bf00      	nop
 800074e:	bd80      	pop	{r7, pc}
 8000750:	08007608 	.word	0x08007608

08000754 <show_commands>:

#define usb_delay 1
void show_commands(){
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	HAL_Delay(usb_delay);
 8000758:	2001      	movs	r0, #1
 800075a:	f000 fa59 	bl	8000c10 <HAL_Delay>
	CDC_Transmit_FS(input_help,strlen(input_help));
 800075e:	2104      	movs	r1, #4
 8000760:	4816      	ldr	r0, [pc, #88]	; (80007bc <show_commands+0x68>)
 8000762:	f006 f955 	bl	8006a10 <CDC_Transmit_FS>
	HAL_Delay(usb_delay);
 8000766:	2001      	movs	r0, #1
 8000768:	f000 fa52 	bl	8000c10 <HAL_Delay>
	new_line();
 800076c:	f7ff ffe8 	bl	8000740 <new_line>
	HAL_Delay(usb_delay);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 fa4d 	bl	8000c10 <HAL_Delay>
	CDC_Transmit_FS(input_read,strlen(input_read));
 8000776:	2104      	movs	r1, #4
 8000778:	4811      	ldr	r0, [pc, #68]	; (80007c0 <show_commands+0x6c>)
 800077a:	f006 f949 	bl	8006a10 <CDC_Transmit_FS>
	HAL_Delay(usb_delay);
 800077e:	2001      	movs	r0, #1
 8000780:	f000 fa46 	bl	8000c10 <HAL_Delay>
	new_line();
 8000784:	f7ff ffdc 	bl	8000740 <new_line>
	HAL_Delay(usb_delay);
 8000788:	2001      	movs	r0, #1
 800078a:	f000 fa41 	bl	8000c10 <HAL_Delay>
	CDC_Transmit_FS(input_calc,strlen(input_calc));
 800078e:	2104      	movs	r1, #4
 8000790:	480c      	ldr	r0, [pc, #48]	; (80007c4 <show_commands+0x70>)
 8000792:	f006 f93d 	bl	8006a10 <CDC_Transmit_FS>
	HAL_Delay(usb_delay);
 8000796:	2001      	movs	r0, #1
 8000798:	f000 fa3a 	bl	8000c10 <HAL_Delay>
	new_line();
 800079c:	f7ff ffd0 	bl	8000740 <new_line>
	HAL_Delay(usb_delay);
 80007a0:	2001      	movs	r0, #1
 80007a2:	f000 fa35 	bl	8000c10 <HAL_Delay>
	CDC_Transmit_FS(input_show,strlen(input_show));
 80007a6:	2104      	movs	r1, #4
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <show_commands+0x74>)
 80007aa:	f006 f931 	bl	8006a10 <CDC_Transmit_FS>
	HAL_Delay(usb_delay);
 80007ae:	2001      	movs	r0, #1
 80007b0:	f000 fa2e 	bl	8000c10 <HAL_Delay>
	new_line();
 80007b4:	f7ff ffc4 	bl	8000740 <new_line>
}
 80007b8:	bf00      	nop
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	080075d8 	.word	0x080075d8
 80007c0:	080075f8 	.word	0x080075f8
 80007c4:	080075e0 	.word	0x080075e0
 80007c8:	08007600 	.word	0x08007600

080007cc <show_data>:
#define response_show_bits "\n\r received bits:\n\r"
#define response_show_bytes "\n\r received bytes:"
#define response_read "\n\r strarting reading routine\n\r"
#define response_done "\n\r done reading\n\r"
#define response_d "\n\r invalid input \n\r try help\n\r"
void show_data(){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
            CDC_Transmit_FS(response_show_bits, strlen(response_show_bits));
 80007d0:	2113      	movs	r1, #19
 80007d2:	4812      	ldr	r0, [pc, #72]	; (800081c <show_data+0x50>)
 80007d4:	f006 f91c 	bl	8006a10 <CDC_Transmit_FS>
	    HAL_Delay(10);
 80007d8:	200a      	movs	r0, #10
 80007da:	f000 fa19 	bl	8000c10 <HAL_Delay>
	    CDC_Transmit_FS(datenpaket.bit,strlen(datenpaket.bit));
 80007de:	4810      	ldr	r0, [pc, #64]	; (8000820 <show_data+0x54>)
 80007e0:	f7ff fd0e 	bl	8000200 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	b29b      	uxth	r3, r3
 80007e8:	4619      	mov	r1, r3
 80007ea:	480d      	ldr	r0, [pc, #52]	; (8000820 <show_data+0x54>)
 80007ec:	f006 f910 	bl	8006a10 <CDC_Transmit_FS>
	    HAL_Delay(10);
 80007f0:	200a      	movs	r0, #10
 80007f2:	f000 fa0d 	bl	8000c10 <HAL_Delay>
	    CDC_Transmit_FS(response_show_bytes,strlen(response_show_bytes));
 80007f6:	2112      	movs	r1, #18
 80007f8:	480a      	ldr	r0, [pc, #40]	; (8000824 <show_data+0x58>)
 80007fa:	f006 f909 	bl	8006a10 <CDC_Transmit_FS>
	    HAL_Delay(10);
 80007fe:	200a      	movs	r0, #10
 8000800:	f000 fa06 	bl	8000c10 <HAL_Delay>
	    CDC_Transmit_FS(datenpaket.byte,strlen(datenpaket.byte));
 8000804:	4808      	ldr	r0, [pc, #32]	; (8000828 <show_data+0x5c>)
 8000806:	f7ff fcfb 	bl	8000200 <strlen>
 800080a:	4603      	mov	r3, r0
 800080c:	b29b      	uxth	r3, r3
 800080e:	4619      	mov	r1, r3
 8000810:	4805      	ldr	r0, [pc, #20]	; (8000828 <show_data+0x5c>)
 8000812:	f006 f8fd 	bl	8006a10 <CDC_Transmit_FS>

}
 8000816:	bf00      	nop
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	0800760c 	.word	0x0800760c
 8000820:	200001f0 	.word	0x200001f0
 8000824:	08007620 	.word	0x08007620
 8000828:	20000218 	.word	0x20000218

0800082c <answer_command>:

void answer_command() {
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
    uint8_t n=get_fifo_buffer_length();
 8000832:	f7ff fe3f 	bl	80004b4 <get_fifo_buffer_length>
 8000836:	4603      	mov	r3, r0
 8000838:	71fb      	strb	r3, [r7, #7]
    uint8_t cmd=check_command(n);
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4618      	mov	r0, r3
 800083e:	f7ff fe63 	bl	8000508 <check_command>
 8000842:	4603      	mov	r3, r0
 8000844:	71bb      	strb	r3, [r7, #6]
    if(fifo_buffer.changed) {
 8000846:	4b30      	ldr	r3, [pc, #192]	; (8000908 <answer_command+0xdc>)
 8000848:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800084c:	2b00      	cmp	r3, #0
 800084e:	d044      	beq.n	80008da <answer_command+0xae>
        switch (cmd) {
 8000850:	79bb      	ldrb	r3, [r7, #6]
 8000852:	2b06      	cmp	r3, #6
 8000854:	d842      	bhi.n	80008dc <answer_command+0xb0>
 8000856:	a201      	add	r2, pc, #4	; (adr r2, 800085c <answer_command+0x30>)
 8000858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800085c:	080008d1 	.word	0x080008d1
 8000860:	08000879 	.word	0x08000879
 8000864:	08000887 	.word	0x08000887
 8000868:	08000895 	.word	0x08000895
 800086c:	080008a5 	.word	0x080008a5
 8000870:	080008b5 	.word	0x080008b5
 8000874:	080008cb 	.word	0x080008cb
        case 1:
            CDC_Transmit_FS(response_1, strlen(response_1));
 8000878:	214b      	movs	r1, #75	; 0x4b
 800087a:	4824      	ldr	r0, [pc, #144]	; (800090c <answer_command+0xe0>)
 800087c:	f006 f8c8 	bl	8006a10 <CDC_Transmit_FS>
	    show_commands();	
 8000880:	f7ff ff68 	bl	8000754 <show_commands>
            break;
 8000884:	e02a      	b.n	80008dc <answer_command+0xb0>
        case 2:
            CDC_Transmit_FS(response_2, strlen(response_2));
 8000886:	211c      	movs	r1, #28
 8000888:	4821      	ldr	r0, [pc, #132]	; (8000910 <answer_command+0xe4>)
 800088a:	f006 f8c1 	bl	8006a10 <CDC_Transmit_FS>
	    calculate_data();
 800088e:	f7ff fec5 	bl	800061c <calculate_data>
            break;
 8000892:	e023      	b.n	80008dc <answer_command+0xb0>
        case 3:
            CDC_Transmit_FS(response_3, strlen(response_3));
 8000894:	2120      	movs	r1, #32
 8000896:	481f      	ldr	r0, [pc, #124]	; (8000914 <answer_command+0xe8>)
 8000898:	f006 f8ba 	bl	8006a10 <CDC_Transmit_FS>
            blink_blue(1);
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff fdc7 	bl	8000430 <blink_blue>
            break;
 80008a2:	e01b      	b.n	80008dc <answer_command+0xb0>
        case 4:
            CDC_Transmit_FS(response_4, strlen(response_4));
 80008a4:	211f      	movs	r1, #31
 80008a6:	481c      	ldr	r0, [pc, #112]	; (8000918 <answer_command+0xec>)
 80008a8:	f006 f8b2 	bl	8006a10 <CDC_Transmit_FS>
            blink_blue(0);
 80008ac:	2000      	movs	r0, #0
 80008ae:	f7ff fdbf 	bl	8000430 <blink_blue>
            break;
 80008b2:	e013      	b.n	80008dc <answer_command+0xb0>
        case 5:
            CDC_Transmit_FS(response_read, strlen(response_read));
 80008b4:	211e      	movs	r1, #30
 80008b6:	4819      	ldr	r0, [pc, #100]	; (800091c <answer_command+0xf0>)
 80008b8:	f006 f8aa 	bl	8006a10 <CDC_Transmit_FS>
            start_reading_AiSpi();
 80008bc:	f7ff ff0e 	bl	80006dc <start_reading_AiSpi>
            CDC_Transmit_FS(response_done, strlen(response_done));
 80008c0:	2111      	movs	r1, #17
 80008c2:	4817      	ldr	r0, [pc, #92]	; (8000920 <answer_command+0xf4>)
 80008c4:	f006 f8a4 	bl	8006a10 <CDC_Transmit_FS>
            break;
 80008c8:	e008      	b.n	80008dc <answer_command+0xb0>
        case 6:
	    show_data();
 80008ca:	f7ff ff7f 	bl	80007cc <show_data>
	    break;
 80008ce:	e005      	b.n	80008dc <answer_command+0xb0>
        case 0:
            CDC_Transmit_FS(response_d, strlen(response_d));
 80008d0:	211e      	movs	r1, #30
 80008d2:	4814      	ldr	r0, [pc, #80]	; (8000924 <answer_command+0xf8>)
 80008d4:	f006 f89c 	bl	8006a10 <CDC_Transmit_FS>
            break;
 80008d8:	e000      	b.n	80008dc <answer_command+0xb0>
        }
    }
 80008da:	bf00      	nop

    if((fifo_buffer.next==fifo_buffer.last) && (fifo_buffer.changed)) {
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <answer_command+0xdc>)
 80008de:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <answer_command+0xdc>)
 80008e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80008e8:	429a      	cmp	r2, r3
 80008ea:	d108      	bne.n	80008fe <answer_command+0xd2>
 80008ec:	4b06      	ldr	r3, [pc, #24]	; (8000908 <answer_command+0xdc>)
 80008ee:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <answer_command+0xd2>
        fifo_buffer.changed=0;
 80008f6:	4b04      	ldr	r3, [pc, #16]	; (8000908 <answer_command+0xdc>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    }
}
 80008fe:	bf00      	nop
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	200001ac 	.word	0x200001ac
 800090c:	08007634 	.word	0x08007634
 8000910:	08007680 	.word	0x08007680
 8000914:	080076a0 	.word	0x080076a0
 8000918:	080076c4 	.word	0x080076c4
 800091c:	080076e4 	.word	0x080076e4
 8000920:	08007704 	.word	0x08007704
 8000924:	08007718 	.word	0x08007718

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092c:	f000 f8fb 	bl	8000b26 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000930:	f000 f80b 	bl	800094a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000934:	f7ff fc6c 	bl	8000210 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000938:	f005 ff9c 	bl	8006874 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
    {
        // Lebenszeichen durch LED3 und ". . . . . ." über USB to serial
        show_lifesigns();
 800093c:	f7ff fd9e 	bl	800047c <show_lifesigns>

        // USB_buffer ind Ringbuffer übertragen
        check_usb_buffer();
 8000940:	f7ff fd46 	bl	80003d0 <check_usb_buffer>

        // Eingegangene Befehle beantworten
        answer_command();
 8000944:	f7ff ff72 	bl	800082c <answer_command>
        show_lifesigns();
 8000948:	e7f8      	b.n	800093c <main+0x14>

0800094a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b096      	sub	sp, #88	; 0x58
 800094e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	2244      	movs	r2, #68	; 0x44
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f006 fe29 	bl	80075b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800095e:	463b      	mov	r3, r7
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800096c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000970:	f001 fd02 	bl	8002378 <HAL_PWREx_ControlVoltageScaling>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800097a:	f000 f83c 	bl	80009f6 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800097e:	2314      	movs	r3, #20
 8000980:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8000982:	2300      	movs	r3, #0
 8000984:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000986:	2301      	movs	r3, #1
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800098e:	2360      	movs	r3, #96	; 0x60
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000992:	2302      	movs	r3, #2
 8000994:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000996:	2301      	movs	r3, #1
 8000998:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800099a:	2301      	movs	r3, #1
 800099c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800099e:	2328      	movs	r3, #40	; 0x28
 80009a0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009a2:	2302      	movs	r3, #2
 80009a4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80009a6:	2302      	movs	r3, #2
 80009a8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80009aa:	2302      	movs	r3, #2
 80009ac:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4618      	mov	r0, r3
 80009b4:	f001 fd46 	bl	8002444 <HAL_RCC_OscConfig>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009be:	f000 f81a 	bl	80009f6 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c2:	230f      	movs	r3, #15
 80009c4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c6:	2303      	movs	r3, #3
 80009c8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009d2:	2300      	movs	r3, #0
 80009d4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009d6:	463b      	mov	r3, r7
 80009d8:	2104      	movs	r1, #4
 80009da:	4618      	mov	r0, r3
 80009dc:	f002 f958 	bl	8002c90 <HAL_RCC_ClockConfig>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80009e6:	f000 f806 	bl	80009f6 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80009ea:	f002 fe27 	bl	800363c <HAL_RCCEx_EnableMSIPLLMode>
}
 80009ee:	bf00      	nop
 80009f0:	3758      	adds	r7, #88	; 0x58
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009f6:	b480      	push	{r7}
 80009f8:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009fa:	b672      	cpsid	i
}
 80009fc:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80009fe:	e7fe      	b.n	80009fe <Error_Handler+0x8>

08000a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a06:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <HAL_MspInit+0x44>)
 8000a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a0a:	4a0e      	ldr	r2, [pc, #56]	; (8000a44 <HAL_MspInit+0x44>)
 8000a0c:	f043 0301 	orr.w	r3, r3, #1
 8000a10:	6613      	str	r3, [r2, #96]	; 0x60
 8000a12:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <HAL_MspInit+0x44>)
 8000a14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a16:	f003 0301 	and.w	r3, r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
 8000a1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a1e:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <HAL_MspInit+0x44>)
 8000a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a22:	4a08      	ldr	r2, [pc, #32]	; (8000a44 <HAL_MspInit+0x44>)
 8000a24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a28:	6593      	str	r3, [r2, #88]	; 0x58
 8000a2a:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <HAL_MspInit+0x44>)
 8000a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a32:	603b      	str	r3, [r7, #0]
 8000a34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40021000 	.word	0x40021000

08000a48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a4c:	e7fe      	b.n	8000a4c <NMI_Handler+0x4>

08000a4e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a4e:	b480      	push	{r7}
 8000a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a52:	e7fe      	b.n	8000a52 <HardFault_Handler+0x4>

08000a54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a58:	e7fe      	b.n	8000a58 <MemManage_Handler+0x4>

08000a5a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a5e:	e7fe      	b.n	8000a5e <BusFault_Handler+0x4>

08000a60 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a60:	b480      	push	{r7}
 8000a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a64:	e7fe      	b.n	8000a64 <UsageFault_Handler+0x4>

08000a66 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr

08000a90 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a94:	f000 f89c 	bl	8000bd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a98:	bf00      	nop
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000aa0:	4802      	ldr	r0, [pc, #8]	; (8000aac <OTG_FS_IRQHandler+0x10>)
 8000aa2:	f000 fd1a 	bl	80014da <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	20001960 	.word	0x20001960

08000ab0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000ab4:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <SystemInit+0x20>)
 8000ab6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <SystemInit+0x20>)
 8000abc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ac0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ac4:	bf00      	nop
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000ed00 	.word	0xe000ed00

08000ad4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ad4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b0c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ad8:	f7ff ffea 	bl	8000ab0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000adc:	480c      	ldr	r0, [pc, #48]	; (8000b10 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ade:	490d      	ldr	r1, [pc, #52]	; (8000b14 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ae0:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <LoopForever+0xe>)
  movs r3, #0
 8000ae2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ae4:	e002      	b.n	8000aec <LoopCopyDataInit>

08000ae6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ae6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ae8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aea:	3304      	adds	r3, #4

08000aec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000aec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000af0:	d3f9      	bcc.n	8000ae6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000af2:	4a0a      	ldr	r2, [pc, #40]	; (8000b1c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000af4:	4c0a      	ldr	r4, [pc, #40]	; (8000b20 <LoopForever+0x16>)
  movs r3, #0
 8000af6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000af8:	e001      	b.n	8000afe <LoopFillZerobss>

08000afa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000afa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000afc:	3204      	adds	r2, #4

08000afe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000afe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b00:	d3fb      	bcc.n	8000afa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b02:	f006 fd23 	bl	800754c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b06:	f7ff ff0f 	bl	8000928 <main>

08000b0a <LoopForever>:

LoopForever:
    b LoopForever
 8000b0a:	e7fe      	b.n	8000b0a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000b0c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b10:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b14:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 8000b18:	080077c8 	.word	0x080077c8
  ldr r2, =_sbss
 8000b1c:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 8000b20:	20001d68 	.word	0x20001d68

08000b24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b24:	e7fe      	b.n	8000b24 <ADC1_2_IRQHandler>

08000b26 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b26:	b580      	push	{r7, lr}
 8000b28:	b082      	sub	sp, #8
 8000b2a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 f961 	bl	8000df8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f80e 	bl	8000b58 <HAL_InitTick>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d002      	beq.n	8000b48 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b42:	2301      	movs	r3, #1
 8000b44:	71fb      	strb	r3, [r7, #7]
 8000b46:	e001      	b.n	8000b4c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b48:	f7ff ff5a 	bl	8000a00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b4c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
	...

08000b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b60:	2300      	movs	r3, #0
 8000b62:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b64:	4b17      	ldr	r3, [pc, #92]	; (8000bc4 <HAL_InitTick+0x6c>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d023      	beq.n	8000bb4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b6c:	4b16      	ldr	r3, [pc, #88]	; (8000bc8 <HAL_InitTick+0x70>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <HAL_InitTick+0x6c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	4619      	mov	r1, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b82:	4618      	mov	r0, r3
 8000b84:	f000 f96d 	bl	8000e62 <HAL_SYSTICK_Config>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d10f      	bne.n	8000bae <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b0f      	cmp	r3, #15
 8000b92:	d809      	bhi.n	8000ba8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b94:	2200      	movs	r2, #0
 8000b96:	6879      	ldr	r1, [r7, #4]
 8000b98:	f04f 30ff 	mov.w	r0, #4294967295
 8000b9c:	f000 f937 	bl	8000e0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	; (8000bcc <HAL_InitTick+0x74>)
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	6013      	str	r3, [r2, #0]
 8000ba6:	e007      	b.n	8000bb8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	73fb      	strb	r3, [r7, #15]
 8000bac:	e004      	b.n	8000bb8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	73fb      	strb	r3, [r7, #15]
 8000bb2:	e001      	b.n	8000bb8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000bb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3710      	adds	r7, #16
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008
 8000bc8:	20000000 	.word	0x20000000
 8000bcc:	20000004 	.word	0x20000004

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	2000048c 	.word	0x2000048c

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	; (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000048c 	.word	0x2000048c

08000c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff ffee 	bl	8000bf8 <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d005      	beq.n	8000c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_Delay+0x44>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c36:	bf00      	nop
 8000c38:	f7ff ffde 	bl	8000bf8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8f7      	bhi.n	8000c38 <HAL_Delay+0x28>
  {
  }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	; (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	; (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	; (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	; (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	; 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	; 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr
	...

08000db4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b082      	sub	sp, #8
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	3b01      	subs	r3, #1
 8000dc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc4:	d301      	bcc.n	8000dca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	e00f      	b.n	8000dea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dca:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <SysTick_Config+0x40>)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	3b01      	subs	r3, #1
 8000dd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd2:	210f      	movs	r1, #15
 8000dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000dd8:	f7ff ff8e 	bl	8000cf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ddc:	4b05      	ldr	r3, [pc, #20]	; (8000df4 <SysTick_Config+0x40>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de2:	4b04      	ldr	r3, [pc, #16]	; (8000df4 <SysTick_Config+0x40>)
 8000de4:	2207      	movs	r2, #7
 8000de6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3708      	adds	r7, #8
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	e000e010 	.word	0xe000e010

08000df8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f7ff ff29 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	4603      	mov	r3, r0
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
 8000e1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e20:	f7ff ff3e 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000e24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e26:	687a      	ldr	r2, [r7, #4]
 8000e28:	68b9      	ldr	r1, [r7, #8]
 8000e2a:	6978      	ldr	r0, [r7, #20]
 8000e2c:	f7ff ff8e 	bl	8000d4c <NVIC_EncodePriority>
 8000e30:	4602      	mov	r2, r0
 8000e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e36:	4611      	mov	r1, r2
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f7ff ff5d 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e46:	b580      	push	{r7, lr}
 8000e48:	b082      	sub	sp, #8
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e54:	4618      	mov	r0, r3
 8000e56:	f7ff ff31 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e5a:	bf00      	nop
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e6a:	6878      	ldr	r0, [r7, #4]
 8000e6c:	f7ff ffa2 	bl	8000db4 <SysTick_Config>
 8000e70:	4603      	mov	r3, r0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	e166      	b.n	800115a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	2101      	movs	r1, #1
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 8158 	beq.w	8001154 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d005      	beq.n	8000ebc <HAL_GPIO_Init+0x40>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d130      	bne.n	8000f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	f003 0201 	and.w	r2, r3, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d017      	beq.n	8000f5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d123      	bne.n	8000fae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	691a      	ldr	r2, [r3, #16]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	6939      	ldr	r1, [r7, #16]
 8000faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0203 	and.w	r2, r3, #3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80b2 	beq.w	8001154 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	4b61      	ldr	r3, [pc, #388]	; (8001178 <HAL_GPIO_Init+0x2fc>)
 8000ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff4:	4a60      	ldr	r2, [pc, #384]	; (8001178 <HAL_GPIO_Init+0x2fc>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffc:	4b5e      	ldr	r3, [pc, #376]	; (8001178 <HAL_GPIO_Init+0x2fc>)
 8000ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001008:	4a5c      	ldr	r2, [pc, #368]	; (800117c <HAL_GPIO_Init+0x300>)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001032:	d02b      	beq.n	800108c <HAL_GPIO_Init+0x210>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a52      	ldr	r2, [pc, #328]	; (8001180 <HAL_GPIO_Init+0x304>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d025      	beq.n	8001088 <HAL_GPIO_Init+0x20c>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a51      	ldr	r2, [pc, #324]	; (8001184 <HAL_GPIO_Init+0x308>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d01f      	beq.n	8001084 <HAL_GPIO_Init+0x208>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a50      	ldr	r2, [pc, #320]	; (8001188 <HAL_GPIO_Init+0x30c>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d019      	beq.n	8001080 <HAL_GPIO_Init+0x204>
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	4a4f      	ldr	r2, [pc, #316]	; (800118c <HAL_GPIO_Init+0x310>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d013      	beq.n	800107c <HAL_GPIO_Init+0x200>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	4a4e      	ldr	r2, [pc, #312]	; (8001190 <HAL_GPIO_Init+0x314>)
 8001058:	4293      	cmp	r3, r2
 800105a:	d00d      	beq.n	8001078 <HAL_GPIO_Init+0x1fc>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a4d      	ldr	r2, [pc, #308]	; (8001194 <HAL_GPIO_Init+0x318>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d007      	beq.n	8001074 <HAL_GPIO_Init+0x1f8>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a4c      	ldr	r2, [pc, #304]	; (8001198 <HAL_GPIO_Init+0x31c>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d101      	bne.n	8001070 <HAL_GPIO_Init+0x1f4>
 800106c:	2307      	movs	r3, #7
 800106e:	e00e      	b.n	800108e <HAL_GPIO_Init+0x212>
 8001070:	2308      	movs	r3, #8
 8001072:	e00c      	b.n	800108e <HAL_GPIO_Init+0x212>
 8001074:	2306      	movs	r3, #6
 8001076:	e00a      	b.n	800108e <HAL_GPIO_Init+0x212>
 8001078:	2305      	movs	r3, #5
 800107a:	e008      	b.n	800108e <HAL_GPIO_Init+0x212>
 800107c:	2304      	movs	r3, #4
 800107e:	e006      	b.n	800108e <HAL_GPIO_Init+0x212>
 8001080:	2303      	movs	r3, #3
 8001082:	e004      	b.n	800108e <HAL_GPIO_Init+0x212>
 8001084:	2302      	movs	r3, #2
 8001086:	e002      	b.n	800108e <HAL_GPIO_Init+0x212>
 8001088:	2301      	movs	r3, #1
 800108a:	e000      	b.n	800108e <HAL_GPIO_Init+0x212>
 800108c:	2300      	movs	r3, #0
 800108e:	697a      	ldr	r2, [r7, #20]
 8001090:	f002 0203 	and.w	r2, r2, #3
 8001094:	0092      	lsls	r2, r2, #2
 8001096:	4093      	lsls	r3, r2
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	4313      	orrs	r3, r2
 800109c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800109e:	4937      	ldr	r1, [pc, #220]	; (800117c <HAL_GPIO_Init+0x300>)
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	089b      	lsrs	r3, r3, #2
 80010a4:	3302      	adds	r3, #2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80010ac:	4b3b      	ldr	r3, [pc, #236]	; (800119c <HAL_GPIO_Init+0x320>)
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	43db      	mvns	r3, r3
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	4013      	ands	r3, r2
 80010ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d003      	beq.n	80010d0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80010c8:	693a      	ldr	r2, [r7, #16]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	4313      	orrs	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010d0:	4a32      	ldr	r2, [pc, #200]	; (800119c <HAL_GPIO_Init+0x320>)
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010d6:	4b31      	ldr	r3, [pc, #196]	; (800119c <HAL_GPIO_Init+0x320>)
 80010d8:	68db      	ldr	r3, [r3, #12]
 80010da:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	43db      	mvns	r3, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4013      	ands	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d003      	beq.n	80010fa <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80010f2:	693a      	ldr	r2, [r7, #16]
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	4313      	orrs	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010fa:	4a28      	ldr	r2, [pc, #160]	; (800119c <HAL_GPIO_Init+0x320>)
 80010fc:	693b      	ldr	r3, [r7, #16]
 80010fe:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001100:	4b26      	ldr	r3, [pc, #152]	; (800119c <HAL_GPIO_Init+0x320>)
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	43db      	mvns	r3, r3
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	4013      	ands	r3, r2
 800110e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 800111c:	693a      	ldr	r2, [r7, #16]
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	4313      	orrs	r3, r2
 8001122:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001124:	4a1d      	ldr	r2, [pc, #116]	; (800119c <HAL_GPIO_Init+0x320>)
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800112a:	4b1c      	ldr	r3, [pc, #112]	; (800119c <HAL_GPIO_Init+0x320>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	43db      	mvns	r3, r3
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	4013      	ands	r3, r2
 8001138:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	4313      	orrs	r3, r2
 800114c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800114e:	4a13      	ldr	r2, [pc, #76]	; (800119c <HAL_GPIO_Init+0x320>)
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001154:	697b      	ldr	r3, [r7, #20]
 8001156:	3301      	adds	r3, #1
 8001158:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681a      	ldr	r2, [r3, #0]
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fa22 f303 	lsr.w	r3, r2, r3
 8001164:	2b00      	cmp	r3, #0
 8001166:	f47f ae91 	bne.w	8000e8c <HAL_GPIO_Init+0x10>
  }
}
 800116a:	bf00      	nop
 800116c:	bf00      	nop
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40021000 	.word	0x40021000
 800117c:	40010000 	.word	0x40010000
 8001180:	48000400 	.word	0x48000400
 8001184:	48000800 	.word	0x48000800
 8001188:	48000c00 	.word	0x48000c00
 800118c:	48001000 	.word	0x48001000
 8001190:	48001400 	.word	0x48001400
 8001194:	48001800 	.word	0x48001800
 8001198:	48001c00 	.word	0x48001c00
 800119c:	40010400 	.word	0x40010400

080011a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	691a      	ldr	r2, [r3, #16]
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	4013      	ands	r3, r2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d002      	beq.n	80011be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80011b8:	2301      	movs	r3, #1
 80011ba:	73fb      	strb	r3, [r7, #15]
 80011bc:	e001      	b.n	80011c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80011c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	3714      	adds	r7, #20
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	460b      	mov	r3, r1
 80011da:	807b      	strh	r3, [r7, #2]
 80011dc:	4613      	mov	r3, r2
 80011de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80011ec:	e002      	b.n	80011f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80011ee:	887a      	ldrh	r2, [r7, #2]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011f4:	bf00      	nop
 80011f6:	370c      	adds	r7, #12
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	460b      	mov	r3, r1
 800120a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	695b      	ldr	r3, [r3, #20]
 8001210:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	4013      	ands	r3, r2
 8001218:	041a      	lsls	r2, r3, #16
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	43d9      	mvns	r1, r3
 800121e:	887b      	ldrh	r3, [r7, #2]
 8001220:	400b      	ands	r3, r1
 8001222:	431a      	orrs	r2, r3
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	619a      	str	r2, [r3, #24]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001236:	b08f      	sub	sp, #60	; 0x3c
 8001238:	af0a      	add	r7, sp, #40	; 0x28
 800123a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d101      	bne.n	8001246 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e116      	b.n	8001474 <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2b00      	cmp	r3, #0
 8001256:	d106      	bne.n	8001266 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2200      	movs	r2, #0
 800125c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f005 fd2f 	bl	8006cc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	2203      	movs	r2, #3
 800126a:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800126e:	68bb      	ldr	r3, [r7, #8]
 8001270:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001276:	2b00      	cmp	r3, #0
 8001278:	d102      	bne.n	8001280 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f002 fc90 	bl	8003baa <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	603b      	str	r3, [r7, #0]
 8001290:	687e      	ldr	r6, [r7, #4]
 8001292:	466d      	mov	r5, sp
 8001294:	f106 0410 	add.w	r4, r6, #16
 8001298:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800129a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800129c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800129e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012a0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80012a4:	e885 0003 	stmia.w	r5, {r0, r1}
 80012a8:	1d33      	adds	r3, r6, #4
 80012aa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012ac:	6838      	ldr	r0, [r7, #0]
 80012ae:	f002 fba3 	bl	80039f8 <USB_CoreInit>
 80012b2:	4603      	mov	r3, r0
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d005      	beq.n	80012c4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2202      	movs	r2, #2
 80012bc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80012c0:	2301      	movs	r3, #1
 80012c2:	e0d7      	b.n	8001474 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f002 fc7e 	bl	8003bcc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012d0:	2300      	movs	r3, #0
 80012d2:	73fb      	strb	r3, [r7, #15]
 80012d4:	e04a      	b.n	800136c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80012d6:	7bfa      	ldrb	r2, [r7, #15]
 80012d8:	6879      	ldr	r1, [r7, #4]
 80012da:	4613      	mov	r3, r2
 80012dc:	00db      	lsls	r3, r3, #3
 80012de:	1a9b      	subs	r3, r3, r2
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	440b      	add	r3, r1
 80012e4:	333d      	adds	r3, #61	; 0x3d
 80012e6:	2201      	movs	r2, #1
 80012e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80012ea:	7bfa      	ldrb	r2, [r7, #15]
 80012ec:	6879      	ldr	r1, [r7, #4]
 80012ee:	4613      	mov	r3, r2
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	1a9b      	subs	r3, r3, r2
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	440b      	add	r3, r1
 80012f8:	333c      	adds	r3, #60	; 0x3c
 80012fa:	7bfa      	ldrb	r2, [r7, #15]
 80012fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80012fe:	7bfa      	ldrb	r2, [r7, #15]
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	b298      	uxth	r0, r3
 8001304:	6879      	ldr	r1, [r7, #4]
 8001306:	4613      	mov	r3, r2
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	1a9b      	subs	r3, r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	440b      	add	r3, r1
 8001310:	3342      	adds	r3, #66	; 0x42
 8001312:	4602      	mov	r2, r0
 8001314:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	6879      	ldr	r1, [r7, #4]
 800131a:	4613      	mov	r3, r2
 800131c:	00db      	lsls	r3, r3, #3
 800131e:	1a9b      	subs	r3, r3, r2
 8001320:	009b      	lsls	r3, r3, #2
 8001322:	440b      	add	r3, r1
 8001324:	333f      	adds	r3, #63	; 0x3f
 8001326:	2200      	movs	r2, #0
 8001328:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800132a:	7bfa      	ldrb	r2, [r7, #15]
 800132c:	6879      	ldr	r1, [r7, #4]
 800132e:	4613      	mov	r3, r2
 8001330:	00db      	lsls	r3, r3, #3
 8001332:	1a9b      	subs	r3, r3, r2
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	3344      	adds	r3, #68	; 0x44
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800133e:	7bfa      	ldrb	r2, [r7, #15]
 8001340:	6879      	ldr	r1, [r7, #4]
 8001342:	4613      	mov	r3, r2
 8001344:	00db      	lsls	r3, r3, #3
 8001346:	1a9b      	subs	r3, r3, r2
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	440b      	add	r3, r1
 800134c:	3348      	adds	r3, #72	; 0x48
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001352:	7bfa      	ldrb	r2, [r7, #15]
 8001354:	6879      	ldr	r1, [r7, #4]
 8001356:	4613      	mov	r3, r2
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	1a9b      	subs	r3, r3, r2
 800135c:	009b      	lsls	r3, r3, #2
 800135e:	440b      	add	r3, r1
 8001360:	3350      	adds	r3, #80	; 0x50
 8001362:	2200      	movs	r2, #0
 8001364:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001366:	7bfb      	ldrb	r3, [r7, #15]
 8001368:	3301      	adds	r3, #1
 800136a:	73fb      	strb	r3, [r7, #15]
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	429a      	cmp	r2, r3
 8001374:	d3af      	bcc.n	80012d6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001376:	2300      	movs	r3, #0
 8001378:	73fb      	strb	r3, [r7, #15]
 800137a:	e044      	b.n	8001406 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800137c:	7bfa      	ldrb	r2, [r7, #15]
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	00db      	lsls	r3, r3, #3
 8001384:	1a9b      	subs	r3, r3, r2
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	440b      	add	r3, r1
 800138a:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 800138e:	2200      	movs	r2, #0
 8001390:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001392:	7bfa      	ldrb	r2, [r7, #15]
 8001394:	6879      	ldr	r1, [r7, #4]
 8001396:	4613      	mov	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	1a9b      	subs	r3, r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	440b      	add	r3, r1
 80013a0:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 80013a4:	7bfa      	ldrb	r2, [r7, #15]
 80013a6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80013a8:	7bfa      	ldrb	r2, [r7, #15]
 80013aa:	6879      	ldr	r1, [r7, #4]
 80013ac:	4613      	mov	r3, r2
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	1a9b      	subs	r3, r3, r2
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80013be:	7bfa      	ldrb	r2, [r7, #15]
 80013c0:	6879      	ldr	r1, [r7, #4]
 80013c2:	4613      	mov	r3, r2
 80013c4:	00db      	lsls	r3, r3, #3
 80013c6:	1a9b      	subs	r3, r3, r2
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	440b      	add	r3, r1
 80013cc:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80013d4:	7bfa      	ldrb	r2, [r7, #15]
 80013d6:	6879      	ldr	r1, [r7, #4]
 80013d8:	4613      	mov	r3, r2
 80013da:	00db      	lsls	r3, r3, #3
 80013dc:	1a9b      	subs	r3, r3, r2
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	440b      	add	r3, r1
 80013e2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80013ea:	7bfa      	ldrb	r2, [r7, #15]
 80013ec:	6879      	ldr	r1, [r7, #4]
 80013ee:	4613      	mov	r3, r2
 80013f0:	00db      	lsls	r3, r3, #3
 80013f2:	1a9b      	subs	r3, r3, r2
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	440b      	add	r3, r1
 80013f8:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001400:	7bfb      	ldrb	r3, [r7, #15]
 8001402:	3301      	adds	r3, #1
 8001404:	73fb      	strb	r3, [r7, #15]
 8001406:	7bfa      	ldrb	r2, [r7, #15]
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	429a      	cmp	r2, r3
 800140e:	d3b5      	bcc.n	800137c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	687e      	ldr	r6, [r7, #4]
 8001418:	466d      	mov	r5, sp
 800141a:	f106 0410 	add.w	r4, r6, #16
 800141e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001426:	e894 0003 	ldmia.w	r4, {r0, r1}
 800142a:	e885 0003 	stmia.w	r5, {r0, r1}
 800142e:	1d33      	adds	r3, r6, #4
 8001430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001432:	6838      	ldr	r0, [r7, #0]
 8001434:	f002 fc16 	bl	8003c64 <USB_DevInit>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2202      	movs	r2, #2
 8001442:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e014      	b.n	8001474 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	2b01      	cmp	r3, #1
 8001460:	d102      	bne.n	8001468 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8001462:	6878      	ldr	r0, [r7, #4]
 8001464:	f000 ff56 	bl	8002314 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f003 fbe8 	bl	8004c42 <USB_DevDisconnect>

  return HAL_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800147c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001490:	2b01      	cmp	r3, #1
 8001492:	d101      	bne.n	8001498 <HAL_PCD_Start+0x1c>
 8001494:	2302      	movs	r3, #2
 8001496:	e01c      	b.n	80014d2 <HAL_PCD_Start+0x56>
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2201      	movs	r2, #1
 800149c:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ac:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4618      	mov	r0, r3
 80014ba:	f002 fb65 	bl	8003b88 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 fb9c 	bl	8004c00 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80014da:	b590      	push	{r4, r7, lr}
 80014dc:	b08d      	sub	sp, #52	; 0x34
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80014e8:	6a3b      	ldr	r3, [r7, #32]
 80014ea:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	4618      	mov	r0, r3
 80014f2:	f003 fc5a 	bl	8004daa <USB_GetMode>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	f040 8384 	bne.w	8001c06 <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4618      	mov	r0, r3
 8001504:	f003 fbbe 	bl	8004c84 <USB_ReadInterrupts>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	f000 837a 	beq.w	8001c04 <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f003 fbb5 	bl	8004c84 <USB_ReadInterrupts>
 800151a:	4603      	mov	r3, r0
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b02      	cmp	r3, #2
 8001522:	d107      	bne.n	8001534 <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f002 0202 	and.w	r2, r2, #2
 8001532:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f003 fba3 	bl	8004c84 <USB_ReadInterrupts>
 800153e:	4603      	mov	r3, r0
 8001540:	f003 0310 	and.w	r3, r3, #16
 8001544:	2b10      	cmp	r3, #16
 8001546:	d161      	bne.n	800160c <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	699a      	ldr	r2, [r3, #24]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 0210 	bic.w	r2, r2, #16
 8001556:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001558:	6a3b      	ldr	r3, [r7, #32]
 800155a:	6a1b      	ldr	r3, [r3, #32]
 800155c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	f003 020f 	and.w	r2, r3, #15
 8001564:	4613      	mov	r3, r2
 8001566:	00db      	lsls	r3, r3, #3
 8001568:	1a9b      	subs	r3, r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	4413      	add	r3, r2
 8001574:	3304      	adds	r3, #4
 8001576:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001578:	69bb      	ldr	r3, [r7, #24]
 800157a:	0c5b      	lsrs	r3, r3, #17
 800157c:	f003 030f 	and.w	r3, r3, #15
 8001580:	2b02      	cmp	r3, #2
 8001582:	d124      	bne.n	80015ce <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800158a:	4013      	ands	r3, r2
 800158c:	2b00      	cmp	r3, #0
 800158e:	d035      	beq.n	80015fc <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800159a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800159e:	b29b      	uxth	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	6a38      	ldr	r0, [r7, #32]
 80015a4:	f003 f9da 	bl	800495c <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	68da      	ldr	r2, [r3, #12]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	091b      	lsrs	r3, r3, #4
 80015b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015b4:	441a      	add	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	699a      	ldr	r2, [r3, #24]
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	091b      	lsrs	r3, r3, #4
 80015c2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015c6:	441a      	add	r2, r3
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	619a      	str	r2, [r3, #24]
 80015cc:	e016      	b.n	80015fc <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	0c5b      	lsrs	r3, r3, #17
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	2b06      	cmp	r3, #6
 80015d8:	d110      	bne.n	80015fc <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 80015e0:	2208      	movs	r2, #8
 80015e2:	4619      	mov	r1, r3
 80015e4:	6a38      	ldr	r0, [r7, #32]
 80015e6:	f003 f9b9 	bl	800495c <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	699a      	ldr	r2, [r3, #24]
 80015ee:	69bb      	ldr	r3, [r7, #24]
 80015f0:	091b      	lsrs	r3, r3, #4
 80015f2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80015f6:	441a      	add	r2, r3
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	699a      	ldr	r2, [r3, #24]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f042 0210 	orr.w	r2, r2, #16
 800160a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4618      	mov	r0, r3
 8001612:	f003 fb37 	bl	8004c84 <USB_ReadInterrupts>
 8001616:	4603      	mov	r3, r0
 8001618:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800161c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001620:	d16e      	bne.n	8001700 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4618      	mov	r0, r3
 800162c:	f003 fb3d 	bl	8004caa <USB_ReadDevAllOutEpInterrupt>
 8001630:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001632:	e062      	b.n	80016fa <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	2b00      	cmp	r3, #0
 800163c:	d057      	beq.n	80016ee <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001644:	b2d2      	uxtb	r2, r2
 8001646:	4611      	mov	r1, r2
 8001648:	4618      	mov	r0, r3
 800164a:	f003 fb62 	bl	8004d12 <USB_ReadDevOutEPInterrupt>
 800164e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	2b00      	cmp	r3, #0
 8001658:	d00c      	beq.n	8001674 <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	015a      	lsls	r2, r3, #5
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	4413      	add	r3, r2
 8001662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001666:	461a      	mov	r2, r3
 8001668:	2301      	movs	r3, #1
 800166a:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800166c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800166e:	6878      	ldr	r0, [r7, #4]
 8001670:	f000 fd76 	bl	8002160 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d00c      	beq.n	8001698 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800167e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001680:	015a      	lsls	r2, r3, #5
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4413      	add	r3, r2
 8001686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800168a:	461a      	mov	r2, r3
 800168c:	2308      	movs	r3, #8
 800168e:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001690:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001692:	6878      	ldr	r0, [r7, #4]
 8001694:	f000 fdb2 	bl	80021fc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	f003 0310 	and.w	r3, r3, #16
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d008      	beq.n	80016b4 <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80016a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a4:	015a      	lsls	r2, r3, #5
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	4413      	add	r3, r2
 80016aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ae:	461a      	mov	r2, r3
 80016b0:	2310      	movs	r3, #16
 80016b2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80016b4:	693b      	ldr	r3, [r7, #16]
 80016b6:	f003 0320 	and.w	r3, r3, #32
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d008      	beq.n	80016d0 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80016be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016c0:	015a      	lsls	r2, r3, #5
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	4413      	add	r3, r2
 80016c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016ca:	461a      	mov	r2, r3
 80016cc:	2320      	movs	r3, #32
 80016ce:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d009      	beq.n	80016ee <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80016da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016dc:	015a      	lsls	r2, r3, #5
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	4413      	add	r3, r2
 80016e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80016e6:	461a      	mov	r2, r3
 80016e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016ec:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80016ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f0:	3301      	adds	r3, #1
 80016f2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80016f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016f6:	085b      	lsrs	r3, r3, #1
 80016f8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80016fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d199      	bne.n	8001634 <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f003 fabd 	bl	8004c84 <USB_ReadInterrupts>
 800170a:	4603      	mov	r3, r0
 800170c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001710:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001714:	f040 808c 	bne.w	8001830 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4618      	mov	r0, r3
 800171e:	f003 fade 	bl	8004cde <USB_ReadDevAllInEpInterrupt>
 8001722:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001724:	2300      	movs	r3, #0
 8001726:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001728:	e07e      	b.n	8001828 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800172a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b00      	cmp	r3, #0
 8001732:	d073      	beq.n	800181c <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800173a:	b2d2      	uxtb	r2, r2
 800173c:	4611      	mov	r1, r2
 800173e:	4618      	mov	r0, r3
 8001740:	f003 fb05 	bl	8004d4e <USB_ReadDevInEPInterrupt>
 8001744:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	2b00      	cmp	r3, #0
 800174e:	d020      	beq.n	8001792 <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001752:	f003 030f 	and.w	r3, r3, #15
 8001756:	2201      	movs	r2, #1
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800175e:	69fb      	ldr	r3, [r7, #28]
 8001760:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001764:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	43db      	mvns	r3, r3
 800176a:	69f9      	ldr	r1, [r7, #28]
 800176c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001770:	4013      	ands	r3, r2
 8001772:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	015a      	lsls	r2, r3, #5
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	4413      	add	r3, r2
 800177c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001780:	461a      	mov	r2, r3
 8001782:	2301      	movs	r3, #1
 8001784:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001788:	b2db      	uxtb	r3, r3
 800178a:	4619      	mov	r1, r3
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	f005 fb58 	bl	8006e42 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d008      	beq.n	80017ae <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800179e:	015a      	lsls	r2, r3, #5
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	4413      	add	r3, r2
 80017a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017a8:	461a      	mov	r2, r3
 80017aa:	2308      	movs	r3, #8
 80017ac:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80017ae:	693b      	ldr	r3, [r7, #16]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d008      	beq.n	80017ca <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80017b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ba:	015a      	lsls	r2, r3, #5
 80017bc:	69fb      	ldr	r3, [r7, #28]
 80017be:	4413      	add	r3, r2
 80017c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017c4:	461a      	mov	r2, r3
 80017c6:	2310      	movs	r3, #16
 80017c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d008      	beq.n	80017e6 <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80017d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017d6:	015a      	lsls	r2, r3, #5
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	4413      	add	r3, r2
 80017dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80017e0:	461a      	mov	r2, r3
 80017e2:	2340      	movs	r3, #64	; 0x40
 80017e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	f003 0302 	and.w	r3, r3, #2
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00c      	beq.n	800180a <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80017f0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017f2:	6a38      	ldr	r0, [r7, #32]
 80017f4:	f002 fb82 	bl	8003efc <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80017f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fa:	015a      	lsls	r2, r3, #5
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	4413      	add	r3, r2
 8001800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001804:	461a      	mov	r2, r3
 8001806:	2302      	movs	r3, #2
 8001808:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800180a:	693b      	ldr	r3, [r7, #16]
 800180c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001810:	2b00      	cmp	r3, #0
 8001812:	d003      	beq.n	800181c <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 fc1a 	bl	8002050 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	3301      	adds	r3, #1
 8001820:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001824:	085b      	lsrs	r3, r3, #1
 8001826:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800182a:	2b00      	cmp	r3, #0
 800182c:	f47f af7d 	bne.w	800172a <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f003 fa25 	bl	8004c84 <USB_ReadInterrupts>
 800183a:	4603      	mov	r3, r0
 800183c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001840:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001844:	d122      	bne.n	800188c <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	69fa      	ldr	r2, [r7, #28]
 8001850:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001860:	2b01      	cmp	r3, #1
 8001862:	d108      	bne.n	8001876 <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800186c:	2100      	movs	r1, #0
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f005 fe00 	bl	8007474 <HAL_PCDEx_LPM_Callback>
 8001874:	e002      	b.n	800187c <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f005 fb50 	bl	8006f1c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	695a      	ldr	r2, [r3, #20]
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800188a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f003 f9f7 	bl	8004c84 <USB_ReadInterrupts>
 8001896:	4603      	mov	r3, r0
 8001898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800189c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018a0:	d112      	bne.n	80018c8 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d102      	bne.n	80018b8 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80018b2:	6878      	ldr	r0, [r7, #4]
 80018b4:	f005 fb0c 	bl	8006ed0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	695a      	ldr	r2, [r3, #20]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80018c6:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f003 f9d9 	bl	8004c84 <USB_ReadInterrupts>
 80018d2:	4603      	mov	r3, r0
 80018d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80018d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018dc:	d121      	bne.n	8001922 <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	695a      	ldr	r2, [r3, #20]
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80018ec:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d111      	bne.n	800191c <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	2201      	movs	r2, #1
 80018fc:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001906:	089b      	lsrs	r3, r3, #2
 8001908:	f003 020f 	and.w	r2, r3, #15
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001912:	2101      	movs	r1, #1
 8001914:	6878      	ldr	r0, [r7, #4]
 8001916:	f005 fdad 	bl	8007474 <HAL_PCDEx_LPM_Callback>
 800191a:	e002      	b.n	8001922 <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f005 fad7 	bl	8006ed0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f003 f9ac 	bl	8004c84 <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001932:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001936:	f040 80b5 	bne.w	8001aa4 <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	69fa      	ldr	r2, [r7, #28]
 8001944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001948:	f023 0301 	bic.w	r3, r3, #1
 800194c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2110      	movs	r1, #16
 8001954:	4618      	mov	r0, r3
 8001956:	f002 fad1 	bl	8003efc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800195a:	2300      	movs	r3, #0
 800195c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800195e:	e046      	b.n	80019ee <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001960:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001962:	015a      	lsls	r2, r3, #5
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	4413      	add	r3, r2
 8001968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800196c:	461a      	mov	r2, r3
 800196e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001972:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001976:	015a      	lsls	r2, r3, #5
 8001978:	69fb      	ldr	r3, [r7, #28]
 800197a:	4413      	add	r3, r2
 800197c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001984:	0151      	lsls	r1, r2, #5
 8001986:	69fa      	ldr	r2, [r7, #28]
 8001988:	440a      	add	r2, r1
 800198a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800198e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001992:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001996:	015a      	lsls	r2, r3, #5
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	4413      	add	r3, r2
 800199c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019a0:	461a      	mov	r2, r3
 80019a2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80019a6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80019a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019aa:	015a      	lsls	r2, r3, #5
 80019ac:	69fb      	ldr	r3, [r7, #28]
 80019ae:	4413      	add	r3, r2
 80019b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019b8:	0151      	lsls	r1, r2, #5
 80019ba:	69fa      	ldr	r2, [r7, #28]
 80019bc:	440a      	add	r2, r1
 80019be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019c2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80019c6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80019c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ca:	015a      	lsls	r2, r3, #5
 80019cc:	69fb      	ldr	r3, [r7, #28]
 80019ce:	4413      	add	r3, r2
 80019d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019d8:	0151      	lsls	r1, r2, #5
 80019da:	69fa      	ldr	r2, [r7, #28]
 80019dc:	440a      	add	r2, r1
 80019de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80019e2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80019e6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80019e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ea:	3301      	adds	r3, #1
 80019ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d3b3      	bcc.n	8001960 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80019f8:	69fb      	ldr	r3, [r7, #28]
 80019fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019fe:	69db      	ldr	r3, [r3, #28]
 8001a00:	69fa      	ldr	r2, [r7, #28]
 8001a02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a06:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001a0a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d016      	beq.n	8001a42 <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001a14:	69fb      	ldr	r3, [r7, #28]
 8001a16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001a1e:	69fa      	ldr	r2, [r7, #28]
 8001a20:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a24:	f043 030b 	orr.w	r3, r3, #11
 8001a28:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a34:	69fa      	ldr	r2, [r7, #28]
 8001a36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a3a:	f043 030b 	orr.w	r3, r3, #11
 8001a3e:	6453      	str	r3, [r2, #68]	; 0x44
 8001a40:	e015      	b.n	8001a6e <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001a42:	69fb      	ldr	r3, [r7, #28]
 8001a44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	69fa      	ldr	r2, [r7, #28]
 8001a4c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a50:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a54:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001a58:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a60:	691b      	ldr	r3, [r3, #16]
 8001a62:	69fa      	ldr	r2, [r7, #28]
 8001a64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a68:	f043 030b 	orr.w	r3, r3, #11
 8001a6c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	69fa      	ldr	r2, [r7, #28]
 8001a78:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a7c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001a80:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001a8c:	4619      	mov	r1, r3
 8001a8e:	4610      	mov	r0, r2
 8001a90:	f003 f9bc 	bl	8004e0c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001aa2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f003 f8eb 	bl	8004c84 <USB_ReadInterrupts>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001ab4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ab8:	d124      	bne.n	8001b04 <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f003 f981 	bl	8004dc6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f002 fa90 	bl	8003fee <USB_GetDevSpeed>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	461a      	mov	r2, r3
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681c      	ldr	r4, [r3, #0]
 8001ada:	f001 fa47 	bl	8002f6c <HAL_RCC_GetHCLKFreq>
 8001ade:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	4620      	mov	r0, r4
 8001aea:	f001 ffb1 	bl	8003a50 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f005 f9cf 	bl	8006e92 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4618      	mov	r0, r3
 8001b0a:	f003 f8bb 	bl	8004c84 <USB_ReadInterrupts>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	f003 0308 	and.w	r3, r3, #8
 8001b14:	2b08      	cmp	r3, #8
 8001b16:	d10a      	bne.n	8001b2e <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001b18:	6878      	ldr	r0, [r7, #4]
 8001b1a:	f005 f9ac 	bl	8006e76 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	695a      	ldr	r2, [r3, #20]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f002 0208 	and.w	r2, r2, #8
 8001b2c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 f8a6 	bl	8004c84 <USB_ReadInterrupts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b42:	d10f      	bne.n	8001b64 <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f005 fa1e 	bl	8006f90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	695a      	ldr	r2, [r3, #20]
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 f88b 	bl	8004c84 <USB_ReadInterrupts>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b74:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b78:	d10f      	bne.n	8001b9a <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	4619      	mov	r1, r3
 8001b84:	6878      	ldr	r0, [r7, #4]
 8001b86:	f005 f9f1 	bl	8006f6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	695a      	ldr	r2, [r3, #20]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001b98:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f003 f870 	bl	8004c84 <USB_ReadInterrupts>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001baa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bae:	d10a      	bne.n	8001bc6 <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f005 f9ff 	bl	8006fb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	695a      	ldr	r2, [r3, #20]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001bc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f003 f85a 	bl	8004c84 <USB_ReadInterrupts>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	f003 0304 	and.w	r3, r3, #4
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	d115      	bne.n	8001c06 <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	f003 0304 	and.w	r3, r3, #4
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d002      	beq.n	8001bf2 <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f005 f9ef 	bl	8006fd0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6859      	ldr	r1, [r3, #4]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	605a      	str	r2, [r3, #4]
 8001c02:	e000      	b.n	8001c06 <HAL_PCD_IRQHandler+0x72c>
      return;
 8001c04:	bf00      	nop
    }
  }
}
 8001c06:	3734      	adds	r7, #52	; 0x34
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd90      	pop	{r4, r7, pc}

08001c0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	460b      	mov	r3, r1
 8001c16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c1e:	2b01      	cmp	r3, #1
 8001c20:	d101      	bne.n	8001c26 <HAL_PCD_SetAddress+0x1a>
 8001c22:	2302      	movs	r3, #2
 8001c24:	e013      	b.n	8001c4e <HAL_PCD_SetAddress+0x42>
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	78fa      	ldrb	r2, [r7, #3]
 8001c32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	78fa      	ldrb	r2, [r7, #3]
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f002 ffb8 	bl	8004bb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b084      	sub	sp, #16
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
 8001c5e:	4608      	mov	r0, r1
 8001c60:	4611      	mov	r1, r2
 8001c62:	461a      	mov	r2, r3
 8001c64:	4603      	mov	r3, r0
 8001c66:	70fb      	strb	r3, [r7, #3]
 8001c68:	460b      	mov	r3, r1
 8001c6a:	803b      	strh	r3, [r7, #0]
 8001c6c:	4613      	mov	r3, r2
 8001c6e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c70:	2300      	movs	r3, #0
 8001c72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	da0f      	bge.n	8001c9c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c7c:	78fb      	ldrb	r3, [r7, #3]
 8001c7e:	f003 020f 	and.w	r2, r3, #15
 8001c82:	4613      	mov	r3, r2
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	1a9b      	subs	r3, r3, r2
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	3338      	adds	r3, #56	; 0x38
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	4413      	add	r3, r2
 8001c90:	3304      	adds	r3, #4
 8001c92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2201      	movs	r2, #1
 8001c98:	705a      	strb	r2, [r3, #1]
 8001c9a:	e00f      	b.n	8001cbc <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c9c:	78fb      	ldrb	r3, [r7, #3]
 8001c9e:	f003 020f 	and.w	r2, r3, #15
 8001ca2:	4613      	mov	r3, r2
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	1a9b      	subs	r3, r3, r2
 8001ca8:	009b      	lsls	r3, r3, #2
 8001caa:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	f003 030f 	and.w	r3, r3, #15
 8001cc2:	b2da      	uxtb	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cc8:	883a      	ldrh	r2, [r7, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	78ba      	ldrb	r2, [r7, #2]
 8001cd2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	785b      	ldrb	r3, [r3, #1]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d004      	beq.n	8001ce6 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001ce6:	78bb      	ldrb	r3, [r7, #2]
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d102      	bne.n	8001cf2 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <HAL_PCD_EP_Open+0xaa>
 8001cfc:	2302      	movs	r3, #2
 8001cfe:	e00e      	b.n	8001d1e <HAL_PCD_EP_Open+0xc8>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68f9      	ldr	r1, [r7, #12]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 f98c 	bl	800402c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 8001d1c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b084      	sub	sp, #16
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d32:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da0f      	bge.n	8001d5a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	f003 020f 	and.w	r2, r3, #15
 8001d40:	4613      	mov	r3, r2
 8001d42:	00db      	lsls	r3, r3, #3
 8001d44:	1a9b      	subs	r3, r3, r2
 8001d46:	009b      	lsls	r3, r3, #2
 8001d48:	3338      	adds	r3, #56	; 0x38
 8001d4a:	687a      	ldr	r2, [r7, #4]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	3304      	adds	r3, #4
 8001d50:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	2201      	movs	r2, #1
 8001d56:	705a      	strb	r2, [r3, #1]
 8001d58:	e00f      	b.n	8001d7a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f003 020f 	and.w	r2, r3, #15
 8001d60:	4613      	mov	r3, r2
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	1a9b      	subs	r3, r3, r2
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	3304      	adds	r3, #4
 8001d72:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	2200      	movs	r2, #0
 8001d78:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d7a:	78fb      	ldrb	r3, [r7, #3]
 8001d7c:	f003 030f 	and.w	r3, r3, #15
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001d8c:	2b01      	cmp	r3, #1
 8001d8e:	d101      	bne.n	8001d94 <HAL_PCD_EP_Close+0x6e>
 8001d90:	2302      	movs	r3, #2
 8001d92:	e00e      	b.n	8001db2 <HAL_PCD_EP_Close+0x8c>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2201      	movs	r2, #1
 8001d98:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	68f9      	ldr	r1, [r7, #12]
 8001da2:	4618      	mov	r0, r3
 8001da4:	f002 f9ca 	bl	800413c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001db0:	2300      	movs	r3, #0
}
 8001db2:	4618      	mov	r0, r3
 8001db4:	3710      	adds	r7, #16
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}

08001dba <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dba:	b580      	push	{r7, lr}
 8001dbc:	b086      	sub	sp, #24
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	60f8      	str	r0, [r7, #12]
 8001dc2:	607a      	str	r2, [r7, #4]
 8001dc4:	603b      	str	r3, [r7, #0]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dca:	7afb      	ldrb	r3, [r7, #11]
 8001dcc:	f003 020f 	and.w	r2, r3, #15
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	1a9b      	subs	r3, r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ddc:	68fa      	ldr	r2, [r7, #12]
 8001dde:	4413      	add	r3, r2
 8001de0:	3304      	adds	r3, #4
 8001de2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	683a      	ldr	r2, [r7, #0]
 8001dee:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	2200      	movs	r2, #0
 8001df4:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001dfc:	7afb      	ldrb	r3, [r7, #11]
 8001dfe:	f003 030f 	and.w	r3, r3, #15
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e08:	7afb      	ldrb	r3, [r7, #11]
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6979      	ldr	r1, [r7, #20]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f002 fc47 	bl	80046ac <USB_EP0StartXfer>
 8001e1e:	e005      	b.n	8001e2c <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	6979      	ldr	r1, [r7, #20]
 8001e26:	4618      	mov	r0, r3
 8001e28:	f002 fa64 	bl	80042f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3718      	adds	r7, #24
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e36:	b480      	push	{r7}
 8001e38:	b083      	sub	sp, #12
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e42:	78fb      	ldrb	r3, [r7, #3]
 8001e44:	f003 020f 	and.w	r2, r3, #15
 8001e48:	6879      	ldr	r1, [r7, #4]
 8001e4a:	4613      	mov	r3, r2
 8001e4c:	00db      	lsls	r3, r3, #3
 8001e4e:	1a9b      	subs	r3, r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	440b      	add	r3, r1
 8001e54:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001e58:	681b      	ldr	r3, [r3, #0]
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b086      	sub	sp, #24
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	60f8      	str	r0, [r7, #12]
 8001e6e:	607a      	str	r2, [r7, #4]
 8001e70:	603b      	str	r3, [r7, #0]
 8001e72:	460b      	mov	r3, r1
 8001e74:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e76:	7afb      	ldrb	r3, [r7, #11]
 8001e78:	f003 020f 	and.w	r2, r3, #15
 8001e7c:	4613      	mov	r3, r2
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	1a9b      	subs	r3, r3, r2
 8001e82:	009b      	lsls	r3, r3, #2
 8001e84:	3338      	adds	r3, #56	; 0x38
 8001e86:	68fa      	ldr	r2, [r7, #12]
 8001e88:	4413      	add	r3, r2
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001e94:	697b      	ldr	r3, [r7, #20]
 8001e96:	683a      	ldr	r2, [r7, #0]
 8001e98:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ea6:	7afb      	ldrb	r3, [r7, #11]
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	b2da      	uxtb	r2, r3
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001eb2:	7afb      	ldrb	r3, [r7, #11]
 8001eb4:	f003 030f 	and.w	r3, r3, #15
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d106      	bne.n	8001eca <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	6979      	ldr	r1, [r7, #20]
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f002 fbf2 	bl	80046ac <USB_EP0StartXfer>
 8001ec8:	e005      	b.n	8001ed6 <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	6979      	ldr	r1, [r7, #20]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f002 fa0f 	bl	80042f4 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ed6:	2300      	movs	r3, #0
}
 8001ed8:	4618      	mov	r0, r3
 8001eda:	3718      	adds	r7, #24
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}

08001ee0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b084      	sub	sp, #16
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001eec:	78fb      	ldrb	r3, [r7, #3]
 8001eee:	f003 020f 	and.w	r2, r3, #15
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d901      	bls.n	8001efe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e04e      	b.n	8001f9c <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001efe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	da0f      	bge.n	8001f26 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f06:	78fb      	ldrb	r3, [r7, #3]
 8001f08:	f003 020f 	and.w	r2, r3, #15
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	00db      	lsls	r3, r3, #3
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	3338      	adds	r3, #56	; 0x38
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	4413      	add	r3, r2
 8001f1a:	3304      	adds	r3, #4
 8001f1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	2201      	movs	r2, #1
 8001f22:	705a      	strb	r2, [r3, #1]
 8001f24:	e00d      	b.n	8001f42 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f26:	78fa      	ldrb	r2, [r7, #3]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	1a9b      	subs	r3, r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	4413      	add	r3, r2
 8001f38:	3304      	adds	r3, #4
 8001f3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2201      	movs	r2, #1
 8001f46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f48:	78fb      	ldrb	r3, [r7, #3]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_PCD_EP_SetStall+0x82>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e01c      	b.n	8001f9c <HAL_PCD_EP_SetStall+0xbc>
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	68f9      	ldr	r1, [r7, #12]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f002 fd4b 	bl	8004a0c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f76:	78fb      	ldrb	r3, [r7, #3]
 8001f78:	f003 030f 	and.w	r3, r3, #15
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d108      	bne.n	8001f92 <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001f8a:	4619      	mov	r1, r3
 8001f8c:	4610      	mov	r0, r2
 8001f8e:	f002 ff3d 	bl	8004e0c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001f9a:	2300      	movs	r3, #0
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	3710      	adds	r7, #16
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}

08001fa4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b084      	sub	sp, #16
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
 8001fac:	460b      	mov	r3, r1
 8001fae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fb0:	78fb      	ldrb	r3, [r7, #3]
 8001fb2:	f003 020f 	and.w	r2, r3, #15
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d901      	bls.n	8001fc2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e042      	b.n	8002048 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fc2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da0f      	bge.n	8001fea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fca:	78fb      	ldrb	r3, [r7, #3]
 8001fcc:	f003 020f 	and.w	r2, r3, #15
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	1a9b      	subs	r3, r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	3338      	adds	r3, #56	; 0x38
 8001fda:	687a      	ldr	r2, [r7, #4]
 8001fdc:	4413      	add	r3, r2
 8001fde:	3304      	adds	r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2201      	movs	r2, #1
 8001fe6:	705a      	strb	r2, [r3, #1]
 8001fe8:	e00f      	b.n	800200a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fea:	78fb      	ldrb	r3, [r7, #3]
 8001fec:	f003 020f 	and.w	r2, r3, #15
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ffc:	687a      	ldr	r2, [r7, #4]
 8001ffe:	4413      	add	r3, r2
 8002000:	3304      	adds	r3, #4
 8002002:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	2200      	movs	r2, #0
 8002008:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	f003 030f 	and.w	r3, r3, #15
 8002016:	b2da      	uxtb	r2, r3
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8002022:	2b01      	cmp	r3, #1
 8002024:	d101      	bne.n	800202a <HAL_PCD_EP_ClrStall+0x86>
 8002026:	2302      	movs	r3, #2
 8002028:	e00e      	b.n	8002048 <HAL_PCD_EP_ClrStall+0xa4>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2201      	movs	r2, #1
 800202e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	68f9      	ldr	r1, [r7, #12]
 8002038:	4618      	mov	r0, r3
 800203a:	f002 fd55 	bl	8004ae8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2200      	movs	r2, #0
 8002042:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3710      	adds	r7, #16
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}

08002050 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b088      	sub	sp, #32
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
 8002058:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	4613      	mov	r3, r2
 8002068:	00db      	lsls	r3, r3, #3
 800206a:	1a9b      	subs	r3, r3, r2
 800206c:	009b      	lsls	r3, r3, #2
 800206e:	3338      	adds	r3, #56	; 0x38
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	4413      	add	r3, r2
 8002074:	3304      	adds	r3, #4
 8002076:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	699a      	ldr	r2, [r3, #24]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	695b      	ldr	r3, [r3, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	d901      	bls.n	8002088 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	e067      	b.n	8002158 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	695a      	ldr	r2, [r3, #20]
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	429a      	cmp	r2, r3
 800209c:	d902      	bls.n	80020a4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	3303      	adds	r3, #3
 80020a8:	089b      	lsrs	r3, r3, #2
 80020aa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020ac:	e026      	b.n	80020fc <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	695a      	ldr	r2, [r3, #20]
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	69fa      	ldr	r2, [r7, #28]
 80020c0:	429a      	cmp	r2, r3
 80020c2:	d902      	bls.n	80020ca <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3303      	adds	r3, #3
 80020ce:	089b      	lsrs	r3, r3, #2
 80020d0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	68d9      	ldr	r1, [r3, #12]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	b2da      	uxtb	r2, r3
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	b29b      	uxth	r3, r3
 80020de:	6978      	ldr	r0, [r7, #20]
 80020e0:	f002 fc02 	bl	80048e8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	441a      	add	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	699a      	ldr	r2, [r3, #24]
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	441a      	add	r2, r3
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	015a      	lsls	r2, r3, #5
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002108:	699b      	ldr	r3, [r3, #24]
 800210a:	b29b      	uxth	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	429a      	cmp	r2, r3
 8002110:	d809      	bhi.n	8002126 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	699a      	ldr	r2, [r3, #24]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800211a:	429a      	cmp	r2, r3
 800211c:	d203      	bcs.n	8002126 <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1c3      	bne.n	80020ae <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	695a      	ldr	r2, [r3, #20]
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	699b      	ldr	r3, [r3, #24]
 800212e:	429a      	cmp	r2, r3
 8002130:	d811      	bhi.n	8002156 <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	f003 030f 	and.w	r3, r3, #15
 8002138:	2201      	movs	r2, #1
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	43db      	mvns	r3, r3
 800214c:	6939      	ldr	r1, [r7, #16]
 800214e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002152:	4013      	ands	r3, r2
 8002154:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3720      	adds	r7, #32
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}

08002160 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b086      	sub	sp, #24
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002170:	697b      	ldr	r3, [r7, #20]
 8002172:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	333c      	adds	r3, #60	; 0x3c
 8002178:	3304      	adds	r3, #4
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4413      	add	r3, r2
 8002186:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	4a19      	ldr	r2, [pc, #100]	; (80021f8 <PCD_EP_OutXfrComplete_int+0x98>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d124      	bne.n	80021e0 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00a      	beq.n	80021b6 <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	015a      	lsls	r2, r3, #5
 80021a4:	693b      	ldr	r3, [r7, #16]
 80021a6:	4413      	add	r3, r2
 80021a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ac:	461a      	mov	r2, r3
 80021ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021b2:	6093      	str	r3, [r2, #8]
 80021b4:	e01a      	b.n	80021ec <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	f003 0320 	and.w	r3, r3, #32
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d008      	beq.n	80021d2 <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021cc:	461a      	mov	r2, r3
 80021ce:	2320      	movs	r3, #32
 80021d0:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	4619      	mov	r1, r3
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f004 fe17 	bl	8006e0c <HAL_PCD_DataOutStageCallback>
 80021de:	e005      	b.n	80021ec <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	4619      	mov	r1, r3
 80021e6:	6878      	ldr	r0, [r7, #4]
 80021e8:	f004 fe10 	bl	8006e0c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	4f54310a 	.word	0x4f54310a

080021fc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800220c:	697b      	ldr	r3, [r7, #20]
 800220e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	333c      	adds	r3, #60	; 0x3c
 8002214:	3304      	adds	r3, #4
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	015a      	lsls	r2, r3, #5
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	4413      	add	r3, r2
 8002222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	4a0c      	ldr	r2, [pc, #48]	; (8002260 <PCD_EP_OutSetupPacket_int+0x64>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d90e      	bls.n	8002250 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002238:	2b00      	cmp	r3, #0
 800223a:	d009      	beq.n	8002250 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	015a      	lsls	r2, r3, #5
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	4413      	add	r3, r2
 8002244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002248:	461a      	mov	r2, r3
 800224a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800224e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002250:	6878      	ldr	r0, [r7, #4]
 8002252:	f004 fdc9 	bl	8006de8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8002256:	2300      	movs	r3, #0
}
 8002258:	4618      	mov	r0, r3
 800225a:	3718      	adds	r7, #24
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}
 8002260:	4f54300a 	.word	0x4f54300a

08002264 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002264:	b480      	push	{r7}
 8002266:	b085      	sub	sp, #20
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	70fb      	strb	r3, [r7, #3]
 8002270:	4613      	mov	r3, r2
 8002272:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800227a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800227c:	78fb      	ldrb	r3, [r7, #3]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d107      	bne.n	8002292 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002282:	883b      	ldrh	r3, [r7, #0]
 8002284:	0419      	lsls	r1, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	68ba      	ldr	r2, [r7, #8]
 800228c:	430a      	orrs	r2, r1
 800228e:	629a      	str	r2, [r3, #40]	; 0x28
 8002290:	e028      	b.n	80022e4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002298:	0c1b      	lsrs	r3, r3, #16
 800229a:	68ba      	ldr	r2, [r7, #8]
 800229c:	4413      	add	r3, r2
 800229e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022a0:	2300      	movs	r3, #0
 80022a2:	73fb      	strb	r3, [r7, #15]
 80022a4:	e00d      	b.n	80022c2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	7bfb      	ldrb	r3, [r7, #15]
 80022ac:	3340      	adds	r3, #64	; 0x40
 80022ae:	009b      	lsls	r3, r3, #2
 80022b0:	4413      	add	r3, r2
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	0c1b      	lsrs	r3, r3, #16
 80022b6:	68ba      	ldr	r2, [r7, #8]
 80022b8:	4413      	add	r3, r2
 80022ba:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80022bc:	7bfb      	ldrb	r3, [r7, #15]
 80022be:	3301      	adds	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	7bfa      	ldrb	r2, [r7, #15]
 80022c4:	78fb      	ldrb	r3, [r7, #3]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d3ec      	bcc.n	80022a6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80022cc:	883b      	ldrh	r3, [r7, #0]
 80022ce:	0418      	lsls	r0, r3, #16
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6819      	ldr	r1, [r3, #0]
 80022d4:	78fb      	ldrb	r3, [r7, #3]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	4302      	orrs	r2, r0
 80022dc:	3340      	adds	r3, #64	; 0x40
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	887a      	ldrh	r2, [r7, #2]
 8002304:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	370c      	adds	r7, #12
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002314:	b480      	push	{r7}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2201      	movs	r2, #1
 8002326:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	699b      	ldr	r3, [r3, #24]
 8002336:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002346:	f043 0303 	orr.w	r3, r3, #3
 800234a:	68fa      	ldr	r2, [r7, #12]
 800234c:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800234e:	2300      	movs	r3, #0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002360:	4b04      	ldr	r3, [pc, #16]	; (8002374 <HAL_PWREx_GetVoltageRange+0x18>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002368:	4618      	mov	r0, r3
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr
 8002372:	bf00      	nop
 8002374:	40007000 	.word	0x40007000

08002378 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002378:	b480      	push	{r7}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002386:	d130      	bne.n	80023ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002388:	4b23      	ldr	r3, [pc, #140]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002390:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002394:	d038      	beq.n	8002408 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800239e:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80023a6:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2232      	movs	r2, #50	; 0x32
 80023ac:	fb02 f303 	mul.w	r3, r2, r3
 80023b0:	4a1b      	ldr	r2, [pc, #108]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023b2:	fba2 2303 	umull	r2, r3, r2, r3
 80023b6:	0c9b      	lsrs	r3, r3, #18
 80023b8:	3301      	adds	r3, #1
 80023ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023bc:	e002      	b.n	80023c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	3b01      	subs	r3, #1
 80023c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c4:	4b14      	ldr	r3, [pc, #80]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023c6:	695b      	ldr	r3, [r3, #20]
 80023c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023d0:	d102      	bne.n	80023d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d1f2      	bne.n	80023be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e4:	d110      	bne.n	8002408 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e00f      	b.n	800240a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023ea:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80023f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023f6:	d007      	beq.n	8002408 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002400:	4a05      	ldr	r2, [pc, #20]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002402:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002406:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	40007000 	.word	0x40007000
 800241c:	20000000 	.word	0x20000000
 8002420:	431bde83 	.word	0x431bde83

08002424 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_PWREx_EnableVddUSB+0x1c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <HAL_PWREx_EnableVddUSB+0x1c>)
 800242e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002432:	6053      	str	r3, [r2, #4]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40007000 	.word	0x40007000

08002444 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b088      	sub	sp, #32
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d102      	bne.n	8002458 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	f000 bc16 	b.w	8002c84 <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002458:	4ba0      	ldr	r3, [pc, #640]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	f003 030c 	and.w	r3, r3, #12
 8002460:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002462:	4b9e      	ldr	r3, [pc, #632]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002464:	68db      	ldr	r3, [r3, #12]
 8002466:	f003 0303 	and.w	r3, r3, #3
 800246a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0310 	and.w	r3, r3, #16
 8002474:	2b00      	cmp	r3, #0
 8002476:	f000 80e4 	beq.w	8002642 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d007      	beq.n	8002490 <HAL_RCC_OscConfig+0x4c>
 8002480:	69bb      	ldr	r3, [r7, #24]
 8002482:	2b0c      	cmp	r3, #12
 8002484:	f040 808b 	bne.w	800259e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2b01      	cmp	r3, #1
 800248c:	f040 8087 	bne.w	800259e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002490:	4b92      	ldr	r3, [pc, #584]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0302 	and.w	r3, r3, #2
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_OscConfig+0x64>
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e3ed      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1a      	ldr	r2, [r3, #32]
 80024ac:	4b8b      	ldr	r3, [pc, #556]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d004      	beq.n	80024c2 <HAL_RCC_OscConfig+0x7e>
 80024b8:	4b88      	ldr	r3, [pc, #544]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024c0:	e005      	b.n	80024ce <HAL_RCC_OscConfig+0x8a>
 80024c2:	4b86      	ldr	r3, [pc, #536]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80024c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c8:	091b      	lsrs	r3, r3, #4
 80024ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d223      	bcs.n	800251a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6a1b      	ldr	r3, [r3, #32]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 fd54 	bl	8002f84 <RCC_SetFlashLatencyFromMSIRange>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e3ce      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024e6:	4b7d      	ldr	r3, [pc, #500]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a7c      	ldr	r2, [pc, #496]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80024ec:	f043 0308 	orr.w	r3, r3, #8
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	4b7a      	ldr	r3, [pc, #488]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	4977      	ldr	r1, [pc, #476]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002500:	4313      	orrs	r3, r2
 8002502:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002504:	4b75      	ldr	r3, [pc, #468]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	69db      	ldr	r3, [r3, #28]
 8002510:	021b      	lsls	r3, r3, #8
 8002512:	4972      	ldr	r1, [pc, #456]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002514:	4313      	orrs	r3, r2
 8002516:	604b      	str	r3, [r1, #4]
 8002518:	e025      	b.n	8002566 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800251a:	4b70      	ldr	r3, [pc, #448]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a6f      	ldr	r2, [pc, #444]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002520:	f043 0308 	orr.w	r3, r3, #8
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	4b6d      	ldr	r3, [pc, #436]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	496a      	ldr	r1, [pc, #424]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002534:	4313      	orrs	r3, r2
 8002536:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002538:	4b68      	ldr	r3, [pc, #416]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
 8002544:	021b      	lsls	r3, r3, #8
 8002546:	4965      	ldr	r1, [pc, #404]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002548:	4313      	orrs	r3, r2
 800254a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a1b      	ldr	r3, [r3, #32]
 8002556:	4618      	mov	r0, r3
 8002558:	f000 fd14 	bl	8002f84 <RCC_SetFlashLatencyFromMSIRange>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e38e      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002566:	f000 fc75 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 800256a:	4602      	mov	r2, r0
 800256c:	4b5b      	ldr	r3, [pc, #364]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	091b      	lsrs	r3, r3, #4
 8002572:	f003 030f 	and.w	r3, r3, #15
 8002576:	495a      	ldr	r1, [pc, #360]	; (80026e0 <HAL_RCC_OscConfig+0x29c>)
 8002578:	5ccb      	ldrb	r3, [r1, r3]
 800257a:	f003 031f 	and.w	r3, r3, #31
 800257e:	fa22 f303 	lsr.w	r3, r2, r3
 8002582:	4a58      	ldr	r2, [pc, #352]	; (80026e4 <HAL_RCC_OscConfig+0x2a0>)
 8002584:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002586:	4b58      	ldr	r3, [pc, #352]	; (80026e8 <HAL_RCC_OscConfig+0x2a4>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4618      	mov	r0, r3
 800258c:	f7fe fae4 	bl	8000b58 <HAL_InitTick>
 8002590:	4603      	mov	r3, r0
 8002592:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d052      	beq.n	8002640 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800259a:	7bfb      	ldrb	r3, [r7, #15]
 800259c:	e372      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	699b      	ldr	r3, [r3, #24]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d032      	beq.n	800260c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025a6:	4b4d      	ldr	r3, [pc, #308]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a4c      	ldr	r2, [pc, #304]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80025ac:	f043 0301 	orr.w	r3, r3, #1
 80025b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025b2:	f7fe fb21 	bl	8000bf8 <HAL_GetTick>
 80025b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025b8:	e008      	b.n	80025cc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025ba:	f7fe fb1d 	bl	8000bf8 <HAL_GetTick>
 80025be:	4602      	mov	r2, r0
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	1ad3      	subs	r3, r2, r3
 80025c4:	2b02      	cmp	r3, #2
 80025c6:	d901      	bls.n	80025cc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e35b      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025cc:	4b43      	ldr	r3, [pc, #268]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0f0      	beq.n	80025ba <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025d8:	4b40      	ldr	r3, [pc, #256]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a3f      	ldr	r2, [pc, #252]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80025de:	f043 0308 	orr.w	r3, r3, #8
 80025e2:	6013      	str	r3, [r2, #0]
 80025e4:	4b3d      	ldr	r3, [pc, #244]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6a1b      	ldr	r3, [r3, #32]
 80025f0:	493a      	ldr	r1, [pc, #232]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025f6:	4b39      	ldr	r3, [pc, #228]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	69db      	ldr	r3, [r3, #28]
 8002602:	021b      	lsls	r3, r3, #8
 8002604:	4935      	ldr	r1, [pc, #212]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002606:	4313      	orrs	r3, r2
 8002608:	604b      	str	r3, [r1, #4]
 800260a:	e01a      	b.n	8002642 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800260c:	4b33      	ldr	r3, [pc, #204]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a32      	ldr	r2, [pc, #200]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002618:	f7fe faee 	bl	8000bf8 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002620:	f7fe faea 	bl	8000bf8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e328      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002632:	4b2a      	ldr	r3, [pc, #168]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0302 	and.w	r3, r3, #2
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x1dc>
 800263e:	e000      	b.n	8002642 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002640:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d073      	beq.n	8002736 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	2b08      	cmp	r3, #8
 8002652:	d005      	beq.n	8002660 <HAL_RCC_OscConfig+0x21c>
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	2b0c      	cmp	r3, #12
 8002658:	d10e      	bne.n	8002678 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	2b03      	cmp	r3, #3
 800265e:	d10b      	bne.n	8002678 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002660:	4b1e      	ldr	r3, [pc, #120]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d063      	beq.n	8002734 <HAL_RCC_OscConfig+0x2f0>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d15f      	bne.n	8002734 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e305      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002680:	d106      	bne.n	8002690 <HAL_RCC_OscConfig+0x24c>
 8002682:	4b16      	ldr	r3, [pc, #88]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a15      	ldr	r2, [pc, #84]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e01d      	b.n	80026cc <HAL_RCC_OscConfig+0x288>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x270>
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a0f      	ldr	r2, [pc, #60]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80026a0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026a4:	6013      	str	r3, [r2, #0]
 80026a6:	4b0d      	ldr	r3, [pc, #52]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a0c      	ldr	r2, [pc, #48]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e00b      	b.n	80026cc <HAL_RCC_OscConfig+0x288>
 80026b4:	4b09      	ldr	r3, [pc, #36]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a08      	ldr	r2, [pc, #32]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80026ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026be:	6013      	str	r3, [r2, #0]
 80026c0:	4b06      	ldr	r3, [pc, #24]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a05      	ldr	r2, [pc, #20]	; (80026dc <HAL_RCC_OscConfig+0x298>)
 80026c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d01b      	beq.n	800270c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d4:	f7fe fa90 	bl	8000bf8 <HAL_GetTick>
 80026d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026da:	e010      	b.n	80026fe <HAL_RCC_OscConfig+0x2ba>
 80026dc:	40021000 	.word	0x40021000
 80026e0:	08007780 	.word	0x08007780
 80026e4:	20000000 	.word	0x20000000
 80026e8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026ec:	f7fe fa84 	bl	8000bf8 <HAL_GetTick>
 80026f0:	4602      	mov	r2, r0
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	1ad3      	subs	r3, r2, r3
 80026f6:	2b64      	cmp	r3, #100	; 0x64
 80026f8:	d901      	bls.n	80026fe <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026fa:	2303      	movs	r3, #3
 80026fc:	e2c2      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fe:	4baf      	ldr	r3, [pc, #700]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d0f0      	beq.n	80026ec <HAL_RCC_OscConfig+0x2a8>
 800270a:	e014      	b.n	8002736 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fa74 	bl	8000bf8 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002714:	f7fe fa70 	bl	8000bf8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b64      	cmp	r3, #100	; 0x64
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e2ae      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002726:	4ba5      	ldr	r3, [pc, #660]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x2d0>
 8002732:	e000      	b.n	8002736 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 0302 	and.w	r3, r3, #2
 800273e:	2b00      	cmp	r3, #0
 8002740:	d060      	beq.n	8002804 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002742:	69bb      	ldr	r3, [r7, #24]
 8002744:	2b04      	cmp	r3, #4
 8002746:	d005      	beq.n	8002754 <HAL_RCC_OscConfig+0x310>
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	2b0c      	cmp	r3, #12
 800274c:	d119      	bne.n	8002782 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d116      	bne.n	8002782 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002754:	4b99      	ldr	r3, [pc, #612]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	2b00      	cmp	r3, #0
 800275e:	d005      	beq.n	800276c <HAL_RCC_OscConfig+0x328>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d101      	bne.n	800276c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002768:	2301      	movs	r3, #1
 800276a:	e28b      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800276c:	4b93      	ldr	r3, [pc, #588]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	061b      	lsls	r3, r3, #24
 800277a:	4990      	ldr	r1, [pc, #576]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 800277c:	4313      	orrs	r3, r2
 800277e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002780:	e040      	b.n	8002804 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	68db      	ldr	r3, [r3, #12]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d023      	beq.n	80027d2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800278a:	4b8c      	ldr	r3, [pc, #560]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a8b      	ldr	r2, [pc, #556]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002794:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002796:	f7fe fa2f 	bl	8000bf8 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800279e:	f7fe fa2b 	bl	8000bf8 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e269      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027b0:	4b82      	ldr	r3, [pc, #520]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027bc:	4b7f      	ldr	r3, [pc, #508]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	691b      	ldr	r3, [r3, #16]
 80027c8:	061b      	lsls	r3, r3, #24
 80027ca:	497c      	ldr	r1, [pc, #496]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	604b      	str	r3, [r1, #4]
 80027d0:	e018      	b.n	8002804 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027d2:	4b7a      	ldr	r3, [pc, #488]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a79      	ldr	r2, [pc, #484]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 80027d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80027dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027de:	f7fe fa0b 	bl	8000bf8 <HAL_GetTick>
 80027e2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027e4:	e008      	b.n	80027f8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027e6:	f7fe fa07 	bl	8000bf8 <HAL_GetTick>
 80027ea:	4602      	mov	r2, r0
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	1ad3      	subs	r3, r2, r3
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	d901      	bls.n	80027f8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027f4:	2303      	movs	r3, #3
 80027f6:	e245      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027f8:	4b70      	ldr	r3, [pc, #448]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002800:	2b00      	cmp	r3, #0
 8002802:	d1f0      	bne.n	80027e6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0308 	and.w	r3, r3, #8
 800280c:	2b00      	cmp	r3, #0
 800280e:	d03c      	beq.n	800288a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	2b00      	cmp	r3, #0
 8002816:	d01c      	beq.n	8002852 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002818:	4b68      	ldr	r3, [pc, #416]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 800281a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800281e:	4a67      	ldr	r2, [pc, #412]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002828:	f7fe f9e6 	bl	8000bf8 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002830:	f7fe f9e2 	bl	8000bf8 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b02      	cmp	r3, #2
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e220      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002842:	4b5e      	ldr	r3, [pc, #376]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 8002844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002848:	f003 0302 	and.w	r3, r3, #2
 800284c:	2b00      	cmp	r3, #0
 800284e:	d0ef      	beq.n	8002830 <HAL_RCC_OscConfig+0x3ec>
 8002850:	e01b      	b.n	800288a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002852:	4b5a      	ldr	r3, [pc, #360]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 8002854:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002858:	4a58      	ldr	r2, [pc, #352]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 800285a:	f023 0301 	bic.w	r3, r3, #1
 800285e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7fe f9c9 	bl	8000bf8 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002868:	e008      	b.n	800287c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800286a:	f7fe f9c5 	bl	8000bf8 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b02      	cmp	r3, #2
 8002876:	d901      	bls.n	800287c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e203      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800287c:	4b4f      	ldr	r3, [pc, #316]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 800287e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002882:	f003 0302 	and.w	r3, r3, #2
 8002886:	2b00      	cmp	r3, #0
 8002888:	d1ef      	bne.n	800286a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0304 	and.w	r3, r3, #4
 8002892:	2b00      	cmp	r3, #0
 8002894:	f000 80a6 	beq.w	80029e4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002898:	2300      	movs	r3, #0
 800289a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800289c:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 800289e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d10d      	bne.n	80028c4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028a8:	4b44      	ldr	r3, [pc, #272]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 80028aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028ac:	4a43      	ldr	r2, [pc, #268]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 80028ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028b2:	6593      	str	r3, [r2, #88]	; 0x58
 80028b4:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 80028b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028bc:	60bb      	str	r3, [r7, #8]
 80028be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028c0:	2301      	movs	r3, #1
 80028c2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c4:	4b3e      	ldr	r3, [pc, #248]	; (80029c0 <HAL_RCC_OscConfig+0x57c>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d118      	bne.n	8002902 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028d0:	4b3b      	ldr	r3, [pc, #236]	; (80029c0 <HAL_RCC_OscConfig+0x57c>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	4a3a      	ldr	r2, [pc, #232]	; (80029c0 <HAL_RCC_OscConfig+0x57c>)
 80028d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028da:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028dc:	f7fe f98c 	bl	8000bf8 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028e2:	e008      	b.n	80028f6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028e4:	f7fe f988 	bl	8000bf8 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	2b02      	cmp	r3, #2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e1c6      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028f6:	4b32      	ldr	r3, [pc, #200]	; (80029c0 <HAL_RCC_OscConfig+0x57c>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d0f0      	beq.n	80028e4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	689b      	ldr	r3, [r3, #8]
 8002906:	2b01      	cmp	r3, #1
 8002908:	d108      	bne.n	800291c <HAL_RCC_OscConfig+0x4d8>
 800290a:	4b2c      	ldr	r3, [pc, #176]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 800290c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002910:	4a2a      	ldr	r2, [pc, #168]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 8002912:	f043 0301 	orr.w	r3, r3, #1
 8002916:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800291a:	e024      	b.n	8002966 <HAL_RCC_OscConfig+0x522>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	2b05      	cmp	r3, #5
 8002922:	d110      	bne.n	8002946 <HAL_RCC_OscConfig+0x502>
 8002924:	4b25      	ldr	r3, [pc, #148]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 8002926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800292a:	4a24      	ldr	r2, [pc, #144]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 800292c:	f043 0304 	orr.w	r3, r3, #4
 8002930:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002934:	4b21      	ldr	r3, [pc, #132]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 8002936:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800293a:	4a20      	ldr	r2, [pc, #128]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002944:	e00f      	b.n	8002966 <HAL_RCC_OscConfig+0x522>
 8002946:	4b1d      	ldr	r3, [pc, #116]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 8002948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800294c:	4a1b      	ldr	r2, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 800294e:	f023 0301 	bic.w	r3, r3, #1
 8002952:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002956:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 8002958:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800295c:	4a17      	ldr	r2, [pc, #92]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 800295e:	f023 0304 	bic.w	r3, r3, #4
 8002962:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d016      	beq.n	800299c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800296e:	f7fe f943 	bl	8000bf8 <HAL_GetTick>
 8002972:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002974:	e00a      	b.n	800298c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002976:	f7fe f93f 	bl	8000bf8 <HAL_GetTick>
 800297a:	4602      	mov	r2, r0
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	1ad3      	subs	r3, r2, r3
 8002980:	f241 3288 	movw	r2, #5000	; 0x1388
 8002984:	4293      	cmp	r3, r2
 8002986:	d901      	bls.n	800298c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002988:	2303      	movs	r3, #3
 800298a:	e17b      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_OscConfig+0x578>)
 800298e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002992:	f003 0302 	and.w	r3, r3, #2
 8002996:	2b00      	cmp	r3, #0
 8002998:	d0ed      	beq.n	8002976 <HAL_RCC_OscConfig+0x532>
 800299a:	e01a      	b.n	80029d2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800299c:	f7fe f92c 	bl	8000bf8 <HAL_GetTick>
 80029a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029a2:	e00f      	b.n	80029c4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029a4:	f7fe f928 	bl	8000bf8 <HAL_GetTick>
 80029a8:	4602      	mov	r2, r0
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	1ad3      	subs	r3, r2, r3
 80029ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d906      	bls.n	80029c4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80029b6:	2303      	movs	r3, #3
 80029b8:	e164      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
 80029ba:	bf00      	nop
 80029bc:	40021000 	.word	0x40021000
 80029c0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80029c4:	4ba8      	ldr	r3, [pc, #672]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	f003 0302 	and.w	r3, r3, #2
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1e8      	bne.n	80029a4 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029d2:	7ffb      	ldrb	r3, [r7, #31]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d105      	bne.n	80029e4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d8:	4ba3      	ldr	r3, [pc, #652]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 80029da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029dc:	4aa2      	ldr	r2, [pc, #648]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 80029de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029e2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0320 	and.w	r3, r3, #32
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d03c      	beq.n	8002a6a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d01c      	beq.n	8002a32 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029f8:	4b9b      	ldr	r3, [pc, #620]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 80029fa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80029fe:	4a9a      	ldr	r2, [pc, #616]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a08:	f7fe f8f6 	bl	8000bf8 <HAL_GetTick>
 8002a0c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a10:	f7fe f8f2 	bl	8000bf8 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e130      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002a22:	4b91      	ldr	r3, [pc, #580]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002a24:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d0ef      	beq.n	8002a10 <HAL_RCC_OscConfig+0x5cc>
 8002a30:	e01b      	b.n	8002a6a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a32:	4b8d      	ldr	r3, [pc, #564]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002a34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a38:	4a8b      	ldr	r2, [pc, #556]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002a3a:	f023 0301 	bic.w	r3, r3, #1
 8002a3e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a42:	f7fe f8d9 	bl	8000bf8 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a4a:	f7fe f8d5 	bl	8000bf8 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e113      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002a5c:	4b82      	ldr	r3, [pc, #520]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002a5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1ef      	bne.n	8002a4a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8107 	beq.w	8002c82 <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	f040 80cb 	bne.w	8002c14 <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002a7e:	4b7a      	ldr	r3, [pc, #488]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002a80:	68db      	ldr	r3, [r3, #12]
 8002a82:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a84:	697b      	ldr	r3, [r7, #20]
 8002a86:	f003 0203 	and.w	r2, r3, #3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d12c      	bne.n	8002aec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d123      	bne.n	8002aec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aae:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d11b      	bne.n	8002aec <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ab4:	697b      	ldr	r3, [r7, #20]
 8002ab6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abe:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d113      	bne.n	8002aec <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ac4:	697b      	ldr	r3, [r7, #20]
 8002ac6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ace:	085b      	lsrs	r3, r3, #1
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002ad4:	429a      	cmp	r2, r3
 8002ad6:	d109      	bne.n	8002aec <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	085b      	lsrs	r3, r3, #1
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d06d      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	2b0c      	cmp	r3, #12
 8002af0:	d068      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002af2:	4b5d      	ldr	r3, [pc, #372]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d105      	bne.n	8002b0a <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002afe:	4b5a      	ldr	r3, [pc, #360]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d001      	beq.n	8002b0e <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e0ba      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002b0e:	4b56      	ldr	r3, [pc, #344]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	4a55      	ldr	r2, [pc, #340]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002b14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002b18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b1a:	f7fe f86d 	bl	8000bf8 <HAL_GetTick>
 8002b1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b20:	e008      	b.n	8002b34 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b22:	f7fe f869 	bl	8000bf8 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b02      	cmp	r3, #2
 8002b2e:	d901      	bls.n	8002b34 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8002b30:	2303      	movs	r3, #3
 8002b32:	e0a7      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b34:	4b4c      	ldr	r3, [pc, #304]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1f0      	bne.n	8002b22 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b40:	4b49      	ldr	r3, [pc, #292]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002b42:	68da      	ldr	r2, [r3, #12]
 8002b44:	4b49      	ldr	r3, [pc, #292]	; (8002c6c <HAL_RCC_OscConfig+0x828>)
 8002b46:	4013      	ands	r3, r2
 8002b48:	687a      	ldr	r2, [r7, #4]
 8002b4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002b50:	3a01      	subs	r2, #1
 8002b52:	0112      	lsls	r2, r2, #4
 8002b54:	4311      	orrs	r1, r2
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b5a:	0212      	lsls	r2, r2, #8
 8002b5c:	4311      	orrs	r1, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002b62:	0852      	lsrs	r2, r2, #1
 8002b64:	3a01      	subs	r2, #1
 8002b66:	0552      	lsls	r2, r2, #21
 8002b68:	4311      	orrs	r1, r2
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002b6e:	0852      	lsrs	r2, r2, #1
 8002b70:	3a01      	subs	r2, #1
 8002b72:	0652      	lsls	r2, r2, #25
 8002b74:	4311      	orrs	r1, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002b7a:	06d2      	lsls	r2, r2, #27
 8002b7c:	430a      	orrs	r2, r1
 8002b7e:	493a      	ldr	r1, [pc, #232]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002b84:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a37      	ldr	r2, [pc, #220]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002b8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b90:	4b35      	ldr	r3, [pc, #212]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4a34      	ldr	r2, [pc, #208]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002b9c:	f7fe f82c 	bl	8000bf8 <HAL_GetTick>
 8002ba0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ba2:	e008      	b.n	8002bb6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe f828 	bl	8000bf8 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b02      	cmp	r3, #2
 8002bb0:	d901      	bls.n	8002bb6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e066      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bb6:	4b2c      	ldr	r3, [pc, #176]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d0f0      	beq.n	8002ba4 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bc2:	e05e      	b.n	8002c82 <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	e05d      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bc8:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d156      	bne.n	8002c82 <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002bd4:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a23      	ldr	r2, [pc, #140]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002bda:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bde:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002be0:	4b21      	ldr	r3, [pc, #132]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	4a20      	ldr	r2, [pc, #128]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002be6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002bec:	f7fe f804 	bl	8000bf8 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7fe f800 	bl	8000bf8 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e03e      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c06:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0f0      	beq.n	8002bf4 <HAL_RCC_OscConfig+0x7b0>
 8002c12:	e036      	b.n	8002c82 <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	2b0c      	cmp	r3, #12
 8002c18:	d031      	beq.n	8002c7e <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c1a:	4b13      	ldr	r3, [pc, #76]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002c20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002c24:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d105      	bne.n	8002c3e <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002c32:	4b0d      	ldr	r3, [pc, #52]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002c34:	68db      	ldr	r3, [r3, #12]
 8002c36:	4a0c      	ldr	r2, [pc, #48]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002c38:	f023 0303 	bic.w	r3, r3, #3
 8002c3c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002c3e:	4b0a      	ldr	r3, [pc, #40]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002c40:	68db      	ldr	r3, [r3, #12]
 8002c42:	4a09      	ldr	r2, [pc, #36]	; (8002c68 <HAL_RCC_OscConfig+0x824>)
 8002c44:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002c48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c4c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4e:	f7fd ffd3 	bl	8000bf8 <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c54:	e00c      	b.n	8002c70 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c56:	f7fd ffcf 	bl	8000bf8 <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d905      	bls.n	8002c70 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 8002c64:	2303      	movs	r3, #3
 8002c66:	e00d      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_RCC_OscConfig+0x848>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d1ec      	bne.n	8002c56 <HAL_RCC_OscConfig+0x812>
 8002c7c:	e001      	b.n	8002c82 <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e000      	b.n	8002c84 <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 8002c82:	2300      	movs	r3, #0
}
 8002c84:	4618      	mov	r0, r3
 8002c86:	3720      	adds	r7, #32
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40021000 	.word	0x40021000

08002c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0c8      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca4:	4b66      	ldr	r3, [pc, #408]	; (8002e40 <HAL_RCC_ClockConfig+0x1b0>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d910      	bls.n	8002cd4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb2:	4b63      	ldr	r3, [pc, #396]	; (8002e40 <HAL_RCC_ClockConfig+0x1b0>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f023 0207 	bic.w	r2, r3, #7
 8002cba:	4961      	ldr	r1, [pc, #388]	; (8002e40 <HAL_RCC_ClockConfig+0x1b0>)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc2:	4b5f      	ldr	r3, [pc, #380]	; (8002e40 <HAL_RCC_ClockConfig+0x1b0>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	683a      	ldr	r2, [r7, #0]
 8002ccc:	429a      	cmp	r2, r3
 8002cce:	d001      	beq.n	8002cd4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0b0      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0301 	and.w	r3, r3, #1
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d04c      	beq.n	8002d7a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	2b03      	cmp	r3, #3
 8002ce6:	d107      	bne.n	8002cf8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002ce8:	4b56      	ldr	r3, [pc, #344]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d121      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e09e      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d107      	bne.n	8002d10 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002d00:	4b50      	ldr	r3, [pc, #320]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d115      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e092      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d107      	bne.n	8002d28 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d18:	4b4a      	ldr	r3, [pc, #296]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d109      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e086      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002d28:	4b46      	ldr	r3, [pc, #280]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d101      	bne.n	8002d38 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8002d34:	2301      	movs	r3, #1
 8002d36:	e07e      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002d38:	4b42      	ldr	r3, [pc, #264]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 0203 	bic.w	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	493f      	ldr	r1, [pc, #252]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002d46:	4313      	orrs	r3, r2
 8002d48:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d4a:	f7fd ff55 	bl	8000bf8 <HAL_GetTick>
 8002d4e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d50:	e00a      	b.n	8002d68 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d52:	f7fd ff51 	bl	8000bf8 <HAL_GetTick>
 8002d56:	4602      	mov	r2, r0
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d901      	bls.n	8002d68 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002d64:	2303      	movs	r3, #3
 8002d66:	e066      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d68:	4b36      	ldr	r3, [pc, #216]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	f003 020c 	and.w	r2, r3, #12
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	009b      	lsls	r3, r3, #2
 8002d76:	429a      	cmp	r2, r3
 8002d78:	d1eb      	bne.n	8002d52 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d008      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d86:	4b2f      	ldr	r3, [pc, #188]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	492c      	ldr	r1, [pc, #176]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d98:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <HAL_RCC_ClockConfig+0x1b0>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	683a      	ldr	r2, [r7, #0]
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d210      	bcs.n	8002dc8 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002da6:	4b26      	ldr	r3, [pc, #152]	; (8002e40 <HAL_RCC_ClockConfig+0x1b0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f023 0207 	bic.w	r2, r3, #7
 8002dae:	4924      	ldr	r1, [pc, #144]	; (8002e40 <HAL_RCC_ClockConfig+0x1b0>)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	4313      	orrs	r3, r2
 8002db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002db6:	4b22      	ldr	r3, [pc, #136]	; (8002e40 <HAL_RCC_ClockConfig+0x1b0>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d001      	beq.n	8002dc8 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	e036      	b.n	8002e36 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d008      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002dd4:	4b1b      	ldr	r3, [pc, #108]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002dd6:	689b      	ldr	r3, [r3, #8]
 8002dd8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68db      	ldr	r3, [r3, #12]
 8002de0:	4918      	ldr	r1, [pc, #96]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f003 0308 	and.w	r3, r3, #8
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d009      	beq.n	8002e06 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002df2:	4b14      	ldr	r3, [pc, #80]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	00db      	lsls	r3, r3, #3
 8002e00:	4910      	ldr	r1, [pc, #64]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002e02:	4313      	orrs	r3, r2
 8002e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002e06:	f000 f825 	bl	8002e54 <HAL_RCC_GetSysClockFreq>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	4b0d      	ldr	r3, [pc, #52]	; (8002e44 <HAL_RCC_ClockConfig+0x1b4>)
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	091b      	lsrs	r3, r3, #4
 8002e12:	f003 030f 	and.w	r3, r3, #15
 8002e16:	490c      	ldr	r1, [pc, #48]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002e18:	5ccb      	ldrb	r3, [r1, r3]
 8002e1a:	f003 031f 	and.w	r3, r3, #31
 8002e1e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e22:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002e26:	4b0a      	ldr	r3, [pc, #40]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fe94 	bl	8000b58 <HAL_InitTick>
 8002e30:	4603      	mov	r3, r0
 8002e32:	72fb      	strb	r3, [r7, #11]

  return status;
 8002e34:	7afb      	ldrb	r3, [r7, #11]
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3710      	adds	r7, #16
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40022000 	.word	0x40022000
 8002e44:	40021000 	.word	0x40021000
 8002e48:	08007780 	.word	0x08007780
 8002e4c:	20000000 	.word	0x20000000
 8002e50:	20000004 	.word	0x20000004

08002e54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b089      	sub	sp, #36	; 0x24
 8002e58:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e62:	4b3e      	ldr	r3, [pc, #248]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	f003 030c 	and.w	r3, r3, #12
 8002e6a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002e6c:	4b3b      	ldr	r3, [pc, #236]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	f003 0303 	and.w	r3, r3, #3
 8002e74:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_RCC_GetSysClockFreq+0x34>
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	2b0c      	cmp	r3, #12
 8002e80:	d121      	bne.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d11e      	bne.n	8002ec6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e88:	4b34      	ldr	r3, [pc, #208]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0308 	and.w	r3, r3, #8
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d107      	bne.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e94:	4b31      	ldr	r3, [pc, #196]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002e96:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002e9a:	0a1b      	lsrs	r3, r3, #8
 8002e9c:	f003 030f 	and.w	r3, r3, #15
 8002ea0:	61fb      	str	r3, [r7, #28]
 8002ea2:	e005      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002ea4:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	091b      	lsrs	r3, r3, #4
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002eb0:	4a2b      	ldr	r2, [pc, #172]	; (8002f60 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eb8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d10d      	bne.n	8002edc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ec4:	e00a      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	2b04      	cmp	r3, #4
 8002eca:	d102      	bne.n	8002ed2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002ecc:	4b25      	ldr	r3, [pc, #148]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x110>)
 8002ece:	61bb      	str	r3, [r7, #24]
 8002ed0:	e004      	b.n	8002edc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	2b08      	cmp	r3, #8
 8002ed6:	d101      	bne.n	8002edc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ed8:	4b23      	ldr	r3, [pc, #140]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002eda:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	2b0c      	cmp	r3, #12
 8002ee0:	d134      	bne.n	8002f4c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ee4:	68db      	ldr	r3, [r3, #12]
 8002ee6:	f003 0303 	and.w	r3, r3, #3
 8002eea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002eec:	68bb      	ldr	r3, [r7, #8]
 8002eee:	2b02      	cmp	r3, #2
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0xa6>
 8002ef2:	68bb      	ldr	r3, [r7, #8]
 8002ef4:	2b03      	cmp	r3, #3
 8002ef6:	d003      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0xac>
 8002ef8:	e005      	b.n	8002f06 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002efa:	4b1a      	ldr	r3, [pc, #104]	; (8002f64 <HAL_RCC_GetSysClockFreq+0x110>)
 8002efc:	617b      	str	r3, [r7, #20]
      break;
 8002efe:	e005      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002f00:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <HAL_RCC_GetSysClockFreq+0x114>)
 8002f02:	617b      	str	r3, [r7, #20]
      break;
 8002f04:	e002      	b.n	8002f0c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	617b      	str	r3, [r7, #20]
      break;
 8002f0a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	091b      	lsrs	r3, r3, #4
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	3301      	adds	r3, #1
 8002f18:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f1c:	68db      	ldr	r3, [r3, #12]
 8002f1e:	0a1b      	lsrs	r3, r3, #8
 8002f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002f24:	697a      	ldr	r2, [r7, #20]
 8002f26:	fb02 f203 	mul.w	r2, r2, r3
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <HAL_RCC_GetSysClockFreq+0x108>)
 8002f34:	68db      	ldr	r3, [r3, #12]
 8002f36:	0e5b      	lsrs	r3, r3, #25
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	3301      	adds	r3, #1
 8002f3e:	005b      	lsls	r3, r3, #1
 8002f40:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002f42:	697a      	ldr	r2, [r7, #20]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f4a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002f4c:	69bb      	ldr	r3, [r7, #24]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3724      	adds	r7, #36	; 0x24
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	08007790 	.word	0x08007790
 8002f64:	00f42400 	.word	0x00f42400
 8002f68:	007a1200 	.word	0x007a1200

08002f6c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f70:	4b03      	ldr	r3, [pc, #12]	; (8002f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f72:	681b      	ldr	r3, [r3, #0]
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	20000000 	.word	0x20000000

08002f84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f90:	4b2a      	ldr	r3, [pc, #168]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d003      	beq.n	8002fa4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f9c:	f7ff f9de 	bl	800235c <HAL_PWREx_GetVoltageRange>
 8002fa0:	6178      	str	r0, [r7, #20]
 8002fa2:	e014      	b.n	8002fce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fa4:	4b25      	ldr	r3, [pc, #148]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fa6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa8:	4a24      	ldr	r2, [pc, #144]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fae:	6593      	str	r3, [r2, #88]	; 0x58
 8002fb0:	4b22      	ldr	r3, [pc, #136]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	60fb      	str	r3, [r7, #12]
 8002fba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002fbc:	f7ff f9ce 	bl	800235c <HAL_PWREx_GetVoltageRange>
 8002fc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002fc2:	4b1e      	ldr	r3, [pc, #120]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fc6:	4a1d      	ldr	r2, [pc, #116]	; (800303c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002fc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002fd4:	d10b      	bne.n	8002fee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b80      	cmp	r3, #128	; 0x80
 8002fda:	d919      	bls.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2ba0      	cmp	r3, #160	; 0xa0
 8002fe0:	d902      	bls.n	8002fe8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	613b      	str	r3, [r7, #16]
 8002fe6:	e013      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fe8:	2301      	movs	r3, #1
 8002fea:	613b      	str	r3, [r7, #16]
 8002fec:	e010      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2b80      	cmp	r3, #128	; 0x80
 8002ff2:	d902      	bls.n	8002ffa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ff4:	2303      	movs	r3, #3
 8002ff6:	613b      	str	r3, [r7, #16]
 8002ff8:	e00a      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2b80      	cmp	r3, #128	; 0x80
 8002ffe:	d102      	bne.n	8003006 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003000:	2302      	movs	r3, #2
 8003002:	613b      	str	r3, [r7, #16]
 8003004:	e004      	b.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2b70      	cmp	r3, #112	; 0x70
 800300a:	d101      	bne.n	8003010 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800300c:	2301      	movs	r3, #1
 800300e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003010:	4b0b      	ldr	r3, [pc, #44]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f023 0207 	bic.w	r2, r3, #7
 8003018:	4909      	ldr	r1, [pc, #36]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003020:	4b07      	ldr	r3, [pc, #28]	; (8003040 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	693a      	ldr	r2, [r7, #16]
 800302a:	429a      	cmp	r2, r3
 800302c:	d001      	beq.n	8003032 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e000      	b.n	8003034 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003032:	2300      	movs	r3, #0
}
 8003034:	4618      	mov	r0, r3
 8003036:	3718      	adds	r7, #24
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}
 800303c:	40021000 	.word	0x40021000
 8003040:	40022000 	.word	0x40022000

08003044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800304c:	2300      	movs	r3, #0
 800304e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003050:	2300      	movs	r3, #0
 8003052:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800305c:	2b00      	cmp	r3, #0
 800305e:	d041      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003064:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003068:	d02a      	beq.n	80030c0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800306a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800306e:	d824      	bhi.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003070:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003074:	d008      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003076:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800307a:	d81e      	bhi.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x76>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d00a      	beq.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003084:	d010      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003086:	e018      	b.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003088:	4b86      	ldr	r3, [pc, #536]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	4a85      	ldr	r2, [pc, #532]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800308e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003092:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003094:	e015      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3304      	adds	r3, #4
 800309a:	2100      	movs	r1, #0
 800309c:	4618      	mov	r0, r3
 800309e:	f000 fadd 	bl	800365c <RCCEx_PLLSAI1_Config>
 80030a2:	4603      	mov	r3, r0
 80030a4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030a6:	e00c      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3320      	adds	r3, #32
 80030ac:	2100      	movs	r1, #0
 80030ae:	4618      	mov	r0, r3
 80030b0:	f000 fbc6 	bl	8003840 <RCCEx_PLLSAI2_Config>
 80030b4:	4603      	mov	r3, r0
 80030b6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80030b8:	e003      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	74fb      	strb	r3, [r7, #19]
      break;
 80030be:	e000      	b.n	80030c2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80030c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80030c2:	7cfb      	ldrb	r3, [r7, #19]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10b      	bne.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80030c8:	4b76      	ldr	r3, [pc, #472]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030d6:	4973      	ldr	r1, [pc, #460]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030d8:	4313      	orrs	r3, r2
 80030da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80030de:	e001      	b.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030e0:	7cfb      	ldrb	r3, [r7, #19]
 80030e2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d041      	beq.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80030f4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030f8:	d02a      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80030fe:	d824      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003100:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003104:	d008      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800310a:	d81e      	bhi.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800310c:	2b00      	cmp	r3, #0
 800310e:	d00a      	beq.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003110:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003114:	d010      	beq.n	8003138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003116:	e018      	b.n	800314a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003118:	4b62      	ldr	r3, [pc, #392]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	4a61      	ldr	r2, [pc, #388]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800311e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003122:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003124:	e015      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	3304      	adds	r3, #4
 800312a:	2100      	movs	r1, #0
 800312c:	4618      	mov	r0, r3
 800312e:	f000 fa95 	bl	800365c <RCCEx_PLLSAI1_Config>
 8003132:	4603      	mov	r3, r0
 8003134:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003136:	e00c      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	3320      	adds	r3, #32
 800313c:	2100      	movs	r1, #0
 800313e:	4618      	mov	r0, r3
 8003140:	f000 fb7e 	bl	8003840 <RCCEx_PLLSAI2_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003148:	e003      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	74fb      	strb	r3, [r7, #19]
      break;
 800314e:	e000      	b.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003150:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003152:	7cfb      	ldrb	r3, [r7, #19]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003158:	4b52      	ldr	r3, [pc, #328]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003166:	494f      	ldr	r1, [pc, #316]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800316e:	e001      	b.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003170:	7cfb      	ldrb	r3, [r7, #19]
 8003172:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800317c:	2b00      	cmp	r3, #0
 800317e:	f000 80a0 	beq.w	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003182:	2300      	movs	r3, #0
 8003184:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003186:	4b47      	ldr	r3, [pc, #284]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800318a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003192:	2301      	movs	r3, #1
 8003194:	e000      	b.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003196:	2300      	movs	r3, #0
 8003198:	2b00      	cmp	r3, #0
 800319a:	d00d      	beq.n	80031b8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319c:	4b41      	ldr	r3, [pc, #260]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800319e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031a0:	4a40      	ldr	r2, [pc, #256]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031a6:	6593      	str	r3, [r2, #88]	; 0x58
 80031a8:	4b3e      	ldr	r3, [pc, #248]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80031ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b0:	60bb      	str	r3, [r7, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031b4:	2301      	movs	r3, #1
 80031b6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80031b8:	4b3b      	ldr	r3, [pc, #236]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a3a      	ldr	r2, [pc, #232]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80031c4:	f7fd fd18 	bl	8000bf8 <HAL_GetTick>
 80031c8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031ca:	e009      	b.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031cc:	f7fd fd14 	bl	8000bf8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b02      	cmp	r3, #2
 80031d8:	d902      	bls.n	80031e0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	74fb      	strb	r3, [r7, #19]
        break;
 80031de:	e005      	b.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031e0:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0ef      	beq.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d15c      	bne.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031f2:	4b2c      	ldr	r3, [pc, #176]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031fc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d01f      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	429a      	cmp	r2, r3
 800320e:	d019      	beq.n	8003244 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003210:	4b24      	ldr	r3, [pc, #144]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003216:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800321a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800321c:	4b21      	ldr	r3, [pc, #132]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800321e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003222:	4a20      	ldr	r2, [pc, #128]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003228:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800322c:	4b1d      	ldr	r3, [pc, #116]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800322e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003232:	4a1c      	ldr	r2, [pc, #112]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003234:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003238:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800323c:	4a19      	ldr	r2, [pc, #100]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800323e:	697b      	ldr	r3, [r7, #20]
 8003240:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b00      	cmp	r3, #0
 800324c:	d016      	beq.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800324e:	f7fd fcd3 	bl	8000bf8 <HAL_GetTick>
 8003252:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003254:	e00b      	b.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003256:	f7fd fccf 	bl	8000bf8 <HAL_GetTick>
 800325a:	4602      	mov	r2, r0
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	f241 3288 	movw	r2, #5000	; 0x1388
 8003264:	4293      	cmp	r3, r2
 8003266:	d902      	bls.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003268:	2303      	movs	r3, #3
 800326a:	74fb      	strb	r3, [r7, #19]
            break;
 800326c:	e006      	b.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800326e:	4b0d      	ldr	r3, [pc, #52]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003270:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003274:	f003 0302 	and.w	r3, r3, #2
 8003278:	2b00      	cmp	r3, #0
 800327a:	d0ec      	beq.n	8003256 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10c      	bne.n	800329c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003282:	4b08      	ldr	r3, [pc, #32]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003288:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003292:	4904      	ldr	r1, [pc, #16]	; (80032a4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003294:	4313      	orrs	r3, r2
 8003296:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800329a:	e009      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800329c:	7cfb      	ldrb	r3, [r7, #19]
 800329e:	74bb      	strb	r3, [r7, #18]
 80032a0:	e006      	b.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80032a2:	bf00      	nop
 80032a4:	40021000 	.word	0x40021000
 80032a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032ac:	7cfb      	ldrb	r3, [r7, #19]
 80032ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032b0:	7c7b      	ldrb	r3, [r7, #17]
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d105      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b6:	4ba6      	ldr	r3, [pc, #664]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ba:	4aa5      	ldr	r2, [pc, #660]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 0301 	and.w	r3, r3, #1
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d00a      	beq.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80032ce:	4ba0      	ldr	r3, [pc, #640]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032d4:	f023 0203 	bic.w	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032dc:	499c      	ldr	r1, [pc, #624]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f003 0302 	and.w	r3, r3, #2
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00a      	beq.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032f0:	4b97      	ldr	r3, [pc, #604]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f023 020c 	bic.w	r2, r3, #12
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032fe:	4994      	ldr	r1, [pc, #592]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003300:	4313      	orrs	r3, r2
 8003302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003312:	4b8f      	ldr	r3, [pc, #572]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003314:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003318:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	498b      	ldr	r1, [pc, #556]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003322:	4313      	orrs	r3, r2
 8003324:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0308 	and.w	r3, r3, #8
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003334:	4b86      	ldr	r3, [pc, #536]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003336:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800333a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003342:	4983      	ldr	r1, [pc, #524]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003344:	4313      	orrs	r3, r2
 8003346:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0310 	and.w	r3, r3, #16
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003356:	4b7e      	ldr	r3, [pc, #504]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003364:	497a      	ldr	r1, [pc, #488]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003366:	4313      	orrs	r3, r2
 8003368:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0320 	and.w	r3, r3, #32
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003378:	4b75      	ldr	r3, [pc, #468]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800337a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003386:	4972      	ldr	r1, [pc, #456]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003388:	4313      	orrs	r3, r2
 800338a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800339a:	4b6d      	ldr	r3, [pc, #436]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800339c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033a8:	4969      	ldr	r1, [pc, #420]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80033bc:	4b64      	ldr	r3, [pc, #400]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033ca:	4961      	ldr	r1, [pc, #388]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033de:	4b5c      	ldr	r3, [pc, #368]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033e4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ec:	4958      	ldr	r1, [pc, #352]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80033ee:	4313      	orrs	r3, r2
 80033f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d00a      	beq.n	8003416 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003400:	4b53      	ldr	r3, [pc, #332]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003406:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340e:	4950      	ldr	r1, [pc, #320]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003410:	4313      	orrs	r3, r2
 8003412:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00a      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003422:	4b4b      	ldr	r3, [pc, #300]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003428:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	4947      	ldr	r1, [pc, #284]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003432:	4313      	orrs	r3, r2
 8003434:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d00a      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003444:	4b42      	ldr	r3, [pc, #264]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003446:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800344a:	f023 0203 	bic.w	r2, r3, #3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	493f      	ldr	r1, [pc, #252]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d028      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003466:	4b3a      	ldr	r3, [pc, #232]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003474:	4936      	ldr	r1, [pc, #216]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003476:	4313      	orrs	r3, r2
 8003478:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003480:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003484:	d106      	bne.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003486:	4b32      	ldr	r3, [pc, #200]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003488:	68db      	ldr	r3, [r3, #12]
 800348a:	4a31      	ldr	r2, [pc, #196]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800348c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003490:	60d3      	str	r3, [r2, #12]
 8003492:	e011      	b.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003498:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800349c:	d10c      	bne.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3304      	adds	r3, #4
 80034a2:	2101      	movs	r1, #1
 80034a4:	4618      	mov	r0, r3
 80034a6:	f000 f8d9 	bl	800365c <RCCEx_PLLSAI1_Config>
 80034aa:	4603      	mov	r3, r0
 80034ac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80034ae:	7cfb      	ldrb	r3, [r7, #19]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d001      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 80034b4:	7cfb      	ldrb	r3, [r7, #19]
 80034b6:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d028      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80034c4:	4b22      	ldr	r3, [pc, #136]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034d2:	491f      	ldr	r1, [pc, #124]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034d4:	4313      	orrs	r3, r2
 80034d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80034e2:	d106      	bne.n	80034f2 <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034e4:	4b1a      	ldr	r3, [pc, #104]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034e6:	68db      	ldr	r3, [r3, #12]
 80034e8:	4a19      	ldr	r2, [pc, #100]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80034ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034ee:	60d3      	str	r3, [r2, #12]
 80034f0:	e011      	b.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034fa:	d10c      	bne.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	3304      	adds	r3, #4
 8003500:	2101      	movs	r1, #1
 8003502:	4618      	mov	r0, r3
 8003504:	f000 f8aa 	bl	800365c <RCCEx_PLLSAI1_Config>
 8003508:	4603      	mov	r3, r0
 800350a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800350c:	7cfb      	ldrb	r3, [r7, #19]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 8003512:	7cfb      	ldrb	r3, [r7, #19]
 8003514:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800351e:	2b00      	cmp	r3, #0
 8003520:	d02a      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003522:	4b0b      	ldr	r3, [pc, #44]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003524:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003528:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003530:	4907      	ldr	r1, [pc, #28]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003532:	4313      	orrs	r3, r2
 8003534:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800353c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003540:	d108      	bne.n	8003554 <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003542:	4b03      	ldr	r3, [pc, #12]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003544:	68db      	ldr	r3, [r3, #12]
 8003546:	4a02      	ldr	r2, [pc, #8]	; (8003550 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003548:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800354c:	60d3      	str	r3, [r2, #12]
 800354e:	e013      	b.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x534>
 8003550:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003558:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800355c:	d10c      	bne.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	2101      	movs	r1, #1
 8003564:	4618      	mov	r0, r3
 8003566:	f000 f879 	bl	800365c <RCCEx_PLLSAI1_Config>
 800356a:	4603      	mov	r3, r0
 800356c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800356e:	7cfb      	ldrb	r3, [r7, #19]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 8003574:	7cfb      	ldrb	r3, [r7, #19]
 8003576:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d02f      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003584:	4b2c      	ldr	r3, [pc, #176]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003586:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800358a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003592:	4929      	ldr	r1, [pc, #164]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003594:	4313      	orrs	r3, r2
 8003596:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800359e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80035a2:	d10d      	bne.n	80035c0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	3304      	adds	r3, #4
 80035a8:	2102      	movs	r1, #2
 80035aa:	4618      	mov	r0, r3
 80035ac:	f000 f856 	bl	800365c <RCCEx_PLLSAI1_Config>
 80035b0:	4603      	mov	r3, r0
 80035b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035b4:	7cfb      	ldrb	r3, [r7, #19]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d014      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80035ba:	7cfb      	ldrb	r3, [r7, #19]
 80035bc:	74bb      	strb	r3, [r7, #18]
 80035be:	e011      	b.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80035c4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035c8:	d10c      	bne.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	3320      	adds	r3, #32
 80035ce:	2102      	movs	r1, #2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f000 f935 	bl	8003840 <RCCEx_PLLSAI2_Config>
 80035d6:	4603      	mov	r3, r0
 80035d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80035da:	7cfb      	ldrb	r3, [r7, #19]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d001      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 80035e0:	7cfb      	ldrb	r3, [r7, #19]
 80035e2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d00b      	beq.n	8003608 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035f0:	4b11      	ldr	r3, [pc, #68]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003600:	490d      	ldr	r1, [pc, #52]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003602:	4313      	orrs	r3, r2
 8003604:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003610:	2b00      	cmp	r3, #0
 8003612:	d00b      	beq.n	800362c <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003614:	4b08      	ldr	r3, [pc, #32]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800361a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003624:	4904      	ldr	r1, [pc, #16]	; (8003638 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 8003626:	4313      	orrs	r3, r2
 8003628:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800362c:	7cbb      	ldrb	r3, [r7, #18]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	40021000 	.word	0x40021000

0800363c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800363c:	b480      	push	{r7}
 800363e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8003640:	4b05      	ldr	r3, [pc, #20]	; (8003658 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a04      	ldr	r2, [pc, #16]	; (8003658 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8003646:	f043 0304 	orr.w	r3, r3, #4
 800364a:	6013      	str	r3, [r2, #0]
}
 800364c:	bf00      	nop
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40021000 	.word	0x40021000

0800365c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800366a:	4b74      	ldr	r3, [pc, #464]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	2b00      	cmp	r3, #0
 8003674:	d018      	beq.n	80036a8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003676:	4b71      	ldr	r3, [pc, #452]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f003 0203 	and.w	r2, r3, #3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	429a      	cmp	r2, r3
 8003684:	d10d      	bne.n	80036a2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
       ||
 800368a:	2b00      	cmp	r3, #0
 800368c:	d009      	beq.n	80036a2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800368e:	4b6b      	ldr	r3, [pc, #428]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003690:	68db      	ldr	r3, [r3, #12]
 8003692:	091b      	lsrs	r3, r3, #4
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	685b      	ldr	r3, [r3, #4]
       ||
 800369e:	429a      	cmp	r2, r3
 80036a0:	d047      	beq.n	8003732 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	73fb      	strb	r3, [r7, #15]
 80036a6:	e044      	b.n	8003732 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b03      	cmp	r3, #3
 80036ae:	d018      	beq.n	80036e2 <RCCEx_PLLSAI1_Config+0x86>
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d825      	bhi.n	8003700 <RCCEx_PLLSAI1_Config+0xa4>
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d002      	beq.n	80036be <RCCEx_PLLSAI1_Config+0x62>
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d009      	beq.n	80036d0 <RCCEx_PLLSAI1_Config+0x74>
 80036bc:	e020      	b.n	8003700 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80036be:	4b5f      	ldr	r3, [pc, #380]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 0302 	and.w	r3, r3, #2
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d11d      	bne.n	8003706 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036ce:	e01a      	b.n	8003706 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80036d0:	4b5a      	ldr	r3, [pc, #360]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d116      	bne.n	800370a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80036e0:	e013      	b.n	800370a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80036e2:	4b56      	ldr	r3, [pc, #344]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10f      	bne.n	800370e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80036ee:	4b53      	ldr	r3, [pc, #332]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d109      	bne.n	800370e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80036fe:	e006      	b.n	800370e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003700:	2301      	movs	r3, #1
 8003702:	73fb      	strb	r3, [r7, #15]
      break;
 8003704:	e004      	b.n	8003710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003706:	bf00      	nop
 8003708:	e002      	b.n	8003710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800370a:	bf00      	nop
 800370c:	e000      	b.n	8003710 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800370e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003710:	7bfb      	ldrb	r3, [r7, #15]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d10d      	bne.n	8003732 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003716:	4b49      	ldr	r3, [pc, #292]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6819      	ldr	r1, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	3b01      	subs	r3, #1
 8003728:	011b      	lsls	r3, r3, #4
 800372a:	430b      	orrs	r3, r1
 800372c:	4943      	ldr	r1, [pc, #268]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 800372e:	4313      	orrs	r3, r2
 8003730:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003732:	7bfb      	ldrb	r3, [r7, #15]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d17c      	bne.n	8003832 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003738:	4b40      	ldr	r3, [pc, #256]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	4a3f      	ldr	r2, [pc, #252]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 800373e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003742:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003744:	f7fd fa58 	bl	8000bf8 <HAL_GetTick>
 8003748:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800374a:	e009      	b.n	8003760 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800374c:	f7fd fa54 	bl	8000bf8 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d902      	bls.n	8003760 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	73fb      	strb	r3, [r7, #15]
        break;
 800375e:	e005      	b.n	800376c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003760:	4b36      	ldr	r3, [pc, #216]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1ef      	bne.n	800374c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800376c:	7bfb      	ldrb	r3, [r7, #15]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d15f      	bne.n	8003832 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d110      	bne.n	800379a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003778:	4b30      	ldr	r3, [pc, #192]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003780:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	6892      	ldr	r2, [r2, #8]
 8003788:	0211      	lsls	r1, r2, #8
 800378a:	687a      	ldr	r2, [r7, #4]
 800378c:	68d2      	ldr	r2, [r2, #12]
 800378e:	06d2      	lsls	r2, r2, #27
 8003790:	430a      	orrs	r2, r1
 8003792:	492a      	ldr	r1, [pc, #168]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003794:	4313      	orrs	r3, r2
 8003796:	610b      	str	r3, [r1, #16]
 8003798:	e027      	b.n	80037ea <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d112      	bne.n	80037c6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037a0:	4b26      	ldr	r3, [pc, #152]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80037a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	6892      	ldr	r2, [r2, #8]
 80037b0:	0211      	lsls	r1, r2, #8
 80037b2:	687a      	ldr	r2, [r7, #4]
 80037b4:	6912      	ldr	r2, [r2, #16]
 80037b6:	0852      	lsrs	r2, r2, #1
 80037b8:	3a01      	subs	r2, #1
 80037ba:	0552      	lsls	r2, r2, #21
 80037bc:	430a      	orrs	r2, r1
 80037be:	491f      	ldr	r1, [pc, #124]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	610b      	str	r3, [r1, #16]
 80037c4:	e011      	b.n	80037ea <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80037c6:	4b1d      	ldr	r3, [pc, #116]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037c8:	691b      	ldr	r3, [r3, #16]
 80037ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80037ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	6892      	ldr	r2, [r2, #8]
 80037d6:	0211      	lsls	r1, r2, #8
 80037d8:	687a      	ldr	r2, [r7, #4]
 80037da:	6952      	ldr	r2, [r2, #20]
 80037dc:	0852      	lsrs	r2, r2, #1
 80037de:	3a01      	subs	r2, #1
 80037e0:	0652      	lsls	r2, r2, #25
 80037e2:	430a      	orrs	r2, r1
 80037e4:	4915      	ldr	r1, [pc, #84]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80037ea:	4b14      	ldr	r3, [pc, #80]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a13      	ldr	r2, [pc, #76]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 80037f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80037f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037f6:	f7fd f9ff 	bl	8000bf8 <HAL_GetTick>
 80037fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037fc:	e009      	b.n	8003812 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80037fe:	f7fd f9fb 	bl	8000bf8 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d902      	bls.n	8003812 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	73fb      	strb	r3, [r7, #15]
          break;
 8003810:	e005      	b.n	800381e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d0ef      	beq.n	80037fe <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800381e:	7bfb      	ldrb	r3, [r7, #15]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003824:	4b05      	ldr	r3, [pc, #20]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 8003826:	691a      	ldr	r2, [r3, #16]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	4903      	ldr	r1, [pc, #12]	; (800383c <RCCEx_PLLSAI1_Config+0x1e0>)
 800382e:	4313      	orrs	r3, r2
 8003830:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003832:	7bfb      	ldrb	r3, [r7, #15]
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}
 800383c:	40021000 	.word	0x40021000

08003840 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800384a:	2300      	movs	r3, #0
 800384c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800384e:	4b69      	ldr	r3, [pc, #420]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003850:	68db      	ldr	r3, [r3, #12]
 8003852:	f003 0303 	and.w	r3, r3, #3
 8003856:	2b00      	cmp	r3, #0
 8003858:	d018      	beq.n	800388c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800385a:	4b66      	ldr	r3, [pc, #408]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0203 	and.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	429a      	cmp	r2, r3
 8003868:	d10d      	bne.n	8003886 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
       ||
 800386e:	2b00      	cmp	r3, #0
 8003870:	d009      	beq.n	8003886 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003872:	4b60      	ldr	r3, [pc, #384]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	091b      	lsrs	r3, r3, #4
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
       ||
 8003882:	429a      	cmp	r2, r3
 8003884:	d047      	beq.n	8003916 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	73fb      	strb	r3, [r7, #15]
 800388a:	e044      	b.n	8003916 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2b03      	cmp	r3, #3
 8003892:	d018      	beq.n	80038c6 <RCCEx_PLLSAI2_Config+0x86>
 8003894:	2b03      	cmp	r3, #3
 8003896:	d825      	bhi.n	80038e4 <RCCEx_PLLSAI2_Config+0xa4>
 8003898:	2b01      	cmp	r3, #1
 800389a:	d002      	beq.n	80038a2 <RCCEx_PLLSAI2_Config+0x62>
 800389c:	2b02      	cmp	r3, #2
 800389e:	d009      	beq.n	80038b4 <RCCEx_PLLSAI2_Config+0x74>
 80038a0:	e020      	b.n	80038e4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80038a2:	4b54      	ldr	r3, [pc, #336]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d11d      	bne.n	80038ea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038b2:	e01a      	b.n	80038ea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80038b4:	4b4f      	ldr	r3, [pc, #316]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d116      	bne.n	80038ee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80038c4:	e013      	b.n	80038ee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80038c6:	4b4b      	ldr	r3, [pc, #300]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d10f      	bne.n	80038f2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80038d2:	4b48      	ldr	r3, [pc, #288]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d109      	bne.n	80038f2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80038e2:	e006      	b.n	80038f2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	73fb      	strb	r3, [r7, #15]
      break;
 80038e8:	e004      	b.n	80038f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ea:	bf00      	nop
 80038ec:	e002      	b.n	80038f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038ee:	bf00      	nop
 80038f0:	e000      	b.n	80038f4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80038f2:	bf00      	nop
    }

    if(status == HAL_OK)
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10d      	bne.n	8003916 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80038fa:	4b3e      	ldr	r3, [pc, #248]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80038fc:	68db      	ldr	r3, [r3, #12]
 80038fe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6819      	ldr	r1, [r3, #0]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	3b01      	subs	r3, #1
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	430b      	orrs	r3, r1
 8003910:	4938      	ldr	r1, [pc, #224]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003912:	4313      	orrs	r3, r2
 8003914:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003916:	7bfb      	ldrb	r3, [r7, #15]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d166      	bne.n	80039ea <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800391c:	4b35      	ldr	r3, [pc, #212]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a34      	ldr	r2, [pc, #208]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003922:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003926:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003928:	f7fd f966 	bl	8000bf8 <HAL_GetTick>
 800392c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800392e:	e009      	b.n	8003944 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003930:	f7fd f962 	bl	8000bf8 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	68bb      	ldr	r3, [r7, #8]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	2b02      	cmp	r3, #2
 800393c:	d902      	bls.n	8003944 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	73fb      	strb	r3, [r7, #15]
        break;
 8003942:	e005      	b.n	8003950 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003944:	4b2b      	ldr	r3, [pc, #172]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1ef      	bne.n	8003930 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003950:	7bfb      	ldrb	r3, [r7, #15]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d149      	bne.n	80039ea <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003956:	683b      	ldr	r3, [r7, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d110      	bne.n	800397e <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800395c:	4b25      	ldr	r3, [pc, #148]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800395e:	695b      	ldr	r3, [r3, #20]
 8003960:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003964:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003968:	687a      	ldr	r2, [r7, #4]
 800396a:	6892      	ldr	r2, [r2, #8]
 800396c:	0211      	lsls	r1, r2, #8
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68d2      	ldr	r2, [r2, #12]
 8003972:	06d2      	lsls	r2, r2, #27
 8003974:	430a      	orrs	r2, r1
 8003976:	491f      	ldr	r1, [pc, #124]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003978:	4313      	orrs	r3, r2
 800397a:	614b      	str	r3, [r1, #20]
 800397c:	e011      	b.n	80039a2 <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800397e:	4b1d      	ldr	r3, [pc, #116]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003986:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6892      	ldr	r2, [r2, #8]
 800398e:	0211      	lsls	r1, r2, #8
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	6912      	ldr	r2, [r2, #16]
 8003994:	0852      	lsrs	r2, r2, #1
 8003996:	3a01      	subs	r2, #1
 8003998:	0652      	lsls	r2, r2, #25
 800399a:	430a      	orrs	r2, r1
 800399c:	4915      	ldr	r1, [pc, #84]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80039a2:	4b14      	ldr	r3, [pc, #80]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80039a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039ac:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039ae:	f7fd f923 	bl	8000bf8 <HAL_GetTick>
 80039b2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039b4:	e009      	b.n	80039ca <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80039b6:	f7fd f91f 	bl	8000bf8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d902      	bls.n	80039ca <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	73fb      	strb	r3, [r7, #15]
          break;
 80039c8:	e005      	b.n	80039d6 <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80039ca:	4b0a      	ldr	r3, [pc, #40]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d0ef      	beq.n	80039b6 <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 80039d6:	7bfb      	ldrb	r3, [r7, #15]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d106      	bne.n	80039ea <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80039de:	695a      	ldr	r2, [r3, #20]
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	695b      	ldr	r3, [r3, #20]
 80039e4:	4903      	ldr	r1, [pc, #12]	; (80039f4 <RCCEx_PLLSAI2_Config+0x1b4>)
 80039e6:	4313      	orrs	r3, r2
 80039e8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80039ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3710      	adds	r7, #16
 80039f0:	46bd      	mov	sp, r7
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000

080039f8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80039f8:	b084      	sub	sp, #16
 80039fa:	b580      	push	{r7, lr}
 80039fc:	b084      	sub	sp, #16
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
 8003a02:	f107 001c 	add.w	r0, r7, #28
 8003a06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f001 fa40 	bl	8004e9c <USB_CoreReset>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 8003a20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	639a      	str	r2, [r3, #56]	; 0x38
 8003a32:	e005      	b.n	8003a40 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 8003a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3710      	adds	r7, #16
 8003a46:	46bd      	mov	sp, r7
 8003a48:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a4c:	b004      	add	sp, #16
 8003a4e:	4770      	bx	lr

08003a50 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b087      	sub	sp, #28
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	60f8      	str	r0, [r7, #12]
 8003a58:	60b9      	str	r1, [r7, #8]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003a5e:	79fb      	ldrb	r3, [r7, #7]
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d165      	bne.n	8003b30 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4a3e      	ldr	r2, [pc, #248]	; (8003b60 <USB_SetTurnaroundTime+0x110>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d906      	bls.n	8003a7a <USB_SetTurnaroundTime+0x2a>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	4a3d      	ldr	r2, [pc, #244]	; (8003b64 <USB_SetTurnaroundTime+0x114>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d202      	bcs.n	8003a7a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003a74:	230f      	movs	r3, #15
 8003a76:	617b      	str	r3, [r7, #20]
 8003a78:	e05c      	b.n	8003b34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	4a39      	ldr	r2, [pc, #228]	; (8003b64 <USB_SetTurnaroundTime+0x114>)
 8003a7e:	4293      	cmp	r3, r2
 8003a80:	d306      	bcc.n	8003a90 <USB_SetTurnaroundTime+0x40>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	4a38      	ldr	r2, [pc, #224]	; (8003b68 <USB_SetTurnaroundTime+0x118>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d202      	bcs.n	8003a90 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003a8a:	230e      	movs	r3, #14
 8003a8c:	617b      	str	r3, [r7, #20]
 8003a8e:	e051      	b.n	8003b34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	4a35      	ldr	r2, [pc, #212]	; (8003b68 <USB_SetTurnaroundTime+0x118>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d306      	bcc.n	8003aa6 <USB_SetTurnaroundTime+0x56>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	4a34      	ldr	r2, [pc, #208]	; (8003b6c <USB_SetTurnaroundTime+0x11c>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d202      	bcs.n	8003aa6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003aa0:	230d      	movs	r3, #13
 8003aa2:	617b      	str	r3, [r7, #20]
 8003aa4:	e046      	b.n	8003b34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	4a30      	ldr	r2, [pc, #192]	; (8003b6c <USB_SetTurnaroundTime+0x11c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d306      	bcc.n	8003abc <USB_SetTurnaroundTime+0x6c>
 8003aae:	68bb      	ldr	r3, [r7, #8]
 8003ab0:	4a2f      	ldr	r2, [pc, #188]	; (8003b70 <USB_SetTurnaroundTime+0x120>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d802      	bhi.n	8003abc <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003ab6:	230c      	movs	r3, #12
 8003ab8:	617b      	str	r3, [r7, #20]
 8003aba:	e03b      	b.n	8003b34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4a2c      	ldr	r2, [pc, #176]	; (8003b70 <USB_SetTurnaroundTime+0x120>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d906      	bls.n	8003ad2 <USB_SetTurnaroundTime+0x82>
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	4a2b      	ldr	r2, [pc, #172]	; (8003b74 <USB_SetTurnaroundTime+0x124>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d802      	bhi.n	8003ad2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003acc:	230b      	movs	r3, #11
 8003ace:	617b      	str	r3, [r7, #20]
 8003ad0:	e030      	b.n	8003b34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <USB_SetTurnaroundTime+0x124>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d906      	bls.n	8003ae8 <USB_SetTurnaroundTime+0x98>
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	4a26      	ldr	r2, [pc, #152]	; (8003b78 <USB_SetTurnaroundTime+0x128>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d802      	bhi.n	8003ae8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003ae2:	230a      	movs	r3, #10
 8003ae4:	617b      	str	r3, [r7, #20]
 8003ae6:	e025      	b.n	8003b34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	4a23      	ldr	r2, [pc, #140]	; (8003b78 <USB_SetTurnaroundTime+0x128>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d906      	bls.n	8003afe <USB_SetTurnaroundTime+0xae>
 8003af0:	68bb      	ldr	r3, [r7, #8]
 8003af2:	4a22      	ldr	r2, [pc, #136]	; (8003b7c <USB_SetTurnaroundTime+0x12c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d202      	bcs.n	8003afe <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003af8:	2309      	movs	r3, #9
 8003afa:	617b      	str	r3, [r7, #20]
 8003afc:	e01a      	b.n	8003b34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003afe:	68bb      	ldr	r3, [r7, #8]
 8003b00:	4a1e      	ldr	r2, [pc, #120]	; (8003b7c <USB_SetTurnaroundTime+0x12c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d306      	bcc.n	8003b14 <USB_SetTurnaroundTime+0xc4>
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <USB_SetTurnaroundTime+0x130>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d802      	bhi.n	8003b14 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003b0e:	2308      	movs	r3, #8
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	e00f      	b.n	8003b34 <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	4a1a      	ldr	r2, [pc, #104]	; (8003b80 <USB_SetTurnaroundTime+0x130>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d906      	bls.n	8003b2a <USB_SetTurnaroundTime+0xda>
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	4a19      	ldr	r2, [pc, #100]	; (8003b84 <USB_SetTurnaroundTime+0x134>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d202      	bcs.n	8003b2a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003b24:	2307      	movs	r3, #7
 8003b26:	617b      	str	r3, [r7, #20]
 8003b28:	e004      	b.n	8003b34 <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003b2a:	2306      	movs	r3, #6
 8003b2c:	617b      	str	r3, [r7, #20]
 8003b2e:	e001      	b.n	8003b34 <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003b30:	2309      	movs	r3, #9
 8003b32:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	029b      	lsls	r3, r3, #10
 8003b48:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003b4c:	431a      	orrs	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	371c      	adds	r7, #28
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr
 8003b60:	00d8acbf 	.word	0x00d8acbf
 8003b64:	00e4e1c0 	.word	0x00e4e1c0
 8003b68:	00f42400 	.word	0x00f42400
 8003b6c:	01067380 	.word	0x01067380
 8003b70:	011a499f 	.word	0x011a499f
 8003b74:	01312cff 	.word	0x01312cff
 8003b78:	014ca43f 	.word	0x014ca43f
 8003b7c:	016e3600 	.word	0x016e3600
 8003b80:	01a6ab1f 	.word	0x01a6ab1f
 8003b84:	01e84800 	.word	0x01e84800

08003b88 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	689b      	ldr	r3, [r3, #8]
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	370c      	adds	r7, #12
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr

08003baa <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003baa:	b480      	push	{r7}
 8003bac:	b083      	sub	sp, #12
 8003bae:	af00      	add	r7, sp, #0
 8003bb0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f023 0201 	bic.w	r2, r3, #1
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	68db      	ldr	r3, [r3, #12]
 8003be0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d115      	bne.n	8003c1a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003bfa:	2001      	movs	r0, #1
 8003bfc:	f7fd f808 	bl	8000c10 <HAL_Delay>
      ms++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3301      	adds	r3, #1
 8003c04:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f001 f8cf 	bl	8004daa <USB_GetMode>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d01e      	beq.n	8003c50 <USB_SetCurrentMode+0x84>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b31      	cmp	r3, #49	; 0x31
 8003c16:	d9f0      	bls.n	8003bfa <USB_SetCurrentMode+0x2e>
 8003c18:	e01a      	b.n	8003c50 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d115      	bne.n	8003c4c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	68db      	ldr	r3, [r3, #12]
 8003c24:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003c2c:	2001      	movs	r0, #1
 8003c2e:	f7fc ffef 	bl	8000c10 <HAL_Delay>
      ms++;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	3301      	adds	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f001 f8b6 	bl	8004daa <USB_GetMode>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d005      	beq.n	8003c50 <USB_SetCurrentMode+0x84>
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	2b31      	cmp	r3, #49	; 0x31
 8003c48:	d9f0      	bls.n	8003c2c <USB_SetCurrentMode+0x60>
 8003c4a:	e001      	b.n	8003c50 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e005      	b.n	8003c5c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b32      	cmp	r3, #50	; 0x32
 8003c54:	d101      	bne.n	8003c5a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	e000      	b.n	8003c5c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003c5a:	2300      	movs	r3, #0
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3710      	adds	r7, #16
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}

08003c64 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c64:	b084      	sub	sp, #16
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b086      	sub	sp, #24
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003c72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003c76:	2300      	movs	r3, #0
 8003c78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003c7e:	2300      	movs	r3, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	e009      	b.n	8003c98 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003c84:	687a      	ldr	r2, [r7, #4]
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	3340      	adds	r3, #64	; 0x40
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	4413      	add	r3, r2
 8003c8e:	2200      	movs	r2, #0
 8003c90:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	3301      	adds	r3, #1
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	2b0e      	cmp	r3, #14
 8003c9c:	d9f2      	bls.n	8003c84 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003c9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d11c      	bne.n	8003cde <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cb2:	f043 0302 	orr.w	r3, r3, #2
 8003cb6:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cbc:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	601a      	str	r2, [r3, #0]
 8003cdc:	e005      	b.n	8003cea <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ce2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d04:	461a      	mov	r2, r3
 8003d06:	680b      	ldr	r3, [r1, #0]
 8003d08:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003d0a:	2103      	movs	r1, #3
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f000 f955 	bl	8003fbc <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003d12:	2110      	movs	r1, #16
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f8f1 	bl	8003efc <USB_FlushTxFifo>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d001      	beq.n	8003d24 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f000 f91b 	bl	8003f60 <USB_FlushRxFifo>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 8003d30:	2301      	movs	r3, #1
 8003d32:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d46:	461a      	mov	r2, r3
 8003d48:	2300      	movs	r3, #0
 8003d4a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d52:	461a      	mov	r2, r3
 8003d54:	2300      	movs	r3, #0
 8003d56:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	e043      	b.n	8003de6 <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d74:	d118      	bne.n	8003da8 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d10a      	bne.n	8003d92 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003d7c:	693b      	ldr	r3, [r7, #16]
 8003d7e:	015a      	lsls	r2, r3, #5
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	4413      	add	r3, r2
 8003d84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d88:	461a      	mov	r2, r3
 8003d8a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003d8e:	6013      	str	r3, [r2, #0]
 8003d90:	e013      	b.n	8003dba <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003d92:	693b      	ldr	r3, [r7, #16]
 8003d94:	015a      	lsls	r2, r3, #5
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	4413      	add	r3, r2
 8003d9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d9e:	461a      	mov	r2, r3
 8003da0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e008      	b.n	8003dba <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db4:	461a      	mov	r2, r3
 8003db6:	2300      	movs	r3, #0
 8003db8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc6:	461a      	mov	r2, r3
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	015a      	lsls	r2, r3, #5
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	4413      	add	r3, r2
 8003dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd8:	461a      	mov	r2, r3
 8003dda:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003dde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	3301      	adds	r3, #1
 8003de4:	613b      	str	r3, [r7, #16]
 8003de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003de8:	693a      	ldr	r2, [r7, #16]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d3b7      	bcc.n	8003d5e <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003dee:	2300      	movs	r3, #0
 8003df0:	613b      	str	r3, [r7, #16]
 8003df2:	e043      	b.n	8003e7c <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	015a      	lsls	r2, r3, #5
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e0a:	d118      	bne.n	8003e3e <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	015a      	lsls	r2, r3, #5
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4413      	add	r3, r2
 8003e1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e1e:	461a      	mov	r2, r3
 8003e20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	e013      	b.n	8003e50 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	015a      	lsls	r2, r3, #5
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	4413      	add	r3, r2
 8003e30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e34:	461a      	mov	r2, r3
 8003e36:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003e3a:	6013      	str	r3, [r2, #0]
 8003e3c:	e008      	b.n	8003e50 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	015a      	lsls	r2, r3, #5
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	4413      	add	r3, r2
 8003e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	015a      	lsls	r2, r3, #5
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4413      	add	r3, r2
 8003e58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	2300      	movs	r3, #0
 8003e60:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e6e:	461a      	mov	r2, r3
 8003e70:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003e74:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	3301      	adds	r3, #1
 8003e7a:	613b      	str	r3, [r7, #16]
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	693a      	ldr	r2, [r7, #16]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d3b7      	bcc.n	8003df4 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	68fa      	ldr	r2, [r7, #12]
 8003e8e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003e92:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e96:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003ea4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	f043 0210 	orr.w	r2, r3, #16
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	699a      	ldr	r2, [r3, #24]
 8003eb6:	4b10      	ldr	r3, [pc, #64]	; (8003ef8 <USB_DevInit+0x294>)
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	687a      	ldr	r2, [r7, #4]
 8003ebc:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d005      	beq.n	8003ed0 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	699b      	ldr	r3, [r3, #24]
 8003ec8:	f043 0208 	orr.w	r2, r3, #8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d107      	bne.n	8003ee6 <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ede:	f043 0304 	orr.w	r3, r3, #4
 8003ee2:	687a      	ldr	r2, [r7, #4]
 8003ee4:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee8:	4618      	mov	r0, r3
 8003eea:	3718      	adds	r7, #24
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ef2:	b004      	add	sp, #16
 8003ef4:	4770      	bx	lr
 8003ef6:	bf00      	nop
 8003ef8:	803c3800 	.word	0x803c3800

08003efc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003efc:	b480      	push	{r7}
 8003efe:	b085      	sub	sp, #20
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
 8003f04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f06:	2300      	movs	r3, #0
 8003f08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3301      	adds	r3, #1
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	4a12      	ldr	r2, [pc, #72]	; (8003f5c <USB_FlushTxFifo+0x60>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e01a      	b.n	8003f50 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	daf3      	bge.n	8003f0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	019b      	lsls	r3, r3, #6
 8003f2a:	f043 0220 	orr.w	r2, r3, #32
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3301      	adds	r3, #1
 8003f36:	60fb      	str	r3, [r7, #12]
 8003f38:	4a08      	ldr	r2, [pc, #32]	; (8003f5c <USB_FlushTxFifo+0x60>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d901      	bls.n	8003f42 <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8003f3e:	2303      	movs	r3, #3
 8003f40:	e006      	b.n	8003f50 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	691b      	ldr	r3, [r3, #16]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b20      	cmp	r3, #32
 8003f4c:	d0f1      	beq.n	8003f32 <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3714      	adds	r7, #20
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr
 8003f5c:	00030d40 	.word	0x00030d40

08003f60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003f60:	b480      	push	{r7}
 8003f62:	b085      	sub	sp, #20
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	3301      	adds	r3, #1
 8003f70:	60fb      	str	r3, [r7, #12]
 8003f72:	4a11      	ldr	r2, [pc, #68]	; (8003fb8 <USB_FlushRxFifo+0x58>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d901      	bls.n	8003f7c <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e017      	b.n	8003fac <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	691b      	ldr	r3, [r3, #16]
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	daf3      	bge.n	8003f6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003f84:	2300      	movs	r3, #0
 8003f86:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2210      	movs	r2, #16
 8003f8c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	3301      	adds	r3, #1
 8003f92:	60fb      	str	r3, [r7, #12]
 8003f94:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <USB_FlushRxFifo+0x58>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d901      	bls.n	8003f9e <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e006      	b.n	8003fac <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	691b      	ldr	r3, [r3, #16]
 8003fa2:	f003 0310 	and.w	r3, r3, #16
 8003fa6:	2b10      	cmp	r3, #16
 8003fa8:	d0f1      	beq.n	8003f8e <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3714      	adds	r7, #20
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	00030d40 	.word	0x00030d40

08003fbc <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	78fb      	ldrb	r3, [r7, #3]
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003fe0:	2300      	movs	r3, #0
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3714      	adds	r7, #20
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr

08003fee <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003fee:	b480      	push	{r7}
 8003ff0:	b087      	sub	sp, #28
 8003ff2:	af00      	add	r7, sp, #0
 8003ff4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	f003 0306 	and.w	r3, r3, #6
 8004006:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b02      	cmp	r3, #2
 800400c:	d002      	beq.n	8004014 <USB_GetDevSpeed+0x26>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	2b06      	cmp	r3, #6
 8004012:	d102      	bne.n	800401a <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004014:	2302      	movs	r3, #2
 8004016:	75fb      	strb	r3, [r7, #23]
 8004018:	e001      	b.n	800401e <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 800401a:	230f      	movs	r3, #15
 800401c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800401e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004020:	4618      	mov	r0, r3
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr

0800402c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800402c:	b480      	push	{r7}
 800402e:	b085      	sub	sp, #20
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	785b      	ldrb	r3, [r3, #1]
 8004044:	2b01      	cmp	r3, #1
 8004046:	d13a      	bne.n	80040be <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404e:	69da      	ldr	r2, [r3, #28]
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	f003 030f 	and.w	r3, r3, #15
 8004058:	2101      	movs	r1, #1
 800405a:	fa01 f303 	lsl.w	r3, r1, r3
 800405e:	b29b      	uxth	r3, r3
 8004060:	68f9      	ldr	r1, [r7, #12]
 8004062:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004066:	4313      	orrs	r3, r2
 8004068:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	015a      	lsls	r2, r3, #5
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4413      	add	r3, r2
 8004072:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d155      	bne.n	800412c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	78db      	ldrb	r3, [r3, #3]
 800409a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800409c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	059b      	lsls	r3, r3, #22
 80040a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80040a4:	4313      	orrs	r3, r2
 80040a6:	68ba      	ldr	r2, [r7, #8]
 80040a8:	0151      	lsls	r1, r2, #5
 80040aa:	68fa      	ldr	r2, [r7, #12]
 80040ac:	440a      	add	r2, r1
 80040ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80040ba:	6013      	str	r3, [r2, #0]
 80040bc:	e036      	b.n	800412c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c4:	69da      	ldr	r2, [r3, #28]
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	f003 030f 	and.w	r3, r3, #15
 80040ce:	2101      	movs	r1, #1
 80040d0:	fa01 f303 	lsl.w	r3, r1, r3
 80040d4:	041b      	lsls	r3, r3, #16
 80040d6:	68f9      	ldr	r1, [r7, #12]
 80040d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040dc:	4313      	orrs	r3, r2
 80040de:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	015a      	lsls	r2, r3, #5
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	4413      	add	r3, r2
 80040e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d11a      	bne.n	800412c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	015a      	lsls	r2, r3, #5
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	4413      	add	r3, r2
 80040fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004102:	681a      	ldr	r2, [r3, #0]
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	689b      	ldr	r3, [r3, #8]
 8004108:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	78db      	ldrb	r3, [r3, #3]
 8004110:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004112:	430b      	orrs	r3, r1
 8004114:	4313      	orrs	r3, r2
 8004116:	68ba      	ldr	r2, [r7, #8]
 8004118:	0151      	lsls	r1, r2, #5
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	440a      	add	r2, r1
 800411e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004122:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800412c:	2300      	movs	r3, #0
}
 800412e:	4618      	mov	r0, r3
 8004130:	3714      	adds	r7, #20
 8004132:	46bd      	mov	sp, r7
 8004134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004138:	4770      	bx	lr
	...

0800413c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800413c:	b480      	push	{r7}
 800413e:	b085      	sub	sp, #20
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	781b      	ldrb	r3, [r3, #0]
 800414e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	785b      	ldrb	r3, [r3, #1]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d161      	bne.n	800421c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800416a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800416e:	d11f      	bne.n	80041b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4413      	add	r3, r2
 8004178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	0151      	lsls	r1, r2, #5
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	440a      	add	r2, r1
 8004186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800418a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800418e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	015a      	lsls	r2, r3, #5
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	4413      	add	r3, r2
 8004198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68ba      	ldr	r2, [r7, #8]
 80041a0:	0151      	lsls	r1, r2, #5
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	440a      	add	r2, r1
 80041a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80041ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	f003 030f 	and.w	r3, r3, #15
 80041c0:	2101      	movs	r1, #1
 80041c2:	fa01 f303 	lsl.w	r3, r1, r3
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	43db      	mvns	r3, r3
 80041ca:	68f9      	ldr	r1, [r7, #12]
 80041cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041d0:	4013      	ands	r3, r2
 80041d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041da:	69da      	ldr	r2, [r3, #28]
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	2101      	movs	r1, #1
 80041e6:	fa01 f303 	lsl.w	r3, r1, r3
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	43db      	mvns	r3, r3
 80041ee:	68f9      	ldr	r1, [r7, #12]
 80041f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041f4:	4013      	ands	r3, r2
 80041f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004204:	681a      	ldr	r2, [r3, #0]
 8004206:	68bb      	ldr	r3, [r7, #8]
 8004208:	0159      	lsls	r1, r3, #5
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	440b      	add	r3, r1
 800420e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004212:	4619      	mov	r1, r3
 8004214:	4b35      	ldr	r3, [pc, #212]	; (80042ec <USB_DeactivateEndpoint+0x1b0>)
 8004216:	4013      	ands	r3, r2
 8004218:	600b      	str	r3, [r1, #0]
 800421a:	e060      	b.n	80042de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	015a      	lsls	r2, r3, #5
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	4413      	add	r3, r2
 8004224:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800422e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004232:	d11f      	bne.n	8004274 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	015a      	lsls	r2, r3, #5
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	4413      	add	r3, r2
 800423c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68ba      	ldr	r2, [r7, #8]
 8004244:	0151      	lsls	r1, r2, #5
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	440a      	add	r2, r1
 800424a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800424e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004252:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68ba      	ldr	r2, [r7, #8]
 8004264:	0151      	lsls	r1, r2, #5
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	440a      	add	r2, r1
 800426a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800426e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004272:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800427a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	f003 030f 	and.w	r3, r3, #15
 8004284:	2101      	movs	r1, #1
 8004286:	fa01 f303 	lsl.w	r3, r1, r3
 800428a:	041b      	lsls	r3, r3, #16
 800428c:	43db      	mvns	r3, r3
 800428e:	68f9      	ldr	r1, [r7, #12]
 8004290:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004294:	4013      	ands	r3, r2
 8004296:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800429e:	69da      	ldr	r2, [r3, #28]
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	f003 030f 	and.w	r3, r3, #15
 80042a8:	2101      	movs	r1, #1
 80042aa:	fa01 f303 	lsl.w	r3, r1, r3
 80042ae:	041b      	lsls	r3, r3, #16
 80042b0:	43db      	mvns	r3, r3
 80042b2:	68f9      	ldr	r1, [r7, #12]
 80042b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80042b8:	4013      	ands	r3, r2
 80042ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	015a      	lsls	r2, r3, #5
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	4413      	add	r3, r2
 80042c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	0159      	lsls	r1, r3, #5
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	440b      	add	r3, r1
 80042d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042d6:	4619      	mov	r1, r3
 80042d8:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <USB_DeactivateEndpoint+0x1b4>)
 80042da:	4013      	ands	r3, r2
 80042dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80042de:	2300      	movs	r3, #0
}
 80042e0:	4618      	mov	r0, r3
 80042e2:	3714      	adds	r7, #20
 80042e4:	46bd      	mov	sp, r7
 80042e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ea:	4770      	bx	lr
 80042ec:	ec337800 	.word	0xec337800
 80042f0:	eff37800 	.word	0xeff37800

080042f4 <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b086      	sub	sp, #24
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	781b      	ldrb	r3, [r3, #0]
 8004306:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	785b      	ldrb	r3, [r3, #1]
 800430c:	2b01      	cmp	r3, #1
 800430e:	f040 810a 	bne.w	8004526 <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d132      	bne.n	8004380 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	697b      	ldr	r3, [r7, #20]
 8004320:	4413      	add	r3, r2
 8004322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	693a      	ldr	r2, [r7, #16]
 800432a:	0151      	lsls	r1, r2, #5
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	440a      	add	r2, r1
 8004330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004334:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004338:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800433c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	015a      	lsls	r2, r3, #5
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	4413      	add	r3, r2
 8004346:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	693a      	ldr	r2, [r7, #16]
 800434e:	0151      	lsls	r1, r2, #5
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	440a      	add	r2, r1
 8004354:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004358:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800435c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	015a      	lsls	r2, r3, #5
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	4413      	add	r3, r2
 8004366:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800436a:	691b      	ldr	r3, [r3, #16]
 800436c:	693a      	ldr	r2, [r7, #16]
 800436e:	0151      	lsls	r1, r2, #5
 8004370:	697a      	ldr	r2, [r7, #20]
 8004372:	440a      	add	r2, r1
 8004374:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004378:	0cdb      	lsrs	r3, r3, #19
 800437a:	04db      	lsls	r3, r3, #19
 800437c:	6113      	str	r3, [r2, #16]
 800437e:	e074      	b.n	800446a <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438c:	691b      	ldr	r3, [r3, #16]
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	0151      	lsls	r1, r2, #5
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	440a      	add	r2, r1
 8004396:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800439a:	0cdb      	lsrs	r3, r3, #19
 800439c:	04db      	lsls	r3, r3, #19
 800439e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	015a      	lsls	r2, r3, #5
 80043a4:	697b      	ldr	r3, [r7, #20]
 80043a6:	4413      	add	r3, r2
 80043a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	0151      	lsls	r1, r2, #5
 80043b2:	697a      	ldr	r2, [r7, #20]
 80043b4:	440a      	add	r2, r1
 80043b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043ba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043be:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80043c2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	015a      	lsls	r2, r3, #5
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	4413      	add	r3, r2
 80043cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043d0:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	6959      	ldr	r1, [r3, #20]
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	440b      	add	r3, r1
 80043dc:	1e59      	subs	r1, r3, #1
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	fbb1 f3f3 	udiv	r3, r1, r3
 80043e6:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80043e8:	4baf      	ldr	r3, [pc, #700]	; (80046a8 <USB_EPStartXfer+0x3b4>)
 80043ea:	400b      	ands	r3, r1
 80043ec:	6939      	ldr	r1, [r7, #16]
 80043ee:	0148      	lsls	r0, r1, #5
 80043f0:	6979      	ldr	r1, [r7, #20]
 80043f2:	4401      	add	r1, r0
 80043f4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80043f8:	4313      	orrs	r3, r2
 80043fa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	015a      	lsls	r2, r3, #5
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	4413      	add	r3, r2
 8004404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004408:	691a      	ldr	r2, [r3, #16]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004412:	6939      	ldr	r1, [r7, #16]
 8004414:	0148      	lsls	r0, r1, #5
 8004416:	6979      	ldr	r1, [r7, #20]
 8004418:	4401      	add	r1, r0
 800441a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800441e:	4313      	orrs	r3, r2
 8004420:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004422:	683b      	ldr	r3, [r7, #0]
 8004424:	78db      	ldrb	r3, [r3, #3]
 8004426:	2b01      	cmp	r3, #1
 8004428:	d11f      	bne.n	800446a <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	015a      	lsls	r2, r3, #5
 800442e:	697b      	ldr	r3, [r7, #20]
 8004430:	4413      	add	r3, r2
 8004432:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004436:	691b      	ldr	r3, [r3, #16]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	0151      	lsls	r1, r2, #5
 800443c:	697a      	ldr	r2, [r7, #20]
 800443e:	440a      	add	r2, r1
 8004440:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004444:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004448:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	015a      	lsls	r2, r3, #5
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	4413      	add	r3, r2
 8004452:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004456:	691b      	ldr	r3, [r3, #16]
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	0151      	lsls	r1, r2, #5
 800445c:	697a      	ldr	r2, [r7, #20]
 800445e:	440a      	add	r2, r1
 8004460:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004464:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004468:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	015a      	lsls	r2, r3, #5
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	4413      	add	r3, r2
 8004472:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	693a      	ldr	r2, [r7, #16]
 800447a:	0151      	lsls	r1, r2, #5
 800447c:	697a      	ldr	r2, [r7, #20]
 800447e:	440a      	add	r2, r1
 8004480:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004484:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004488:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	78db      	ldrb	r3, [r3, #3]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d015      	beq.n	80044be <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8100 	beq.w	800469c <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	f003 030f 	and.w	r3, r3, #15
 80044ac:	2101      	movs	r1, #1
 80044ae:	fa01 f303 	lsl.w	r3, r1, r3
 80044b2:	6979      	ldr	r1, [r7, #20]
 80044b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044b8:	4313      	orrs	r3, r2
 80044ba:	634b      	str	r3, [r1, #52]	; 0x34
 80044bc:	e0ee      	b.n	800469c <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d110      	bne.n	80044f0 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	015a      	lsls	r2, r3, #5
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	4413      	add	r3, r2
 80044d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	693a      	ldr	r2, [r7, #16]
 80044de:	0151      	lsls	r1, r2, #5
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	440a      	add	r2, r1
 80044e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80044ec:	6013      	str	r3, [r2, #0]
 80044ee:	e00f      	b.n	8004510 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	015a      	lsls	r2, r3, #5
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	4413      	add	r3, r2
 80044f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	693a      	ldr	r2, [r7, #16]
 8004500:	0151      	lsls	r1, r2, #5
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	440a      	add	r2, r1
 8004506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800450a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800450e:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68d9      	ldr	r1, [r3, #12]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781a      	ldrb	r2, [r3, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	b29b      	uxth	r3, r3
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f000 f9e2 	bl	80048e8 <USB_WritePacket>
 8004524:	e0ba      	b.n	800469c <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	015a      	lsls	r2, r3, #5
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	4413      	add	r3, r2
 800452e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	0151      	lsls	r1, r2, #5
 8004538:	697a      	ldr	r2, [r7, #20]
 800453a:	440a      	add	r2, r1
 800453c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004540:	0cdb      	lsrs	r3, r3, #19
 8004542:	04db      	lsls	r3, r3, #19
 8004544:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	015a      	lsls	r2, r3, #5
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	4413      	add	r3, r2
 800454e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004552:	691b      	ldr	r3, [r3, #16]
 8004554:	693a      	ldr	r2, [r7, #16]
 8004556:	0151      	lsls	r1, r2, #5
 8004558:	697a      	ldr	r2, [r7, #20]
 800455a:	440a      	add	r2, r1
 800455c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004560:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004564:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004568:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d123      	bne.n	80045ba <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	015a      	lsls	r2, r3, #5
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	4413      	add	r3, r2
 800457a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004588:	6939      	ldr	r1, [r7, #16]
 800458a:	0148      	lsls	r0, r1, #5
 800458c:	6979      	ldr	r1, [r7, #20]
 800458e:	4401      	add	r1, r0
 8004590:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004594:	4313      	orrs	r3, r2
 8004596:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	0151      	lsls	r1, r2, #5
 80045aa:	697a      	ldr	r2, [r7, #20]
 80045ac:	440a      	add	r2, r1
 80045ae:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045b2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80045b6:	6113      	str	r3, [r2, #16]
 80045b8:	e033      	b.n	8004622 <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	695a      	ldr	r2, [r3, #20]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	4413      	add	r3, r2
 80045c4:	1e5a      	subs	r2, r3, #1
 80045c6:	683b      	ldr	r3, [r7, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ce:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	015a      	lsls	r2, r3, #5
 80045d4:	697b      	ldr	r3, [r7, #20]
 80045d6:	4413      	add	r3, r2
 80045d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	89fb      	ldrh	r3, [r7, #14]
 80045e0:	04d9      	lsls	r1, r3, #19
 80045e2:	4b31      	ldr	r3, [pc, #196]	; (80046a8 <USB_EPStartXfer+0x3b4>)
 80045e4:	400b      	ands	r3, r1
 80045e6:	6939      	ldr	r1, [r7, #16]
 80045e8:	0148      	lsls	r0, r1, #5
 80045ea:	6979      	ldr	r1, [r7, #20]
 80045ec:	4401      	add	r1, r0
 80045ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80045f2:	4313      	orrs	r3, r2
 80045f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 80045f6:	693b      	ldr	r3, [r7, #16]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004602:	691a      	ldr	r2, [r3, #16]
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	689b      	ldr	r3, [r3, #8]
 8004608:	89f9      	ldrh	r1, [r7, #14]
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004612:	6939      	ldr	r1, [r7, #16]
 8004614:	0148      	lsls	r0, r1, #5
 8004616:	6979      	ldr	r1, [r7, #20]
 8004618:	4401      	add	r1, r0
 800461a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800461e:	4313      	orrs	r3, r2
 8004620:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	78db      	ldrb	r3, [r3, #3]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d128      	bne.n	800467c <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004636:	2b00      	cmp	r3, #0
 8004638:	d110      	bne.n	800465c <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	015a      	lsls	r2, r3, #5
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	4413      	add	r3, r2
 8004642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	0151      	lsls	r1, r2, #5
 800464c:	697a      	ldr	r2, [r7, #20]
 800464e:	440a      	add	r2, r1
 8004650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004654:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004658:	6013      	str	r3, [r2, #0]
 800465a:	e00f      	b.n	800467c <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	693a      	ldr	r2, [r7, #16]
 800466c:	0151      	lsls	r1, r2, #5
 800466e:	697a      	ldr	r2, [r7, #20]
 8004670:	440a      	add	r2, r1
 8004672:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004676:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800467a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	015a      	lsls	r2, r3, #5
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	4413      	add	r3, r2
 8004684:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	693a      	ldr	r2, [r7, #16]
 800468c:	0151      	lsls	r1, r2, #5
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	440a      	add	r2, r1
 8004692:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004696:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800469a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800469c:	2300      	movs	r3, #0
}
 800469e:	4618      	mov	r0, r3
 80046a0:	3718      	adds	r7, #24
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bd80      	pop	{r7, pc}
 80046a6:	bf00      	nop
 80046a8:	1ff80000 	.word	0x1ff80000

080046ac <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	785b      	ldrb	r3, [r3, #1]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	f040 80ab 	bne.w	8004820 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d132      	bne.n	8004738 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	68ba      	ldr	r2, [r7, #8]
 80046e2:	0151      	lsls	r1, r2, #5
 80046e4:	68fa      	ldr	r2, [r7, #12]
 80046e6:	440a      	add	r2, r1
 80046e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046ec:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80046f0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	015a      	lsls	r2, r3, #5
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	4413      	add	r3, r2
 80046fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	68ba      	ldr	r2, [r7, #8]
 8004706:	0151      	lsls	r1, r2, #5
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	440a      	add	r2, r1
 800470c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004710:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004714:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004716:	68bb      	ldr	r3, [r7, #8]
 8004718:	015a      	lsls	r2, r3, #5
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	4413      	add	r3, r2
 800471e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	68ba      	ldr	r2, [r7, #8]
 8004726:	0151      	lsls	r1, r2, #5
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	440a      	add	r2, r1
 800472c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004730:	0cdb      	lsrs	r3, r3, #19
 8004732:	04db      	lsls	r3, r3, #19
 8004734:	6113      	str	r3, [r2, #16]
 8004736:	e04e      	b.n	80047d6 <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	0151      	lsls	r1, r2, #5
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	440a      	add	r2, r1
 800474e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004752:	0cdb      	lsrs	r3, r3, #19
 8004754:	04db      	lsls	r3, r3, #19
 8004756:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004764:	691b      	ldr	r3, [r3, #16]
 8004766:	68ba      	ldr	r2, [r7, #8]
 8004768:	0151      	lsls	r1, r2, #5
 800476a:	68fa      	ldr	r2, [r7, #12]
 800476c:	440a      	add	r2, r1
 800476e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004772:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004776:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800477a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	695a      	ldr	r2, [r3, #20]
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	429a      	cmp	r2, r3
 8004786:	d903      	bls.n	8004790 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	689a      	ldr	r2, [r3, #8]
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	015a      	lsls	r2, r3, #5
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	4413      	add	r3, r2
 8004798:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800479c:	691b      	ldr	r3, [r3, #16]
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	0151      	lsls	r1, r2, #5
 80047a2:	68fa      	ldr	r2, [r7, #12]
 80047a4:	440a      	add	r2, r1
 80047a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80047ae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	015a      	lsls	r2, r3, #5
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	4413      	add	r3, r2
 80047b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047bc:	691a      	ldr	r2, [r3, #16]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047c6:	68b9      	ldr	r1, [r7, #8]
 80047c8:	0148      	lsls	r0, r1, #5
 80047ca:	68f9      	ldr	r1, [r7, #12]
 80047cc:	4401      	add	r1, r0
 80047ce:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80047d2:	4313      	orrs	r3, r2
 80047d4:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	015a      	lsls	r2, r3, #5
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	4413      	add	r3, r2
 80047de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68ba      	ldr	r2, [r7, #8]
 80047e6:	0151      	lsls	r1, r2, #5
 80047e8:	68fa      	ldr	r2, [r7, #12]
 80047ea:	440a      	add	r2, r1
 80047ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80047f4:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d06d      	beq.n	80048da <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004804:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	f003 030f 	and.w	r3, r3, #15
 800480e:	2101      	movs	r1, #1
 8004810:	fa01 f303 	lsl.w	r3, r1, r3
 8004814:	68f9      	ldr	r1, [r7, #12]
 8004816:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800481a:	4313      	orrs	r3, r2
 800481c:	634b      	str	r3, [r1, #52]	; 0x34
 800481e:	e05c      	b.n	80048da <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	0151      	lsls	r1, r2, #5
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	440a      	add	r2, r1
 8004836:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800483a:	0cdb      	lsrs	r3, r3, #19
 800483c:	04db      	lsls	r3, r3, #19
 800483e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484c:	691b      	ldr	r3, [r3, #16]
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	0151      	lsls	r1, r2, #5
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	440a      	add	r2, r1
 8004856:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800485a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800485e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004862:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	695b      	ldr	r3, [r3, #20]
 8004868:	2b00      	cmp	r3, #0
 800486a:	d003      	beq.n	8004874 <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	689a      	ldr	r2, [r3, #8]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	015a      	lsls	r2, r3, #5
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	4413      	add	r3, r2
 800487c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004880:	691b      	ldr	r3, [r3, #16]
 8004882:	68ba      	ldr	r2, [r7, #8]
 8004884:	0151      	lsls	r1, r2, #5
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	440a      	add	r2, r1
 800488a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800488e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004892:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a0:	691a      	ldr	r2, [r3, #16]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048aa:	68b9      	ldr	r1, [r7, #8]
 80048ac:	0148      	lsls	r0, r1, #5
 80048ae:	68f9      	ldr	r1, [r7, #12]
 80048b0:	4401      	add	r1, r0
 80048b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80048b6:	4313      	orrs	r3, r2
 80048b8:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80048ba:	68bb      	ldr	r3, [r7, #8]
 80048bc:	015a      	lsls	r2, r3, #5
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	4413      	add	r3, r2
 80048c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	0151      	lsls	r1, r2, #5
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	440a      	add	r2, r1
 80048d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80048d4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80048d8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3714      	adds	r7, #20
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b089      	sub	sp, #36	; 0x24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	4611      	mov	r1, r2
 80048f4:	461a      	mov	r2, r3
 80048f6:	460b      	mov	r3, r1
 80048f8:	71fb      	strb	r3, [r7, #7]
 80048fa:	4613      	mov	r3, r2
 80048fc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 8004906:	88bb      	ldrh	r3, [r7, #4]
 8004908:	3303      	adds	r3, #3
 800490a:	089b      	lsrs	r3, r3, #2
 800490c:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 800490e:	2300      	movs	r3, #0
 8004910:	61bb      	str	r3, [r7, #24]
 8004912:	e018      	b.n	8004946 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004914:	79fb      	ldrb	r3, [r7, #7]
 8004916:	031a      	lsls	r2, r3, #12
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	4413      	add	r3, r2
 800491c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004920:	461a      	mov	r2, r3
 8004922:	69fb      	ldr	r3, [r7, #28]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	6013      	str	r3, [r2, #0]
    pSrc++;
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	3301      	adds	r3, #1
 800492c:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800492e:	69fb      	ldr	r3, [r7, #28]
 8004930:	3301      	adds	r3, #1
 8004932:	61fb      	str	r3, [r7, #28]
    pSrc++;
 8004934:	69fb      	ldr	r3, [r7, #28]
 8004936:	3301      	adds	r3, #1
 8004938:	61fb      	str	r3, [r7, #28]
    pSrc++;
 800493a:	69fb      	ldr	r3, [r7, #28]
 800493c:	3301      	adds	r3, #1
 800493e:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	3301      	adds	r3, #1
 8004944:	61bb      	str	r3, [r7, #24]
 8004946:	69ba      	ldr	r2, [r7, #24]
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	429a      	cmp	r2, r3
 800494c:	d3e2      	bcc.n	8004914 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 800494e:	2300      	movs	r3, #0
}
 8004950:	4618      	mov	r0, r3
 8004952:	3724      	adds	r7, #36	; 0x24
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800495c:	b480      	push	{r7}
 800495e:	b08b      	sub	sp, #44	; 0x2c
 8004960:	af00      	add	r7, sp, #0
 8004962:	60f8      	str	r0, [r7, #12]
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	4613      	mov	r3, r2
 8004968:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004972:	88fb      	ldrh	r3, [r7, #6]
 8004974:	089b      	lsrs	r3, r3, #2
 8004976:	b29b      	uxth	r3, r3
 8004978:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800497a:	88fb      	ldrh	r3, [r7, #6]
 800497c:	f003 0303 	and.w	r3, r3, #3
 8004980:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004982:	2300      	movs	r3, #0
 8004984:	623b      	str	r3, [r7, #32]
 8004986:	e014      	b.n	80049b2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004988:	69bb      	ldr	r3, [r7, #24]
 800498a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004992:	601a      	str	r2, [r3, #0]
    pDest++;
 8004994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004996:	3301      	adds	r3, #1
 8004998:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	3301      	adds	r3, #1
 800499e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a2:	3301      	adds	r3, #1
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	3301      	adds	r3, #1
 80049aa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80049ac:	6a3b      	ldr	r3, [r7, #32]
 80049ae:	3301      	adds	r3, #1
 80049b0:	623b      	str	r3, [r7, #32]
 80049b2:	6a3a      	ldr	r2, [r7, #32]
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	429a      	cmp	r2, r3
 80049b8:	d3e6      	bcc.n	8004988 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80049ba:	8bfb      	ldrh	r3, [r7, #30]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d01e      	beq.n	80049fe <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80049c0:	2300      	movs	r3, #0
 80049c2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80049ca:	461a      	mov	r2, r3
 80049cc:	f107 0310 	add.w	r3, r7, #16
 80049d0:	6812      	ldr	r2, [r2, #0]
 80049d2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80049d4:	693a      	ldr	r2, [r7, #16]
 80049d6:	6a3b      	ldr	r3, [r7, #32]
 80049d8:	b2db      	uxtb	r3, r3
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	fa22 f303 	lsr.w	r3, r2, r3
 80049e0:	b2da      	uxtb	r2, r3
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	701a      	strb	r2, [r3, #0]
      i++;
 80049e6:	6a3b      	ldr	r3, [r7, #32]
 80049e8:	3301      	adds	r3, #1
 80049ea:	623b      	str	r3, [r7, #32]
      pDest++;
 80049ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ee:	3301      	adds	r3, #1
 80049f0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80049f2:	8bfb      	ldrh	r3, [r7, #30]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80049f8:	8bfb      	ldrh	r3, [r7, #30]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d1ea      	bne.n	80049d4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004a00:	4618      	mov	r0, r3
 8004a02:	372c      	adds	r7, #44	; 0x2c
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	785b      	ldrb	r3, [r3, #1]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d12c      	bne.n	8004a82 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	db12      	blt.n	8004a60 <USB_EPSetStall+0x54>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d00f      	beq.n	8004a60 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	015a      	lsls	r2, r3, #5
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4413      	add	r3, r2
 8004a48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68ba      	ldr	r2, [r7, #8]
 8004a50:	0151      	lsls	r1, r2, #5
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	440a      	add	r2, r1
 8004a56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a5e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	015a      	lsls	r2, r3, #5
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	4413      	add	r3, r2
 8004a68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	68ba      	ldr	r2, [r7, #8]
 8004a70:	0151      	lsls	r1, r2, #5
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	440a      	add	r2, r1
 8004a76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a7a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	e02b      	b.n	8004ada <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	015a      	lsls	r2, r3, #5
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	4413      	add	r3, r2
 8004a8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	db12      	blt.n	8004aba <USB_EPSetStall+0xae>
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00f      	beq.n	8004aba <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	015a      	lsls	r2, r3, #5
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	4413      	add	r3, r2
 8004aa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	0151      	lsls	r1, r2, #5
 8004aac:	68fa      	ldr	r2, [r7, #12]
 8004aae:	440a      	add	r2, r1
 8004ab0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ab4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004ab8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	015a      	lsls	r2, r3, #5
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	4413      	add	r3, r2
 8004ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	0151      	lsls	r1, r2, #5
 8004acc:	68fa      	ldr	r2, [r7, #12]
 8004ace:	440a      	add	r2, r1
 8004ad0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ad4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004ad8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004ada:	2300      	movs	r3, #0
}
 8004adc:	4618      	mov	r0, r3
 8004ade:	3714      	adds	r7, #20
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b085      	sub	sp, #20
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	785b      	ldrb	r3, [r3, #1]
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d128      	bne.n	8004b56 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004b04:	68bb      	ldr	r3, [r7, #8]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68ba      	ldr	r2, [r7, #8]
 8004b14:	0151      	lsls	r1, r2, #5
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	440a      	add	r2, r1
 8004b1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b1e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b22:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	78db      	ldrb	r3, [r3, #3]
 8004b28:	2b03      	cmp	r3, #3
 8004b2a:	d003      	beq.n	8004b34 <USB_EPClearStall+0x4c>
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	78db      	ldrb	r3, [r3, #3]
 8004b30:	2b02      	cmp	r3, #2
 8004b32:	d138      	bne.n	8004ba6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	0151      	lsls	r1, r2, #5
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	440a      	add	r2, r1
 8004b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b52:	6013      	str	r3, [r2, #0]
 8004b54:	e027      	b.n	8004ba6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68ba      	ldr	r2, [r7, #8]
 8004b66:	0151      	lsls	r1, r2, #5
 8004b68:	68fa      	ldr	r2, [r7, #12]
 8004b6a:	440a      	add	r2, r1
 8004b6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b70:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004b74:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	78db      	ldrb	r3, [r3, #3]
 8004b7a:	2b03      	cmp	r3, #3
 8004b7c:	d003      	beq.n	8004b86 <USB_EPClearStall+0x9e>
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	78db      	ldrb	r3, [r3, #3]
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d10f      	bne.n	8004ba6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	015a      	lsls	r2, r3, #5
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	4413      	add	r3, r2
 8004b8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	0151      	lsls	r1, r2, #5
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	440a      	add	r2, r1
 8004b9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004ba6:	2300      	movs	r3, #0
}
 8004ba8:	4618      	mov	r0, r3
 8004baa:	3714      	adds	r7, #20
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr

08004bb4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b085      	sub	sp, #20
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004bd6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	78fb      	ldrb	r3, [r7, #3]
 8004be2:	011b      	lsls	r3, r3, #4
 8004be4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004be8:	68f9      	ldr	r1, [r7, #12]
 8004bea:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bee:	4313      	orrs	r3, r2
 8004bf0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004bf2:	2300      	movs	r3, #0
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr

08004c00 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b085      	sub	sp, #20
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	68fa      	ldr	r2, [r7, #12]
 8004c2a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c2e:	f023 0302 	bic.w	r3, r3, #2
 8004c32:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004c42:	b480      	push	{r7}
 8004c44:	b085      	sub	sp, #20
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	68fa      	ldr	r2, [r7, #12]
 8004c58:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004c5c:	f023 0303 	bic.w	r3, r3, #3
 8004c60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	68fa      	ldr	r2, [r7, #12]
 8004c6c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c70:	f043 0302 	orr.w	r3, r3, #2
 8004c74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	3714      	adds	r7, #20
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr

08004c84 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004c84:	b480      	push	{r7}
 8004c86:	b085      	sub	sp, #20
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	695b      	ldr	r3, [r3, #20]
 8004c90:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc6:	69db      	ldr	r3, [r3, #28]
 8004cc8:	68ba      	ldr	r2, [r7, #8]
 8004cca:	4013      	ands	r3, r2
 8004ccc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	0c1b      	lsrs	r3, r3, #16
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr

08004cde <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004cde:	b480      	push	{r7}
 8004ce0:	b085      	sub	sp, #20
 8004ce2:	af00      	add	r7, sp, #0
 8004ce4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cfa:	69db      	ldr	r3, [r3, #28]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	4013      	ands	r3, r2
 8004d00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	b29b      	uxth	r3, r3
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr

08004d12 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	6078      	str	r0, [r7, #4]
 8004d1a:	460b      	mov	r3, r1
 8004d1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004d22:	78fb      	ldrb	r3, [r7, #3]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d40:	68bb      	ldr	r3, [r7, #8]
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b087      	sub	sp, #28
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	460b      	mov	r3, r1
 8004d58:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004d5e:	697b      	ldr	r3, [r7, #20]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004d68:	697b      	ldr	r3, [r7, #20]
 8004d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d70:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004d72:	78fb      	ldrb	r3, [r7, #3]
 8004d74:	f003 030f 	and.w	r3, r3, #15
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d7e:	01db      	lsls	r3, r3, #7
 8004d80:	b2db      	uxtb	r3, r3
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004d88:	78fb      	ldrb	r3, [r7, #3]
 8004d8a:	015a      	lsls	r2, r3, #5
 8004d8c:	697b      	ldr	r3, [r7, #20]
 8004d8e:	4413      	add	r3, r2
 8004d90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d94:	689b      	ldr	r3, [r3, #8]
 8004d96:	693a      	ldr	r2, [r7, #16]
 8004d98:	4013      	ands	r3, r2
 8004d9a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	371c      	adds	r7, #28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr

08004daa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004daa:	b480      	push	{r7}
 8004dac:	b083      	sub	sp, #12
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	f003 0301 	and.w	r3, r3, #1
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr

08004dc6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc6:	b480      	push	{r7}
 8004dc8:	b085      	sub	sp, #20
 8004dca:	af00      	add	r7, sp, #0
 8004dcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	68fa      	ldr	r2, [r7, #12]
 8004ddc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004de4:	f023 0307 	bic.w	r3, r3, #7
 8004de8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3714      	adds	r7, #20
 8004e04:	46bd      	mov	sp, r7
 8004e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0a:	4770      	bx	lr

08004e0c <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b085      	sub	sp, #20
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	333c      	adds	r3, #60	; 0x3c
 8004e1e:	3304      	adds	r3, #4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4a1c      	ldr	r2, [pc, #112]	; (8004e98 <USB_EP0_OutStart+0x8c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d90a      	bls.n	8004e42 <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e38:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e3c:	d101      	bne.n	8004e42 <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e024      	b.n	8004e8c <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	461a      	mov	r2, r3
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	68fa      	ldr	r2, [r7, #12]
 8004e58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e5c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	68fa      	ldr	r2, [r7, #12]
 8004e6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e70:	f043 0318 	orr.w	r3, r3, #24
 8004e74:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e7c:	691b      	ldr	r3, [r3, #16]
 8004e7e:	68fa      	ldr	r2, [r7, #12]
 8004e80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e84:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004e88:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	4f54300a 	.word	0x4f54300a

08004e9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b085      	sub	sp, #20
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	4a13      	ldr	r2, [pc, #76]	; (8004efc <USB_CoreReset+0x60>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d901      	bls.n	8004eb8 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	e01a      	b.n	8004eee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	691b      	ldr	r3, [r3, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	daf3      	bge.n	8004ea8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	f043 0201 	orr.w	r2, r3, #1
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	4a09      	ldr	r2, [pc, #36]	; (8004efc <USB_CoreReset+0x60>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d901      	bls.n	8004ee0 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004edc:	2303      	movs	r3, #3
 8004ede:	e006      	b.n	8004eee <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	691b      	ldr	r3, [r3, #16]
 8004ee4:	f003 0301 	and.w	r3, r3, #1
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d0f1      	beq.n	8004ed0 <USB_CoreReset+0x34>

  return HAL_OK;
 8004eec:	2300      	movs	r3, #0
}
 8004eee:	4618      	mov	r0, r3
 8004ef0:	3714      	adds	r7, #20
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr
 8004efa:	bf00      	nop
 8004efc:	00030d40 	.word	0x00030d40

08004f00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004f0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004f10:	f002 fafe 	bl	8007510 <USBD_static_malloc>
 8004f14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d105      	bne.n	8004f28 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004f24:	2302      	movs	r3, #2
 8004f26:	e066      	b.n	8004ff6 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	68fa      	ldr	r2, [r7, #12]
 8004f2c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7c1b      	ldrb	r3, [r3, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d119      	bne.n	8004f6c <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f38:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f3c:	2202      	movs	r2, #2
 8004f3e:	2181      	movs	r1, #129	; 0x81
 8004f40:	6878      	ldr	r0, [r7, #4]
 8004f42:	f002 f8d1 	bl	80070e8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2201      	movs	r2, #1
 8004f4a:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f4c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f50:	2202      	movs	r2, #2
 8004f52:	2101      	movs	r1, #1
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	f002 f8c7 	bl	80070e8 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	2210      	movs	r2, #16
 8004f66:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004f6a:	e016      	b.n	8004f9a <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004f6c:	2340      	movs	r3, #64	; 0x40
 8004f6e:	2202      	movs	r2, #2
 8004f70:	2181      	movs	r1, #129	; 0x81
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f002 f8b8 	bl	80070e8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004f7e:	2340      	movs	r3, #64	; 0x40
 8004f80:	2202      	movs	r2, #2
 8004f82:	2101      	movs	r1, #1
 8004f84:	6878      	ldr	r0, [r7, #4]
 8004f86:	f002 f8af 	bl	80070e8 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2210      	movs	r2, #16
 8004f96:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004f9a:	2308      	movs	r3, #8
 8004f9c:	2203      	movs	r2, #3
 8004f9e:	2182      	movs	r1, #130	; 0x82
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f002 f8a1 	bl	80070e8 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2201      	movs	r2, #1
 8004faa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	7c1b      	ldrb	r3, [r3, #16]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d109      	bne.n	8004fe4 <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fd6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fda:	2101      	movs	r1, #1
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f002 f9fd 	bl	80073dc <USBD_LL_PrepareReceive>
 8004fe2:	e007      	b.n	8004ff4 <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004fea:	2340      	movs	r3, #64	; 0x40
 8004fec:	2101      	movs	r1, #1
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f002 f9f4 	bl	80073dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004ff4:	2300      	movs	r3, #0
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3710      	adds	r7, #16
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	bd80      	pop	{r7, pc}

08004ffe <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ffe:	b580      	push	{r7, lr}
 8005000:	b082      	sub	sp, #8
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800500a:	2181      	movs	r1, #129	; 0x81
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f002 f8a9 	bl	8007164 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2200      	movs	r2, #0
 8005016:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005018:	2101      	movs	r1, #1
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	f002 f8a2 	bl	8007164 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2200      	movs	r2, #0
 8005024:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005028:	2182      	movs	r1, #130	; 0x82
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f002 f89a 	bl	8007164 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2200      	movs	r2, #0
 8005034:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	2200      	movs	r2, #0
 800503c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005046:	2b00      	cmp	r3, #0
 8005048:	d00e      	beq.n	8005068 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800505a:	4618      	mov	r0, r3
 800505c:	f002 fa66 	bl	800752c <USBD_static_free>
    pdev->pClassData = NULL;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2200      	movs	r2, #0
 8005064:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b086      	sub	sp, #24
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005084:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005086:	2300      	movs	r3, #0
 8005088:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005098:	2303      	movs	r3, #3
 800509a:	e0af      	b.n	80051fc <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d03f      	beq.n	8005128 <USBD_CDC_Setup+0xb4>
 80050a8:	2b20      	cmp	r3, #32
 80050aa:	f040 809f 	bne.w	80051ec <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	88db      	ldrh	r3, [r3, #6]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d02e      	beq.n	8005114 <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	781b      	ldrb	r3, [r3, #0]
 80050ba:	b25b      	sxtb	r3, r3
 80050bc:	2b00      	cmp	r3, #0
 80050be:	da16      	bge.n	80050ee <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80050c6:	689b      	ldr	r3, [r3, #8]
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 80050cc:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	88d2      	ldrh	r2, [r2, #6]
 80050d2:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	88db      	ldrh	r3, [r3, #6]
 80050d8:	2b07      	cmp	r3, #7
 80050da:	bf28      	it	cs
 80050dc:	2307      	movcs	r3, #7
 80050de:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	89fa      	ldrh	r2, [r7, #14]
 80050e4:	4619      	mov	r1, r3
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f001 fb43 	bl	8006772 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 80050ec:	e085      	b.n	80051fa <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	785a      	ldrb	r2, [r3, #1]
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	88db      	ldrh	r3, [r3, #6]
 80050fc:	b2da      	uxtb	r2, r3
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8005104:	6939      	ldr	r1, [r7, #16]
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	88db      	ldrh	r3, [r3, #6]
 800510a:	461a      	mov	r2, r3
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f001 fb5c 	bl	80067ca <USBD_CtlPrepareRx>
      break;
 8005112:	e072      	b.n	80051fa <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	683a      	ldr	r2, [r7, #0]
 800511e:	7850      	ldrb	r0, [r2, #1]
 8005120:	2200      	movs	r2, #0
 8005122:	6839      	ldr	r1, [r7, #0]
 8005124:	4798      	blx	r3
      break;
 8005126:	e068      	b.n	80051fa <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	785b      	ldrb	r3, [r3, #1]
 800512c:	2b0b      	cmp	r3, #11
 800512e:	d852      	bhi.n	80051d6 <USBD_CDC_Setup+0x162>
 8005130:	a201      	add	r2, pc, #4	; (adr r2, 8005138 <USBD_CDC_Setup+0xc4>)
 8005132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005136:	bf00      	nop
 8005138:	08005169 	.word	0x08005169
 800513c:	080051e5 	.word	0x080051e5
 8005140:	080051d7 	.word	0x080051d7
 8005144:	080051d7 	.word	0x080051d7
 8005148:	080051d7 	.word	0x080051d7
 800514c:	080051d7 	.word	0x080051d7
 8005150:	080051d7 	.word	0x080051d7
 8005154:	080051d7 	.word	0x080051d7
 8005158:	080051d7 	.word	0x080051d7
 800515c:	080051d7 	.word	0x080051d7
 8005160:	08005193 	.word	0x08005193
 8005164:	080051bd 	.word	0x080051bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800516e:	b2db      	uxtb	r3, r3
 8005170:	2b03      	cmp	r3, #3
 8005172:	d107      	bne.n	8005184 <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005174:	f107 030a 	add.w	r3, r7, #10
 8005178:	2202      	movs	r2, #2
 800517a:	4619      	mov	r1, r3
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f001 faf8 	bl	8006772 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005182:	e032      	b.n	80051ea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8005184:	6839      	ldr	r1, [r7, #0]
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f001 fa82 	bl	8006690 <USBD_CtlError>
            ret = USBD_FAIL;
 800518c:	2303      	movs	r3, #3
 800518e:	75fb      	strb	r3, [r7, #23]
          break;
 8005190:	e02b      	b.n	80051ea <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b03      	cmp	r3, #3
 800519c:	d107      	bne.n	80051ae <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800519e:	f107 030d 	add.w	r3, r7, #13
 80051a2:	2201      	movs	r2, #1
 80051a4:	4619      	mov	r1, r3
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f001 fae3 	bl	8006772 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80051ac:	e01d      	b.n	80051ea <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80051ae:	6839      	ldr	r1, [r7, #0]
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f001 fa6d 	bl	8006690 <USBD_CtlError>
            ret = USBD_FAIL;
 80051b6:	2303      	movs	r3, #3
 80051b8:	75fb      	strb	r3, [r7, #23]
          break;
 80051ba:	e016      	b.n	80051ea <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b03      	cmp	r3, #3
 80051c6:	d00f      	beq.n	80051e8 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 80051c8:	6839      	ldr	r1, [r7, #0]
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f001 fa60 	bl	8006690 <USBD_CtlError>
            ret = USBD_FAIL;
 80051d0:	2303      	movs	r3, #3
 80051d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80051d4:	e008      	b.n	80051e8 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80051d6:	6839      	ldr	r1, [r7, #0]
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f001 fa59 	bl	8006690 <USBD_CtlError>
          ret = USBD_FAIL;
 80051de:	2303      	movs	r3, #3
 80051e0:	75fb      	strb	r3, [r7, #23]
          break;
 80051e2:	e002      	b.n	80051ea <USBD_CDC_Setup+0x176>
          break;
 80051e4:	bf00      	nop
 80051e6:	e008      	b.n	80051fa <USBD_CDC_Setup+0x186>
          break;
 80051e8:	bf00      	nop
      }
      break;
 80051ea:	e006      	b.n	80051fa <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 80051ec:	6839      	ldr	r1, [r7, #0]
 80051ee:	6878      	ldr	r0, [r7, #4]
 80051f0:	f001 fa4e 	bl	8006690 <USBD_CtlError>
      ret = USBD_FAIL;
 80051f4:	2303      	movs	r3, #3
 80051f6:	75fb      	strb	r3, [r7, #23]
      break;
 80051f8:	bf00      	nop
  }

  return (uint8_t)ret;
 80051fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3718      	adds	r7, #24
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}

08005204 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b084      	sub	sp, #16
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8005216:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005222:	2303      	movs	r3, #3
 8005224:	e04f      	b.n	80052c6 <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800522c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 800522e:	78fa      	ldrb	r2, [r7, #3]
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	4613      	mov	r3, r2
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	4413      	add	r3, r2
 8005238:	009b      	lsls	r3, r3, #2
 800523a:	440b      	add	r3, r1
 800523c:	3318      	adds	r3, #24
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d029      	beq.n	8005298 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8005244:	78fa      	ldrb	r2, [r7, #3]
 8005246:	6879      	ldr	r1, [r7, #4]
 8005248:	4613      	mov	r3, r2
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	4413      	add	r3, r2
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	440b      	add	r3, r1
 8005252:	3318      	adds	r3, #24
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	78f9      	ldrb	r1, [r7, #3]
 8005258:	68f8      	ldr	r0, [r7, #12]
 800525a:	460b      	mov	r3, r1
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	1a5b      	subs	r3, r3, r1
 8005260:	009b      	lsls	r3, r3, #2
 8005262:	4403      	add	r3, r0
 8005264:	3344      	adds	r3, #68	; 0x44
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	fbb2 f1f3 	udiv	r1, r2, r3
 800526c:	fb03 f301 	mul.w	r3, r3, r1
 8005270:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8005272:	2b00      	cmp	r3, #0
 8005274:	d110      	bne.n	8005298 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8005276:	78fa      	ldrb	r2, [r7, #3]
 8005278:	6879      	ldr	r1, [r7, #4]
 800527a:	4613      	mov	r3, r2
 800527c:	009b      	lsls	r3, r3, #2
 800527e:	4413      	add	r3, r2
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	440b      	add	r3, r1
 8005284:	3318      	adds	r3, #24
 8005286:	2200      	movs	r2, #0
 8005288:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800528a:	78f9      	ldrb	r1, [r7, #3]
 800528c:	2300      	movs	r3, #0
 800528e:	2200      	movs	r2, #0
 8005290:	6878      	ldr	r0, [r7, #4]
 8005292:	f002 f86b 	bl	800736c <USBD_LL_Transmit>
 8005296:	e015      	b.n	80052c4 <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052a6:	691b      	ldr	r3, [r3, #16]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d00b      	beq.n	80052c4 <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	68ba      	ldr	r2, [r7, #8]
 80052b6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80052c0:	78fa      	ldrb	r2, [r7, #3]
 80052c2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80052c4:	2300      	movs	r3, #0
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3710      	adds	r7, #16
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}

080052ce <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80052ce:	b580      	push	{r7, lr}
 80052d0:	b084      	sub	sp, #16
 80052d2:	af00      	add	r7, sp, #0
 80052d4:	6078      	str	r0, [r7, #4]
 80052d6:	460b      	mov	r3, r1
 80052d8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052e0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e015      	b.n	800531c <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80052f0:	78fb      	ldrb	r3, [r7, #3]
 80052f2:	4619      	mov	r1, r3
 80052f4:	6878      	ldr	r0, [r7, #4]
 80052f6:	f002 f8a9 	bl	800744c <USBD_LL_GetRxDataSize>
 80052fa:	4602      	mov	r2, r0
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005308:	68db      	ldr	r3, [r3, #12]
 800530a:	68fa      	ldr	r2, [r7, #12]
 800530c:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8005310:	68fa      	ldr	r2, [r7, #12]
 8005312:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8005316:	4611      	mov	r1, r2
 8005318:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800531a:	2300      	movs	r3, #0
}
 800531c:	4618      	mov	r0, r3
 800531e:	3710      	adds	r7, #16
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b084      	sub	sp, #16
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005332:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 800533a:	2303      	movs	r3, #3
 800533c:	e01b      	b.n	8005376 <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d015      	beq.n	8005374 <USBD_CDC_EP0_RxReady+0x50>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800534e:	2bff      	cmp	r3, #255	; 0xff
 8005350:	d010      	beq.n	8005374 <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	68fa      	ldr	r2, [r7, #12]
 800535c:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005360:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005368:	b292      	uxth	r2, r2
 800536a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	22ff      	movs	r2, #255	; 0xff
 8005370:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8005374:	2300      	movs	r3, #0
}
 8005376:	4618      	mov	r0, r3
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
	...

08005380 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2243      	movs	r2, #67	; 0x43
 800538c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 800538e:	4b03      	ldr	r3, [pc, #12]	; (800539c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005390:	4618      	mov	r0, r3
 8005392:	370c      	adds	r7, #12
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	20000094 	.word	0x20000094

080053a0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2243      	movs	r2, #67	; 0x43
 80053ac:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 80053ae:	4b03      	ldr	r3, [pc, #12]	; (80053bc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr
 80053bc:	20000050 	.word	0x20000050

080053c0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80053c0:	b480      	push	{r7}
 80053c2:	b083      	sub	sp, #12
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2243      	movs	r2, #67	; 0x43
 80053cc:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 80053ce:	4b03      	ldr	r3, [pc, #12]	; (80053dc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 80053d0:	4618      	mov	r0, r3
 80053d2:	370c      	adds	r7, #12
 80053d4:	46bd      	mov	sp, r7
 80053d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053da:	4770      	bx	lr
 80053dc:	200000d8 	.word	0x200000d8

080053e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80053e0:	b480      	push	{r7}
 80053e2:	b083      	sub	sp, #12
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	220a      	movs	r2, #10
 80053ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80053ee:	4b03      	ldr	r3, [pc, #12]	; (80053fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80053f0:	4618      	mov	r0, r3
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr
 80053fc:	2000000c 	.word	0x2000000c

08005400 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d101      	bne.n	8005414 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005410:	2303      	movs	r3, #3
 8005412:	e004      	b.n	800541e <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 800541c:	2300      	movs	r3, #0
}
 800541e:	4618      	mov	r0, r3
 8005420:	370c      	adds	r7, #12
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr

0800542a <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800542a:	b480      	push	{r7}
 800542c:	b087      	sub	sp, #28
 800542e:	af00      	add	r7, sp, #0
 8005430:	60f8      	str	r0, [r7, #12]
 8005432:	60b9      	str	r1, [r7, #8]
 8005434:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800543c:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 800543e:	697b      	ldr	r3, [r7, #20]
 8005440:	2b00      	cmp	r3, #0
 8005442:	d101      	bne.n	8005448 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005444:	2303      	movs	r3, #3
 8005446:	e008      	b.n	800545a <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005458:	2300      	movs	r3, #0
}
 800545a:	4618      	mov	r0, r3
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8005466:	b480      	push	{r7}
 8005468:	b085      	sub	sp, #20
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
 800546e:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005476:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 800547e:	2303      	movs	r3, #3
 8005480:	e004      	b.n	800548c <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800548a:	2300      	movs	r3, #0
}
 800548c:	4618      	mov	r0, r3
 800548e:	3714      	adds	r7, #20
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054a6:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 80054a8:	2301      	movs	r3, #1
 80054aa:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d101      	bne.n	80054ba <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80054b6:	2303      	movs	r3, #3
 80054b8:	e01a      	b.n	80054f0 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d114      	bne.n	80054ee <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	2201      	movs	r2, #1
 80054c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 80054e2:	2181      	movs	r1, #129	; 0x81
 80054e4:	6878      	ldr	r0, [r7, #4]
 80054e6:	f001 ff41 	bl	800736c <USBD_LL_Transmit>

    ret = USBD_OK;
 80054ea:	2300      	movs	r3, #0
 80054ec:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3710      	adds	r7, #16
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005506:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8005512:	2303      	movs	r3, #3
 8005514:	e016      	b.n	8005544 <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	7c1b      	ldrb	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005524:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005528:	2101      	movs	r1, #1
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f001 ff56 	bl	80073dc <USBD_LL_PrepareReceive>
 8005530:	e007      	b.n	8005542 <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005538:	2340      	movs	r3, #64	; 0x40
 800553a:	2101      	movs	r1, #1
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f001 ff4d 	bl	80073dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}

0800554c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	4613      	mov	r3, r2
 8005558:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d101      	bne.n	8005564 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005560:	2303      	movs	r3, #3
 8005562:	e01f      	b.n	80055a4 <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	2200      	movs	r2, #0
 8005570:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	2200      	movs	r2, #0
 8005578:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d003      	beq.n	800558a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	68ba      	ldr	r2, [r7, #8]
 8005586:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2201      	movs	r2, #1
 800558e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	79fa      	ldrb	r2, [r7, #7]
 8005596:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005598:	68f8      	ldr	r0, [r7, #12]
 800559a:	f001 fd27 	bl	8006fec <USBD_LL_Init>
 800559e:	4603      	mov	r3, r0
 80055a0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80055a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}

080055ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d101      	bne.n	80055c4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 80055c0:	2303      	movs	r3, #3
 80055c2:	e016      	b.n	80055f2 <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	683a      	ldr	r2, [r7, #0]
 80055c8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d00b      	beq.n	80055f0 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055e0:	f107 020e 	add.w	r2, r7, #14
 80055e4:	4610      	mov	r0, r2
 80055e6:	4798      	blx	r3
 80055e8:	4602      	mov	r2, r0
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 80055f0:	2300      	movs	r3, #0
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}

080055fa <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055fa:	b580      	push	{r7, lr}
 80055fc:	b082      	sub	sp, #8
 80055fe:	af00      	add	r7, sp, #0
 8005600:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005602:	6878      	ldr	r0, [r7, #4]
 8005604:	f001 fd3e 	bl	8007084 <USBD_LL_Start>
 8005608:	4603      	mov	r3, r0
}
 800560a:	4618      	mov	r0, r3
 800560c:	3708      	adds	r7, #8
 800560e:	46bd      	mov	sp, r7
 8005610:	bd80      	pop	{r7, pc}

08005612 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8005612:	b480      	push	{r7}
 8005614:	b083      	sub	sp, #12
 8005616:	af00      	add	r7, sp, #0
 8005618:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	370c      	adds	r7, #12
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b084      	sub	sp, #16
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8005634:	2303      	movs	r3, #3
 8005636:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800563e:	2b00      	cmp	r3, #0
 8005640:	d009      	beq.n	8005656 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	78fa      	ldrb	r2, [r7, #3]
 800564c:	4611      	mov	r1, r2
 800564e:	6878      	ldr	r0, [r7, #4]
 8005650:	4798      	blx	r3
 8005652:	4603      	mov	r3, r0
 8005654:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8005656:	7bfb      	ldrb	r3, [r7, #15]
}
 8005658:	4618      	mov	r0, r3
 800565a:	3710      	adds	r7, #16
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b082      	sub	sp, #8
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	460b      	mov	r3, r1
 800566a:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d007      	beq.n	8005686 <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	78fa      	ldrb	r2, [r7, #3]
 8005680:	4611      	mov	r1, r2
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	4798      	blx	r3
  }

  return USBD_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
 8005698:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056a0:	6839      	ldr	r1, [r7, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 ffba 	bl	800661c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80056b6:	461a      	mov	r2, r3
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056c4:	f003 031f 	and.w	r3, r3, #31
 80056c8:	2b02      	cmp	r3, #2
 80056ca:	d01a      	beq.n	8005702 <USBD_LL_SetupStage+0x72>
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d822      	bhi.n	8005716 <USBD_LL_SetupStage+0x86>
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d002      	beq.n	80056da <USBD_LL_SetupStage+0x4a>
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d00a      	beq.n	80056ee <USBD_LL_SetupStage+0x5e>
 80056d8:	e01d      	b.n	8005716 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056e0:	4619      	mov	r1, r3
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 fa62 	bl	8005bac <USBD_StdDevReq>
 80056e8:	4603      	mov	r3, r0
 80056ea:	73fb      	strb	r3, [r7, #15]
      break;
 80056ec:	e020      	b.n	8005730 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056f4:	4619      	mov	r1, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	f000 fac6 	bl	8005c88 <USBD_StdItfReq>
 80056fc:	4603      	mov	r3, r0
 80056fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005700:	e016      	b.n	8005730 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005708:	4619      	mov	r1, r3
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fb05 	bl	8005d1a <USBD_StdEPReq>
 8005710:	4603      	mov	r3, r0
 8005712:	73fb      	strb	r3, [r7, #15]
      break;
 8005714:	e00c      	b.n	8005730 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800571c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005720:	b2db      	uxtb	r3, r3
 8005722:	4619      	mov	r1, r3
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f001 fd53 	bl	80071d0 <USBD_LL_StallEP>
 800572a:	4603      	mov	r3, r0
 800572c:	73fb      	strb	r3, [r7, #15]
      break;
 800572e:	bf00      	nop
  }

  return ret;
 8005730:	7bfb      	ldrb	r3, [r7, #15]
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}

0800573a <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b086      	sub	sp, #24
 800573e:	af00      	add	r7, sp, #0
 8005740:	60f8      	str	r0, [r7, #12]
 8005742:	460b      	mov	r3, r1
 8005744:	607a      	str	r2, [r7, #4]
 8005746:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8005748:	7afb      	ldrb	r3, [r7, #11]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d138      	bne.n	80057c0 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005754:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800575c:	2b03      	cmp	r3, #3
 800575e:	d14a      	bne.n	80057f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	689a      	ldr	r2, [r3, #8]
 8005764:	693b      	ldr	r3, [r7, #16]
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	429a      	cmp	r2, r3
 800576a:	d913      	bls.n	8005794 <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	689a      	ldr	r2, [r3, #8]
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	1ad2      	subs	r2, r2, r3
 8005776:	693b      	ldr	r3, [r7, #16]
 8005778:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	68da      	ldr	r2, [r3, #12]
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	4293      	cmp	r3, r2
 8005784:	bf28      	it	cs
 8005786:	4613      	movcs	r3, r2
 8005788:	461a      	mov	r2, r3
 800578a:	6879      	ldr	r1, [r7, #4]
 800578c:	68f8      	ldr	r0, [r7, #12]
 800578e:	f001 f839 	bl	8006804 <USBD_CtlContinueRx>
 8005792:	e030      	b.n	80057f6 <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800579a:	b2db      	uxtb	r3, r3
 800579c:	2b03      	cmp	r3, #3
 800579e:	d10b      	bne.n	80057b8 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a6:	691b      	ldr	r3, [r3, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d005      	beq.n	80057b8 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b2:	691b      	ldr	r3, [r3, #16]
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80057b8:	68f8      	ldr	r0, [r7, #12]
 80057ba:	f001 f834 	bl	8006826 <USBD_CtlSendStatus>
 80057be:	e01a      	b.n	80057f6 <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	2b03      	cmp	r3, #3
 80057ca:	d114      	bne.n	80057f6 <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d2:	699b      	ldr	r3, [r3, #24]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d00e      	beq.n	80057f6 <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057de:	699b      	ldr	r3, [r3, #24]
 80057e0:	7afa      	ldrb	r2, [r7, #11]
 80057e2:	4611      	mov	r1, r2
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	4798      	blx	r3
 80057e8:	4603      	mov	r3, r0
 80057ea:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80057ec:	7dfb      	ldrb	r3, [r7, #23]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d001      	beq.n	80057f6 <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 80057f2:	7dfb      	ldrb	r3, [r7, #23]
 80057f4:	e000      	b.n	80057f8 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3718      	adds	r7, #24
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b086      	sub	sp, #24
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	460b      	mov	r3, r1
 800580a:	607a      	str	r2, [r7, #4]
 800580c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 800580e:	7afb      	ldrb	r3, [r7, #11]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d16b      	bne.n	80058ec <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	3314      	adds	r3, #20
 8005818:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005820:	2b02      	cmp	r3, #2
 8005822:	d156      	bne.n	80058d2 <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	693b      	ldr	r3, [r7, #16]
 800582a:	68db      	ldr	r3, [r3, #12]
 800582c:	429a      	cmp	r2, r3
 800582e:	d914      	bls.n	800585a <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	689a      	ldr	r2, [r3, #8]
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	68db      	ldr	r3, [r3, #12]
 8005838:	1ad2      	subs	r2, r2, r3
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	461a      	mov	r2, r3
 8005844:	6879      	ldr	r1, [r7, #4]
 8005846:	68f8      	ldr	r0, [r7, #12]
 8005848:	f000 ffae 	bl	80067a8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800584c:	2300      	movs	r3, #0
 800584e:	2200      	movs	r2, #0
 8005850:	2100      	movs	r1, #0
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f001 fdc2 	bl	80073dc <USBD_LL_PrepareReceive>
 8005858:	e03b      	b.n	80058d2 <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	68da      	ldr	r2, [r3, #12]
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	429a      	cmp	r2, r3
 8005864:	d11c      	bne.n	80058a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800586e:	429a      	cmp	r2, r3
 8005870:	d316      	bcc.n	80058a0 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800587c:	429a      	cmp	r2, r3
 800587e:	d20f      	bcs.n	80058a0 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005880:	2200      	movs	r2, #0
 8005882:	2100      	movs	r1, #0
 8005884:	68f8      	ldr	r0, [r7, #12]
 8005886:	f000 ff8f 	bl	80067a8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005892:	2300      	movs	r3, #0
 8005894:	2200      	movs	r2, #0
 8005896:	2100      	movs	r1, #0
 8005898:	68f8      	ldr	r0, [r7, #12]
 800589a:	f001 fd9f 	bl	80073dc <USBD_LL_PrepareReceive>
 800589e:	e018      	b.n	80058d2 <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b03      	cmp	r3, #3
 80058aa:	d10b      	bne.n	80058c4 <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058b2:	68db      	ldr	r3, [r3, #12]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d005      	beq.n	80058c4 <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	68f8      	ldr	r0, [r7, #12]
 80058c2:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80058c4:	2180      	movs	r1, #128	; 0x80
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f001 fc82 	bl	80071d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80058cc:	68f8      	ldr	r0, [r7, #12]
 80058ce:	f000 ffbd 	bl	800684c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d122      	bne.n	8005922 <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 80058dc:	68f8      	ldr	r0, [r7, #12]
 80058de:	f7ff fe98 	bl	8005612 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80058ea:	e01a      	b.n	8005922 <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d114      	bne.n	8005922 <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80058fe:	695b      	ldr	r3, [r3, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00e      	beq.n	8005922 <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	7afa      	ldrb	r2, [r7, #11]
 800590e:	4611      	mov	r1, r2
 8005910:	68f8      	ldr	r0, [r7, #12]
 8005912:	4798      	blx	r3
 8005914:	4603      	mov	r3, r0
 8005916:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005918:	7dfb      	ldrb	r3, [r7, #23]
 800591a:	2b00      	cmp	r3, #0
 800591c:	d001      	beq.n	8005922 <USBD_LL_DataInStage+0x122>
        {
          return ret;
 800591e:	7dfb      	ldrb	r3, [r7, #23]
 8005920:	e000      	b.n	8005924 <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3718      	adds	r7, #24
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}

0800592c <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b082      	sub	sp, #8
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2201      	movs	r2, #1
 8005938:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	2200      	movs	r2, #0
 8005948:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2200      	movs	r2, #0
 800594e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 800595c:	2303      	movs	r3, #3
 800595e:	e02f      	b.n	80059c0 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00f      	beq.n	800598a <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d009      	beq.n	800598a <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800597c:	685b      	ldr	r3, [r3, #4]
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	6852      	ldr	r2, [r2, #4]
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	4611      	mov	r1, r2
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800598a:	2340      	movs	r3, #64	; 0x40
 800598c:	2200      	movs	r2, #0
 800598e:	2100      	movs	r1, #0
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f001 fba9 	bl	80070e8 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2240      	movs	r2, #64	; 0x40
 80059a2:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80059a6:	2340      	movs	r3, #64	; 0x40
 80059a8:	2200      	movs	r2, #0
 80059aa:	2180      	movs	r1, #128	; 0x80
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	f001 fb9b 	bl	80070e8 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2240      	movs	r2, #64	; 0x40
 80059bc:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3708      	adds	r7, #8
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
 80059d0:	460b      	mov	r3, r1
 80059d2:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	78fa      	ldrb	r2, [r7, #3]
 80059d8:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b083      	sub	sp, #12
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2204      	movs	r2, #4
 8005a02:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a06:	2300      	movs	r3, #0
}
 8005a08:	4618      	mov	r0, r3
 8005a0a:	370c      	adds	r7, #12
 8005a0c:	46bd      	mov	sp, r7
 8005a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a12:	4770      	bx	lr

08005a14 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b083      	sub	sp, #12
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b04      	cmp	r3, #4
 8005a26:	d106      	bne.n	8005a36 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e012      	b.n	8005a80 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d10b      	bne.n	8005a7e <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a6c:	69db      	ldr	r3, [r3, #28]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d005      	beq.n	8005a7e <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a78:	69db      	ldr	r3, [r3, #28]
 8005a7a:	6878      	ldr	r0, [r7, #4]
 8005a7c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005a7e:	2300      	movs	r3, #0
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3708      	adds	r7, #8
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	460b      	mov	r3, r1
 8005a92:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005a9e:	2303      	movs	r3, #3
 8005aa0:	e014      	b.n	8005acc <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b03      	cmp	r3, #3
 8005aac:	d10d      	bne.n	8005aca <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ab4:	6a1b      	ldr	r3, [r3, #32]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d007      	beq.n	8005aca <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ac0:	6a1b      	ldr	r3, [r3, #32]
 8005ac2:	78fa      	ldrb	r2, [r7, #3]
 8005ac4:	4611      	mov	r1, r2
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b082      	sub	sp, #8
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
 8005adc:	460b      	mov	r3, r1
 8005ade:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d101      	bne.n	8005aee <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005aea:	2303      	movs	r3, #3
 8005aec:	e014      	b.n	8005b18 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	2b03      	cmp	r3, #3
 8005af8:	d10d      	bne.n	8005b16 <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d007      	beq.n	8005b16 <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b0e:	78fa      	ldrb	r2, [r7, #3]
 8005b10:	4611      	mov	r1, r2
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b16:	2300      	movs	r3, #0
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	3708      	adds	r7, #8
 8005b1c:	46bd      	mov	sp, r7
 8005b1e:	bd80      	pop	{r7, pc}

08005b20 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	370c      	adds	r7, #12
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr

08005b36 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005b36:	b580      	push	{r7, lr}
 8005b38:	b082      	sub	sp, #8
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	2201      	movs	r2, #1
 8005b42:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d009      	beq.n	8005b64 <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	6852      	ldr	r2, [r2, #4]
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	4611      	mov	r1, r2
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	4798      	blx	r3
  }

  return USBD_OK;
 8005b64:	2300      	movs	r3, #0
}
 8005b66:	4618      	mov	r0, r3
 8005b68:	3708      	adds	r7, #8
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	bd80      	pop	{r7, pc}

08005b6e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b087      	sub	sp, #28
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	3301      	adds	r3, #1
 8005b84:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005b8c:	8a3b      	ldrh	r3, [r7, #16]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	b21a      	sxth	r2, r3
 8005b92:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005b96:	4313      	orrs	r3, r2
 8005b98:	b21b      	sxth	r3, r3
 8005b9a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005b9c:	89fb      	ldrh	r3, [r7, #14]
}
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	371c      	adds	r7, #28
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
	...

08005bac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b084      	sub	sp, #16
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
 8005bb4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bc2:	2b40      	cmp	r3, #64	; 0x40
 8005bc4:	d005      	beq.n	8005bd2 <USBD_StdDevReq+0x26>
 8005bc6:	2b40      	cmp	r3, #64	; 0x40
 8005bc8:	d853      	bhi.n	8005c72 <USBD_StdDevReq+0xc6>
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00b      	beq.n	8005be6 <USBD_StdDevReq+0x3a>
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d14f      	bne.n	8005c72 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	6839      	ldr	r1, [r7, #0]
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	4798      	blx	r3
 8005be0:	4603      	mov	r3, r0
 8005be2:	73fb      	strb	r3, [r7, #15]
      break;
 8005be4:	e04a      	b.n	8005c7c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	785b      	ldrb	r3, [r3, #1]
 8005bea:	2b09      	cmp	r3, #9
 8005bec:	d83b      	bhi.n	8005c66 <USBD_StdDevReq+0xba>
 8005bee:	a201      	add	r2, pc, #4	; (adr r2, 8005bf4 <USBD_StdDevReq+0x48>)
 8005bf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf4:	08005c49 	.word	0x08005c49
 8005bf8:	08005c5d 	.word	0x08005c5d
 8005bfc:	08005c67 	.word	0x08005c67
 8005c00:	08005c53 	.word	0x08005c53
 8005c04:	08005c67 	.word	0x08005c67
 8005c08:	08005c27 	.word	0x08005c27
 8005c0c:	08005c1d 	.word	0x08005c1d
 8005c10:	08005c67 	.word	0x08005c67
 8005c14:	08005c3f 	.word	0x08005c3f
 8005c18:	08005c31 	.word	0x08005c31
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 f9de 	bl	8005fe0 <USBD_GetDescriptor>
          break;
 8005c24:	e024      	b.n	8005c70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005c26:	6839      	ldr	r1, [r7, #0]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fb6d 	bl	8006308 <USBD_SetAddress>
          break;
 8005c2e:	e01f      	b.n	8005c70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005c30:	6839      	ldr	r1, [r7, #0]
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f000 fbac 	bl	8006390 <USBD_SetConfig>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	73fb      	strb	r3, [r7, #15]
          break;
 8005c3c:	e018      	b.n	8005c70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005c3e:	6839      	ldr	r1, [r7, #0]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fc4b 	bl	80064dc <USBD_GetConfig>
          break;
 8005c46:	e013      	b.n	8005c70 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005c48:	6839      	ldr	r1, [r7, #0]
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 fc7c 	bl	8006548 <USBD_GetStatus>
          break;
 8005c50:	e00e      	b.n	8005c70 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fcab 	bl	80065b0 <USBD_SetFeature>
          break;
 8005c5a:	e009      	b.n	8005c70 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fcba 	bl	80065d8 <USBD_ClrFeature>
          break;
 8005c64:	e004      	b.n	8005c70 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fd11 	bl	8006690 <USBD_CtlError>
          break;
 8005c6e:	bf00      	nop
      }
      break;
 8005c70:	e004      	b.n	8005c7c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fd0b 	bl	8006690 <USBD_CtlError>
      break;
 8005c7a:	bf00      	nop
  }

  return ret;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop

08005c88 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c92:	2300      	movs	r3, #0
 8005c94:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c9e:	2b40      	cmp	r3, #64	; 0x40
 8005ca0:	d005      	beq.n	8005cae <USBD_StdItfReq+0x26>
 8005ca2:	2b40      	cmp	r3, #64	; 0x40
 8005ca4:	d82f      	bhi.n	8005d06 <USBD_StdItfReq+0x7e>
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <USBD_StdItfReq+0x26>
 8005caa:	2b20      	cmp	r3, #32
 8005cac:	d12b      	bne.n	8005d06 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	2b02      	cmp	r3, #2
 8005cba:	d81d      	bhi.n	8005cf8 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	889b      	ldrh	r3, [r3, #4]
 8005cc0:	b2db      	uxtb	r3, r3
 8005cc2:	2b01      	cmp	r3, #1
 8005cc4:	d813      	bhi.n	8005cee <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	6839      	ldr	r1, [r7, #0]
 8005cd0:	6878      	ldr	r0, [r7, #4]
 8005cd2:	4798      	blx	r3
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	88db      	ldrh	r3, [r3, #6]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d110      	bne.n	8005d02 <USBD_StdItfReq+0x7a>
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10d      	bne.n	8005d02 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 fd9d 	bl	8006826 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005cec:	e009      	b.n	8005d02 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fccd 	bl	8006690 <USBD_CtlError>
          break;
 8005cf6:	e004      	b.n	8005d02 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8005cf8:	6839      	ldr	r1, [r7, #0]
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fcc8 	bl	8006690 <USBD_CtlError>
          break;
 8005d00:	e000      	b.n	8005d04 <USBD_StdItfReq+0x7c>
          break;
 8005d02:	bf00      	nop
      }
      break;
 8005d04:	e004      	b.n	8005d10 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8005d06:	6839      	ldr	r1, [r7, #0]
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fcc1 	bl	8006690 <USBD_CtlError>
      break;
 8005d0e:	bf00      	nop
  }

  return ret;
 8005d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3710      	adds	r7, #16
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}

08005d1a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d1a:	b580      	push	{r7, lr}
 8005d1c:	b084      	sub	sp, #16
 8005d1e:	af00      	add	r7, sp, #0
 8005d20:	6078      	str	r0, [r7, #4]
 8005d22:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	889b      	ldrh	r3, [r3, #4]
 8005d2c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	781b      	ldrb	r3, [r3, #0]
 8005d32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d36:	2b40      	cmp	r3, #64	; 0x40
 8005d38:	d007      	beq.n	8005d4a <USBD_StdEPReq+0x30>
 8005d3a:	2b40      	cmp	r3, #64	; 0x40
 8005d3c:	f200 8145 	bhi.w	8005fca <USBD_StdEPReq+0x2b0>
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d00c      	beq.n	8005d5e <USBD_StdEPReq+0x44>
 8005d44:	2b20      	cmp	r3, #32
 8005d46:	f040 8140 	bne.w	8005fca <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	4798      	blx	r3
 8005d58:	4603      	mov	r3, r0
 8005d5a:	73fb      	strb	r3, [r7, #15]
      break;
 8005d5c:	e13a      	b.n	8005fd4 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	785b      	ldrb	r3, [r3, #1]
 8005d62:	2b03      	cmp	r3, #3
 8005d64:	d007      	beq.n	8005d76 <USBD_StdEPReq+0x5c>
 8005d66:	2b03      	cmp	r3, #3
 8005d68:	f300 8129 	bgt.w	8005fbe <USBD_StdEPReq+0x2a4>
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d07f      	beq.n	8005e70 <USBD_StdEPReq+0x156>
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d03c      	beq.n	8005dee <USBD_StdEPReq+0xd4>
 8005d74:	e123      	b.n	8005fbe <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d002      	beq.n	8005d88 <USBD_StdEPReq+0x6e>
 8005d82:	2b03      	cmp	r3, #3
 8005d84:	d016      	beq.n	8005db4 <USBD_StdEPReq+0x9a>
 8005d86:	e02c      	b.n	8005de2 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d88:	7bbb      	ldrb	r3, [r7, #14]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00d      	beq.n	8005daa <USBD_StdEPReq+0x90>
 8005d8e:	7bbb      	ldrb	r3, [r7, #14]
 8005d90:	2b80      	cmp	r3, #128	; 0x80
 8005d92:	d00a      	beq.n	8005daa <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d94:	7bbb      	ldrb	r3, [r7, #14]
 8005d96:	4619      	mov	r1, r3
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f001 fa19 	bl	80071d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d9e:	2180      	movs	r1, #128	; 0x80
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f001 fa15 	bl	80071d0 <USBD_LL_StallEP>
 8005da6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005da8:	e020      	b.n	8005dec <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fc6f 	bl	8006690 <USBD_CtlError>
              break;
 8005db2:	e01b      	b.n	8005dec <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	885b      	ldrh	r3, [r3, #2]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d10e      	bne.n	8005dda <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005dbc:	7bbb      	ldrb	r3, [r7, #14]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d00b      	beq.n	8005dda <USBD_StdEPReq+0xc0>
 8005dc2:	7bbb      	ldrb	r3, [r7, #14]
 8005dc4:	2b80      	cmp	r3, #128	; 0x80
 8005dc6:	d008      	beq.n	8005dda <USBD_StdEPReq+0xc0>
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	88db      	ldrh	r3, [r3, #6]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d104      	bne.n	8005dda <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005dd0:	7bbb      	ldrb	r3, [r7, #14]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 f9fb 	bl	80071d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 fd23 	bl	8006826 <USBD_CtlSendStatus>

              break;
 8005de0:	e004      	b.n	8005dec <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005de2:	6839      	ldr	r1, [r7, #0]
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fc53 	bl	8006690 <USBD_CtlError>
              break;
 8005dea:	bf00      	nop
          }
          break;
 8005dec:	e0ec      	b.n	8005fc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b02      	cmp	r3, #2
 8005df8:	d002      	beq.n	8005e00 <USBD_StdEPReq+0xe6>
 8005dfa:	2b03      	cmp	r3, #3
 8005dfc:	d016      	beq.n	8005e2c <USBD_StdEPReq+0x112>
 8005dfe:	e030      	b.n	8005e62 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e00:	7bbb      	ldrb	r3, [r7, #14]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00d      	beq.n	8005e22 <USBD_StdEPReq+0x108>
 8005e06:	7bbb      	ldrb	r3, [r7, #14]
 8005e08:	2b80      	cmp	r3, #128	; 0x80
 8005e0a:	d00a      	beq.n	8005e22 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005e0c:	7bbb      	ldrb	r3, [r7, #14]
 8005e0e:	4619      	mov	r1, r3
 8005e10:	6878      	ldr	r0, [r7, #4]
 8005e12:	f001 f9dd 	bl	80071d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005e16:	2180      	movs	r1, #128	; 0x80
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f001 f9d9 	bl	80071d0 <USBD_LL_StallEP>
 8005e1e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005e20:	e025      	b.n	8005e6e <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fc33 	bl	8006690 <USBD_CtlError>
              break;
 8005e2a:	e020      	b.n	8005e6e <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	885b      	ldrh	r3, [r3, #2]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d11b      	bne.n	8005e6c <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005e34:	7bbb      	ldrb	r3, [r7, #14]
 8005e36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d004      	beq.n	8005e48 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005e3e:	7bbb      	ldrb	r3, [r7, #14]
 8005e40:	4619      	mov	r1, r3
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	f001 f9fa 	bl	800723c <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 fcec 	bl	8006826 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005e54:	689b      	ldr	r3, [r3, #8]
 8005e56:	6839      	ldr	r1, [r7, #0]
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	4798      	blx	r3
 8005e5c:	4603      	mov	r3, r0
 8005e5e:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005e60:	e004      	b.n	8005e6c <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005e62:	6839      	ldr	r1, [r7, #0]
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f000 fc13 	bl	8006690 <USBD_CtlError>
              break;
 8005e6a:	e000      	b.n	8005e6e <USBD_StdEPReq+0x154>
              break;
 8005e6c:	bf00      	nop
          }
          break;
 8005e6e:	e0ab      	b.n	8005fc8 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e76:	b2db      	uxtb	r3, r3
 8005e78:	2b02      	cmp	r3, #2
 8005e7a:	d002      	beq.n	8005e82 <USBD_StdEPReq+0x168>
 8005e7c:	2b03      	cmp	r3, #3
 8005e7e:	d032      	beq.n	8005ee6 <USBD_StdEPReq+0x1cc>
 8005e80:	e097      	b.n	8005fb2 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e82:	7bbb      	ldrb	r3, [r7, #14]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d007      	beq.n	8005e98 <USBD_StdEPReq+0x17e>
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	2b80      	cmp	r3, #128	; 0x80
 8005e8c:	d004      	beq.n	8005e98 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005e8e:	6839      	ldr	r1, [r7, #0]
 8005e90:	6878      	ldr	r0, [r7, #4]
 8005e92:	f000 fbfd 	bl	8006690 <USBD_CtlError>
                break;
 8005e96:	e091      	b.n	8005fbc <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e98:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	da0b      	bge.n	8005eb8 <USBD_StdEPReq+0x19e>
 8005ea0:	7bbb      	ldrb	r3, [r7, #14]
 8005ea2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005ea6:	4613      	mov	r3, r2
 8005ea8:	009b      	lsls	r3, r3, #2
 8005eaa:	4413      	add	r3, r2
 8005eac:	009b      	lsls	r3, r3, #2
 8005eae:	3310      	adds	r3, #16
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	4413      	add	r3, r2
 8005eb4:	3304      	adds	r3, #4
 8005eb6:	e00b      	b.n	8005ed0 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005eb8:	7bbb      	ldrb	r3, [r7, #14]
 8005eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	4413      	add	r3, r2
 8005ece:	3304      	adds	r3, #4
 8005ed0:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	2202      	movs	r2, #2
 8005edc:	4619      	mov	r1, r3
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fc47 	bl	8006772 <USBD_CtlSendData>
              break;
 8005ee4:	e06a      	b.n	8005fbc <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005ee6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	da11      	bge.n	8005f12 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005eee:	7bbb      	ldrb	r3, [r7, #14]
 8005ef0:	f003 020f 	and.w	r2, r3, #15
 8005ef4:	6879      	ldr	r1, [r7, #4]
 8005ef6:	4613      	mov	r3, r2
 8005ef8:	009b      	lsls	r3, r3, #2
 8005efa:	4413      	add	r3, r2
 8005efc:	009b      	lsls	r3, r3, #2
 8005efe:	440b      	add	r3, r1
 8005f00:	3324      	adds	r3, #36	; 0x24
 8005f02:	881b      	ldrh	r3, [r3, #0]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d117      	bne.n	8005f38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005f08:	6839      	ldr	r1, [r7, #0]
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f000 fbc0 	bl	8006690 <USBD_CtlError>
                  break;
 8005f10:	e054      	b.n	8005fbc <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005f12:	7bbb      	ldrb	r3, [r7, #14]
 8005f14:	f003 020f 	and.w	r2, r3, #15
 8005f18:	6879      	ldr	r1, [r7, #4]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	009b      	lsls	r3, r3, #2
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005f28:	881b      	ldrh	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d104      	bne.n	8005f38 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005f2e:	6839      	ldr	r1, [r7, #0]
 8005f30:	6878      	ldr	r0, [r7, #4]
 8005f32:	f000 fbad 	bl	8006690 <USBD_CtlError>
                  break;
 8005f36:	e041      	b.n	8005fbc <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	da0b      	bge.n	8005f58 <USBD_StdEPReq+0x23e>
 8005f40:	7bbb      	ldrb	r3, [r7, #14]
 8005f42:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f46:	4613      	mov	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	4413      	add	r3, r2
 8005f4c:	009b      	lsls	r3, r3, #2
 8005f4e:	3310      	adds	r3, #16
 8005f50:	687a      	ldr	r2, [r7, #4]
 8005f52:	4413      	add	r3, r2
 8005f54:	3304      	adds	r3, #4
 8005f56:	e00b      	b.n	8005f70 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f58:	7bbb      	ldrb	r3, [r7, #14]
 8005f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f5e:	4613      	mov	r3, r2
 8005f60:	009b      	lsls	r3, r3, #2
 8005f62:	4413      	add	r3, r2
 8005f64:	009b      	lsls	r3, r3, #2
 8005f66:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f6a:	687a      	ldr	r2, [r7, #4]
 8005f6c:	4413      	add	r3, r2
 8005f6e:	3304      	adds	r3, #4
 8005f70:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f72:	7bbb      	ldrb	r3, [r7, #14]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d002      	beq.n	8005f7e <USBD_StdEPReq+0x264>
 8005f78:	7bbb      	ldrb	r3, [r7, #14]
 8005f7a:	2b80      	cmp	r3, #128	; 0x80
 8005f7c:	d103      	bne.n	8005f86 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	2200      	movs	r2, #0
 8005f82:	601a      	str	r2, [r3, #0]
 8005f84:	e00e      	b.n	8005fa4 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f001 f98c 	bl	80072a8 <USBD_LL_IsStallEP>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d003      	beq.n	8005f9e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	601a      	str	r2, [r3, #0]
 8005f9c:	e002      	b.n	8005fa4 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005fa4:	68bb      	ldr	r3, [r7, #8]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	4619      	mov	r1, r3
 8005faa:	6878      	ldr	r0, [r7, #4]
 8005fac:	f000 fbe1 	bl	8006772 <USBD_CtlSendData>
              break;
 8005fb0:	e004      	b.n	8005fbc <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005fb2:	6839      	ldr	r1, [r7, #0]
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fb6b 	bl	8006690 <USBD_CtlError>
              break;
 8005fba:	bf00      	nop
          }
          break;
 8005fbc:	e004      	b.n	8005fc8 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005fbe:	6839      	ldr	r1, [r7, #0]
 8005fc0:	6878      	ldr	r0, [r7, #4]
 8005fc2:	f000 fb65 	bl	8006690 <USBD_CtlError>
          break;
 8005fc6:	bf00      	nop
      }
      break;
 8005fc8:	e004      	b.n	8005fd4 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005fca:	6839      	ldr	r1, [r7, #0]
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 fb5f 	bl	8006690 <USBD_CtlError>
      break;
 8005fd2:	bf00      	nop
  }

  return ret;
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}
	...

08005fe0 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
 8005fe8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	885b      	ldrh	r3, [r3, #2]
 8005ffa:	0a1b      	lsrs	r3, r3, #8
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	3b01      	subs	r3, #1
 8006000:	2b0e      	cmp	r3, #14
 8006002:	f200 8152 	bhi.w	80062aa <USBD_GetDescriptor+0x2ca>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <USBD_GetDescriptor+0x2c>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	0800607d 	.word	0x0800607d
 8006010:	08006095 	.word	0x08006095
 8006014:	080060d5 	.word	0x080060d5
 8006018:	080062ab 	.word	0x080062ab
 800601c:	080062ab 	.word	0x080062ab
 8006020:	0800624b 	.word	0x0800624b
 8006024:	08006277 	.word	0x08006277
 8006028:	080062ab 	.word	0x080062ab
 800602c:	080062ab 	.word	0x080062ab
 8006030:	080062ab 	.word	0x080062ab
 8006034:	080062ab 	.word	0x080062ab
 8006038:	080062ab 	.word	0x080062ab
 800603c:	080062ab 	.word	0x080062ab
 8006040:	080062ab 	.word	0x080062ab
 8006044:	08006049 	.word	0x08006049
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800604e:	69db      	ldr	r3, [r3, #28]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d00b      	beq.n	800606c <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800605a:	69db      	ldr	r3, [r3, #28]
 800605c:	687a      	ldr	r2, [r7, #4]
 800605e:	7c12      	ldrb	r2, [r2, #16]
 8006060:	f107 0108 	add.w	r1, r7, #8
 8006064:	4610      	mov	r0, r2
 8006066:	4798      	blx	r3
 8006068:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800606a:	e126      	b.n	80062ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800606c:	6839      	ldr	r1, [r7, #0]
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f000 fb0e 	bl	8006690 <USBD_CtlError>
        err++;
 8006074:	7afb      	ldrb	r3, [r7, #11]
 8006076:	3301      	adds	r3, #1
 8006078:	72fb      	strb	r3, [r7, #11]
      break;
 800607a:	e11e      	b.n	80062ba <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	7c12      	ldrb	r2, [r2, #16]
 8006088:	f107 0108 	add.w	r1, r7, #8
 800608c:	4610      	mov	r0, r2
 800608e:	4798      	blx	r3
 8006090:	60f8      	str	r0, [r7, #12]
      break;
 8006092:	e112      	b.n	80062ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	7c1b      	ldrb	r3, [r3, #16]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d10d      	bne.n	80060b8 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060a4:	f107 0208 	add.w	r2, r7, #8
 80060a8:	4610      	mov	r0, r2
 80060aa:	4798      	blx	r3
 80060ac:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3301      	adds	r3, #1
 80060b2:	2202      	movs	r2, #2
 80060b4:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80060b6:	e100      	b.n	80062ba <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060c0:	f107 0208 	add.w	r2, r7, #8
 80060c4:	4610      	mov	r0, r2
 80060c6:	4798      	blx	r3
 80060c8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3301      	adds	r3, #1
 80060ce:	2202      	movs	r2, #2
 80060d0:	701a      	strb	r2, [r3, #0]
      break;
 80060d2:	e0f2      	b.n	80062ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	885b      	ldrh	r3, [r3, #2]
 80060d8:	b2db      	uxtb	r3, r3
 80060da:	2b05      	cmp	r3, #5
 80060dc:	f200 80ac 	bhi.w	8006238 <USBD_GetDescriptor+0x258>
 80060e0:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <USBD_GetDescriptor+0x108>)
 80060e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e6:	bf00      	nop
 80060e8:	08006101 	.word	0x08006101
 80060ec:	08006135 	.word	0x08006135
 80060f0:	08006169 	.word	0x08006169
 80060f4:	0800619d 	.word	0x0800619d
 80060f8:	080061d1 	.word	0x080061d1
 80060fc:	08006205 	.word	0x08006205
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006106:	685b      	ldr	r3, [r3, #4]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00b      	beq.n	8006124 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	687a      	ldr	r2, [r7, #4]
 8006116:	7c12      	ldrb	r2, [r2, #16]
 8006118:	f107 0108 	add.w	r1, r7, #8
 800611c:	4610      	mov	r0, r2
 800611e:	4798      	blx	r3
 8006120:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006122:	e091      	b.n	8006248 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006124:	6839      	ldr	r1, [r7, #0]
 8006126:	6878      	ldr	r0, [r7, #4]
 8006128:	f000 fab2 	bl	8006690 <USBD_CtlError>
            err++;
 800612c:	7afb      	ldrb	r3, [r7, #11]
 800612e:	3301      	adds	r3, #1
 8006130:	72fb      	strb	r3, [r7, #11]
          break;
 8006132:	e089      	b.n	8006248 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	7c12      	ldrb	r2, [r2, #16]
 800614c:	f107 0108 	add.w	r1, r7, #8
 8006150:	4610      	mov	r0, r2
 8006152:	4798      	blx	r3
 8006154:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006156:	e077      	b.n	8006248 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006158:	6839      	ldr	r1, [r7, #0]
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f000 fa98 	bl	8006690 <USBD_CtlError>
            err++;
 8006160:	7afb      	ldrb	r3, [r7, #11]
 8006162:	3301      	adds	r3, #1
 8006164:	72fb      	strb	r3, [r7, #11]
          break;
 8006166:	e06f      	b.n	8006248 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800616e:	68db      	ldr	r3, [r3, #12]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d00b      	beq.n	800618c <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	687a      	ldr	r2, [r7, #4]
 800617e:	7c12      	ldrb	r2, [r2, #16]
 8006180:	f107 0108 	add.w	r1, r7, #8
 8006184:	4610      	mov	r0, r2
 8006186:	4798      	blx	r3
 8006188:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800618a:	e05d      	b.n	8006248 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	6878      	ldr	r0, [r7, #4]
 8006190:	f000 fa7e 	bl	8006690 <USBD_CtlError>
            err++;
 8006194:	7afb      	ldrb	r3, [r7, #11]
 8006196:	3301      	adds	r3, #1
 8006198:	72fb      	strb	r3, [r7, #11]
          break;
 800619a:	e055      	b.n	8006248 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d00b      	beq.n	80061c0 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061ae:	691b      	ldr	r3, [r3, #16]
 80061b0:	687a      	ldr	r2, [r7, #4]
 80061b2:	7c12      	ldrb	r2, [r2, #16]
 80061b4:	f107 0108 	add.w	r1, r7, #8
 80061b8:	4610      	mov	r0, r2
 80061ba:	4798      	blx	r3
 80061bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061be:	e043      	b.n	8006248 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80061c0:	6839      	ldr	r1, [r7, #0]
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fa64 	bl	8006690 <USBD_CtlError>
            err++;
 80061c8:	7afb      	ldrb	r3, [r7, #11]
 80061ca:	3301      	adds	r3, #1
 80061cc:	72fb      	strb	r3, [r7, #11]
          break;
 80061ce:	e03b      	b.n	8006248 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061d6:	695b      	ldr	r3, [r3, #20]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d00b      	beq.n	80061f4 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80061e2:	695b      	ldr	r3, [r3, #20]
 80061e4:	687a      	ldr	r2, [r7, #4]
 80061e6:	7c12      	ldrb	r2, [r2, #16]
 80061e8:	f107 0108 	add.w	r1, r7, #8
 80061ec:	4610      	mov	r0, r2
 80061ee:	4798      	blx	r3
 80061f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80061f2:	e029      	b.n	8006248 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80061f4:	6839      	ldr	r1, [r7, #0]
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f000 fa4a 	bl	8006690 <USBD_CtlError>
            err++;
 80061fc:	7afb      	ldrb	r3, [r7, #11]
 80061fe:	3301      	adds	r3, #1
 8006200:	72fb      	strb	r3, [r7, #11]
          break;
 8006202:	e021      	b.n	8006248 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800620a:	699b      	ldr	r3, [r3, #24]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00b      	beq.n	8006228 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006216:	699b      	ldr	r3, [r3, #24]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	7c12      	ldrb	r2, [r2, #16]
 800621c:	f107 0108 	add.w	r1, r7, #8
 8006220:	4610      	mov	r0, r2
 8006222:	4798      	blx	r3
 8006224:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006226:	e00f      	b.n	8006248 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fa30 	bl	8006690 <USBD_CtlError>
            err++;
 8006230:	7afb      	ldrb	r3, [r7, #11]
 8006232:	3301      	adds	r3, #1
 8006234:	72fb      	strb	r3, [r7, #11]
          break;
 8006236:	e007      	b.n	8006248 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006238:	6839      	ldr	r1, [r7, #0]
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fa28 	bl	8006690 <USBD_CtlError>
          err++;
 8006240:	7afb      	ldrb	r3, [r7, #11]
 8006242:	3301      	adds	r3, #1
 8006244:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8006246:	bf00      	nop
      }
      break;
 8006248:	e037      	b.n	80062ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	7c1b      	ldrb	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d109      	bne.n	8006266 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006258:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800625a:	f107 0208 	add.w	r2, r7, #8
 800625e:	4610      	mov	r0, r2
 8006260:	4798      	blx	r3
 8006262:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006264:	e029      	b.n	80062ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8006266:	6839      	ldr	r1, [r7, #0]
 8006268:	6878      	ldr	r0, [r7, #4]
 800626a:	f000 fa11 	bl	8006690 <USBD_CtlError>
        err++;
 800626e:	7afb      	ldrb	r3, [r7, #11]
 8006270:	3301      	adds	r3, #1
 8006272:	72fb      	strb	r3, [r7, #11]
      break;
 8006274:	e021      	b.n	80062ba <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	7c1b      	ldrb	r3, [r3, #16]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10d      	bne.n	800629a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006286:	f107 0208 	add.w	r2, r7, #8
 800628a:	4610      	mov	r0, r2
 800628c:	4798      	blx	r3
 800628e:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	3301      	adds	r3, #1
 8006294:	2207      	movs	r2, #7
 8006296:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006298:	e00f      	b.n	80062ba <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800629a:	6839      	ldr	r1, [r7, #0]
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f9f7 	bl	8006690 <USBD_CtlError>
        err++;
 80062a2:	7afb      	ldrb	r3, [r7, #11]
 80062a4:	3301      	adds	r3, #1
 80062a6:	72fb      	strb	r3, [r7, #11]
      break;
 80062a8:	e007      	b.n	80062ba <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 80062aa:	6839      	ldr	r1, [r7, #0]
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f9ef 	bl	8006690 <USBD_CtlError>
      err++;
 80062b2:	7afb      	ldrb	r3, [r7, #11]
 80062b4:	3301      	adds	r3, #1
 80062b6:	72fb      	strb	r3, [r7, #11]
      break;
 80062b8:	bf00      	nop
  }

  if (err != 0U)
 80062ba:	7afb      	ldrb	r3, [r7, #11]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d11e      	bne.n	80062fe <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	88db      	ldrh	r3, [r3, #6]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d016      	beq.n	80062f6 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 80062c8:	893b      	ldrh	r3, [r7, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00e      	beq.n	80062ec <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	88da      	ldrh	r2, [r3, #6]
 80062d2:	893b      	ldrh	r3, [r7, #8]
 80062d4:	4293      	cmp	r3, r2
 80062d6:	bf28      	it	cs
 80062d8:	4613      	movcs	r3, r2
 80062da:	b29b      	uxth	r3, r3
 80062dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80062de:	893b      	ldrh	r3, [r7, #8]
 80062e0:	461a      	mov	r2, r3
 80062e2:	68f9      	ldr	r1, [r7, #12]
 80062e4:	6878      	ldr	r0, [r7, #4]
 80062e6:	f000 fa44 	bl	8006772 <USBD_CtlSendData>
 80062ea:	e009      	b.n	8006300 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f9ce 	bl	8006690 <USBD_CtlError>
 80062f4:	e004      	b.n	8006300 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa95 	bl	8006826 <USBD_CtlSendStatus>
 80062fc:	e000      	b.n	8006300 <USBD_GetDescriptor+0x320>
    return;
 80062fe:	bf00      	nop
  }
}
 8006300:	3710      	adds	r7, #16
 8006302:	46bd      	mov	sp, r7
 8006304:	bd80      	pop	{r7, pc}
 8006306:	bf00      	nop

08006308 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	889b      	ldrh	r3, [r3, #4]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d131      	bne.n	800637e <USBD_SetAddress+0x76>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	88db      	ldrh	r3, [r3, #6]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d12d      	bne.n	800637e <USBD_SetAddress+0x76>
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	885b      	ldrh	r3, [r3, #2]
 8006326:	2b7f      	cmp	r3, #127	; 0x7f
 8006328:	d829      	bhi.n	800637e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	885b      	ldrh	r3, [r3, #2]
 800632e:	b2db      	uxtb	r3, r3
 8006330:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006334:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b03      	cmp	r3, #3
 8006340:	d104      	bne.n	800634c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006342:	6839      	ldr	r1, [r7, #0]
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 f9a3 	bl	8006690 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800634a:	e01d      	b.n	8006388 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	7bfa      	ldrb	r2, [r7, #15]
 8006350:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006354:	7bfb      	ldrb	r3, [r7, #15]
 8006356:	4619      	mov	r1, r3
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f000 ffd1 	bl	8007300 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f000 fa61 	bl	8006826 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006364:	7bfb      	ldrb	r3, [r7, #15]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d004      	beq.n	8006374 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2202      	movs	r2, #2
 800636e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006372:	e009      	b.n	8006388 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800637c:	e004      	b.n	8006388 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800637e:	6839      	ldr	r1, [r7, #0]
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 f985 	bl	8006690 <USBD_CtlError>
  }
}
 8006386:	bf00      	nop
 8006388:	bf00      	nop
 800638a:	3710      	adds	r7, #16
 800638c:	46bd      	mov	sp, r7
 800638e:	bd80      	pop	{r7, pc}

08006390 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
 8006398:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800639a:	2300      	movs	r3, #0
 800639c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	885b      	ldrh	r3, [r3, #2]
 80063a2:	b2da      	uxtb	r2, r3
 80063a4:	4b4c      	ldr	r3, [pc, #304]	; (80064d8 <USBD_SetConfig+0x148>)
 80063a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80063a8:	4b4b      	ldr	r3, [pc, #300]	; (80064d8 <USBD_SetConfig+0x148>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d905      	bls.n	80063bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80063b0:	6839      	ldr	r1, [r7, #0]
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 f96c 	bl	8006690 <USBD_CtlError>
    return USBD_FAIL;
 80063b8:	2303      	movs	r3, #3
 80063ba:	e088      	b.n	80064ce <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c2:	b2db      	uxtb	r3, r3
 80063c4:	2b02      	cmp	r3, #2
 80063c6:	d002      	beq.n	80063ce <USBD_SetConfig+0x3e>
 80063c8:	2b03      	cmp	r3, #3
 80063ca:	d025      	beq.n	8006418 <USBD_SetConfig+0x88>
 80063cc:	e071      	b.n	80064b2 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80063ce:	4b42      	ldr	r3, [pc, #264]	; (80064d8 <USBD_SetConfig+0x148>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01c      	beq.n	8006410 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 80063d6:	4b40      	ldr	r3, [pc, #256]	; (80064d8 <USBD_SetConfig+0x148>)
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	461a      	mov	r2, r3
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80063e0:	4b3d      	ldr	r3, [pc, #244]	; (80064d8 <USBD_SetConfig+0x148>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f7ff f91e 	bl	8005628 <USBD_SetClassConfig>
 80063ec:	4603      	mov	r3, r0
 80063ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d004      	beq.n	8006400 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 80063f6:	6839      	ldr	r1, [r7, #0]
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f949 	bl	8006690 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80063fe:	e065      	b.n	80064cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 fa10 	bl	8006826 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	2203      	movs	r2, #3
 800640a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800640e:	e05d      	b.n	80064cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006410:	6878      	ldr	r0, [r7, #4]
 8006412:	f000 fa08 	bl	8006826 <USBD_CtlSendStatus>
      break;
 8006416:	e059      	b.n	80064cc <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006418:	4b2f      	ldr	r3, [pc, #188]	; (80064d8 <USBD_SetConfig+0x148>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d112      	bne.n	8006446 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006428:	4b2b      	ldr	r3, [pc, #172]	; (80064d8 <USBD_SetConfig+0x148>)
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	461a      	mov	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006432:	4b29      	ldr	r3, [pc, #164]	; (80064d8 <USBD_SetConfig+0x148>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	4619      	mov	r1, r3
 8006438:	6878      	ldr	r0, [r7, #4]
 800643a:	f7ff f911 	bl	8005660 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 f9f1 	bl	8006826 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006444:	e042      	b.n	80064cc <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 8006446:	4b24      	ldr	r3, [pc, #144]	; (80064d8 <USBD_SetConfig+0x148>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	461a      	mov	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	429a      	cmp	r2, r3
 8006452:	d02a      	beq.n	80064aa <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	b2db      	uxtb	r3, r3
 800645a:	4619      	mov	r1, r3
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f7ff f8ff 	bl	8005660 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006462:	4b1d      	ldr	r3, [pc, #116]	; (80064d8 <USBD_SetConfig+0x148>)
 8006464:	781b      	ldrb	r3, [r3, #0]
 8006466:	461a      	mov	r2, r3
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800646c:	4b1a      	ldr	r3, [pc, #104]	; (80064d8 <USBD_SetConfig+0x148>)
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	4619      	mov	r1, r3
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f7ff f8d8 	bl	8005628 <USBD_SetClassConfig>
 8006478:	4603      	mov	r3, r0
 800647a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800647c:	7bfb      	ldrb	r3, [r7, #15]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d00f      	beq.n	80064a2 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 8006482:	6839      	ldr	r1, [r7, #0]
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 f903 	bl	8006690 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	b2db      	uxtb	r3, r3
 8006490:	4619      	mov	r1, r3
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7ff f8e4 	bl	8005660 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2202      	movs	r2, #2
 800649c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80064a0:	e014      	b.n	80064cc <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f9bf 	bl	8006826 <USBD_CtlSendStatus>
      break;
 80064a8:	e010      	b.n	80064cc <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9bb 	bl	8006826 <USBD_CtlSendStatus>
      break;
 80064b0:	e00c      	b.n	80064cc <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f8eb 	bl	8006690 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80064ba:	4b07      	ldr	r3, [pc, #28]	; (80064d8 <USBD_SetConfig+0x148>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f7ff f8cd 	bl	8005660 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80064c6:	2303      	movs	r3, #3
 80064c8:	73fb      	strb	r3, [r7, #15]
      break;
 80064ca:	bf00      	nop
  }

  return ret;
 80064cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3710      	adds	r7, #16
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20000228 	.word	0x20000228

080064dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b082      	sub	sp, #8
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	88db      	ldrh	r3, [r3, #6]
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d004      	beq.n	80064f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80064ee:	6839      	ldr	r1, [r7, #0]
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 f8cd 	bl	8006690 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80064f6:	e023      	b.n	8006540 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064fe:	b2db      	uxtb	r3, r3
 8006500:	2b02      	cmp	r3, #2
 8006502:	dc02      	bgt.n	800650a <USBD_GetConfig+0x2e>
 8006504:	2b00      	cmp	r3, #0
 8006506:	dc03      	bgt.n	8006510 <USBD_GetConfig+0x34>
 8006508:	e015      	b.n	8006536 <USBD_GetConfig+0x5a>
 800650a:	2b03      	cmp	r3, #3
 800650c:	d00b      	beq.n	8006526 <USBD_GetConfig+0x4a>
 800650e:	e012      	b.n	8006536 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	2200      	movs	r2, #0
 8006514:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	3308      	adds	r3, #8
 800651a:	2201      	movs	r2, #1
 800651c:	4619      	mov	r1, r3
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f000 f927 	bl	8006772 <USBD_CtlSendData>
        break;
 8006524:	e00c      	b.n	8006540 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	3304      	adds	r3, #4
 800652a:	2201      	movs	r2, #1
 800652c:	4619      	mov	r1, r3
 800652e:	6878      	ldr	r0, [r7, #4]
 8006530:	f000 f91f 	bl	8006772 <USBD_CtlSendData>
        break;
 8006534:	e004      	b.n	8006540 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006536:	6839      	ldr	r1, [r7, #0]
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 f8a9 	bl	8006690 <USBD_CtlError>
        break;
 800653e:	bf00      	nop
}
 8006540:	bf00      	nop
 8006542:	3708      	adds	r7, #8
 8006544:	46bd      	mov	sp, r7
 8006546:	bd80      	pop	{r7, pc}

08006548 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b082      	sub	sp, #8
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
 8006550:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006558:	b2db      	uxtb	r3, r3
 800655a:	3b01      	subs	r3, #1
 800655c:	2b02      	cmp	r3, #2
 800655e:	d81e      	bhi.n	800659e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	88db      	ldrh	r3, [r3, #6]
 8006564:	2b02      	cmp	r3, #2
 8006566:	d004      	beq.n	8006572 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f890 	bl	8006690 <USBD_CtlError>
        break;
 8006570:	e01a      	b.n	80065a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800657e:	2b00      	cmp	r3, #0
 8006580:	d005      	beq.n	800658e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	f043 0202 	orr.w	r2, r3, #2
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	330c      	adds	r3, #12
 8006592:	2202      	movs	r2, #2
 8006594:	4619      	mov	r1, r3
 8006596:	6878      	ldr	r0, [r7, #4]
 8006598:	f000 f8eb 	bl	8006772 <USBD_CtlSendData>
      break;
 800659c:	e004      	b.n	80065a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800659e:	6839      	ldr	r1, [r7, #0]
 80065a0:	6878      	ldr	r0, [r7, #4]
 80065a2:	f000 f875 	bl	8006690 <USBD_CtlError>
      break;
 80065a6:	bf00      	nop
  }
}
 80065a8:	bf00      	nop
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b082      	sub	sp, #8
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
 80065b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	885b      	ldrh	r3, [r3, #2]
 80065be:	2b01      	cmp	r3, #1
 80065c0:	d106      	bne.n	80065d0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f92b 	bl	8006826 <USBD_CtlSendStatus>
  }
}
 80065d0:	bf00      	nop
 80065d2:	3708      	adds	r7, #8
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
 80065e0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065e8:	b2db      	uxtb	r3, r3
 80065ea:	3b01      	subs	r3, #1
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d80b      	bhi.n	8006608 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	885b      	ldrh	r3, [r3, #2]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d10c      	bne.n	8006612 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f910 	bl	8006826 <USBD_CtlSendStatus>
      }
      break;
 8006606:	e004      	b.n	8006612 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006608:	6839      	ldr	r1, [r7, #0]
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f840 	bl	8006690 <USBD_CtlError>
      break;
 8006610:	e000      	b.n	8006614 <USBD_ClrFeature+0x3c>
      break;
 8006612:	bf00      	nop
  }
}
 8006614:	bf00      	nop
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}

0800661c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b084      	sub	sp, #16
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	781a      	ldrb	r2, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	3301      	adds	r3, #1
 8006636:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	781a      	ldrb	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	3301      	adds	r3, #1
 8006644:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f7ff fa91 	bl	8005b6e <SWAPBYTE>
 800664c:	4603      	mov	r3, r0
 800664e:	461a      	mov	r2, r3
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	3301      	adds	r3, #1
 8006658:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	3301      	adds	r3, #1
 800665e:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f7ff fa84 	bl	8005b6e <SWAPBYTE>
 8006666:	4603      	mov	r3, r0
 8006668:	461a      	mov	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3301      	adds	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	3301      	adds	r3, #1
 8006678:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800667a:	68f8      	ldr	r0, [r7, #12]
 800667c:	f7ff fa77 	bl	8005b6e <SWAPBYTE>
 8006680:	4603      	mov	r3, r0
 8006682:	461a      	mov	r2, r3
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	80da      	strh	r2, [r3, #6]
}
 8006688:	bf00      	nop
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800669a:	2180      	movs	r1, #128	; 0x80
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 fd97 	bl	80071d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80066a2:	2100      	movs	r1, #0
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fd93 	bl	80071d0 <USBD_LL_StallEP>
}
 80066aa:	bf00      	nop
 80066ac:	3708      	adds	r7, #8
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}

080066b2 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80066b2:	b580      	push	{r7, lr}
 80066b4:	b086      	sub	sp, #24
 80066b6:	af00      	add	r7, sp, #0
 80066b8:	60f8      	str	r0, [r7, #12]
 80066ba:	60b9      	str	r1, [r7, #8]
 80066bc:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80066be:	2300      	movs	r3, #0
 80066c0:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d036      	beq.n	8006736 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80066cc:	6938      	ldr	r0, [r7, #16]
 80066ce:	f000 f836 	bl	800673e <USBD_GetLen>
 80066d2:	4603      	mov	r3, r0
 80066d4:	3301      	adds	r3, #1
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	005b      	lsls	r3, r3, #1
 80066da:	b29a      	uxth	r2, r3
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80066e0:	7dfb      	ldrb	r3, [r7, #23]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	4413      	add	r3, r2
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	701a      	strb	r2, [r3, #0]
  idx++;
 80066ec:	7dfb      	ldrb	r3, [r7, #23]
 80066ee:	3301      	adds	r3, #1
 80066f0:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	68ba      	ldr	r2, [r7, #8]
 80066f6:	4413      	add	r3, r2
 80066f8:	2203      	movs	r2, #3
 80066fa:	701a      	strb	r2, [r3, #0]
  idx++;
 80066fc:	7dfb      	ldrb	r3, [r7, #23]
 80066fe:	3301      	adds	r3, #1
 8006700:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006702:	e013      	b.n	800672c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006704:	7dfb      	ldrb	r3, [r7, #23]
 8006706:	68ba      	ldr	r2, [r7, #8]
 8006708:	4413      	add	r3, r2
 800670a:	693a      	ldr	r2, [r7, #16]
 800670c:	7812      	ldrb	r2, [r2, #0]
 800670e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	3301      	adds	r3, #1
 8006714:	613b      	str	r3, [r7, #16]
    idx++;
 8006716:	7dfb      	ldrb	r3, [r7, #23]
 8006718:	3301      	adds	r3, #1
 800671a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800671c:	7dfb      	ldrb	r3, [r7, #23]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	4413      	add	r3, r2
 8006722:	2200      	movs	r2, #0
 8006724:	701a      	strb	r2, [r3, #0]
    idx++;
 8006726:	7dfb      	ldrb	r3, [r7, #23]
 8006728:	3301      	adds	r3, #1
 800672a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800672c:	693b      	ldr	r3, [r7, #16]
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d1e7      	bne.n	8006704 <USBD_GetString+0x52>
 8006734:	e000      	b.n	8006738 <USBD_GetString+0x86>
    return;
 8006736:	bf00      	nop
  }
}
 8006738:	3718      	adds	r7, #24
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006746:	2300      	movs	r3, #0
 8006748:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800674e:	e005      	b.n	800675c <USBD_GetLen+0x1e>
  {
    len++;
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	3301      	adds	r3, #1
 8006754:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	3301      	adds	r3, #1
 800675a:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	781b      	ldrb	r3, [r3, #0]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d1f5      	bne.n	8006750 <USBD_GetLen+0x12>
  }

  return len;
 8006764:	7bfb      	ldrb	r3, [r7, #15]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3714      	adds	r7, #20
 800676a:	46bd      	mov	sp, r7
 800676c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006770:	4770      	bx	lr

08006772 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006772:	b580      	push	{r7, lr}
 8006774:	b084      	sub	sp, #16
 8006776:	af00      	add	r7, sp, #0
 8006778:	60f8      	str	r0, [r7, #12]
 800677a:	60b9      	str	r1, [r7, #8]
 800677c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2202      	movs	r2, #2
 8006782:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	687a      	ldr	r2, [r7, #4]
 8006790:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	2100      	movs	r1, #0
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 fde7 	bl	800736c <USBD_LL_Transmit>

  return USBD_OK;
 800679e:	2300      	movs	r3, #0
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80067a8:	b580      	push	{r7, lr}
 80067aa:	b084      	sub	sp, #16
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	60f8      	str	r0, [r7, #12]
 80067b0:	60b9      	str	r1, [r7, #8]
 80067b2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	2100      	movs	r1, #0
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fdd6 	bl	800736c <USBD_LL_Transmit>

  return USBD_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3710      	adds	r7, #16
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}

080067ca <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80067ca:	b580      	push	{r7, lr}
 80067cc:	b084      	sub	sp, #16
 80067ce:	af00      	add	r7, sp, #0
 80067d0:	60f8      	str	r0, [r7, #12]
 80067d2:	60b9      	str	r1, [r7, #8]
 80067d4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2203      	movs	r2, #3
 80067da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	68ba      	ldr	r2, [r7, #8]
 80067f2:	2100      	movs	r1, #0
 80067f4:	68f8      	ldr	r0, [r7, #12]
 80067f6:	f000 fdf1 	bl	80073dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3710      	adds	r7, #16
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b084      	sub	sp, #16
 8006808:	af00      	add	r7, sp, #0
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	60b9      	str	r1, [r7, #8]
 800680e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	68ba      	ldr	r2, [r7, #8]
 8006814:	2100      	movs	r1, #0
 8006816:	68f8      	ldr	r0, [r7, #12]
 8006818:	f000 fde0 	bl	80073dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800681c:	2300      	movs	r3, #0
}
 800681e:	4618      	mov	r0, r3
 8006820:	3710      	adds	r7, #16
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b082      	sub	sp, #8
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2204      	movs	r2, #4
 8006832:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006836:	2300      	movs	r3, #0
 8006838:	2200      	movs	r2, #0
 800683a:	2100      	movs	r1, #0
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fd95 	bl	800736c <USBD_LL_Transmit>

  return USBD_OK;
 8006842:	2300      	movs	r3, #0
}
 8006844:	4618      	mov	r0, r3
 8006846:	3708      	adds	r7, #8
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2205      	movs	r2, #5
 8006858:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800685c:	2300      	movs	r3, #0
 800685e:	2200      	movs	r2, #0
 8006860:	2100      	movs	r1, #0
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f000 fdba 	bl	80073dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006868:	2300      	movs	r3, #0
}
 800686a:	4618      	mov	r0, r3
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
	...

08006874 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006878:	2200      	movs	r2, #0
 800687a:	4912      	ldr	r1, [pc, #72]	; (80068c4 <MX_USB_DEVICE_Init+0x50>)
 800687c:	4812      	ldr	r0, [pc, #72]	; (80068c8 <MX_USB_DEVICE_Init+0x54>)
 800687e:	f7fe fe65 	bl	800554c <USBD_Init>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d001      	beq.n	800688c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006888:	f7fa f8b5 	bl	80009f6 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800688c:	490f      	ldr	r1, [pc, #60]	; (80068cc <MX_USB_DEVICE_Init+0x58>)
 800688e:	480e      	ldr	r0, [pc, #56]	; (80068c8 <MX_USB_DEVICE_Init+0x54>)
 8006890:	f7fe fe8c 	bl	80055ac <USBD_RegisterClass>
 8006894:	4603      	mov	r3, r0
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800689a:	f7fa f8ac 	bl	80009f6 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800689e:	490c      	ldr	r1, [pc, #48]	; (80068d0 <MX_USB_DEVICE_Init+0x5c>)
 80068a0:	4809      	ldr	r0, [pc, #36]	; (80068c8 <MX_USB_DEVICE_Init+0x54>)
 80068a2:	f7fe fdad 	bl	8005400 <USBD_CDC_RegisterInterface>
 80068a6:	4603      	mov	r3, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d001      	beq.n	80068b0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80068ac:	f7fa f8a3 	bl	80009f6 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80068b0:	4805      	ldr	r0, [pc, #20]	; (80068c8 <MX_USB_DEVICE_Init+0x54>)
 80068b2:	f7fe fea2 	bl	80055fa <USBD_Start>
 80068b6:	4603      	mov	r3, r0
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d001      	beq.n	80068c0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80068bc:	f7fa f89b 	bl	80009f6 <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80068c0:	bf00      	nop
 80068c2:	bd80      	pop	{r7, pc}
 80068c4:	20000130 	.word	0x20000130
 80068c8:	20000490 	.word	0x20000490
 80068cc:	20000018 	.word	0x20000018
 80068d0:	2000011c 	.word	0x2000011c

080068d4 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80068d8:	2200      	movs	r2, #0
 80068da:	4905      	ldr	r1, [pc, #20]	; (80068f0 <CDC_Init_FS+0x1c>)
 80068dc:	4805      	ldr	r0, [pc, #20]	; (80068f4 <CDC_Init_FS+0x20>)
 80068de:	f7fe fda4 	bl	800542a <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80068e2:	4905      	ldr	r1, [pc, #20]	; (80068f8 <CDC_Init_FS+0x24>)
 80068e4:	4803      	ldr	r0, [pc, #12]	; (80068f4 <CDC_Init_FS+0x20>)
 80068e6:	f7fe fdbe 	bl	8005466 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80068ea:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20000f60 	.word	0x20000f60
 80068f4:	20000490 	.word	0x20000490
 80068f8:	20000760 	.word	0x20000760

080068fc <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006900:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006902:	4618      	mov	r0, r3
 8006904:	46bd      	mov	sp, r7
 8006906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690a:	4770      	bx	lr

0800690c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	4603      	mov	r3, r0
 8006914:	6039      	str	r1, [r7, #0]
 8006916:	71fb      	strb	r3, [r7, #7]
 8006918:	4613      	mov	r3, r2
 800691a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800691c:	79fb      	ldrb	r3, [r7, #7]
 800691e:	2b23      	cmp	r3, #35	; 0x23
 8006920:	d84a      	bhi.n	80069b8 <CDC_Control_FS+0xac>
 8006922:	a201      	add	r2, pc, #4	; (adr r2, 8006928 <CDC_Control_FS+0x1c>)
 8006924:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006928:	080069b9 	.word	0x080069b9
 800692c:	080069b9 	.word	0x080069b9
 8006930:	080069b9 	.word	0x080069b9
 8006934:	080069b9 	.word	0x080069b9
 8006938:	080069b9 	.word	0x080069b9
 800693c:	080069b9 	.word	0x080069b9
 8006940:	080069b9 	.word	0x080069b9
 8006944:	080069b9 	.word	0x080069b9
 8006948:	080069b9 	.word	0x080069b9
 800694c:	080069b9 	.word	0x080069b9
 8006950:	080069b9 	.word	0x080069b9
 8006954:	080069b9 	.word	0x080069b9
 8006958:	080069b9 	.word	0x080069b9
 800695c:	080069b9 	.word	0x080069b9
 8006960:	080069b9 	.word	0x080069b9
 8006964:	080069b9 	.word	0x080069b9
 8006968:	080069b9 	.word	0x080069b9
 800696c:	080069b9 	.word	0x080069b9
 8006970:	080069b9 	.word	0x080069b9
 8006974:	080069b9 	.word	0x080069b9
 8006978:	080069b9 	.word	0x080069b9
 800697c:	080069b9 	.word	0x080069b9
 8006980:	080069b9 	.word	0x080069b9
 8006984:	080069b9 	.word	0x080069b9
 8006988:	080069b9 	.word	0x080069b9
 800698c:	080069b9 	.word	0x080069b9
 8006990:	080069b9 	.word	0x080069b9
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069b9 	.word	0x080069b9
 800699c:	080069b9 	.word	0x080069b9
 80069a0:	080069b9 	.word	0x080069b9
 80069a4:	080069b9 	.word	0x080069b9
 80069a8:	080069b9 	.word	0x080069b9
 80069ac:	080069b9 	.word	0x080069b9
 80069b0:	080069b9 	.word	0x080069b9
 80069b4:	080069b9 	.word	0x080069b9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80069b8:	bf00      	nop
  }

  return (USBD_OK);
 80069ba:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80069bc:	4618      	mov	r0, r3
 80069be:	370c      	adds	r7, #12
 80069c0:	46bd      	mov	sp, r7
 80069c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c6:	4770      	bx	lr

080069c8 <CDC_Receive_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
#define buffergroesse 64
extern uint8_t bufferdata[buffergroesse];
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80069d2:	6879      	ldr	r1, [r7, #4]
 80069d4:	480c      	ldr	r0, [pc, #48]	; (8006a08 <CDC_Receive_FS+0x40>)
 80069d6:	f7fe fd46 	bl	8005466 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80069da:	480b      	ldr	r0, [pc, #44]	; (8006a08 <CDC_Receive_FS+0x40>)
 80069dc:	f7fe fd8c 	bl	80054f8 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	73fb      	strb	r3, [r7, #15]

  memcpy (bufferdata,Buf,len);
 80069e6:	7bfb      	ldrb	r3, [r7, #15]
 80069e8:	461a      	mov	r2, r3
 80069ea:	6879      	ldr	r1, [r7, #4]
 80069ec:	4807      	ldr	r0, [pc, #28]	; (8006a0c <CDC_Receive_FS+0x44>)
 80069ee:	f000 fdd1 	bl	8007594 <memcpy>
  memset (Buf,'\0', len);
 80069f2:	7bfb      	ldrb	r3, [r7, #15]
 80069f4:	461a      	mov	r2, r3
 80069f6:	2100      	movs	r1, #0
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f000 fdd9 	bl	80075b0 <memset>

  return (USBD_OK);
 80069fe:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}
 8006a08:	20000490 	.word	0x20000490
 8006a0c:	2000044c 	.word	0x2000044c

08006a10 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8006a10:	b580      	push	{r7, lr}
 8006a12:	b084      	sub	sp, #16
 8006a14:	af00      	add	r7, sp, #0
 8006a16:	6078      	str	r0, [r7, #4]
 8006a18:	460b      	mov	r3, r1
 8006a1a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006a1c:	2300      	movs	r3, #0
 8006a1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8006a20:	4b0d      	ldr	r3, [pc, #52]	; (8006a58 <CDC_Transmit_FS+0x48>)
 8006a22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006a26:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d001      	beq.n	8006a36 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e00b      	b.n	8006a4e <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006a36:	887b      	ldrh	r3, [r7, #2]
 8006a38:	461a      	mov	r2, r3
 8006a3a:	6879      	ldr	r1, [r7, #4]
 8006a3c:	4806      	ldr	r0, [pc, #24]	; (8006a58 <CDC_Transmit_FS+0x48>)
 8006a3e:	f7fe fcf4 	bl	800542a <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8006a42:	4805      	ldr	r0, [pc, #20]	; (8006a58 <CDC_Transmit_FS+0x48>)
 8006a44:	f7fe fd28 	bl	8005498 <USBD_CDC_TransmitPacket>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3710      	adds	r7, #16
 8006a52:	46bd      	mov	sp, r7
 8006a54:	bd80      	pop	{r7, pc}
 8006a56:	bf00      	nop
 8006a58:	20000490 	.word	0x20000490

08006a5c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006a6e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	371c      	adds	r7, #28
 8006a76:	46bd      	mov	sp, r7
 8006a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7c:	4770      	bx	lr
	...

08006a80 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	4603      	mov	r3, r0
 8006a88:	6039      	str	r1, [r7, #0]
 8006a8a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	2212      	movs	r2, #18
 8006a90:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006a92:	4b03      	ldr	r3, [pc, #12]	; (8006aa0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006a94:	4618      	mov	r0, r3
 8006a96:	370c      	adds	r7, #12
 8006a98:	46bd      	mov	sp, r7
 8006a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9e:	4770      	bx	lr
 8006aa0:	20000150 	.word	0x20000150

08006aa4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b083      	sub	sp, #12
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	4603      	mov	r3, r0
 8006aac:	6039      	str	r1, [r7, #0]
 8006aae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	2204      	movs	r2, #4
 8006ab4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006ab6:	4b03      	ldr	r3, [pc, #12]	; (8006ac4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr
 8006ac4:	20000170 	.word	0x20000170

08006ac8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b082      	sub	sp, #8
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	4603      	mov	r3, r0
 8006ad0:	6039      	str	r1, [r7, #0]
 8006ad2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ad4:	79fb      	ldrb	r3, [r7, #7]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d105      	bne.n	8006ae6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ada:	683a      	ldr	r2, [r7, #0]
 8006adc:	4907      	ldr	r1, [pc, #28]	; (8006afc <USBD_FS_ProductStrDescriptor+0x34>)
 8006ade:	4808      	ldr	r0, [pc, #32]	; (8006b00 <USBD_FS_ProductStrDescriptor+0x38>)
 8006ae0:	f7ff fde7 	bl	80066b2 <USBD_GetString>
 8006ae4:	e004      	b.n	8006af0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006ae6:	683a      	ldr	r2, [r7, #0]
 8006ae8:	4904      	ldr	r1, [pc, #16]	; (8006afc <USBD_FS_ProductStrDescriptor+0x34>)
 8006aea:	4805      	ldr	r0, [pc, #20]	; (8006b00 <USBD_FS_ProductStrDescriptor+0x38>)
 8006aec:	f7ff fde1 	bl	80066b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006af0:	4b02      	ldr	r3, [pc, #8]	; (8006afc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	3708      	adds	r7, #8
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bd80      	pop	{r7, pc}
 8006afa:	bf00      	nop
 8006afc:	20001760 	.word	0x20001760
 8006b00:	08007738 	.word	0x08007738

08006b04 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	6039      	str	r1, [r7, #0]
 8006b0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b10:	683a      	ldr	r2, [r7, #0]
 8006b12:	4904      	ldr	r1, [pc, #16]	; (8006b24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b14:	4804      	ldr	r0, [pc, #16]	; (8006b28 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b16:	f7ff fdcc 	bl	80066b2 <USBD_GetString>
  return USBD_StrDesc;
 8006b1a:	4b02      	ldr	r3, [pc, #8]	; (8006b24 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3708      	adds	r7, #8
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}
 8006b24:	20001760 	.word	0x20001760
 8006b28:	08007750 	.word	0x08007750

08006b2c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	4603      	mov	r3, r0
 8006b34:	6039      	str	r1, [r7, #0]
 8006b36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	221a      	movs	r2, #26
 8006b3c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b3e:	f000 f855 	bl	8006bec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b42:	4b02      	ldr	r3, [pc, #8]	; (8006b4c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3708      	adds	r7, #8
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	20000174 	.word	0x20000174

08006b50 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b50:	b580      	push	{r7, lr}
 8006b52:	b082      	sub	sp, #8
 8006b54:	af00      	add	r7, sp, #0
 8006b56:	4603      	mov	r3, r0
 8006b58:	6039      	str	r1, [r7, #0]
 8006b5a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006b5c:	79fb      	ldrb	r3, [r7, #7]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d105      	bne.n	8006b6e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b62:	683a      	ldr	r2, [r7, #0]
 8006b64:	4907      	ldr	r1, [pc, #28]	; (8006b84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b66:	4808      	ldr	r0, [pc, #32]	; (8006b88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b68:	f7ff fda3 	bl	80066b2 <USBD_GetString>
 8006b6c:	e004      	b.n	8006b78 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006b6e:	683a      	ldr	r2, [r7, #0]
 8006b70:	4904      	ldr	r1, [pc, #16]	; (8006b84 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006b72:	4805      	ldr	r0, [pc, #20]	; (8006b88 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006b74:	f7ff fd9d 	bl	80066b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b78:	4b02      	ldr	r3, [pc, #8]	; (8006b84 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006b7a:	4618      	mov	r0, r3
 8006b7c:	3708      	adds	r7, #8
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20001760 	.word	0x20001760
 8006b88:	08007764 	.word	0x08007764

08006b8c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b8c:	b580      	push	{r7, lr}
 8006b8e:	b082      	sub	sp, #8
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	4603      	mov	r3, r0
 8006b94:	6039      	str	r1, [r7, #0]
 8006b96:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b98:	79fb      	ldrb	r3, [r7, #7]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d105      	bne.n	8006baa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006b9e:	683a      	ldr	r2, [r7, #0]
 8006ba0:	4907      	ldr	r1, [pc, #28]	; (8006bc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ba2:	4808      	ldr	r0, [pc, #32]	; (8006bc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ba4:	f7ff fd85 	bl	80066b2 <USBD_GetString>
 8006ba8:	e004      	b.n	8006bb4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	4904      	ldr	r1, [pc, #16]	; (8006bc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006bae:	4805      	ldr	r0, [pc, #20]	; (8006bc4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006bb0:	f7ff fd7f 	bl	80066b2 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bb4:	4b02      	ldr	r3, [pc, #8]	; (8006bc0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}
 8006bbe:	bf00      	nop
 8006bc0:	20001760 	.word	0x20001760
 8006bc4:	08007770 	.word	0x08007770

08006bc8 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	6039      	str	r1, [r7, #0]
 8006bd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	220c      	movs	r2, #12
 8006bd8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006bda:	4b03      	ldr	r3, [pc, #12]	; (8006be8 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006bdc:	4618      	mov	r0, r3
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr
 8006be8:	20000164 	.word	0x20000164

08006bec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006bf2:	4b0f      	ldr	r3, [pc, #60]	; (8006c30 <Get_SerialNum+0x44>)
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006bf8:	4b0e      	ldr	r3, [pc, #56]	; (8006c34 <Get_SerialNum+0x48>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006bfe:	4b0e      	ldr	r3, [pc, #56]	; (8006c38 <Get_SerialNum+0x4c>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c04:	68fa      	ldr	r2, [r7, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4413      	add	r3, r2
 8006c0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c12:	2208      	movs	r2, #8
 8006c14:	4909      	ldr	r1, [pc, #36]	; (8006c3c <Get_SerialNum+0x50>)
 8006c16:	68f8      	ldr	r0, [r7, #12]
 8006c18:	f000 f814 	bl	8006c44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c1c:	2204      	movs	r2, #4
 8006c1e:	4908      	ldr	r1, [pc, #32]	; (8006c40 <Get_SerialNum+0x54>)
 8006c20:	68b8      	ldr	r0, [r7, #8]
 8006c22:	f000 f80f 	bl	8006c44 <IntToUnicode>
  }
}
 8006c26:	bf00      	nop
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}
 8006c2e:	bf00      	nop
 8006c30:	1fff7590 	.word	0x1fff7590
 8006c34:	1fff7594 	.word	0x1fff7594
 8006c38:	1fff7598 	.word	0x1fff7598
 8006c3c:	20000176 	.word	0x20000176
 8006c40:	20000186 	.word	0x20000186

08006c44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	60b9      	str	r1, [r7, #8]
 8006c4e:	4613      	mov	r3, r2
 8006c50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c52:	2300      	movs	r3, #0
 8006c54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c56:	2300      	movs	r3, #0
 8006c58:	75fb      	strb	r3, [r7, #23]
 8006c5a:	e027      	b.n	8006cac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	0f1b      	lsrs	r3, r3, #28
 8006c60:	2b09      	cmp	r3, #9
 8006c62:	d80b      	bhi.n	8006c7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	0f1b      	lsrs	r3, r3, #28
 8006c68:	b2da      	uxtb	r2, r3
 8006c6a:	7dfb      	ldrb	r3, [r7, #23]
 8006c6c:	005b      	lsls	r3, r3, #1
 8006c6e:	4619      	mov	r1, r3
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	440b      	add	r3, r1
 8006c74:	3230      	adds	r2, #48	; 0x30
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	e00a      	b.n	8006c92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	0f1b      	lsrs	r3, r3, #28
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	7dfb      	ldrb	r3, [r7, #23]
 8006c84:	005b      	lsls	r3, r3, #1
 8006c86:	4619      	mov	r1, r3
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	440b      	add	r3, r1
 8006c8c:	3237      	adds	r2, #55	; 0x37
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	011b      	lsls	r3, r3, #4
 8006c96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006c98:	7dfb      	ldrb	r3, [r7, #23]
 8006c9a:	005b      	lsls	r3, r3, #1
 8006c9c:	3301      	adds	r3, #1
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006ca6:	7dfb      	ldrb	r3, [r7, #23]
 8006ca8:	3301      	adds	r3, #1
 8006caa:	75fb      	strb	r3, [r7, #23]
 8006cac:	7dfa      	ldrb	r2, [r7, #23]
 8006cae:	79fb      	ldrb	r3, [r7, #7]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d3d3      	bcc.n	8006c5c <IntToUnicode+0x18>
  }
}
 8006cb4:	bf00      	nop
 8006cb6:	bf00      	nop
 8006cb8:	371c      	adds	r7, #28
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc0:	4770      	bx	lr
	...

08006cc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b0ae      	sub	sp, #184	; 0xb8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ccc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	605a      	str	r2, [r3, #4]
 8006cd6:	609a      	str	r2, [r3, #8]
 8006cd8:	60da      	str	r2, [r3, #12]
 8006cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006cdc:	f107 0318 	add.w	r3, r7, #24
 8006ce0:	228c      	movs	r2, #140	; 0x8c
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f000 fc63 	bl	80075b0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006cf2:	d173      	bne.n	8006ddc <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006cf4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006cf8:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8006cfa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006cfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8006d02:	2301      	movs	r3, #1
 8006d04:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8006d06:	2301      	movs	r3, #1
 8006d08:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8006d0a:	2318      	movs	r3, #24
 8006d0c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8006d0e:	2302      	movs	r3, #2
 8006d10:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8006d12:	2302      	movs	r3, #2
 8006d14:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8006d16:	2302      	movs	r3, #2
 8006d18:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8006d1a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8006d1e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006d20:	f107 0318 	add.w	r3, r7, #24
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7fc f98d 	bl	8003044 <HAL_RCCEx_PeriphCLKConfig>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d001      	beq.n	8006d34 <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 8006d30:	f7f9 fe61 	bl	80009f6 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d34:	4b2b      	ldr	r3, [pc, #172]	; (8006de4 <HAL_PCD_MspInit+0x120>)
 8006d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d38:	4a2a      	ldr	r2, [pc, #168]	; (8006de4 <HAL_PCD_MspInit+0x120>)
 8006d3a:	f043 0301 	orr.w	r3, r3, #1
 8006d3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d40:	4b28      	ldr	r3, [pc, #160]	; (8006de4 <HAL_PCD_MspInit+0x120>)
 8006d42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d44:	f003 0301 	and.w	r3, r3, #1
 8006d48:	617b      	str	r3, [r7, #20]
 8006d4a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006d4c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006d50:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d54:	2302      	movs	r3, #2
 8006d56:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d60:	2303      	movs	r3, #3
 8006d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d66:	230a      	movs	r3, #10
 8006d68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d6c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006d70:	4619      	mov	r1, r3
 8006d72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d76:	f7fa f881 	bl	8000e7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d7a:	4b1a      	ldr	r3, [pc, #104]	; (8006de4 <HAL_PCD_MspInit+0x120>)
 8006d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d7e:	4a19      	ldr	r2, [pc, #100]	; (8006de4 <HAL_PCD_MspInit+0x120>)
 8006d80:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d84:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006d86:	4b17      	ldr	r3, [pc, #92]	; (8006de4 <HAL_PCD_MspInit+0x120>)
 8006d88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d8e:	613b      	str	r3, [r7, #16]
 8006d90:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006d92:	4b14      	ldr	r3, [pc, #80]	; (8006de4 <HAL_PCD_MspInit+0x120>)
 8006d94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d114      	bne.n	8006dc8 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006d9e:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <HAL_PCD_MspInit+0x120>)
 8006da0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da2:	4a10      	ldr	r2, [pc, #64]	; (8006de4 <HAL_PCD_MspInit+0x120>)
 8006da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006da8:	6593      	str	r3, [r2, #88]	; 0x58
 8006daa:	4b0e      	ldr	r3, [pc, #56]	; (8006de4 <HAL_PCD_MspInit+0x120>)
 8006dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006db2:	60fb      	str	r3, [r7, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8006db6:	f7fb fb35 	bl	8002424 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dba:	4b0a      	ldr	r3, [pc, #40]	; (8006de4 <HAL_PCD_MspInit+0x120>)
 8006dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dbe:	4a09      	ldr	r2, [pc, #36]	; (8006de4 <HAL_PCD_MspInit+0x120>)
 8006dc0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dc4:	6593      	str	r3, [r2, #88]	; 0x58
 8006dc6:	e001      	b.n	8006dcc <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006dc8:	f7fb fb2c 	bl	8002424 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006dcc:	2200      	movs	r2, #0
 8006dce:	2100      	movs	r1, #0
 8006dd0:	2043      	movs	r0, #67	; 0x43
 8006dd2:	f7fa f81c 	bl	8000e0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006dd6:	2043      	movs	r0, #67	; 0x43
 8006dd8:	f7fa f835 	bl	8000e46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ddc:	bf00      	nop
 8006dde:	37b8      	adds	r7, #184	; 0xb8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	40021000 	.word	0x40021000

08006de8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b082      	sub	sp, #8
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	4610      	mov	r0, r2
 8006e00:	f7fe fc46 	bl	8005690 <USBD_LL_SetupStage>
}
 8006e04:	bf00      	nop
 8006e06:	3708      	adds	r7, #8
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b082      	sub	sp, #8
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006e1e:	78fa      	ldrb	r2, [r7, #3]
 8006e20:	6879      	ldr	r1, [r7, #4]
 8006e22:	4613      	mov	r3, r2
 8006e24:	00db      	lsls	r3, r3, #3
 8006e26:	1a9b      	subs	r3, r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	440b      	add	r3, r1
 8006e2c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	4619      	mov	r1, r3
 8006e36:	f7fe fc80 	bl	800573a <USBD_LL_DataOutStage>
}
 8006e3a:	bf00      	nop
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b082      	sub	sp, #8
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
 8006e4a:	460b      	mov	r3, r1
 8006e4c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006e54:	78fa      	ldrb	r2, [r7, #3]
 8006e56:	6879      	ldr	r1, [r7, #4]
 8006e58:	4613      	mov	r3, r2
 8006e5a:	00db      	lsls	r3, r3, #3
 8006e5c:	1a9b      	subs	r3, r3, r2
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	440b      	add	r3, r1
 8006e62:	3348      	adds	r3, #72	; 0x48
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	78fb      	ldrb	r3, [r7, #3]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	f7fe fcc9 	bl	8005800 <USBD_LL_DataInStage>
}
 8006e6e:	bf00      	nop
 8006e70:	3708      	adds	r7, #8
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b082      	sub	sp, #8
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006e84:	4618      	mov	r0, r3
 8006e86:	f7fe fddd 	bl	8005a44 <USBD_LL_SOF>
}
 8006e8a:	bf00      	nop
 8006e8c:	3708      	adds	r7, #8
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	68db      	ldr	r3, [r3, #12]
 8006ea2:	2b02      	cmp	r3, #2
 8006ea4:	d001      	beq.n	8006eaa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006ea6:	f7f9 fda6 	bl	80009f6 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006eb0:	7bfa      	ldrb	r2, [r7, #15]
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f7fe fd87 	bl	80059c8 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fe fd33 	bl	800592c <USBD_LL_Reset>
}
 8006ec6:	bf00      	nop
 8006ec8:	3710      	adds	r7, #16
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}
	...

08006ed0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b082      	sub	sp, #8
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	687a      	ldr	r2, [r7, #4]
 8006ee4:	6812      	ldr	r2, [r2, #0]
 8006ee6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006eea:	f043 0301 	orr.w	r3, r3, #1
 8006eee:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f7fe fd76 	bl	80059e8 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d005      	beq.n	8006f10 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f04:	4b04      	ldr	r3, [pc, #16]	; (8006f18 <HAL_PCD_SuspendCallback+0x48>)
 8006f06:	691b      	ldr	r3, [r3, #16]
 8006f08:	4a03      	ldr	r2, [pc, #12]	; (8006f18 <HAL_PCD_SuspendCallback+0x48>)
 8006f0a:	f043 0306 	orr.w	r3, r3, #6
 8006f0e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006f10:	bf00      	nop
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	e000ed00 	.word	0xe000ed00

08006f1c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b082      	sub	sp, #8
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6812      	ldr	r2, [r2, #0]
 8006f32:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006f36:	f023 0301 	bic.w	r3, r3, #1
 8006f3a:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6a1b      	ldr	r3, [r3, #32]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d007      	beq.n	8006f54 <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006f44:	4b08      	ldr	r3, [pc, #32]	; (8006f68 <HAL_PCD_ResumeCallback+0x4c>)
 8006f46:	691b      	ldr	r3, [r3, #16]
 8006f48:	4a07      	ldr	r2, [pc, #28]	; (8006f68 <HAL_PCD_ResumeCallback+0x4c>)
 8006f4a:	f023 0306 	bic.w	r3, r3, #6
 8006f4e:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006f50:	f000 faf6 	bl	8007540 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe fd5a 	bl	8005a14 <USBD_LL_Resume>
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}
 8006f68:	e000ed00 	.word	0xe000ed00

08006f6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b082      	sub	sp, #8
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	460b      	mov	r3, r1
 8006f76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006f7e:	78fa      	ldrb	r2, [r7, #3]
 8006f80:	4611      	mov	r1, r2
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fda6 	bl	8005ad4 <USBD_LL_IsoOUTIncomplete>
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b082      	sub	sp, #8
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fa2:	78fa      	ldrb	r2, [r7, #3]
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe fd6e 	bl	8005a88 <USBD_LL_IsoINIncomplete>
}
 8006fac:	bf00      	nop
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b082      	sub	sp, #8
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	f7fe fdac 	bl	8005b20 <USBD_LL_DevConnected>
}
 8006fc8:	bf00      	nop
 8006fca:	3708      	adds	r7, #8
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	bd80      	pop	{r7, pc}

08006fd0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006fde:	4618      	mov	r0, r3
 8006fe0:	f7fe fda9 	bl	8005b36 <USBD_LL_DevDisconnected>
}
 8006fe4:	bf00      	nop
 8006fe6:	3708      	adds	r7, #8
 8006fe8:	46bd      	mov	sp, r7
 8006fea:	bd80      	pop	{r7, pc}

08006fec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d13c      	bne.n	8007076 <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006ffc:	4a20      	ldr	r2, [pc, #128]	; (8007080 <USBD_LL_Init+0x94>)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	4a1e      	ldr	r2, [pc, #120]	; (8007080 <USBD_LL_Init+0x94>)
 8007008:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800700c:	4b1c      	ldr	r3, [pc, #112]	; (8007080 <USBD_LL_Init+0x94>)
 800700e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007012:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8007014:	4b1a      	ldr	r3, [pc, #104]	; (8007080 <USBD_LL_Init+0x94>)
 8007016:	2206      	movs	r2, #6
 8007018:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800701a:	4b19      	ldr	r3, [pc, #100]	; (8007080 <USBD_LL_Init+0x94>)
 800701c:	2202      	movs	r2, #2
 800701e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007020:	4b17      	ldr	r3, [pc, #92]	; (8007080 <USBD_LL_Init+0x94>)
 8007022:	2202      	movs	r2, #2
 8007024:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007026:	4b16      	ldr	r3, [pc, #88]	; (8007080 <USBD_LL_Init+0x94>)
 8007028:	2200      	movs	r2, #0
 800702a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800702c:	4b14      	ldr	r3, [pc, #80]	; (8007080 <USBD_LL_Init+0x94>)
 800702e:	2200      	movs	r2, #0
 8007030:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007032:	4b13      	ldr	r3, [pc, #76]	; (8007080 <USBD_LL_Init+0x94>)
 8007034:	2200      	movs	r2, #0
 8007036:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8007038:	4b11      	ldr	r3, [pc, #68]	; (8007080 <USBD_LL_Init+0x94>)
 800703a:	2200      	movs	r2, #0
 800703c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800703e:	4b10      	ldr	r3, [pc, #64]	; (8007080 <USBD_LL_Init+0x94>)
 8007040:	2200      	movs	r2, #0
 8007042:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007044:	4b0e      	ldr	r3, [pc, #56]	; (8007080 <USBD_LL_Init+0x94>)
 8007046:	2200      	movs	r2, #0
 8007048:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800704a:	480d      	ldr	r0, [pc, #52]	; (8007080 <USBD_LL_Init+0x94>)
 800704c:	f7fa f8f2 	bl	8001234 <HAL_PCD_Init>
 8007050:	4603      	mov	r3, r0
 8007052:	2b00      	cmp	r3, #0
 8007054:	d001      	beq.n	800705a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007056:	f7f9 fcce 	bl	80009f6 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800705a:	2180      	movs	r1, #128	; 0x80
 800705c:	4808      	ldr	r0, [pc, #32]	; (8007080 <USBD_LL_Init+0x94>)
 800705e:	f7fb f948 	bl	80022f2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007062:	2240      	movs	r2, #64	; 0x40
 8007064:	2100      	movs	r1, #0
 8007066:	4806      	ldr	r0, [pc, #24]	; (8007080 <USBD_LL_Init+0x94>)
 8007068:	f7fb f8fc 	bl	8002264 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800706c:	2280      	movs	r2, #128	; 0x80
 800706e:	2101      	movs	r1, #1
 8007070:	4803      	ldr	r0, [pc, #12]	; (8007080 <USBD_LL_Init+0x94>)
 8007072:	f7fb f8f7 	bl	8002264 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3708      	adds	r7, #8
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20001960 	.word	0x20001960

08007084 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b084      	sub	sp, #16
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007090:	2300      	movs	r3, #0
 8007092:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800709a:	4618      	mov	r0, r3
 800709c:	f7fa f9ee 	bl	800147c <HAL_PCD_Start>
 80070a0:	4603      	mov	r3, r0
 80070a2:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80070a4:	7bbb      	ldrb	r3, [r7, #14]
 80070a6:	2b03      	cmp	r3, #3
 80070a8:	d816      	bhi.n	80070d8 <USBD_LL_Start+0x54>
 80070aa:	a201      	add	r2, pc, #4	; (adr r2, 80070b0 <USBD_LL_Start+0x2c>)
 80070ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070b0:	080070c1 	.word	0x080070c1
 80070b4:	080070c7 	.word	0x080070c7
 80070b8:	080070cd 	.word	0x080070cd
 80070bc:	080070d3 	.word	0x080070d3
    case HAL_OK :
      usb_status = USBD_OK;
 80070c0:	2300      	movs	r3, #0
 80070c2:	73fb      	strb	r3, [r7, #15]
    break;
 80070c4:	e00b      	b.n	80070de <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070c6:	2303      	movs	r3, #3
 80070c8:	73fb      	strb	r3, [r7, #15]
    break;
 80070ca:	e008      	b.n	80070de <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070cc:	2301      	movs	r3, #1
 80070ce:	73fb      	strb	r3, [r7, #15]
    break;
 80070d0:	e005      	b.n	80070de <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070d2:	2303      	movs	r3, #3
 80070d4:	73fb      	strb	r3, [r7, #15]
    break;
 80070d6:	e002      	b.n	80070de <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 80070d8:	2303      	movs	r3, #3
 80070da:	73fb      	strb	r3, [r7, #15]
    break;
 80070dc:	bf00      	nop
  }
  return usb_status;
 80070de:	7bfb      	ldrb	r3, [r7, #15]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	3710      	adds	r7, #16
 80070e4:	46bd      	mov	sp, r7
 80070e6:	bd80      	pop	{r7, pc}

080070e8 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b084      	sub	sp, #16
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
 80070f0:	4608      	mov	r0, r1
 80070f2:	4611      	mov	r1, r2
 80070f4:	461a      	mov	r2, r3
 80070f6:	4603      	mov	r3, r0
 80070f8:	70fb      	strb	r3, [r7, #3]
 80070fa:	460b      	mov	r3, r1
 80070fc:	70bb      	strb	r3, [r7, #2]
 80070fe:	4613      	mov	r3, r2
 8007100:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007106:	2300      	movs	r3, #0
 8007108:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007110:	78bb      	ldrb	r3, [r7, #2]
 8007112:	883a      	ldrh	r2, [r7, #0]
 8007114:	78f9      	ldrb	r1, [r7, #3]
 8007116:	f7fa fd9e 	bl	8001c56 <HAL_PCD_EP_Open>
 800711a:	4603      	mov	r3, r0
 800711c:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	2b03      	cmp	r3, #3
 8007122:	d817      	bhi.n	8007154 <USBD_LL_OpenEP+0x6c>
 8007124:	a201      	add	r2, pc, #4	; (adr r2, 800712c <USBD_LL_OpenEP+0x44>)
 8007126:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800712a:	bf00      	nop
 800712c:	0800713d 	.word	0x0800713d
 8007130:	08007143 	.word	0x08007143
 8007134:	08007149 	.word	0x08007149
 8007138:	0800714f 	.word	0x0800714f
    case HAL_OK :
      usb_status = USBD_OK;
 800713c:	2300      	movs	r3, #0
 800713e:	73fb      	strb	r3, [r7, #15]
    break;
 8007140:	e00b      	b.n	800715a <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007142:	2303      	movs	r3, #3
 8007144:	73fb      	strb	r3, [r7, #15]
    break;
 8007146:	e008      	b.n	800715a <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007148:	2301      	movs	r3, #1
 800714a:	73fb      	strb	r3, [r7, #15]
    break;
 800714c:	e005      	b.n	800715a <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800714e:	2303      	movs	r3, #3
 8007150:	73fb      	strb	r3, [r7, #15]
    break;
 8007152:	e002      	b.n	800715a <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8007154:	2303      	movs	r3, #3
 8007156:	73fb      	strb	r3, [r7, #15]
    break;
 8007158:	bf00      	nop
  }
  return usb_status;
 800715a:	7bfb      	ldrb	r3, [r7, #15]
}
 800715c:	4618      	mov	r0, r3
 800715e:	3710      	adds	r7, #16
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b084      	sub	sp, #16
 8007168:	af00      	add	r7, sp, #0
 800716a:	6078      	str	r0, [r7, #4]
 800716c:	460b      	mov	r3, r1
 800716e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007170:	2300      	movs	r3, #0
 8007172:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007174:	2300      	movs	r3, #0
 8007176:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800717e:	78fa      	ldrb	r2, [r7, #3]
 8007180:	4611      	mov	r1, r2
 8007182:	4618      	mov	r0, r3
 8007184:	f7fa fdcf 	bl	8001d26 <HAL_PCD_EP_Close>
 8007188:	4603      	mov	r3, r0
 800718a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 800718c:	7bbb      	ldrb	r3, [r7, #14]
 800718e:	2b03      	cmp	r3, #3
 8007190:	d816      	bhi.n	80071c0 <USBD_LL_CloseEP+0x5c>
 8007192:	a201      	add	r2, pc, #4	; (adr r2, 8007198 <USBD_LL_CloseEP+0x34>)
 8007194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007198:	080071a9 	.word	0x080071a9
 800719c:	080071af 	.word	0x080071af
 80071a0:	080071b5 	.word	0x080071b5
 80071a4:	080071bb 	.word	0x080071bb
    case HAL_OK :
      usb_status = USBD_OK;
 80071a8:	2300      	movs	r3, #0
 80071aa:	73fb      	strb	r3, [r7, #15]
    break;
 80071ac:	e00b      	b.n	80071c6 <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80071ae:	2303      	movs	r3, #3
 80071b0:	73fb      	strb	r3, [r7, #15]
    break;
 80071b2:	e008      	b.n	80071c6 <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80071b4:	2301      	movs	r3, #1
 80071b6:	73fb      	strb	r3, [r7, #15]
    break;
 80071b8:	e005      	b.n	80071c6 <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80071ba:	2303      	movs	r3, #3
 80071bc:	73fb      	strb	r3, [r7, #15]
    break;
 80071be:	e002      	b.n	80071c6 <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 80071c0:	2303      	movs	r3, #3
 80071c2:	73fb      	strb	r3, [r7, #15]
    break;
 80071c4:	bf00      	nop
  }
  return usb_status;
 80071c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c8:	4618      	mov	r0, r3
 80071ca:	3710      	adds	r7, #16
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
 80071d8:	460b      	mov	r3, r1
 80071da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071dc:	2300      	movs	r3, #0
 80071de:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80071ea:	78fa      	ldrb	r2, [r7, #3]
 80071ec:	4611      	mov	r1, r2
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fa fe76 	bl	8001ee0 <HAL_PCD_EP_SetStall>
 80071f4:	4603      	mov	r3, r0
 80071f6:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d816      	bhi.n	800722c <USBD_LL_StallEP+0x5c>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <USBD_LL_StallEP+0x34>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007215 	.word	0x08007215
 8007208:	0800721b 	.word	0x0800721b
 800720c:	08007221 	.word	0x08007221
 8007210:	08007227 	.word	0x08007227
    case HAL_OK :
      usb_status = USBD_OK;
 8007214:	2300      	movs	r3, #0
 8007216:	73fb      	strb	r3, [r7, #15]
    break;
 8007218:	e00b      	b.n	8007232 <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800721a:	2303      	movs	r3, #3
 800721c:	73fb      	strb	r3, [r7, #15]
    break;
 800721e:	e008      	b.n	8007232 <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007220:	2301      	movs	r3, #1
 8007222:	73fb      	strb	r3, [r7, #15]
    break;
 8007224:	e005      	b.n	8007232 <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007226:	2303      	movs	r3, #3
 8007228:	73fb      	strb	r3, [r7, #15]
    break;
 800722a:	e002      	b.n	8007232 <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 800722c:	2303      	movs	r3, #3
 800722e:	73fb      	strb	r3, [r7, #15]
    break;
 8007230:	bf00      	nop
  }
  return usb_status;
 8007232:	7bfb      	ldrb	r3, [r7, #15]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
 8007244:	460b      	mov	r3, r1
 8007246:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007256:	78fa      	ldrb	r2, [r7, #3]
 8007258:	4611      	mov	r1, r2
 800725a:	4618      	mov	r0, r3
 800725c:	f7fa fea2 	bl	8001fa4 <HAL_PCD_EP_ClrStall>
 8007260:	4603      	mov	r3, r0
 8007262:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007264:	7bbb      	ldrb	r3, [r7, #14]
 8007266:	2b03      	cmp	r3, #3
 8007268:	d816      	bhi.n	8007298 <USBD_LL_ClearStallEP+0x5c>
 800726a:	a201      	add	r2, pc, #4	; (adr r2, 8007270 <USBD_LL_ClearStallEP+0x34>)
 800726c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007270:	08007281 	.word	0x08007281
 8007274:	08007287 	.word	0x08007287
 8007278:	0800728d 	.word	0x0800728d
 800727c:	08007293 	.word	0x08007293
    case HAL_OK :
      usb_status = USBD_OK;
 8007280:	2300      	movs	r3, #0
 8007282:	73fb      	strb	r3, [r7, #15]
    break;
 8007284:	e00b      	b.n	800729e <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007286:	2303      	movs	r3, #3
 8007288:	73fb      	strb	r3, [r7, #15]
    break;
 800728a:	e008      	b.n	800729e <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800728c:	2301      	movs	r3, #1
 800728e:	73fb      	strb	r3, [r7, #15]
    break;
 8007290:	e005      	b.n	800729e <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007292:	2303      	movs	r3, #3
 8007294:	73fb      	strb	r3, [r7, #15]
    break;
 8007296:	e002      	b.n	800729e <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8007298:	2303      	movs	r3, #3
 800729a:	73fb      	strb	r3, [r7, #15]
    break;
 800729c:	bf00      	nop
  }
  return usb_status;
 800729e:	7bfb      	ldrb	r3, [r7, #15]
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
 80072b0:	460b      	mov	r3, r1
 80072b2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 80072ba:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80072bc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	da0b      	bge.n	80072dc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80072c4:	78fb      	ldrb	r3, [r7, #3]
 80072c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ca:	68f9      	ldr	r1, [r7, #12]
 80072cc:	4613      	mov	r3, r2
 80072ce:	00db      	lsls	r3, r3, #3
 80072d0:	1a9b      	subs	r3, r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	333e      	adds	r3, #62	; 0x3e
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	e00b      	b.n	80072f4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80072dc:	78fb      	ldrb	r3, [r7, #3]
 80072de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072e2:	68f9      	ldr	r1, [r7, #12]
 80072e4:	4613      	mov	r3, r2
 80072e6:	00db      	lsls	r3, r3, #3
 80072e8:	1a9b      	subs	r3, r3, r2
 80072ea:	009b      	lsls	r3, r3, #2
 80072ec:	440b      	add	r3, r1
 80072ee:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80072f2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80072f4:	4618      	mov	r0, r3
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr

08007300 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b084      	sub	sp, #16
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
 8007308:	460b      	mov	r3, r1
 800730a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800730c:	2300      	movs	r3, #0
 800730e:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007310:	2300      	movs	r3, #0
 8007312:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800731a:	78fa      	ldrb	r2, [r7, #3]
 800731c:	4611      	mov	r1, r2
 800731e:	4618      	mov	r0, r3
 8007320:	f7fa fc74 	bl	8001c0c <HAL_PCD_SetAddress>
 8007324:	4603      	mov	r3, r0
 8007326:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8007328:	7bbb      	ldrb	r3, [r7, #14]
 800732a:	2b03      	cmp	r3, #3
 800732c:	d816      	bhi.n	800735c <USBD_LL_SetUSBAddress+0x5c>
 800732e:	a201      	add	r2, pc, #4	; (adr r2, 8007334 <USBD_LL_SetUSBAddress+0x34>)
 8007330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007334:	08007345 	.word	0x08007345
 8007338:	0800734b 	.word	0x0800734b
 800733c:	08007351 	.word	0x08007351
 8007340:	08007357 	.word	0x08007357
    case HAL_OK :
      usb_status = USBD_OK;
 8007344:	2300      	movs	r3, #0
 8007346:	73fb      	strb	r3, [r7, #15]
    break;
 8007348:	e00b      	b.n	8007362 <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800734a:	2303      	movs	r3, #3
 800734c:	73fb      	strb	r3, [r7, #15]
    break;
 800734e:	e008      	b.n	8007362 <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007350:	2301      	movs	r3, #1
 8007352:	73fb      	strb	r3, [r7, #15]
    break;
 8007354:	e005      	b.n	8007362 <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007356:	2303      	movs	r3, #3
 8007358:	73fb      	strb	r3, [r7, #15]
    break;
 800735a:	e002      	b.n	8007362 <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 800735c:	2303      	movs	r3, #3
 800735e:	73fb      	strb	r3, [r7, #15]
    break;
 8007360:	bf00      	nop
  }
  return usb_status;
 8007362:	7bfb      	ldrb	r3, [r7, #15]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3710      	adds	r7, #16
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b086      	sub	sp, #24
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	607a      	str	r2, [r7, #4]
 8007376:	603b      	str	r3, [r7, #0]
 8007378:	460b      	mov	r3, r1
 800737a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800737c:	2300      	movs	r3, #0
 800737e:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007380:	2300      	movs	r3, #0
 8007382:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800738a:	7af9      	ldrb	r1, [r7, #11]
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	f7fa fd69 	bl	8001e66 <HAL_PCD_EP_Transmit>
 8007394:	4603      	mov	r3, r0
 8007396:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007398:	7dbb      	ldrb	r3, [r7, #22]
 800739a:	2b03      	cmp	r3, #3
 800739c:	d816      	bhi.n	80073cc <USBD_LL_Transmit+0x60>
 800739e:	a201      	add	r2, pc, #4	; (adr r2, 80073a4 <USBD_LL_Transmit+0x38>)
 80073a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073a4:	080073b5 	.word	0x080073b5
 80073a8:	080073bb 	.word	0x080073bb
 80073ac:	080073c1 	.word	0x080073c1
 80073b0:	080073c7 	.word	0x080073c7
    case HAL_OK :
      usb_status = USBD_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	75fb      	strb	r3, [r7, #23]
    break;
 80073b8:	e00b      	b.n	80073d2 <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80073ba:	2303      	movs	r3, #3
 80073bc:	75fb      	strb	r3, [r7, #23]
    break;
 80073be:	e008      	b.n	80073d2 <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80073c0:	2301      	movs	r3, #1
 80073c2:	75fb      	strb	r3, [r7, #23]
    break;
 80073c4:	e005      	b.n	80073d2 <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80073c6:	2303      	movs	r3, #3
 80073c8:	75fb      	strb	r3, [r7, #23]
    break;
 80073ca:	e002      	b.n	80073d2 <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 80073cc:	2303      	movs	r3, #3
 80073ce:	75fb      	strb	r3, [r7, #23]
    break;
 80073d0:	bf00      	nop
  }
  return usb_status;
 80073d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b086      	sub	sp, #24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	607a      	str	r2, [r7, #4]
 80073e6:	603b      	str	r3, [r7, #0]
 80073e8:	460b      	mov	r3, r1
 80073ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073ec:	2300      	movs	r3, #0
 80073ee:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80073fa:	7af9      	ldrb	r1, [r7, #11]
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	f7fa fcdb 	bl	8001dba <HAL_PCD_EP_Receive>
 8007404:	4603      	mov	r3, r0
 8007406:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007408:	7dbb      	ldrb	r3, [r7, #22]
 800740a:	2b03      	cmp	r3, #3
 800740c:	d816      	bhi.n	800743c <USBD_LL_PrepareReceive+0x60>
 800740e:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <USBD_LL_PrepareReceive+0x38>)
 8007410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007414:	08007425 	.word	0x08007425
 8007418:	0800742b 	.word	0x0800742b
 800741c:	08007431 	.word	0x08007431
 8007420:	08007437 	.word	0x08007437
    case HAL_OK :
      usb_status = USBD_OK;
 8007424:	2300      	movs	r3, #0
 8007426:	75fb      	strb	r3, [r7, #23]
    break;
 8007428:	e00b      	b.n	8007442 <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800742a:	2303      	movs	r3, #3
 800742c:	75fb      	strb	r3, [r7, #23]
    break;
 800742e:	e008      	b.n	8007442 <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007430:	2301      	movs	r3, #1
 8007432:	75fb      	strb	r3, [r7, #23]
    break;
 8007434:	e005      	b.n	8007442 <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007436:	2303      	movs	r3, #3
 8007438:	75fb      	strb	r3, [r7, #23]
    break;
 800743a:	e002      	b.n	8007442 <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 800743c:	2303      	movs	r3, #3
 800743e:	75fb      	strb	r3, [r7, #23]
    break;
 8007440:	bf00      	nop
  }
  return usb_status;
 8007442:	7dfb      	ldrb	r3, [r7, #23]
}
 8007444:	4618      	mov	r0, r3
 8007446:	3718      	adds	r7, #24
 8007448:	46bd      	mov	sp, r7
 800744a:	bd80      	pop	{r7, pc}

0800744c <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b082      	sub	sp, #8
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	460b      	mov	r3, r1
 8007456:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800745e:	78fa      	ldrb	r2, [r7, #3]
 8007460:	4611      	mov	r1, r2
 8007462:	4618      	mov	r0, r3
 8007464:	f7fa fce7 	bl	8001e36 <HAL_PCD_EP_GetRxCount>
 8007468:	4603      	mov	r3, r0
}
 800746a:	4618      	mov	r0, r3
 800746c:	3708      	adds	r7, #8
 800746e:	46bd      	mov	sp, r7
 8007470:	bd80      	pop	{r7, pc}
	...

08007474 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b082      	sub	sp, #8
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	460b      	mov	r3, r1
 800747e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d002      	beq.n	800748c <HAL_PCDEx_LPM_Callback+0x18>
 8007486:	2b01      	cmp	r3, #1
 8007488:	d01f      	beq.n	80074ca <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 800748a:	e03b      	b.n	8007504 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	6a1b      	ldr	r3, [r3, #32]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d007      	beq.n	80074a4 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8007494:	f000 f854 	bl	8007540 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007498:	4b1c      	ldr	r3, [pc, #112]	; (800750c <HAL_PCDEx_LPM_Callback+0x98>)
 800749a:	691b      	ldr	r3, [r3, #16]
 800749c:	4a1b      	ldr	r2, [pc, #108]	; (800750c <HAL_PCDEx_LPM_Callback+0x98>)
 800749e:	f023 0306 	bic.w	r3, r3, #6
 80074a2:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	687a      	ldr	r2, [r7, #4]
 80074b0:	6812      	ldr	r2, [r2, #0]
 80074b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074b6:	f023 0301 	bic.w	r3, r3, #1
 80074ba:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074c2:	4618      	mov	r0, r3
 80074c4:	f7fe faa6 	bl	8005a14 <USBD_LL_Resume>
    break;
 80074c8:	e01c      	b.n	8007504 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	687a      	ldr	r2, [r7, #4]
 80074d6:	6812      	ldr	r2, [r2, #0]
 80074d8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80074dc:	f043 0301 	orr.w	r3, r3, #1
 80074e0:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fe fa7d 	bl	80059e8 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	6a1b      	ldr	r3, [r3, #32]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d005      	beq.n	8007502 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80074f6:	4b05      	ldr	r3, [pc, #20]	; (800750c <HAL_PCDEx_LPM_Callback+0x98>)
 80074f8:	691b      	ldr	r3, [r3, #16]
 80074fa:	4a04      	ldr	r2, [pc, #16]	; (800750c <HAL_PCDEx_LPM_Callback+0x98>)
 80074fc:	f043 0306 	orr.w	r3, r3, #6
 8007500:	6113      	str	r3, [r2, #16]
    break;
 8007502:	bf00      	nop
}
 8007504:	bf00      	nop
 8007506:	3708      	adds	r7, #8
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}
 800750c:	e000ed00 	.word	0xe000ed00

08007510 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007510:	b480      	push	{r7}
 8007512:	b083      	sub	sp, #12
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007518:	4b03      	ldr	r3, [pc, #12]	; (8007528 <USBD_static_malloc+0x18>)
}
 800751a:	4618      	mov	r0, r3
 800751c:	370c      	adds	r7, #12
 800751e:	46bd      	mov	sp, r7
 8007520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007524:	4770      	bx	lr
 8007526:	bf00      	nop
 8007528:	2000022c 	.word	0x2000022c

0800752c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800752c:	b480      	push	{r7}
 800752e:	b083      	sub	sp, #12
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]

}
 8007534:	bf00      	nop
 8007536:	370c      	adds	r7, #12
 8007538:	46bd      	mov	sp, r7
 800753a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753e:	4770      	bx	lr

08007540 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8007544:	f7f9 fa01 	bl	800094a <SystemClock_Config>
}
 8007548:	bf00      	nop
 800754a:	bd80      	pop	{r7, pc}

0800754c <__libc_init_array>:
 800754c:	b570      	push	{r4, r5, r6, lr}
 800754e:	4d0d      	ldr	r5, [pc, #52]	; (8007584 <__libc_init_array+0x38>)
 8007550:	4c0d      	ldr	r4, [pc, #52]	; (8007588 <__libc_init_array+0x3c>)
 8007552:	1b64      	subs	r4, r4, r5
 8007554:	10a4      	asrs	r4, r4, #2
 8007556:	2600      	movs	r6, #0
 8007558:	42a6      	cmp	r6, r4
 800755a:	d109      	bne.n	8007570 <__libc_init_array+0x24>
 800755c:	4d0b      	ldr	r5, [pc, #44]	; (800758c <__libc_init_array+0x40>)
 800755e:	4c0c      	ldr	r4, [pc, #48]	; (8007590 <__libc_init_array+0x44>)
 8007560:	f000 f82e 	bl	80075c0 <_init>
 8007564:	1b64      	subs	r4, r4, r5
 8007566:	10a4      	asrs	r4, r4, #2
 8007568:	2600      	movs	r6, #0
 800756a:	42a6      	cmp	r6, r4
 800756c:	d105      	bne.n	800757a <__libc_init_array+0x2e>
 800756e:	bd70      	pop	{r4, r5, r6, pc}
 8007570:	f855 3b04 	ldr.w	r3, [r5], #4
 8007574:	4798      	blx	r3
 8007576:	3601      	adds	r6, #1
 8007578:	e7ee      	b.n	8007558 <__libc_init_array+0xc>
 800757a:	f855 3b04 	ldr.w	r3, [r5], #4
 800757e:	4798      	blx	r3
 8007580:	3601      	adds	r6, #1
 8007582:	e7f2      	b.n	800756a <__libc_init_array+0x1e>
 8007584:	080077c0 	.word	0x080077c0
 8007588:	080077c0 	.word	0x080077c0
 800758c:	080077c0 	.word	0x080077c0
 8007590:	080077c4 	.word	0x080077c4

08007594 <memcpy>:
 8007594:	440a      	add	r2, r1
 8007596:	4291      	cmp	r1, r2
 8007598:	f100 33ff 	add.w	r3, r0, #4294967295
 800759c:	d100      	bne.n	80075a0 <memcpy+0xc>
 800759e:	4770      	bx	lr
 80075a0:	b510      	push	{r4, lr}
 80075a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80075a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80075aa:	4291      	cmp	r1, r2
 80075ac:	d1f9      	bne.n	80075a2 <memcpy+0xe>
 80075ae:	bd10      	pop	{r4, pc}

080075b0 <memset>:
 80075b0:	4402      	add	r2, r0
 80075b2:	4603      	mov	r3, r0
 80075b4:	4293      	cmp	r3, r2
 80075b6:	d100      	bne.n	80075ba <memset+0xa>
 80075b8:	4770      	bx	lr
 80075ba:	f803 1b01 	strb.w	r1, [r3], #1
 80075be:	e7f9      	b.n	80075b4 <memset+0x4>

080075c0 <_init>:
 80075c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075c2:	bf00      	nop
 80075c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075c6:	bc08      	pop	{r3}
 80075c8:	469e      	mov	lr, r3
 80075ca:	4770      	bx	lr

080075cc <_fini>:
 80075cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ce:	bf00      	nop
 80075d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80075d2:	bc08      	pop	{r3}
 80075d4:	469e      	mov	lr, r3
 80075d6:	4770      	bx	lr
