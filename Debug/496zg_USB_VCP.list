
496zg_USB_VCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000710c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001dc  080072b8  080072b8  000172b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007494  08007494  00020190  2**0
                  CONTENTS
  4 .ARM          00000000  08007494  08007494  00020190  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007494  08007494  00020190  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007494  08007494  00017494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007498  08007498  00017498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000190  20000000  0800749c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ba8  20000190  0800762c  00020190  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d38  0800762c  00021d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY
 12 .debug_info   000179cb  00000000  00000000  000201c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003434  00000000  00000000  00037b8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e58  00000000  00000000  0003afc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cf0  00000000  00000000  0003be18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002af69  00000000  00000000  0003cb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a59  00000000  00000000  00067a71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f69c2  00000000  00000000  000794ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0016fe8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003904  00000000  00000000  0016fee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000190 	.word	0x20000190
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080072a0 	.word	0x080072a0

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000194 	.word	0x20000194
 80001e8:	080072a0 	.word	0x080072a0

080001ec <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80001ec:	b580      	push	{r7, lr}
 80001ee:	b088      	sub	sp, #32
 80001f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001f2:	f107 030c 	add.w	r3, r7, #12
 80001f6:	2200      	movs	r2, #0
 80001f8:	601a      	str	r2, [r3, #0]
 80001fa:	605a      	str	r2, [r3, #4]
 80001fc:	609a      	str	r2, [r3, #8]
 80001fe:	60da      	str	r2, [r3, #12]
 8000200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000202:	4b33      	ldr	r3, [pc, #204]	; (80002d0 <MX_GPIO_Init+0xe4>)
 8000204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000206:	4a32      	ldr	r2, [pc, #200]	; (80002d0 <MX_GPIO_Init+0xe4>)
 8000208:	f043 0304 	orr.w	r3, r3, #4
 800020c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800020e:	4b30      	ldr	r3, [pc, #192]	; (80002d0 <MX_GPIO_Init+0xe4>)
 8000210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000212:	f003 0304 	and.w	r3, r3, #4
 8000216:	60bb      	str	r3, [r7, #8]
 8000218:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800021a:	4b2d      	ldr	r3, [pc, #180]	; (80002d0 <MX_GPIO_Init+0xe4>)
 800021c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800021e:	4a2c      	ldr	r2, [pc, #176]	; (80002d0 <MX_GPIO_Init+0xe4>)
 8000220:	f043 0302 	orr.w	r3, r3, #2
 8000224:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000226:	4b2a      	ldr	r3, [pc, #168]	; (80002d0 <MX_GPIO_Init+0xe4>)
 8000228:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800022a:	f003 0302 	and.w	r3, r3, #2
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000232:	4b27      	ldr	r3, [pc, #156]	; (80002d0 <MX_GPIO_Init+0xe4>)
 8000234:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000236:	4a26      	ldr	r2, [pc, #152]	; (80002d0 <MX_GPIO_Init+0xe4>)
 8000238:	f043 0301 	orr.w	r3, r3, #1
 800023c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800023e:	4b24      	ldr	r3, [pc, #144]	; (80002d0 <MX_GPIO_Init+0xe4>)
 8000240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000242:	f003 0301 	and.w	r3, r3, #1
 8000246:	603b      	str	r3, [r7, #0]
 8000248:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED3_Pin|LED2_Pin, GPIO_PIN_RESET);
 800024a:	2200      	movs	r2, #0
 800024c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000250:	4820      	ldr	r0, [pc, #128]	; (80002d4 <MX_GPIO_Init+0xe8>)
 8000252:	f000 fdf9 	bl	8000e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8000256:	2200      	movs	r2, #0
 8000258:	2180      	movs	r1, #128	; 0x80
 800025a:	481f      	ldr	r0, [pc, #124]	; (80002d8 <MX_GPIO_Init+0xec>)
 800025c:	f000 fdf4 	bl	8000e48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Button1_Pin;
 8000260:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000264:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000266:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800026a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800026c:	2302      	movs	r3, #2
 800026e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button1_GPIO_Port, &GPIO_InitStruct);
 8000270:	f107 030c 	add.w	r3, r7, #12
 8000274:	4619      	mov	r1, r3
 8000276:	4818      	ldr	r0, [pc, #96]	; (80002d8 <MX_GPIO_Init+0xec>)
 8000278:	f000 fc54 	bl	8000b24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED3_Pin|LED2_Pin;
 800027c:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000282:	2301      	movs	r3, #1
 8000284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000286:	2300      	movs	r3, #0
 8000288:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800028a:	2300      	movs	r3, #0
 800028c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800028e:	f107 030c 	add.w	r3, r7, #12
 8000292:	4619      	mov	r1, r3
 8000294:	480f      	ldr	r0, [pc, #60]	; (80002d4 <MX_GPIO_Init+0xe8>)
 8000296:	f000 fc45 	bl	8000b24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800029a:	2380      	movs	r3, #128	; 0x80
 800029c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800029e:	2301      	movs	r3, #1
 80002a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80002a2:	2300      	movs	r3, #0
 80002a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80002a6:	2300      	movs	r3, #0
 80002a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80002aa:	f107 030c 	add.w	r3, r7, #12
 80002ae:	4619      	mov	r1, r3
 80002b0:	4809      	ldr	r0, [pc, #36]	; (80002d8 <MX_GPIO_Init+0xec>)
 80002b2:	f000 fc37 	bl	8000b24 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80002b6:	2200      	movs	r2, #0
 80002b8:	2100      	movs	r1, #0
 80002ba:	2028      	movs	r0, #40	; 0x28
 80002bc:	f000 fbfb 	bl	8000ab6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80002c0:	2028      	movs	r0, #40	; 0x28
 80002c2:	f000 fc14 	bl	8000aee <HAL_NVIC_EnableIRQ>

}
 80002c6:	bf00      	nop
 80002c8:	3720      	adds	r7, #32
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40021000 	.word	0x40021000
 80002d4:	48000400 	.word	0x48000400
 80002d8:	48000800 	.word	0x48000800

080002dc <buffer_was_raus>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

int buffer_was_raus(){
 80002dc:	b480      	push	{r7}
 80002de:	b083      	sub	sp, #12
 80002e0:	af00      	add	r7, sp, #0
	int save_it;
	// wenn der letzte Speicherpunkt leer ist, dann wird auch nichts rausgebuffert.
    if (fifo_buffer.data[fifo_buffer.last]==0){
 80002e2:	4b18      	ldr	r3, [pc, #96]	; (8000344 <buffer_was_raus+0x68>)
 80002e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80002e8:	461a      	mov	r2, r3
 80002ea:	4b16      	ldr	r3, [pc, #88]	; (8000344 <buffer_was_raus+0x68>)
 80002ec:	5c9b      	ldrb	r3, [r3, r2]
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d101      	bne.n	80002f6 <buffer_was_raus+0x1a>
    	return 0;
 80002f2:	2300      	movs	r3, #0
 80002f4:	e01f      	b.n	8000336 <buffer_was_raus+0x5a>
    } else {
		save_it=fifo_buffer.data[fifo_buffer.last];
 80002f6:	4b13      	ldr	r3, [pc, #76]	; (8000344 <buffer_was_raus+0x68>)
 80002f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80002fc:	461a      	mov	r2, r3
 80002fe:	4b11      	ldr	r3, [pc, #68]	; (8000344 <buffer_was_raus+0x68>)
 8000300:	5c9b      	ldrb	r3, [r3, r2]
 8000302:	607b      	str	r3, [r7, #4]
		fifo_buffer.data[fifo_buffer.last]=0;
 8000304:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <buffer_was_raus+0x68>)
 8000306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800030a:	461a      	mov	r2, r3
 800030c:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <buffer_was_raus+0x68>)
 800030e:	2100      	movs	r1, #0
 8000310:	5499      	strb	r1, [r3, r2]
		fifo_buffer.last++;
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <buffer_was_raus+0x68>)
 8000314:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000318:	3301      	adds	r3, #1
 800031a:	b2da      	uxtb	r2, r3
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <buffer_was_raus+0x68>)
 800031e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		if (fifo_buffer.last>=buffergroesse){
 8000322:	4b08      	ldr	r3, [pc, #32]	; (8000344 <buffer_was_raus+0x68>)
 8000324:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000328:	2b3f      	cmp	r3, #63	; 0x3f
 800032a:	d903      	bls.n	8000334 <buffer_was_raus+0x58>
			fifo_buffer.last=0;
 800032c:	4b05      	ldr	r3, [pc, #20]	; (8000344 <buffer_was_raus+0x68>)
 800032e:	2200      	movs	r2, #0
 8000330:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
		}
		return save_it;
 8000334:	687b      	ldr	r3, [r7, #4]
    }
}
 8000336:	4618      	mov	r0, r3
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	200001ac 	.word	0x200001ac

08000348 <buffer_was_rein>:

int buffer_was_rein(uint8_t status){
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
	// Eine Null ist nichts, was ich reinbuffern will.
	if (status==0 || status==13){
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	2b00      	cmp	r3, #0
 8000356:	d002      	beq.n	800035e <buffer_was_rein+0x16>
 8000358:	79fb      	ldrb	r3, [r7, #7]
 800035a:	2b0d      	cmp	r3, #13
 800035c:	d101      	bne.n	8000362 <buffer_was_rein+0x1a>
		return 0;
 800035e:	2300      	movs	r3, #0
 8000360:	e026      	b.n	80003b0 <buffer_was_rein+0x68>
	}
	// Wenn der nächste Speicherplatz nicht leer ist, dann wird auch nichts reingebuffert.
	else if	(fifo_buffer.data[fifo_buffer.next]){
 8000362:	4b16      	ldr	r3, [pc, #88]	; (80003bc <buffer_was_rein+0x74>)
 8000364:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000368:	461a      	mov	r2, r3
 800036a:	4b14      	ldr	r3, [pc, #80]	; (80003bc <buffer_was_rein+0x74>)
 800036c:	5c9b      	ldrb	r3, [r3, r2]
 800036e:	2b00      	cmp	r3, #0
 8000370:	d001      	beq.n	8000376 <buffer_was_rein+0x2e>
		return 0;
 8000372:	2300      	movs	r3, #0
 8000374:	e01c      	b.n	80003b0 <buffer_was_rein+0x68>
	}
	else {
		// Wir haben freien speicher und Daten, also wird was reingebuffert.

		fifo_buffer.data[fifo_buffer.next]=status;
 8000376:	4b11      	ldr	r3, [pc, #68]	; (80003bc <buffer_was_rein+0x74>)
 8000378:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800037c:	4619      	mov	r1, r3
 800037e:	4a0f      	ldr	r2, [pc, #60]	; (80003bc <buffer_was_rein+0x74>)
 8000380:	79fb      	ldrb	r3, [r7, #7]
 8000382:	5453      	strb	r3, [r2, r1]
		fifo_buffer.next++;
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <buffer_was_rein+0x74>)
 8000386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800038a:	3301      	adds	r3, #1
 800038c:	b2da      	uxtb	r2, r3
 800038e:	4b0b      	ldr	r3, [pc, #44]	; (80003bc <buffer_was_rein+0x74>)
 8000390:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

		// Wenn fifo_buffer.next größer als der Buffer wird, machen wir mit null weiter.
		if(fifo_buffer.next>=buffergroesse){
 8000394:	4b09      	ldr	r3, [pc, #36]	; (80003bc <buffer_was_rein+0x74>)
 8000396:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800039a:	2b3f      	cmp	r3, #63	; 0x3f
 800039c:	d903      	bls.n	80003a6 <buffer_was_rein+0x5e>
			fifo_buffer.next=0;
 800039e:	4b07      	ldr	r3, [pc, #28]	; (80003bc <buffer_was_rein+0x74>)
 80003a0:	2200      	movs	r2, #0
 80003a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
		}
		fifo_buffer.changed=1;
 80003a6:	4b05      	ldr	r3, [pc, #20]	; (80003bc <buffer_was_rein+0x74>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
		return 1;
 80003ae:	2301      	movs	r3, #1
	}
}
 80003b0:	4618      	mov	r0, r3
 80003b2:	370c      	adds	r7, #12
 80003b4:	46bd      	mov	sp, r7
 80003b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ba:	4770      	bx	lr
 80003bc:	200001ac 	.word	0x200001ac

080003c0 <check_usb_buffer>:

void check_usb_buffer(){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
	// Der komplette USB-Buffer in unseren Ringbuffer übertragen
	for (uint8_t z=0;z<buffergroesse;z++){
 80003c6:	2300      	movs	r3, #0
 80003c8:	71fb      	strb	r3, [r7, #7]
 80003ca:	e00d      	b.n	80003e8 <check_usb_buffer+0x28>
		buffer_was_rein(bufferdata[z]);
 80003cc:	79fb      	ldrb	r3, [r7, #7]
 80003ce:	4a0a      	ldr	r2, [pc, #40]	; (80003f8 <check_usb_buffer+0x38>)
 80003d0:	5cd3      	ldrb	r3, [r2, r3]
 80003d2:	b2db      	uxtb	r3, r3
 80003d4:	4618      	mov	r0, r3
 80003d6:	f7ff ffb7 	bl	8000348 <buffer_was_rein>
		bufferdata[z]=0;
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	4a06      	ldr	r2, [pc, #24]	; (80003f8 <check_usb_buffer+0x38>)
 80003de:	2100      	movs	r1, #0
 80003e0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t z=0;z<buffergroesse;z++){
 80003e2:	79fb      	ldrb	r3, [r7, #7]
 80003e4:	3301      	adds	r3, #1
 80003e6:	71fb      	strb	r3, [r7, #7]
 80003e8:	79fb      	ldrb	r3, [r7, #7]
 80003ea:	2b3f      	cmp	r3, #63	; 0x3f
 80003ec:	d9ee      	bls.n	80003cc <check_usb_buffer+0xc>
	}
}
 80003ee:	bf00      	nop
 80003f0:	bf00      	nop
 80003f2:	3708      	adds	r7, #8
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	20000418 	.word	0x20000418

080003fc <HAL_GPIO_EXTI_Callback>:
}
void blink_red(int power){
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, power);
}
int button1_pressed;
void  HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin_irgendwas) {
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	4603      	mov	r3, r0
 8000404:	80fb      	strh	r3, [r7, #6]
	button1_pressed=1;
 8000406:	4b04      	ldr	r3, [pc, #16]	; (8000418 <HAL_GPIO_EXTI_Callback+0x1c>)
 8000408:	2201      	movs	r2, #1
 800040a:	601a      	str	r2, [r3, #0]
}
 800040c:	bf00      	nop
 800040e:	370c      	adds	r7, #12
 8000410:	46bd      	mov	sp, r7
 8000412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000416:	4770      	bx	lr
 8000418:	20000458 	.word	0x20000458

0800041c <show_lifesigns>:

void show_lifesigns(){
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
	static uint32_t time;
	if((HAL_GetTick()-time)>1000){
 8000420:	f000 fa3e 	bl	80008a0 <HAL_GetTick>
 8000424:	4602      	mov	r2, r0
 8000426:	4b09      	ldr	r3, [pc, #36]	; (800044c <show_lifesigns+0x30>)
 8000428:	681b      	ldr	r3, [r3, #0]
 800042a:	1ad3      	subs	r3, r2, r3
 800042c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000430:	d909      	bls.n	8000446 <show_lifesigns+0x2a>
		time=HAL_GetTick();
 8000432:	f000 fa35 	bl	80008a0 <HAL_GetTick>
 8000436:	4603      	mov	r3, r0
 8000438:	4a04      	ldr	r2, [pc, #16]	; (800044c <show_lifesigns+0x30>)
 800043a:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800043c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000440:	4803      	ldr	r0, [pc, #12]	; (8000450 <show_lifesigns+0x34>)
 8000442:	f000 fd19 	bl	8000e78 <HAL_GPIO_TogglePin>
	}
}
 8000446:	bf00      	nop
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	200001f0 	.word	0x200001f0
 8000450:	48000400 	.word	0x48000400

08000454 <get_fifo_buffer_length>:
uint8_t get_fifo_buffer_length(){
 8000454:	b480      	push	{r7}
 8000456:	b083      	sub	sp, #12
 8000458:	af00      	add	r7, sp, #0
uint8_t n;
        if (fifo_buffer.next<fifo_buffer.last){
 800045a:	4b12      	ldr	r3, [pc, #72]	; (80004a4 <get_fifo_buffer_length+0x50>)
 800045c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8000460:	4b10      	ldr	r3, [pc, #64]	; (80004a4 <get_fifo_buffer_length+0x50>)
 8000462:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000466:	429a      	cmp	r2, r3
 8000468:	d20a      	bcs.n	8000480 <get_fifo_buffer_length+0x2c>
        	n = fifo_buffer.next + buffergroesse - fifo_buffer.last +1;
 800046a:	4b0e      	ldr	r3, [pc, #56]	; (80004a4 <get_fifo_buffer_length+0x50>)
 800046c:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8000470:	4b0c      	ldr	r3, [pc, #48]	; (80004a4 <get_fifo_buffer_length+0x50>)
 8000472:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000476:	1ad3      	subs	r3, r2, r3
 8000478:	b2db      	uxtb	r3, r3
 800047a:	3341      	adds	r3, #65	; 0x41
 800047c:	71fb      	strb	r3, [r7, #7]
 800047e:	e009      	b.n	8000494 <get_fifo_buffer_length+0x40>
	}else{
		n = fifo_buffer.next - fifo_buffer.last + 1;
 8000480:	4b08      	ldr	r3, [pc, #32]	; (80004a4 <get_fifo_buffer_length+0x50>)
 8000482:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8000486:	4b07      	ldr	r3, [pc, #28]	; (80004a4 <get_fifo_buffer_length+0x50>)
 8000488:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800048c:	1ad3      	subs	r3, r2, r3
 800048e:	b2db      	uxtb	r3, r3
 8000490:	3301      	adds	r3, #1
 8000492:	71fb      	strb	r3, [r7, #7]
	}
	return n;
 8000494:	79fb      	ldrb	r3, [r7, #7]
}
 8000496:	4618      	mov	r0, r3
 8000498:	370c      	adds	r7, #12
 800049a:	46bd      	mov	sp, r7
 800049c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a0:	4770      	bx	lr
 80004a2:	bf00      	nop
 80004a4:	200001ac 	.word	0x200001ac

080004a8 <check_command>:
uint8_t check_command(uint8_t length){
 80004a8:	b5b0      	push	{r4, r5, r7, lr}
 80004aa:	b086      	sub	sp, #24
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	4603      	mov	r3, r0
 80004b0:	71fb      	strb	r3, [r7, #7]
 80004b2:	466b      	mov	r3, sp
 80004b4:	461d      	mov	r5, r3
	uint8_t answer[length];
 80004b6:	79fc      	ldrb	r4, [r7, #7]
 80004b8:	4623      	mov	r3, r4
 80004ba:	3b01      	subs	r3, #1
 80004bc:	613b      	str	r3, [r7, #16]
 80004be:	b2e0      	uxtb	r0, r4
 80004c0:	f04f 0100 	mov.w	r1, #0
 80004c4:	f04f 0200 	mov.w	r2, #0
 80004c8:	f04f 0300 	mov.w	r3, #0
 80004cc:	00cb      	lsls	r3, r1, #3
 80004ce:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80004d2:	00c2      	lsls	r2, r0, #3
 80004d4:	b2e0      	uxtb	r0, r4
 80004d6:	f04f 0100 	mov.w	r1, #0
 80004da:	f04f 0200 	mov.w	r2, #0
 80004de:	f04f 0300 	mov.w	r3, #0
 80004e2:	00cb      	lsls	r3, r1, #3
 80004e4:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80004e8:	00c2      	lsls	r2, r0, #3
 80004ea:	4623      	mov	r3, r4
 80004ec:	3307      	adds	r3, #7
 80004ee:	08db      	lsrs	r3, r3, #3
 80004f0:	00db      	lsls	r3, r3, #3
 80004f2:	ebad 0d03 	sub.w	sp, sp, r3
 80004f6:	466b      	mov	r3, sp
 80004f8:	3300      	adds	r3, #0
 80004fa:	60fb      	str	r3, [r7, #12]
	for (uint8_t i=0;i<length;i++){
 80004fc:	2300      	movs	r3, #0
 80004fe:	75fb      	strb	r3, [r7, #23]
 8000500:	e009      	b.n	8000516 <check_command+0x6e>
		answer[i]=buffer_was_raus();
 8000502:	f7ff feeb 	bl	80002dc <buffer_was_raus>
 8000506:	4602      	mov	r2, r0
 8000508:	7dfb      	ldrb	r3, [r7, #23]
 800050a:	b2d1      	uxtb	r1, r2
 800050c:	68fa      	ldr	r2, [r7, #12]
 800050e:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i=0;i<length;i++){
 8000510:	7dfb      	ldrb	r3, [r7, #23]
 8000512:	3301      	adds	r3, #1
 8000514:	75fb      	strb	r3, [r7, #23]
 8000516:	7dfa      	ldrb	r2, [r7, #23]
 8000518:	79fb      	ldrb	r3, [r7, #7]
 800051a:	429a      	cmp	r2, r3
 800051c:	d3f1      	bcc.n	8000502 <check_command+0x5a>
	}

	if (strcasecmp(answer,"doit")){
 800051e:	68fb      	ldr	r3, [r7, #12]
 8000520:	4907      	ldr	r1, [pc, #28]	; (8000540 <check_command+0x98>)
 8000522:	4618      	mov	r0, r3
 8000524:	f006 fea0 	bl	8007268 <strcasecmp>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d001      	beq.n	8000532 <check_command+0x8a>
		return 1;
 800052e:	2301      	movs	r3, #1
 8000530:	e000      	b.n	8000534 <check_command+0x8c>
	}else{
		return 0;
 8000532:	2300      	movs	r3, #0
 8000534:	46ad      	mov	sp, r5
	}


}
 8000536:	4618      	mov	r0, r3
 8000538:	3718      	adds	r7, #24
 800053a:	46bd      	mov	sp, r7
 800053c:	bdb0      	pop	{r4, r5, r7, pc}
 800053e:	bf00      	nop
 8000540:	080072b8 	.word	0x080072b8

08000544 <answer_command>:
void answer_command(){
 8000544:	b580      	push	{r7, lr}
 8000546:	b082      	sub	sp, #8
 8000548:	af00      	add	r7, sp, #0
	uint8_t n=get_fifo_buffer_length();
 800054a:	f7ff ff83 	bl	8000454 <get_fifo_buffer_length>
 800054e:	4603      	mov	r3, r0
 8000550:	71fb      	strb	r3, [r7, #7]
	uint8_t cmd=check_command(n);
 8000552:	79fb      	ldrb	r3, [r7, #7]
 8000554:	4618      	mov	r0, r3
 8000556:	f7ff ffa7 	bl	80004a8 <check_command>
 800055a:	4603      	mov	r3, r0
 800055c:	71bb      	strb	r3, [r7, #6]
	if(fifo_buffer.changed){
 800055e:	4b15      	ldr	r3, [pc, #84]	; (80005b4 <answer_command+0x70>)
 8000560:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8000564:	2b00      	cmp	r3, #0
 8000566:	d00e      	beq.n	8000586 <answer_command+0x42>
		switch (cmd){
 8000568:	79bb      	ldrb	r3, [r7, #6]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d006      	beq.n	800057c <answer_command+0x38>
 800056e:	2b01      	cmp	r3, #1
 8000570:	d10a      	bne.n	8000588 <answer_command+0x44>
			case 1:
				CDC_Transmit_FS("\n\r I will do it \n\r what next? \n\r", strlen("\n\r I will do it \n\r what next? \n\r"));
 8000572:	2120      	movs	r1, #32
 8000574:	4810      	ldr	r0, [pc, #64]	; (80005b8 <answer_command+0x74>)
 8000576:	f006 f89f 	bl	80066b8 <CDC_Transmit_FS>
				break;
 800057a:	e005      	b.n	8000588 <answer_command+0x44>
			case 0:
				CDC_Transmit_FS("\n\r I am confused \n\r try again \n\r", strlen("\n\r I am confused \n\r try again \n\r"));
 800057c:	2120      	movs	r1, #32
 800057e:	480f      	ldr	r0, [pc, #60]	; (80005bc <answer_command+0x78>)
 8000580:	f006 f89a 	bl	80066b8 <CDC_Transmit_FS>
				break;
 8000584:	e000      	b.n	8000588 <answer_command+0x44>
		}
	}
 8000586:	bf00      	nop
			
	if((fifo_buffer.next==fifo_buffer.last) && (fifo_buffer.changed)){
 8000588:	4b0a      	ldr	r3, [pc, #40]	; (80005b4 <answer_command+0x70>)
 800058a:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <answer_command+0x70>)
 8000590:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000594:	429a      	cmp	r2, r3
 8000596:	d108      	bne.n	80005aa <answer_command+0x66>
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <answer_command+0x70>)
 800059a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800059e:	2b00      	cmp	r3, #0
 80005a0:	d003      	beq.n	80005aa <answer_command+0x66>
		fifo_buffer.changed=0;
 80005a2:	4b04      	ldr	r3, [pc, #16]	; (80005b4 <answer_command+0x70>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
	}
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200001ac 	.word	0x200001ac
 80005b8:	080072c0 	.word	0x080072c0
 80005bc:	080072e4 	.word	0x080072e4

080005c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005c4:	f000 f903 	bl	80007ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005c8:	f000 f80b 	bl	80005e2 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005cc:	f7ff fe0e 	bl	80001ec <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005d0:	f005 ffa4 	bl	800651c <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Lebenszeichen durch LED3 und ". . . . . ." über USB to serial
	  show_lifesigns();
 80005d4:	f7ff ff22 	bl	800041c <show_lifesigns>

	  // USB_buffer ind Ringbuffer übertragen
	  check_usb_buffer();
 80005d8:	f7ff fef2 	bl	80003c0 <check_usb_buffer>

	  // Eingegangene Befehle beantworten
	  answer_command();
 80005dc:	f7ff ffb2 	bl	8000544 <answer_command>
	  show_lifesigns();
 80005e0:	e7f8      	b.n	80005d4 <main+0x14>

080005e2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e2:	b580      	push	{r7, lr}
 80005e4:	b096      	sub	sp, #88	; 0x58
 80005e6:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e8:	f107 0314 	add.w	r3, r7, #20
 80005ec:	2244      	movs	r2, #68	; 0x44
 80005ee:	2100      	movs	r1, #0
 80005f0:	4618      	mov	r0, r3
 80005f2:	f006 fe31 	bl	8007258 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f6:	463b      	mov	r3, r7
 80005f8:	2200      	movs	r2, #0
 80005fa:	601a      	str	r2, [r3, #0]
 80005fc:	605a      	str	r2, [r3, #4]
 80005fe:	609a      	str	r2, [r3, #8]
 8000600:	60da      	str	r2, [r3, #12]
 8000602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000604:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000608:	f001 fd0a 	bl	8002020 <HAL_PWREx_ControlVoltageScaling>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000612:	f000 f83c 	bl	800068e <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000616:	2314      	movs	r3, #20
 8000618:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 800061a:	2300      	movs	r3, #0
 800061c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061e:	2301      	movs	r3, #1
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000622:	2300      	movs	r3, #0
 8000624:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000626:	2360      	movs	r3, #96	; 0x60
 8000628:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800062a:	2302      	movs	r3, #2
 800062c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062e:	2301      	movs	r3, #1
 8000630:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000636:	2328      	movs	r3, #40	; 0x28
 8000638:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063e:	2302      	movs	r3, #2
 8000640:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000642:	2302      	movs	r3, #2
 8000644:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4618      	mov	r0, r3
 800064c:	f001 fd4e 	bl	80020ec <HAL_RCC_OscConfig>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000656:	f000 f81a 	bl	800068e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065a:	230f      	movs	r3, #15
 800065c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065e:	2303      	movs	r3, #3
 8000660:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000666:	2300      	movs	r3, #0
 8000668:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066a:	2300      	movs	r3, #0
 800066c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	2104      	movs	r1, #4
 8000672:	4618      	mov	r0, r3
 8000674:	f002 f960 	bl	8002938 <HAL_RCC_ClockConfig>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 800067e:	f000 f806 	bl	800068e <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000682:	f002 fe2f 	bl	80032e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000686:	bf00      	nop
 8000688:	3758      	adds	r7, #88	; 0x58
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}

0800068e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800068e:	b480      	push	{r7}
 8000690:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000692:	b672      	cpsid	i
}
 8000694:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000696:	e7fe      	b.n	8000696 <Error_Handler+0x8>

08000698 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <HAL_MspInit+0x44>)
 80006a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006a2:	4a0e      	ldr	r2, [pc, #56]	; (80006dc <HAL_MspInit+0x44>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6613      	str	r3, [r2, #96]	; 0x60
 80006aa:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <HAL_MspInit+0x44>)
 80006ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <HAL_MspInit+0x44>)
 80006b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <HAL_MspInit+0x44>)
 80006bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c0:	6593      	str	r3, [r2, #88]	; 0x58
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <HAL_MspInit+0x44>)
 80006c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40021000 	.word	0x40021000

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <NMI_Handler+0x4>

080006e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ea:	e7fe      	b.n	80006ea <HardFault_Handler+0x4>

080006ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f0:	e7fe      	b.n	80006f0 <MemManage_Handler+0x4>

080006f2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <BusFault_Handler+0x4>

080006f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <UsageFault_Handler+0x4>

080006fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	46bd      	mov	sp, r7
 8000706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070a:	4770      	bx	lr

0800070c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr

0800071a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800071a:	b480      	push	{r7}
 800071c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800072c:	f000 f8a4 	bl	8000878 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}

08000734 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button1_Pin);
 8000738:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800073c:	f000 fbb6 	bl	8000eac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}

08000744 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000748:	4802      	ldr	r0, [pc, #8]	; (8000754 <OTG_FS_IRQHandler+0x10>)
 800074a:	f000 fd1a 	bl	8001182 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800074e:	bf00      	nop
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	20001930 	.word	0x20001930

08000758 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800075c:	4b06      	ldr	r3, [pc, #24]	; (8000778 <SystemInit+0x20>)
 800075e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000762:	4a05      	ldr	r2, [pc, #20]	; (8000778 <SystemInit+0x20>)
 8000764:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000768:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800077c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80007b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000780:	f7ff ffea 	bl	8000758 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000784:	480c      	ldr	r0, [pc, #48]	; (80007b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000786:	490d      	ldr	r1, [pc, #52]	; (80007bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000788:	4a0d      	ldr	r2, [pc, #52]	; (80007c0 <LoopForever+0xe>)
  movs r3, #0
 800078a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800078c:	e002      	b.n	8000794 <LoopCopyDataInit>

0800078e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800078e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000790:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000792:	3304      	adds	r3, #4

08000794 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000794:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000796:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000798:	d3f9      	bcc.n	800078e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800079a:	4a0a      	ldr	r2, [pc, #40]	; (80007c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800079c:	4c0a      	ldr	r4, [pc, #40]	; (80007c8 <LoopForever+0x16>)
  movs r3, #0
 800079e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80007a0:	e001      	b.n	80007a6 <LoopFillZerobss>

080007a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80007a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80007a4:	3204      	adds	r2, #4

080007a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80007a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80007a8:	d3fb      	bcc.n	80007a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80007aa:	f006 fd23 	bl	80071f4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80007ae:	f7ff ff07 	bl	80005c0 <main>

080007b2 <LoopForever>:

LoopForever:
    b LoopForever
 80007b2:	e7fe      	b.n	80007b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80007b4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80007b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007bc:	20000190 	.word	0x20000190
  ldr r2, =_sidata
 80007c0:	0800749c 	.word	0x0800749c
  ldr r2, =_sbss
 80007c4:	20000190 	.word	0x20000190
  ldr r4, =_ebss
 80007c8:	20001d38 	.word	0x20001d38

080007cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80007cc:	e7fe      	b.n	80007cc <ADC1_2_IRQHandler>

080007ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	b082      	sub	sp, #8
 80007d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80007d4:	2300      	movs	r3, #0
 80007d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007d8:	2003      	movs	r0, #3
 80007da:	f000 f961 	bl	8000aa0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80007de:	2000      	movs	r0, #0
 80007e0:	f000 f80e 	bl	8000800 <HAL_InitTick>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d002      	beq.n	80007f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80007ea:	2301      	movs	r3, #1
 80007ec:	71fb      	strb	r3, [r7, #7]
 80007ee:	e001      	b.n	80007f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80007f0:	f7ff ff52 	bl	8000698 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80007f4:	79fb      	ldrb	r3, [r7, #7]
}
 80007f6:	4618      	mov	r0, r3
 80007f8:	3708      	adds	r7, #8
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
	...

08000800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b084      	sub	sp, #16
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000808:	2300      	movs	r3, #0
 800080a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800080c:	4b17      	ldr	r3, [pc, #92]	; (800086c <HAL_InitTick+0x6c>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b00      	cmp	r3, #0
 8000812:	d023      	beq.n	800085c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <HAL_InitTick+0x70>)
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	4b14      	ldr	r3, [pc, #80]	; (800086c <HAL_InitTick+0x6c>)
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000822:	fbb3 f3f1 	udiv	r3, r3, r1
 8000826:	fbb2 f3f3 	udiv	r3, r2, r3
 800082a:	4618      	mov	r0, r3
 800082c:	f000 f96d 	bl	8000b0a <HAL_SYSTICK_Config>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d10f      	bne.n	8000856 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	2b0f      	cmp	r3, #15
 800083a:	d809      	bhi.n	8000850 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800083c:	2200      	movs	r2, #0
 800083e:	6879      	ldr	r1, [r7, #4]
 8000840:	f04f 30ff 	mov.w	r0, #4294967295
 8000844:	f000 f937 	bl	8000ab6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000848:	4a0a      	ldr	r2, [pc, #40]	; (8000874 <HAL_InitTick+0x74>)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	6013      	str	r3, [r2, #0]
 800084e:	e007      	b.n	8000860 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000850:	2301      	movs	r3, #1
 8000852:	73fb      	strb	r3, [r7, #15]
 8000854:	e004      	b.n	8000860 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000856:	2301      	movs	r3, #1
 8000858:	73fb      	strb	r3, [r7, #15]
 800085a:	e001      	b.n	8000860 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800085c:	2301      	movs	r3, #1
 800085e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000860:	7bfb      	ldrb	r3, [r7, #15]
}
 8000862:	4618      	mov	r0, r3
 8000864:	3710      	adds	r7, #16
 8000866:	46bd      	mov	sp, r7
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	20000008 	.word	0x20000008
 8000870:	20000000 	.word	0x20000000
 8000874:	20000004 	.word	0x20000004

08000878 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800087c:	4b06      	ldr	r3, [pc, #24]	; (8000898 <HAL_IncTick+0x20>)
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	461a      	mov	r2, r3
 8000882:	4b06      	ldr	r3, [pc, #24]	; (800089c <HAL_IncTick+0x24>)
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4413      	add	r3, r2
 8000888:	4a04      	ldr	r2, [pc, #16]	; (800089c <HAL_IncTick+0x24>)
 800088a:	6013      	str	r3, [r2, #0]
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	20000008 	.word	0x20000008
 800089c:	2000045c 	.word	0x2000045c

080008a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  return uwTick;
 80008a4:	4b03      	ldr	r3, [pc, #12]	; (80008b4 <HAL_GetTick+0x14>)
 80008a6:	681b      	ldr	r3, [r3, #0]
}
 80008a8:	4618      	mov	r0, r3
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	2000045c 	.word	0x2000045c

080008b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b084      	sub	sp, #16
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80008c0:	f7ff ffee 	bl	80008a0 <HAL_GetTick>
 80008c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80008ca:	68fb      	ldr	r3, [r7, #12]
 80008cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80008d0:	d005      	beq.n	80008de <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80008d2:	4b0a      	ldr	r3, [pc, #40]	; (80008fc <HAL_Delay+0x44>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	461a      	mov	r2, r3
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	4413      	add	r3, r2
 80008dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80008de:	bf00      	nop
 80008e0:	f7ff ffde 	bl	80008a0 <HAL_GetTick>
 80008e4:	4602      	mov	r2, r0
 80008e6:	68bb      	ldr	r3, [r7, #8]
 80008e8:	1ad3      	subs	r3, r2, r3
 80008ea:	68fa      	ldr	r2, [r7, #12]
 80008ec:	429a      	cmp	r2, r3
 80008ee:	d8f7      	bhi.n	80008e0 <HAL_Delay+0x28>
  {
  }
}
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	3710      	adds	r7, #16
 80008f6:	46bd      	mov	sp, r7
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	20000008 	.word	0x20000008

08000900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60d3      	str	r3, [r2, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800094c:	4b04      	ldr	r3, [pc, #16]	; (8000960 <__NVIC_GetPriorityGrouping+0x18>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	0a1b      	lsrs	r3, r3, #8
 8000952:	f003 0307 	and.w	r3, r3, #7
}
 8000956:	4618      	mov	r0, r3
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr
 8000960:	e000ed00 	.word	0xe000ed00

08000964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800096e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000972:	2b00      	cmp	r3, #0
 8000974:	db0b      	blt.n	800098e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	f003 021f 	and.w	r2, r3, #31
 800097c:	4907      	ldr	r1, [pc, #28]	; (800099c <__NVIC_EnableIRQ+0x38>)
 800097e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000982:	095b      	lsrs	r3, r3, #5
 8000984:	2001      	movs	r0, #1
 8000986:	fa00 f202 	lsl.w	r2, r0, r2
 800098a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800098e:	bf00      	nop
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000e100 	.word	0xe000e100

080009a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80009a0:	b480      	push	{r7}
 80009a2:	b083      	sub	sp, #12
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	4603      	mov	r3, r0
 80009a8:	6039      	str	r1, [r7, #0]
 80009aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	db0a      	blt.n	80009ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	b2da      	uxtb	r2, r3
 80009b8:	490c      	ldr	r1, [pc, #48]	; (80009ec <__NVIC_SetPriority+0x4c>)
 80009ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009be:	0112      	lsls	r2, r2, #4
 80009c0:	b2d2      	uxtb	r2, r2
 80009c2:	440b      	add	r3, r1
 80009c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009c8:	e00a      	b.n	80009e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009ca:	683b      	ldr	r3, [r7, #0]
 80009cc:	b2da      	uxtb	r2, r3
 80009ce:	4908      	ldr	r1, [pc, #32]	; (80009f0 <__NVIC_SetPriority+0x50>)
 80009d0:	79fb      	ldrb	r3, [r7, #7]
 80009d2:	f003 030f 	and.w	r3, r3, #15
 80009d6:	3b04      	subs	r3, #4
 80009d8:	0112      	lsls	r2, r2, #4
 80009da:	b2d2      	uxtb	r2, r2
 80009dc:	440b      	add	r3, r1
 80009de:	761a      	strb	r2, [r3, #24]
}
 80009e0:	bf00      	nop
 80009e2:	370c      	adds	r7, #12
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr
 80009ec:	e000e100 	.word	0xe000e100
 80009f0:	e000ed00 	.word	0xe000ed00

080009f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b089      	sub	sp, #36	; 0x24
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	60f8      	str	r0, [r7, #12]
 80009fc:	60b9      	str	r1, [r7, #8]
 80009fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	f003 0307 	and.w	r3, r3, #7
 8000a06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a08:	69fb      	ldr	r3, [r7, #28]
 8000a0a:	f1c3 0307 	rsb	r3, r3, #7
 8000a0e:	2b04      	cmp	r3, #4
 8000a10:	bf28      	it	cs
 8000a12:	2304      	movcs	r3, #4
 8000a14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a16:	69fb      	ldr	r3, [r7, #28]
 8000a18:	3304      	adds	r3, #4
 8000a1a:	2b06      	cmp	r3, #6
 8000a1c:	d902      	bls.n	8000a24 <NVIC_EncodePriority+0x30>
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	3b03      	subs	r3, #3
 8000a22:	e000      	b.n	8000a26 <NVIC_EncodePriority+0x32>
 8000a24:	2300      	movs	r3, #0
 8000a26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a28:	f04f 32ff 	mov.w	r2, #4294967295
 8000a2c:	69bb      	ldr	r3, [r7, #24]
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43da      	mvns	r2, r3
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	401a      	ands	r2, r3
 8000a38:	697b      	ldr	r3, [r7, #20]
 8000a3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a40:	697b      	ldr	r3, [r7, #20]
 8000a42:	fa01 f303 	lsl.w	r3, r1, r3
 8000a46:	43d9      	mvns	r1, r3
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a4c:	4313      	orrs	r3, r2
         );
}
 8000a4e:	4618      	mov	r0, r3
 8000a50:	3724      	adds	r7, #36	; 0x24
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
	...

08000a5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	3b01      	subs	r3, #1
 8000a68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000a6c:	d301      	bcc.n	8000a72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000a6e:	2301      	movs	r3, #1
 8000a70:	e00f      	b.n	8000a92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000a72:	4a0a      	ldr	r2, [pc, #40]	; (8000a9c <SysTick_Config+0x40>)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a80:	f7ff ff8e 	bl	80009a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000a84:	4b05      	ldr	r3, [pc, #20]	; (8000a9c <SysTick_Config+0x40>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000a8a:	4b04      	ldr	r3, [pc, #16]	; (8000a9c <SysTick_Config+0x40>)
 8000a8c:	2207      	movs	r2, #7
 8000a8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	e000e010 	.word	0xe000e010

08000aa0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000aa8:	6878      	ldr	r0, [r7, #4]
 8000aaa:	f7ff ff29 	bl	8000900 <__NVIC_SetPriorityGrouping>
}
 8000aae:	bf00      	nop
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}

08000ab6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab6:	b580      	push	{r7, lr}
 8000ab8:	b086      	sub	sp, #24
 8000aba:	af00      	add	r7, sp, #0
 8000abc:	4603      	mov	r3, r0
 8000abe:	60b9      	str	r1, [r7, #8]
 8000ac0:	607a      	str	r2, [r7, #4]
 8000ac2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ac8:	f7ff ff3e 	bl	8000948 <__NVIC_GetPriorityGrouping>
 8000acc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	68b9      	ldr	r1, [r7, #8]
 8000ad2:	6978      	ldr	r0, [r7, #20]
 8000ad4:	f7ff ff8e 	bl	80009f4 <NVIC_EncodePriority>
 8000ad8:	4602      	mov	r2, r0
 8000ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ade:	4611      	mov	r1, r2
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f7ff ff5d 	bl	80009a0 <__NVIC_SetPriority>
}
 8000ae6:	bf00      	nop
 8000ae8:	3718      	adds	r7, #24
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}

08000aee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aee:	b580      	push	{r7, lr}
 8000af0:	b082      	sub	sp, #8
 8000af2:	af00      	add	r7, sp, #0
 8000af4:	4603      	mov	r3, r0
 8000af6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afc:	4618      	mov	r0, r3
 8000afe:	f7ff ff31 	bl	8000964 <__NVIC_EnableIRQ>
}
 8000b02:	bf00      	nop
 8000b04:	3708      	adds	r7, #8
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}

08000b0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ffa2 	bl	8000a5c <SysTick_Config>
 8000b18:	4603      	mov	r3, r0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
	...

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b087      	sub	sp, #28
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b32:	e166      	b.n	8000e02 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	2101      	movs	r1, #1
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8000b40:	4013      	ands	r3, r2
 8000b42:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	f000 8158 	beq.w	8000dfc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	685b      	ldr	r3, [r3, #4]
 8000b50:	f003 0303 	and.w	r3, r3, #3
 8000b54:	2b01      	cmp	r3, #1
 8000b56:	d005      	beq.n	8000b64 <HAL_GPIO_Init+0x40>
 8000b58:	683b      	ldr	r3, [r7, #0]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	f003 0303 	and.w	r3, r3, #3
 8000b60:	2b02      	cmp	r3, #2
 8000b62:	d130      	bne.n	8000bc6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	689b      	ldr	r3, [r3, #8]
 8000b68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000b6a:	697b      	ldr	r3, [r7, #20]
 8000b6c:	005b      	lsls	r3, r3, #1
 8000b6e:	2203      	movs	r2, #3
 8000b70:	fa02 f303 	lsl.w	r3, r2, r3
 8000b74:	43db      	mvns	r3, r3
 8000b76:	693a      	ldr	r2, [r7, #16]
 8000b78:	4013      	ands	r3, r2
 8000b7a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	68da      	ldr	r2, [r3, #12]
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	005b      	lsls	r3, r3, #1
 8000b84:	fa02 f303 	lsl.w	r3, r2, r3
 8000b88:	693a      	ldr	r2, [r7, #16]
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	693a      	ldr	r2, [r7, #16]
 8000b92:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	685b      	ldr	r3, [r3, #4]
 8000b98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43db      	mvns	r3, r3
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	091b      	lsrs	r3, r3, #4
 8000bb0:	f003 0201 	and.w	r2, r3, #1
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	693a      	ldr	r2, [r7, #16]
 8000bc4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	f003 0303 	and.w	r3, r3, #3
 8000bce:	2b03      	cmp	r3, #3
 8000bd0:	d017      	beq.n	8000c02 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	68db      	ldr	r3, [r3, #12]
 8000bd6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000bd8:	697b      	ldr	r3, [r7, #20]
 8000bda:	005b      	lsls	r3, r3, #1
 8000bdc:	2203      	movs	r2, #3
 8000bde:	fa02 f303 	lsl.w	r3, r2, r3
 8000be2:	43db      	mvns	r3, r3
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	4013      	ands	r3, r2
 8000be8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	689a      	ldr	r2, [r3, #8]
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	005b      	lsls	r3, r3, #1
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	693a      	ldr	r2, [r7, #16]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	693a      	ldr	r2, [r7, #16]
 8000c00:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f003 0303 	and.w	r3, r3, #3
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d123      	bne.n	8000c56 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	08da      	lsrs	r2, r3, #3
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	3208      	adds	r2, #8
 8000c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000c1c:	697b      	ldr	r3, [r7, #20]
 8000c1e:	f003 0307 	and.w	r3, r3, #7
 8000c22:	009b      	lsls	r3, r3, #2
 8000c24:	220f      	movs	r2, #15
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43db      	mvns	r3, r3
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	4013      	ands	r3, r2
 8000c30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000c32:	683b      	ldr	r3, [r7, #0]
 8000c34:	691a      	ldr	r2, [r3, #16]
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	f003 0307 	and.w	r3, r3, #7
 8000c3c:	009b      	lsls	r3, r3, #2
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	693a      	ldr	r2, [r7, #16]
 8000c44:	4313      	orrs	r3, r2
 8000c46:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	08da      	lsrs	r2, r3, #3
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	3208      	adds	r2, #8
 8000c50:	6939      	ldr	r1, [r7, #16]
 8000c52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	005b      	lsls	r3, r3, #1
 8000c60:	2203      	movs	r2, #3
 8000c62:	fa02 f303 	lsl.w	r3, r2, r3
 8000c66:	43db      	mvns	r3, r3
 8000c68:	693a      	ldr	r2, [r7, #16]
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0203 	and.w	r2, r3, #3
 8000c76:	697b      	ldr	r3, [r7, #20]
 8000c78:	005b      	lsls	r3, r3, #1
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	693a      	ldr	r2, [r7, #16]
 8000c80:	4313      	orrs	r3, r2
 8000c82:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	693a      	ldr	r2, [r7, #16]
 8000c88:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	f000 80b2 	beq.w	8000dfc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c98:	4b61      	ldr	r3, [pc, #388]	; (8000e20 <HAL_GPIO_Init+0x2fc>)
 8000c9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c9c:	4a60      	ldr	r2, [pc, #384]	; (8000e20 <HAL_GPIO_Init+0x2fc>)
 8000c9e:	f043 0301 	orr.w	r3, r3, #1
 8000ca2:	6613      	str	r3, [r2, #96]	; 0x60
 8000ca4:	4b5e      	ldr	r3, [pc, #376]	; (8000e20 <HAL_GPIO_Init+0x2fc>)
 8000ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ca8:	f003 0301 	and.w	r3, r3, #1
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000cb0:	4a5c      	ldr	r2, [pc, #368]	; (8000e24 <HAL_GPIO_Init+0x300>)
 8000cb2:	697b      	ldr	r3, [r7, #20]
 8000cb4:	089b      	lsrs	r3, r3, #2
 8000cb6:	3302      	adds	r3, #2
 8000cb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cbc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	f003 0303 	and.w	r3, r3, #3
 8000cc4:	009b      	lsls	r3, r3, #2
 8000cc6:	220f      	movs	r2, #15
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	693a      	ldr	r2, [r7, #16]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000cda:	d02b      	beq.n	8000d34 <HAL_GPIO_Init+0x210>
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	4a52      	ldr	r2, [pc, #328]	; (8000e28 <HAL_GPIO_Init+0x304>)
 8000ce0:	4293      	cmp	r3, r2
 8000ce2:	d025      	beq.n	8000d30 <HAL_GPIO_Init+0x20c>
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4a51      	ldr	r2, [pc, #324]	; (8000e2c <HAL_GPIO_Init+0x308>)
 8000ce8:	4293      	cmp	r3, r2
 8000cea:	d01f      	beq.n	8000d2c <HAL_GPIO_Init+0x208>
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	4a50      	ldr	r2, [pc, #320]	; (8000e30 <HAL_GPIO_Init+0x30c>)
 8000cf0:	4293      	cmp	r3, r2
 8000cf2:	d019      	beq.n	8000d28 <HAL_GPIO_Init+0x204>
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	4a4f      	ldr	r2, [pc, #316]	; (8000e34 <HAL_GPIO_Init+0x310>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d013      	beq.n	8000d24 <HAL_GPIO_Init+0x200>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	4a4e      	ldr	r2, [pc, #312]	; (8000e38 <HAL_GPIO_Init+0x314>)
 8000d00:	4293      	cmp	r3, r2
 8000d02:	d00d      	beq.n	8000d20 <HAL_GPIO_Init+0x1fc>
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	4a4d      	ldr	r2, [pc, #308]	; (8000e3c <HAL_GPIO_Init+0x318>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d007      	beq.n	8000d1c <HAL_GPIO_Init+0x1f8>
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	4a4c      	ldr	r2, [pc, #304]	; (8000e40 <HAL_GPIO_Init+0x31c>)
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d101      	bne.n	8000d18 <HAL_GPIO_Init+0x1f4>
 8000d14:	2307      	movs	r3, #7
 8000d16:	e00e      	b.n	8000d36 <HAL_GPIO_Init+0x212>
 8000d18:	2308      	movs	r3, #8
 8000d1a:	e00c      	b.n	8000d36 <HAL_GPIO_Init+0x212>
 8000d1c:	2306      	movs	r3, #6
 8000d1e:	e00a      	b.n	8000d36 <HAL_GPIO_Init+0x212>
 8000d20:	2305      	movs	r3, #5
 8000d22:	e008      	b.n	8000d36 <HAL_GPIO_Init+0x212>
 8000d24:	2304      	movs	r3, #4
 8000d26:	e006      	b.n	8000d36 <HAL_GPIO_Init+0x212>
 8000d28:	2303      	movs	r3, #3
 8000d2a:	e004      	b.n	8000d36 <HAL_GPIO_Init+0x212>
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	e002      	b.n	8000d36 <HAL_GPIO_Init+0x212>
 8000d30:	2301      	movs	r3, #1
 8000d32:	e000      	b.n	8000d36 <HAL_GPIO_Init+0x212>
 8000d34:	2300      	movs	r3, #0
 8000d36:	697a      	ldr	r2, [r7, #20]
 8000d38:	f002 0203 	and.w	r2, r2, #3
 8000d3c:	0092      	lsls	r2, r2, #2
 8000d3e:	4093      	lsls	r3, r2
 8000d40:	693a      	ldr	r2, [r7, #16]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d46:	4937      	ldr	r1, [pc, #220]	; (8000e24 <HAL_GPIO_Init+0x300>)
 8000d48:	697b      	ldr	r3, [r7, #20]
 8000d4a:	089b      	lsrs	r3, r3, #2
 8000d4c:	3302      	adds	r3, #2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000d54:	4b3b      	ldr	r3, [pc, #236]	; (8000e44 <HAL_GPIO_Init+0x320>)
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	43db      	mvns	r3, r3
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	4013      	ands	r3, r2
 8000d62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d003      	beq.n	8000d78 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000d70:	693a      	ldr	r2, [r7, #16]
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	4313      	orrs	r3, r2
 8000d76:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000d78:	4a32      	ldr	r2, [pc, #200]	; (8000e44 <HAL_GPIO_Init+0x320>)
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000d7e:	4b31      	ldr	r3, [pc, #196]	; (8000e44 <HAL_GPIO_Init+0x320>)
 8000d80:	68db      	ldr	r3, [r3, #12]
 8000d82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	43db      	mvns	r3, r3
 8000d88:	693a      	ldr	r2, [r7, #16]
 8000d8a:	4013      	ands	r3, r2
 8000d8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	685b      	ldr	r3, [r3, #4]
 8000d92:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d003      	beq.n	8000da2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000da2:	4a28      	ldr	r2, [pc, #160]	; (8000e44 <HAL_GPIO_Init+0x320>)
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000da8:	4b26      	ldr	r3, [pc, #152]	; (8000e44 <HAL_GPIO_Init+0x320>)
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	43db      	mvns	r3, r3
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	4013      	ands	r3, r2
 8000db6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d003      	beq.n	8000dcc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	68fb      	ldr	r3, [r7, #12]
 8000dc8:	4313      	orrs	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000dcc:	4a1d      	ldr	r2, [pc, #116]	; (8000e44 <HAL_GPIO_Init+0x320>)
 8000dce:	693b      	ldr	r3, [r7, #16]
 8000dd0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000dd2:	4b1c      	ldr	r3, [pc, #112]	; (8000e44 <HAL_GPIO_Init+0x320>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d003      	beq.n	8000df6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	4313      	orrs	r3, r2
 8000df4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000df6:	4a13      	ldr	r2, [pc, #76]	; (8000e44 <HAL_GPIO_Init+0x320>)
 8000df8:	693b      	ldr	r3, [r7, #16]
 8000dfa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	681a      	ldr	r2, [r3, #0]
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	fa22 f303 	lsr.w	r3, r2, r3
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	f47f ae91 	bne.w	8000b34 <HAL_GPIO_Init+0x10>
  }
}
 8000e12:	bf00      	nop
 8000e14:	bf00      	nop
 8000e16:	371c      	adds	r7, #28
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	40021000 	.word	0x40021000
 8000e24:	40010000 	.word	0x40010000
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	48000800 	.word	0x48000800
 8000e30:	48000c00 	.word	0x48000c00
 8000e34:	48001000 	.word	0x48001000
 8000e38:	48001400 	.word	0x48001400
 8000e3c:	48001800 	.word	0x48001800
 8000e40:	48001c00 	.word	0x48001c00
 8000e44:	40010400 	.word	0x40010400

08000e48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	460b      	mov	r3, r1
 8000e52:	807b      	strh	r3, [r7, #2]
 8000e54:	4613      	mov	r3, r2
 8000e56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000e58:	787b      	ldrb	r3, [r7, #1]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e5e:	887a      	ldrh	r2, [r7, #2]
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000e64:	e002      	b.n	8000e6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000e66:	887a      	ldrh	r2, [r7, #2]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e6c:	bf00      	nop
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b085      	sub	sp, #20
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	460b      	mov	r3, r1
 8000e82:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	695b      	ldr	r3, [r3, #20]
 8000e88:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000e8a:	887a      	ldrh	r2, [r7, #2]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	4013      	ands	r3, r2
 8000e90:	041a      	lsls	r2, r3, #16
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	43d9      	mvns	r1, r3
 8000e96:	887b      	ldrh	r3, [r7, #2]
 8000e98:	400b      	ands	r3, r1
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	619a      	str	r2, [r3, #24]
}
 8000ea0:	bf00      	nop
 8000ea2:	3714      	adds	r7, #20
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eaa:	4770      	bx	lr

08000eac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	4603      	mov	r3, r0
 8000eb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000eb8:	695a      	ldr	r2, [r3, #20]
 8000eba:	88fb      	ldrh	r3, [r7, #6]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d006      	beq.n	8000ed0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000ec2:	4a05      	ldr	r2, [pc, #20]	; (8000ed8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000ec4:	88fb      	ldrh	r3, [r7, #6]
 8000ec6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000ec8:	88fb      	ldrh	r3, [r7, #6]
 8000eca:	4618      	mov	r0, r3
 8000ecc:	f7ff fa96 	bl	80003fc <HAL_GPIO_EXTI_Callback>
  }
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40010400 	.word	0x40010400

08000edc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000edc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ede:	b08f      	sub	sp, #60	; 0x3c
 8000ee0:	af0a      	add	r7, sp, #40	; 0x28
 8000ee2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e116      	b.n	800111c <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8000efa:	b2db      	uxtb	r3, r3
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d106      	bne.n	8000f0e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f08:	6878      	ldr	r0, [r7, #4]
 8000f0a:	f005 fd2f 	bl	800696c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2203      	movs	r2, #3
 8000f12:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d102      	bne.n	8000f28 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2200      	movs	r2, #0
 8000f26:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f002 fc90 	bl	8003852 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	603b      	str	r3, [r7, #0]
 8000f38:	687e      	ldr	r6, [r7, #4]
 8000f3a:	466d      	mov	r5, sp
 8000f3c:	f106 0410 	add.w	r4, r6, #16
 8000f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f44:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f46:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f48:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f4c:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f50:	1d33      	adds	r3, r6, #4
 8000f52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f54:	6838      	ldr	r0, [r7, #0]
 8000f56:	f002 fba3 	bl	80036a0 <USB_CoreInit>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2202      	movs	r2, #2
 8000f64:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e0d7      	b.n	800111c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 fc7e 	bl	8003874 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f78:	2300      	movs	r3, #0
 8000f7a:	73fb      	strb	r3, [r7, #15]
 8000f7c:	e04a      	b.n	8001014 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f7e:	7bfa      	ldrb	r2, [r7, #15]
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	4613      	mov	r3, r2
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	1a9b      	subs	r3, r3, r2
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	440b      	add	r3, r1
 8000f8c:	333d      	adds	r3, #61	; 0x3d
 8000f8e:	2201      	movs	r2, #1
 8000f90:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f92:	7bfa      	ldrb	r2, [r7, #15]
 8000f94:	6879      	ldr	r1, [r7, #4]
 8000f96:	4613      	mov	r3, r2
 8000f98:	00db      	lsls	r3, r3, #3
 8000f9a:	1a9b      	subs	r3, r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	440b      	add	r3, r1
 8000fa0:	333c      	adds	r3, #60	; 0x3c
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fa6:	7bfa      	ldrb	r2, [r7, #15]
 8000fa8:	7bfb      	ldrb	r3, [r7, #15]
 8000faa:	b298      	uxth	r0, r3
 8000fac:	6879      	ldr	r1, [r7, #4]
 8000fae:	4613      	mov	r3, r2
 8000fb0:	00db      	lsls	r3, r3, #3
 8000fb2:	1a9b      	subs	r3, r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	440b      	add	r3, r1
 8000fb8:	3342      	adds	r3, #66	; 0x42
 8000fba:	4602      	mov	r2, r0
 8000fbc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fbe:	7bfa      	ldrb	r2, [r7, #15]
 8000fc0:	6879      	ldr	r1, [r7, #4]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	00db      	lsls	r3, r3, #3
 8000fc6:	1a9b      	subs	r3, r3, r2
 8000fc8:	009b      	lsls	r3, r3, #2
 8000fca:	440b      	add	r3, r1
 8000fcc:	333f      	adds	r3, #63	; 0x3f
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fd2:	7bfa      	ldrb	r2, [r7, #15]
 8000fd4:	6879      	ldr	r1, [r7, #4]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	1a9b      	subs	r3, r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	440b      	add	r3, r1
 8000fe0:	3344      	adds	r3, #68	; 0x44
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fe6:	7bfa      	ldrb	r2, [r7, #15]
 8000fe8:	6879      	ldr	r1, [r7, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	1a9b      	subs	r3, r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	440b      	add	r3, r1
 8000ff4:	3348      	adds	r3, #72	; 0x48
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ffa:	7bfa      	ldrb	r2, [r7, #15]
 8000ffc:	6879      	ldr	r1, [r7, #4]
 8000ffe:	4613      	mov	r3, r2
 8001000:	00db      	lsls	r3, r3, #3
 8001002:	1a9b      	subs	r3, r3, r2
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	440b      	add	r3, r1
 8001008:	3350      	adds	r3, #80	; 0x50
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	7bfa      	ldrb	r2, [r7, #15]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	429a      	cmp	r2, r3
 800101c:	d3af      	bcc.n	8000f7e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800101e:	2300      	movs	r3, #0
 8001020:	73fb      	strb	r3, [r7, #15]
 8001022:	e044      	b.n	80010ae <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001024:	7bfa      	ldrb	r2, [r7, #15]
 8001026:	6879      	ldr	r1, [r7, #4]
 8001028:	4613      	mov	r3, r2
 800102a:	00db      	lsls	r3, r3, #3
 800102c:	1a9b      	subs	r3, r3, r2
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	440b      	add	r3, r1
 8001032:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800103a:	7bfa      	ldrb	r2, [r7, #15]
 800103c:	6879      	ldr	r1, [r7, #4]
 800103e:	4613      	mov	r3, r2
 8001040:	00db      	lsls	r3, r3, #3
 8001042:	1a9b      	subs	r3, r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	440b      	add	r3, r1
 8001048:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001050:	7bfa      	ldrb	r2, [r7, #15]
 8001052:	6879      	ldr	r1, [r7, #4]
 8001054:	4613      	mov	r3, r2
 8001056:	00db      	lsls	r3, r3, #3
 8001058:	1a9b      	subs	r3, r3, r2
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	440b      	add	r3, r1
 800105e:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001066:	7bfa      	ldrb	r2, [r7, #15]
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	00db      	lsls	r3, r3, #3
 800106e:	1a9b      	subs	r3, r3, r2
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	440b      	add	r3, r1
 8001074:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800107c:	7bfa      	ldrb	r2, [r7, #15]
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	4613      	mov	r3, r2
 8001082:	00db      	lsls	r3, r3, #3
 8001084:	1a9b      	subs	r3, r3, r2
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	440b      	add	r3, r1
 800108a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800108e:	2200      	movs	r2, #0
 8001090:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001092:	7bfa      	ldrb	r2, [r7, #15]
 8001094:	6879      	ldr	r1, [r7, #4]
 8001096:	4613      	mov	r3, r2
 8001098:	00db      	lsls	r3, r3, #3
 800109a:	1a9b      	subs	r3, r3, r2
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	440b      	add	r3, r1
 80010a0:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80010a4:	2200      	movs	r2, #0
 80010a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a8:	7bfb      	ldrb	r3, [r7, #15]
 80010aa:	3301      	adds	r3, #1
 80010ac:	73fb      	strb	r3, [r7, #15]
 80010ae:	7bfa      	ldrb	r2, [r7, #15]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d3b5      	bcc.n	8001024 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	603b      	str	r3, [r7, #0]
 80010be:	687e      	ldr	r6, [r7, #4]
 80010c0:	466d      	mov	r5, sp
 80010c2:	f106 0410 	add.w	r4, r6, #16
 80010c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010cc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ce:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010d2:	e885 0003 	stmia.w	r5, {r0, r1}
 80010d6:	1d33      	adds	r3, r6, #4
 80010d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010da:	6838      	ldr	r0, [r7, #0]
 80010dc:	f002 fc16 	bl	800390c <USB_DevInit>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d005      	beq.n	80010f2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	2202      	movs	r2, #2
 80010ea:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e014      	b.n	800111c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2200      	movs	r2, #0
 80010f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	2201      	movs	r2, #1
 80010fe:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001106:	2b01      	cmp	r3, #1
 8001108:	d102      	bne.n	8001110 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f000 ff56 	bl	8001fbc <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4618      	mov	r0, r3
 8001116:	f003 fbe8 	bl	80048ea <USB_DevDisconnect>

  return HAL_OK;
 800111a:	2300      	movs	r3, #0
}
 800111c:	4618      	mov	r0, r3
 800111e:	3714      	adds	r7, #20
 8001120:	46bd      	mov	sp, r7
 8001122:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001124 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  __HAL_LOCK(hpcd);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001138:	2b01      	cmp	r3, #1
 800113a:	d101      	bne.n	8001140 <HAL_PCD_Start+0x1c>
 800113c:	2302      	movs	r3, #2
 800113e:	e01c      	b.n	800117a <HAL_PCD_Start+0x56>
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2201      	movs	r2, #1
 8001144:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
#if defined (USB_OTG_FS)
  if (hpcd->Init.battery_charging_enable == 1U)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800114c:	2b01      	cmp	r3, #1
 800114e:	d105      	bne.n	800115c <HAL_PCD_Start+0x38>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001154:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined (USB_OTG_FS) */
  __HAL_PCD_ENABLE(hpcd);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f002 fb65 	bl	8003830 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f003 fb9c 	bl	80048a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2200      	movs	r2, #0
 8001174:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001178:	2300      	movs	r3, #0
}
 800117a:	4618      	mov	r0, r3
 800117c:	3710      	adds	r7, #16
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001182:	b590      	push	{r4, r7, lr}
 8001184:	b08d      	sub	sp, #52	; 0x34
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001190:	6a3b      	ldr	r3, [r7, #32]
 8001192:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t temp;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	4618      	mov	r0, r3
 800119a:	f003 fc5a 	bl	8004a52 <USB_GetMode>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f040 8384 	bne.w	80018ae <HAL_PCD_IRQHandler+0x72c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f003 fbbe 	bl	800492c <USB_ReadInterrupts>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	f000 837a 	beq.w	80018ac <HAL_PCD_IRQHandler+0x72a>
    {
      return;
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4618      	mov	r0, r3
 80011be:	f003 fbb5 	bl	800492c <USB_ReadInterrupts>
 80011c2:	4603      	mov	r3, r0
 80011c4:	f003 0302 	and.w	r3, r3, #2
 80011c8:	2b02      	cmp	r3, #2
 80011ca:	d107      	bne.n	80011dc <HAL_PCD_IRQHandler+0x5a>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	695a      	ldr	r2, [r3, #20]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	f002 0202 	and.w	r2, r2, #2
 80011da:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f003 fba3 	bl	800492c <USB_ReadInterrupts>
 80011e6:	4603      	mov	r3, r0
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	2b10      	cmp	r3, #16
 80011ee:	d161      	bne.n	80012b4 <HAL_PCD_IRQHandler+0x132>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	699a      	ldr	r2, [r3, #24]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f022 0210 	bic.w	r2, r2, #16
 80011fe:	619a      	str	r2, [r3, #24]

      temp = USBx->GRXSTSP;
 8001200:	6a3b      	ldr	r3, [r7, #32]
 8001202:	6a1b      	ldr	r3, [r3, #32]
 8001204:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[temp & USB_OTG_GRXSTSP_EPNUM];
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	f003 020f 	and.w	r2, r3, #15
 800120c:	4613      	mov	r3, r2
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	1a9b      	subs	r3, r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	4413      	add	r3, r2
 800121c:	3304      	adds	r3, #4
 800121e:	617b      	str	r3, [r7, #20]

      if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001220:	69bb      	ldr	r3, [r7, #24]
 8001222:	0c5b      	lsrs	r3, r3, #17
 8001224:	f003 030f 	and.w	r3, r3, #15
 8001228:	2b02      	cmp	r3, #2
 800122a:	d124      	bne.n	8001276 <HAL_PCD_IRQHandler+0xf4>
      {
        if ((temp & USB_OTG_GRXSTSP_BCNT) != 0U)
 800122c:	69ba      	ldr	r2, [r7, #24]
 800122e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001232:	4013      	ands	r3, r2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d035      	beq.n	80012a4 <HAL_PCD_IRQHandler+0x122>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001238:	697b      	ldr	r3, [r7, #20]
 800123a:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((temp & USB_OTG_GRXSTSP_BCNT) >> 4));
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	091b      	lsrs	r3, r3, #4
 8001240:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001242:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001246:	b29b      	uxth	r3, r3
 8001248:	461a      	mov	r2, r3
 800124a:	6a38      	ldr	r0, [r7, #32]
 800124c:	f003 f9da 	bl	8004604 <USB_ReadPacket>

          ep->xfer_buff += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	69bb      	ldr	r3, [r7, #24]
 8001256:	091b      	lsrs	r3, r3, #4
 8001258:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800125c:	441a      	add	r2, r3
 800125e:	697b      	ldr	r3, [r7, #20]
 8001260:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	699a      	ldr	r2, [r3, #24]
 8001266:	69bb      	ldr	r3, [r7, #24]
 8001268:	091b      	lsrs	r3, r3, #4
 800126a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800126e:	441a      	add	r2, r3
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	619a      	str	r2, [r3, #24]
 8001274:	e016      	b.n	80012a4 <HAL_PCD_IRQHandler+0x122>
        }
      }
      else if (((temp & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_SETUP_UPDT)
 8001276:	69bb      	ldr	r3, [r7, #24]
 8001278:	0c5b      	lsrs	r3, r3, #17
 800127a:	f003 030f 	and.w	r3, r3, #15
 800127e:	2b06      	cmp	r3, #6
 8001280:	d110      	bne.n	80012a4 <HAL_PCD_IRQHandler+0x122>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001288:	2208      	movs	r2, #8
 800128a:	4619      	mov	r1, r3
 800128c:	6a38      	ldr	r0, [r7, #32]
 800128e:	f003 f9b9 	bl	8004604 <USB_ReadPacket>
        ep->xfer_count += (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	699a      	ldr	r2, [r3, #24]
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	091b      	lsrs	r3, r3, #4
 800129a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800129e:	441a      	add	r2, r3
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	619a      	str	r2, [r3, #24]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	699a      	ldr	r2, [r3, #24]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f042 0210 	orr.w	r2, r2, #16
 80012b2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	4618      	mov	r0, r3
 80012ba:	f003 fb37 	bl	800492c <USB_ReadInterrupts>
 80012be:	4603      	mov	r3, r0
 80012c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012c4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012c8:	d16e      	bne.n	80013a8 <HAL_PCD_IRQHandler+0x226>
    {
      epnum = 0U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f003 fb3d 	bl	8004952 <USB_ReadDevAllOutEpInterrupt>
 80012d8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80012da:	e062      	b.n	80013a2 <HAL_PCD_IRQHandler+0x220>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012de:	f003 0301 	and.w	r3, r3, #1
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d057      	beq.n	8001396 <HAL_PCD_IRQHandler+0x214>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ec:	b2d2      	uxtb	r2, r2
 80012ee:	4611      	mov	r1, r2
 80012f0:	4618      	mov	r0, r3
 80012f2:	f003 fb62 	bl	80049ba <USB_ReadDevOutEPInterrupt>
 80012f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00c      	beq.n	800131c <HAL_PCD_IRQHandler+0x19a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	015a      	lsls	r2, r3, #5
 8001306:	69fb      	ldr	r3, [r7, #28]
 8001308:	4413      	add	r3, r2
 800130a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800130e:	461a      	mov	r2, r3
 8001310:	2301      	movs	r3, #1
 8001312:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001314:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 fd76 	bl	8001e08 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	f003 0308 	and.w	r3, r3, #8
 8001322:	2b00      	cmp	r3, #0
 8001324:	d00c      	beq.n	8001340 <HAL_PCD_IRQHandler+0x1be>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001328:	015a      	lsls	r2, r3, #5
 800132a:	69fb      	ldr	r3, [r7, #28]
 800132c:	4413      	add	r3, r2
 800132e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001332:	461a      	mov	r2, r3
 8001334:	2308      	movs	r3, #8
 8001336:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001338:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f000 fdb2 	bl	8001ea4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001340:	693b      	ldr	r3, [r7, #16]
 8001342:	f003 0310 	and.w	r3, r3, #16
 8001346:	2b00      	cmp	r3, #0
 8001348:	d008      	beq.n	800135c <HAL_PCD_IRQHandler+0x1da>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800134a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800134c:	015a      	lsls	r2, r3, #5
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	4413      	add	r3, r2
 8001352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001356:	461a      	mov	r2, r3
 8001358:	2310      	movs	r3, #16
 800135a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800135c:	693b      	ldr	r3, [r7, #16]
 800135e:	f003 0320 	and.w	r3, r3, #32
 8001362:	2b00      	cmp	r3, #0
 8001364:	d008      	beq.n	8001378 <HAL_PCD_IRQHandler+0x1f6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	015a      	lsls	r2, r3, #5
 800136a:	69fb      	ldr	r3, [r7, #28]
 800136c:	4413      	add	r3, r2
 800136e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001372:	461a      	mov	r2, r3
 8001374:	2320      	movs	r3, #32
 8001376:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d009      	beq.n	8001396 <HAL_PCD_IRQHandler+0x214>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001384:	015a      	lsls	r2, r3, #5
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	4413      	add	r3, r2
 800138a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800138e:	461a      	mov	r2, r3
 8001390:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001394:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001398:	3301      	adds	r3, #1
 800139a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800139c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800139e:	085b      	lsrs	r3, r3, #1
 80013a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80013a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d199      	bne.n	80012dc <HAL_PCD_IRQHandler+0x15a>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4618      	mov	r0, r3
 80013ae:	f003 fabd 	bl	800492c <USB_ReadInterrupts>
 80013b2:	4603      	mov	r3, r0
 80013b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80013b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80013bc:	f040 808c 	bne.w	80014d8 <HAL_PCD_IRQHandler+0x356>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f003 fade 	bl	8004986 <USB_ReadDevAllInEpInterrupt>
 80013ca:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80013d0:	e07e      	b.n	80014d0 <HAL_PCD_IRQHandler+0x34e>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80013d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013d4:	f003 0301 	and.w	r3, r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d073      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x342>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013e2:	b2d2      	uxtb	r2, r2
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f003 fb05 	bl	80049f6 <USB_ReadDevInEPInterrupt>
 80013ec:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d020      	beq.n	800143a <HAL_PCD_IRQHandler+0x2b8>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80013f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fa:	f003 030f 	and.w	r3, r3, #15
 80013fe:	2201      	movs	r2, #1
 8001400:	fa02 f303 	lsl.w	r3, r2, r3
 8001404:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800140c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	43db      	mvns	r3, r3
 8001412:	69f9      	ldr	r1, [r7, #28]
 8001414:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001418:	4013      	ands	r3, r2
 800141a:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800141c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800141e:	015a      	lsls	r2, r3, #5
 8001420:	69fb      	ldr	r3, [r7, #28]
 8001422:	4413      	add	r3, r2
 8001424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001428:	461a      	mov	r2, r3
 800142a:	2301      	movs	r3, #1
 800142c:	6093      	str	r3, [r2, #8]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800142e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4619      	mov	r1, r3
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f005 fb58 	bl	8006aea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	f003 0308 	and.w	r3, r3, #8
 8001440:	2b00      	cmp	r3, #0
 8001442:	d008      	beq.n	8001456 <HAL_PCD_IRQHandler+0x2d4>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	015a      	lsls	r2, r3, #5
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	4413      	add	r3, r2
 800144c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001450:	461a      	mov	r2, r3
 8001452:	2308      	movs	r3, #8
 8001454:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	f003 0310 	and.w	r3, r3, #16
 800145c:	2b00      	cmp	r3, #0
 800145e:	d008      	beq.n	8001472 <HAL_PCD_IRQHandler+0x2f0>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001462:	015a      	lsls	r2, r3, #5
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	4413      	add	r3, r2
 8001468:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800146c:	461a      	mov	r2, r3
 800146e:	2310      	movs	r3, #16
 8001470:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001478:	2b00      	cmp	r3, #0
 800147a:	d008      	beq.n	800148e <HAL_PCD_IRQHandler+0x30c>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	015a      	lsls	r2, r3, #5
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	4413      	add	r3, r2
 8001484:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001488:	461a      	mov	r2, r3
 800148a:	2340      	movs	r3, #64	; 0x40
 800148c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d00c      	beq.n	80014b2 <HAL_PCD_IRQHandler+0x330>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001498:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800149a:	6a38      	ldr	r0, [r7, #32]
 800149c:	f002 fb82 	bl	8003ba4 <USB_FlushTxFifo>
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80014a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014a2:	015a      	lsls	r2, r3, #5
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	4413      	add	r3, r2
 80014a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014ac:	461a      	mov	r2, r3
 80014ae:	2302      	movs	r3, #2
 80014b0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d003      	beq.n	80014c4 <HAL_PCD_IRQHandler+0x342>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80014bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f000 fc1a 	bl	8001cf8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80014c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014c6:	3301      	adds	r3, #1
 80014c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80014ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014cc:	085b      	lsrs	r3, r3, #1
 80014ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	f47f af7d 	bne.w	80013d2 <HAL_PCD_IRQHandler+0x250>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4618      	mov	r0, r3
 80014de:	f003 fa25 	bl	800492c <USB_ReadInterrupts>
 80014e2:	4603      	mov	r3, r0
 80014e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80014e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014ec:	d122      	bne.n	8001534 <HAL_PCD_IRQHandler+0x3b2>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80014ee:	69fb      	ldr	r3, [r7, #28]
 80014f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	69fa      	ldr	r2, [r7, #28]
 80014f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80014fc:	f023 0301 	bic.w	r3, r3, #1
 8001500:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 8001508:	2b01      	cmp	r3, #1
 800150a:	d108      	bne.n	800151e <HAL_PCD_IRQHandler+0x39c>
      {
        hpcd->LPM_State = LPM_L0;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2200      	movs	r2, #0
 8001510:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001514:	2100      	movs	r1, #0
 8001516:	6878      	ldr	r0, [r7, #4]
 8001518:	f005 fe00 	bl	800711c <HAL_PCDEx_LPM_Callback>
 800151c:	e002      	b.n	8001524 <HAL_PCD_IRQHandler+0x3a2>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800151e:	6878      	ldr	r0, [r7, #4]
 8001520:	f005 fb50 	bl	8006bc4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001532:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4618      	mov	r0, r3
 800153a:	f003 f9f7 	bl	800492c <USB_ReadInterrupts>
 800153e:	4603      	mov	r3, r0
 8001540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001544:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001548:	d112      	bne.n	8001570 <HAL_PCD_IRQHandler+0x3ee>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	f003 0301 	and.w	r3, r3, #1
 8001556:	2b01      	cmp	r3, #1
 8001558:	d102      	bne.n	8001560 <HAL_PCD_IRQHandler+0x3de>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f005 fb0c 	bl	8006b78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	695a      	ldr	r2, [r3, #20]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800156e:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f003 f9d9 	bl	800492c <USB_ReadInterrupts>
 800157a:	4603      	mov	r3, r0
 800157c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001580:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001584:	d121      	bne.n	80015ca <HAL_PCD_IRQHandler+0x448>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	695a      	ldr	r2, [r3, #20]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8001594:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	f893 33f4 	ldrb.w	r3, [r3, #1012]	; 0x3f4
 800159c:	2b00      	cmp	r3, #0
 800159e:	d111      	bne.n	80015c4 <HAL_PCD_IRQHandler+0x442>
      {
        hpcd->LPM_State = LPM_L1;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2201      	movs	r2, #1
 80015a4:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	f003 020f 	and.w	r2, r3, #15
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	f8c3 23f8 	str.w	r2, [r3, #1016]	; 0x3f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80015ba:	2101      	movs	r1, #1
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f005 fdad 	bl	800711c <HAL_PCDEx_LPM_Callback>
 80015c2:	e002      	b.n	80015ca <HAL_PCD_IRQHandler+0x448>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80015c4:	6878      	ldr	r0, [r7, #4]
 80015c6:	f005 fad7 	bl	8006b78 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f003 f9ac 	bl	800492c <USB_ReadInterrupts>
 80015d4:	4603      	mov	r3, r0
 80015d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80015de:	f040 80b5 	bne.w	800174c <HAL_PCD_IRQHandler+0x5ca>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	69fa      	ldr	r2, [r7, #28]
 80015ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80015f0:	f023 0301 	bic.w	r3, r3, #1
 80015f4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2110      	movs	r1, #16
 80015fc:	4618      	mov	r0, r3
 80015fe:	f002 fad1 	bl	8003ba4 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001606:	e046      	b.n	8001696 <HAL_PCD_IRQHandler+0x514>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160a:	015a      	lsls	r2, r3, #5
 800160c:	69fb      	ldr	r3, [r7, #28]
 800160e:	4413      	add	r3, r2
 8001610:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001614:	461a      	mov	r2, r3
 8001616:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800161a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800161c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800161e:	015a      	lsls	r2, r3, #5
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	4413      	add	r3, r2
 8001624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800162c:	0151      	lsls	r1, r2, #5
 800162e:	69fa      	ldr	r2, [r7, #28]
 8001630:	440a      	add	r2, r1
 8001632:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001636:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800163a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800163c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800163e:	015a      	lsls	r2, r3, #5
 8001640:	69fb      	ldr	r3, [r7, #28]
 8001642:	4413      	add	r3, r2
 8001644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001648:	461a      	mov	r2, r3
 800164a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800164e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001652:	015a      	lsls	r2, r3, #5
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	4413      	add	r3, r2
 8001658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001660:	0151      	lsls	r1, r2, #5
 8001662:	69fa      	ldr	r2, [r7, #28]
 8001664:	440a      	add	r2, r1
 8001666:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800166a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800166e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001672:	015a      	lsls	r2, r3, #5
 8001674:	69fb      	ldr	r3, [r7, #28]
 8001676:	4413      	add	r3, r2
 8001678:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001680:	0151      	lsls	r1, r2, #5
 8001682:	69fa      	ldr	r2, [r7, #28]
 8001684:	440a      	add	r2, r1
 8001686:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800168a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800168e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001690:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001692:	3301      	adds	r3, #1
 8001694:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800169c:	429a      	cmp	r2, r3
 800169e:	d3b3      	bcc.n	8001608 <HAL_PCD_IRQHandler+0x486>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a6:	69db      	ldr	r3, [r3, #28]
 80016a8:	69fa      	ldr	r2, [r7, #28]
 80016aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016ae:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80016b2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d016      	beq.n	80016ea <HAL_PCD_IRQHandler+0x568>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016c6:	69fa      	ldr	r2, [r7, #28]
 80016c8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016cc:	f043 030b 	orr.w	r3, r3, #11
 80016d0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016dc:	69fa      	ldr	r2, [r7, #28]
 80016de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016e2:	f043 030b 	orr.w	r3, r3, #11
 80016e6:	6453      	str	r3, [r2, #68]	; 0x44
 80016e8:	e015      	b.n	8001716 <HAL_PCD_IRQHandler+0x594>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016f0:	695b      	ldr	r3, [r3, #20]
 80016f2:	69fa      	ldr	r2, [r7, #28]
 80016f4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016f8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80016fc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001700:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001702:	69fb      	ldr	r3, [r7, #28]
 8001704:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001708:	691b      	ldr	r3, [r3, #16]
 800170a:	69fa      	ldr	r2, [r7, #28]
 800170c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001710:	f043 030b 	orr.w	r3, r3, #11
 8001714:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	69fa      	ldr	r2, [r7, #28]
 8001720:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001724:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8001728:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001734:	4619      	mov	r1, r3
 8001736:	4610      	mov	r0, r2
 8001738:	f003 f9bc 	bl	8004ab4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	695a      	ldr	r2, [r3, #20]
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800174a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f003 f8eb 	bl	800492c <USB_ReadInterrupts>
 8001756:	4603      	mov	r3, r0
 8001758:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800175c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001760:	d124      	bne.n	80017ac <HAL_PCD_IRQHandler+0x62a>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f003 f981 	bl	8004a6e <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4618      	mov	r0, r3
 8001772:	f002 fa90 	bl	8003c96 <USB_GetDevSpeed>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681c      	ldr	r4, [r3, #0]
 8001782:	f001 fa47 	bl	8002c14 <HAL_RCC_GetHCLKFreq>
 8001786:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800178c:	b2db      	uxtb	r3, r3
 800178e:	461a      	mov	r2, r3
 8001790:	4620      	mov	r0, r4
 8001792:	f001 ffb1 	bl	80036f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001796:	6878      	ldr	r0, [r7, #4]
 8001798:	f005 f9cf 	bl	8006b3a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80017aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f003 f8bb 	bl	800492c <USB_ReadInterrupts>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f003 0308 	and.w	r3, r3, #8
 80017bc:	2b08      	cmp	r3, #8
 80017be:	d10a      	bne.n	80017d6 <HAL_PCD_IRQHandler+0x654>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f005 f9ac 	bl	8006b1e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	695a      	ldr	r2, [r3, #20]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f002 0208 	and.w	r2, r2, #8
 80017d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4618      	mov	r0, r3
 80017dc:	f003 f8a6 	bl	800492c <USB_ReadInterrupts>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80017ea:	d10f      	bne.n	800180c <HAL_PCD_IRQHandler+0x68a>
    {
      /* Keep application checking the corresponding Iso IN endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80017f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f2:	b2db      	uxtb	r3, r3
 80017f4:	4619      	mov	r1, r3
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f005 fa1e 	bl	8006c38 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	695a      	ldr	r2, [r3, #20]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800180a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f003 f88b 	bl	800492c <USB_ReadInterrupts>
 8001816:	4603      	mov	r3, r0
 8001818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800181c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001820:	d10f      	bne.n	8001842 <HAL_PCD_IRQHandler+0x6c0>
    {
      /* Keep application checking the corresponding Iso OUT endpoint
      causing the incomplete Interrupt */
      epnum = 0U;
 8001822:	2300      	movs	r3, #0
 8001824:	627b      	str	r3, [r7, #36]	; 0x24

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001828:	b2db      	uxtb	r3, r3
 800182a:	4619      	mov	r1, r3
 800182c:	6878      	ldr	r0, [r7, #4]
 800182e:	f005 f9f1 	bl	8006c14 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	695a      	ldr	r2, [r3, #20]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	4618      	mov	r0, r3
 8001848:	f003 f870 	bl	800492c <USB_ReadInterrupts>
 800184c:	4603      	mov	r3, r0
 800184e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001856:	d10a      	bne.n	800186e <HAL_PCD_IRQHandler+0x6ec>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001858:	6878      	ldr	r0, [r7, #4]
 800185a:	f005 f9ff 	bl	8006c5c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	695a      	ldr	r2, [r3, #20]
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800186c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f003 f85a 	bl	800492c <USB_ReadInterrupts>
 8001878:	4603      	mov	r3, r0
 800187a:	f003 0304 	and.w	r3, r3, #4
 800187e:	2b04      	cmp	r3, #4
 8001880:	d115      	bne.n	80018ae <HAL_PCD_IRQHandler+0x72c>
    {
      temp = hpcd->Instance->GOTGINT;
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	61bb      	str	r3, [r7, #24]

      if ((temp & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800188a:	69bb      	ldr	r3, [r7, #24]
 800188c:	f003 0304 	and.w	r3, r3, #4
 8001890:	2b00      	cmp	r3, #0
 8001892:	d002      	beq.n	800189a <HAL_PCD_IRQHandler+0x718>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001894:	6878      	ldr	r0, [r7, #4]
 8001896:	f005 f9ef 	bl	8006c78 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= temp;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	6859      	ldr	r1, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	69ba      	ldr	r2, [r7, #24]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	e000      	b.n	80018ae <HAL_PCD_IRQHandler+0x72c>
      return;
 80018ac:	bf00      	nop
    }
  }
}
 80018ae:	3734      	adds	r7, #52	; 0x34
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd90      	pop	{r4, r7, pc}

080018b4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b082      	sub	sp, #8
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d101      	bne.n	80018ce <HAL_PCD_SetAddress+0x1a>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e013      	b.n	80018f6 <HAL_PCD_SetAddress+0x42>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2201      	movs	r2, #1
 80018d2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  hpcd->USB_Address = address;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	4611      	mov	r1, r2
 80018e6:	4618      	mov	r0, r3
 80018e8:	f002 ffb8 	bl	800485c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}

080018fe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80018fe:	b580      	push	{r7, lr}
 8001900:	b084      	sub	sp, #16
 8001902:	af00      	add	r7, sp, #0
 8001904:	6078      	str	r0, [r7, #4]
 8001906:	4608      	mov	r0, r1
 8001908:	4611      	mov	r1, r2
 800190a:	461a      	mov	r2, r3
 800190c:	4603      	mov	r3, r0
 800190e:	70fb      	strb	r3, [r7, #3]
 8001910:	460b      	mov	r3, r1
 8001912:	803b      	strh	r3, [r7, #0]
 8001914:	4613      	mov	r3, r2
 8001916:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001918:	2300      	movs	r3, #0
 800191a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800191c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001920:	2b00      	cmp	r3, #0
 8001922:	da0f      	bge.n	8001944 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001924:	78fb      	ldrb	r3, [r7, #3]
 8001926:	f003 020f 	and.w	r2, r3, #15
 800192a:	4613      	mov	r3, r2
 800192c:	00db      	lsls	r3, r3, #3
 800192e:	1a9b      	subs	r3, r3, r2
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	3338      	adds	r3, #56	; 0x38
 8001934:	687a      	ldr	r2, [r7, #4]
 8001936:	4413      	add	r3, r2
 8001938:	3304      	adds	r3, #4
 800193a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2201      	movs	r2, #1
 8001940:	705a      	strb	r2, [r3, #1]
 8001942:	e00f      	b.n	8001964 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	f003 020f 	and.w	r2, r3, #15
 800194a:	4613      	mov	r3, r2
 800194c:	00db      	lsls	r3, r3, #3
 800194e:	1a9b      	subs	r3, r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	3304      	adds	r3, #4
 800195c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2200      	movs	r2, #0
 8001962:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	b2da      	uxtb	r2, r3
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001970:	883a      	ldrh	r2, [r7, #0]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	78ba      	ldrb	r2, [r7, #2]
 800197a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d004      	beq.n	800198e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	b29a      	uxth	r2, r3
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	80da      	strh	r2, [r3, #6]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800198e:	78bb      	ldrb	r3, [r7, #2]
 8001990:	2b02      	cmp	r3, #2
 8001992:	d102      	bne.n	800199a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	2200      	movs	r2, #0
 8001998:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	d101      	bne.n	80019a8 <HAL_PCD_EP_Open+0xaa>
 80019a4:	2302      	movs	r3, #2
 80019a6:	e00e      	b.n	80019c6 <HAL_PCD_EP_Open+0xc8>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2201      	movs	r2, #1
 80019ac:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	68f9      	ldr	r1, [r7, #12]
 80019b6:	4618      	mov	r0, r3
 80019b8:	f002 f98c 	bl	8003cd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	2200      	movs	r2, #0
 80019c0:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return ret;
 80019c4:	7afb      	ldrb	r3, [r7, #11]
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3710      	adds	r7, #16
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b084      	sub	sp, #16
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	6078      	str	r0, [r7, #4]
 80019d6:	460b      	mov	r3, r1
 80019d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80019da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	da0f      	bge.n	8001a02 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019e2:	78fb      	ldrb	r3, [r7, #3]
 80019e4:	f003 020f 	and.w	r2, r3, #15
 80019e8:	4613      	mov	r3, r2
 80019ea:	00db      	lsls	r3, r3, #3
 80019ec:	1a9b      	subs	r3, r3, r2
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	3338      	adds	r3, #56	; 0x38
 80019f2:	687a      	ldr	r2, [r7, #4]
 80019f4:	4413      	add	r3, r2
 80019f6:	3304      	adds	r3, #4
 80019f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	2201      	movs	r2, #1
 80019fe:	705a      	strb	r2, [r3, #1]
 8001a00:	e00f      	b.n	8001a22 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a02:	78fb      	ldrb	r3, [r7, #3]
 8001a04:	f003 020f 	and.w	r2, r3, #15
 8001a08:	4613      	mov	r3, r2
 8001a0a:	00db      	lsls	r3, r3, #3
 8001a0c:	1a9b      	subs	r3, r3, r2
 8001a0e:	009b      	lsls	r3, r3, #2
 8001a10:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	4413      	add	r3, r2
 8001a18:	3304      	adds	r3, #4
 8001a1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2200      	movs	r2, #0
 8001a20:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001a22:	78fb      	ldrb	r3, [r7, #3]
 8001a24:	f003 030f 	and.w	r3, r3, #15
 8001a28:	b2da      	uxtb	r2, r3
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d101      	bne.n	8001a3c <HAL_PCD_EP_Close+0x6e>
 8001a38:	2302      	movs	r3, #2
 8001a3a:	e00e      	b.n	8001a5a <HAL_PCD_EP_Close+0x8c>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2201      	movs	r2, #1
 8001a40:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	68f9      	ldr	r1, [r7, #12]
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	f002 f9ca 	bl	8003de4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  return HAL_OK;
 8001a58:	2300      	movs	r3, #0
}
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	3710      	adds	r7, #16
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b086      	sub	sp, #24
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	60f8      	str	r0, [r7, #12]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
 8001a6e:	460b      	mov	r3, r1
 8001a70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a72:	7afb      	ldrb	r3, [r7, #11]
 8001a74:	f003 020f 	and.w	r2, r3, #15
 8001a78:	4613      	mov	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	1a9b      	subs	r3, r3, r2
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001a84:	68fa      	ldr	r2, [r7, #12]
 8001a86:	4413      	add	r3, r2
 8001a88:	3304      	adds	r3, #4
 8001a8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	615a      	str	r2, [r3, #20]
  ep->xfer_count = 0U;
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	619a      	str	r2, [r3, #24]
  ep->is_in = 0U;
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001aa4:	7afb      	ldrb	r3, [r7, #11]
 8001aa6:	f003 030f 	and.w	r3, r3, #15
 8001aaa:	b2da      	uxtb	r2, r3
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ab0:	7afb      	ldrb	r3, [r7, #11]
 8001ab2:	f003 030f 	and.w	r3, r3, #15
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d106      	bne.n	8001ac8 <HAL_PCD_EP_Receive+0x66>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	6979      	ldr	r1, [r7, #20]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f002 fc47 	bl	8004354 <USB_EP0StartXfer>
 8001ac6:	e005      	b.n	8001ad4 <HAL_PCD_EP_Receive+0x72>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	6979      	ldr	r1, [r7, #20]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f002 fa64 	bl	8003f9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3718      	adds	r7, #24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b083      	sub	sp, #12
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	f003 020f 	and.w	r2, r3, #15
 8001af0:	6879      	ldr	r1, [r7, #4]
 8001af2:	4613      	mov	r3, r2
 8001af4:	00db      	lsls	r3, r3, #3
 8001af6:	1a9b      	subs	r3, r3, r2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	440b      	add	r3, r1
 8001afc:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001b00:	681b      	ldr	r3, [r3, #0]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b086      	sub	sp, #24
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	60f8      	str	r0, [r7, #12]
 8001b16:	607a      	str	r2, [r7, #4]
 8001b18:	603b      	str	r3, [r7, #0]
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b1e:	7afb      	ldrb	r3, [r7, #11]
 8001b20:	f003 020f 	and.w	r2, r3, #15
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	1a9b      	subs	r3, r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	3338      	adds	r3, #56	; 0x38
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	4413      	add	r3, r2
 8001b32:	3304      	adds	r3, #4
 8001b34:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b36:	697b      	ldr	r3, [r7, #20]
 8001b38:	687a      	ldr	r2, [r7, #4]
 8001b3a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	683a      	ldr	r2, [r7, #0]
 8001b40:	615a      	str	r2, [r3, #20]
#if defined (USB)
  ep->xfer_fill_db = 1U;
  ep->xfer_len_db = len;
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2200      	movs	r2, #0
 8001b46:	619a      	str	r2, [r3, #24]
  ep->is_in = 1U;
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b4e:	7afb      	ldrb	r3, [r7, #11]
 8001b50:	f003 030f 	and.w	r3, r3, #15
 8001b54:	b2da      	uxtb	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b5a:	7afb      	ldrb	r3, [r7, #11]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d106      	bne.n	8001b72 <HAL_PCD_EP_Transmit+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6979      	ldr	r1, [r7, #20]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f002 fbf2 	bl	8004354 <USB_EP0StartXfer>
 8001b70:	e005      	b.n	8001b7e <HAL_PCD_EP_Transmit+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	6979      	ldr	r1, [r7, #20]
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f002 fa0f 	bl	8003f9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001b7e:	2300      	movs	r3, #0
}
 8001b80:	4618      	mov	r0, r3
 8001b82:	3718      	adds	r7, #24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b084      	sub	sp, #16
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	460b      	mov	r3, r1
 8001b92:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b94:	78fb      	ldrb	r3, [r7, #3]
 8001b96:	f003 020f 	and.w	r2, r3, #15
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d901      	bls.n	8001ba6 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e04e      	b.n	8001c44 <HAL_PCD_EP_SetStall+0xbc>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001ba6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	da0f      	bge.n	8001bce <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bae:	78fb      	ldrb	r3, [r7, #3]
 8001bb0:	f003 020f 	and.w	r2, r3, #15
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	1a9b      	subs	r3, r3, r2
 8001bba:	009b      	lsls	r3, r3, #2
 8001bbc:	3338      	adds	r3, #56	; 0x38
 8001bbe:	687a      	ldr	r2, [r7, #4]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2201      	movs	r2, #1
 8001bca:	705a      	strb	r2, [r3, #1]
 8001bcc:	e00d      	b.n	8001bea <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001bce:	78fa      	ldrb	r2, [r7, #3]
 8001bd0:	4613      	mov	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	1a9b      	subs	r3, r3, r2
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001bdc:	687a      	ldr	r2, [r7, #4]
 8001bde:	4413      	add	r3, r2
 8001be0:	3304      	adds	r3, #4
 8001be2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	2200      	movs	r2, #0
 8001be8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2201      	movs	r2, #1
 8001bee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001bf0:	78fb      	ldrb	r3, [r7, #3]
 8001bf2:	f003 030f 	and.w	r3, r3, #15
 8001bf6:	b2da      	uxtb	r2, r3
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d101      	bne.n	8001c0a <HAL_PCD_EP_SetStall+0x82>
 8001c06:	2302      	movs	r3, #2
 8001c08:	e01c      	b.n	8001c44 <HAL_PCD_EP_SetStall+0xbc>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	68f9      	ldr	r1, [r7, #12]
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f002 fd4b 	bl	80046b4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c1e:	78fb      	ldrb	r3, [r7, #3]
 8001c20:	f003 030f 	and.w	r3, r3, #15
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d108      	bne.n	8001c3a <HAL_PCD_EP_SetStall+0xb2>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8001c32:	4619      	mov	r1, r3
 8001c34:	4610      	mov	r0, r2
 8001c36:	f002 ff3d 	bl	8004ab4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001c58:	78fb      	ldrb	r3, [r7, #3]
 8001c5a:	f003 020f 	and.w	r2, r3, #15
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d901      	bls.n	8001c6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e042      	b.n	8001cf0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	da0f      	bge.n	8001c92 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	f003 020f 	and.w	r2, r3, #15
 8001c78:	4613      	mov	r3, r2
 8001c7a:	00db      	lsls	r3, r3, #3
 8001c7c:	1a9b      	subs	r3, r3, r2
 8001c7e:	009b      	lsls	r3, r3, #2
 8001c80:	3338      	adds	r3, #56	; 0x38
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	4413      	add	r3, r2
 8001c86:	3304      	adds	r3, #4
 8001c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	705a      	strb	r2, [r3, #1]
 8001c90:	e00f      	b.n	8001cb2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	f003 020f 	and.w	r2, r3, #15
 8001c98:	4613      	mov	r3, r2
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	1a9b      	subs	r3, r3, r2
 8001c9e:	009b      	lsls	r3, r3, #2
 8001ca0:	f503 73fc 	add.w	r3, r3, #504	; 0x1f8
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	3304      	adds	r3, #4
 8001caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cb8:	78fb      	ldrb	r3, [r7, #3]
 8001cba:	f003 030f 	and.w	r3, r3, #15
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f893 33bc 	ldrb.w	r3, [r3, #956]	; 0x3bc
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d101      	bne.n	8001cd2 <HAL_PCD_EP_ClrStall+0x86>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e00e      	b.n	8001cf0 <HAL_PCD_EP_ClrStall+0xa4>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	68f9      	ldr	r1, [r7, #12]
 8001ce0:	4618      	mov	r0, r3
 8001ce2:	f002 fd55 	bl	8004790 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3710      	adds	r7, #16
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b088      	sub	sp, #32
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d08:	697b      	ldr	r3, [r7, #20]
 8001d0a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001d0c:	683a      	ldr	r2, [r7, #0]
 8001d0e:	4613      	mov	r3, r2
 8001d10:	00db      	lsls	r3, r3, #3
 8001d12:	1a9b      	subs	r3, r3, r2
 8001d14:	009b      	lsls	r3, r3, #2
 8001d16:	3338      	adds	r3, #56	; 0x38
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	4413      	add	r3, r2
 8001d1c:	3304      	adds	r3, #4
 8001d1e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	699a      	ldr	r2, [r3, #24]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d901      	bls.n	8001d30 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e067      	b.n	8001e00 <PCD_WriteEmptyTxFifo+0x108>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	695a      	ldr	r2, [r3, #20]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	699b      	ldr	r3, [r3, #24]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	69fa      	ldr	r2, [r7, #28]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d902      	bls.n	8001d4c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	3303      	adds	r3, #3
 8001d50:	089b      	lsrs	r3, r3, #2
 8001d52:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001d54:	e026      	b.n	8001da4 <PCD_WriteEmptyTxFifo+0xac>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	699b      	ldr	r3, [r3, #24]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	689b      	ldr	r3, [r3, #8]
 8001d66:	69fa      	ldr	r2, [r7, #28]
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	d902      	bls.n	8001d72 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3303      	adds	r3, #3
 8001d76:	089b      	lsrs	r3, r3, #2
 8001d78:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	68d9      	ldr	r1, [r3, #12]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	b2da      	uxtb	r2, r3
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	b29b      	uxth	r3, r3
 8001d86:	6978      	ldr	r0, [r7, #20]
 8001d88:	f002 fc02 	bl	8004590 <USB_WritePacket>

    ep->xfer_buff  += len;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	441a      	add	r2, r3
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	699a      	ldr	r2, [r3, #24]
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	441a      	add	r2, r3
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	619a      	str	r2, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	015a      	lsls	r2, r3, #5
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	4413      	add	r3, r2
 8001dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001db0:	699b      	ldr	r3, [r3, #24]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d809      	bhi.n	8001dce <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	699a      	ldr	r2, [r3, #24]
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	695b      	ldr	r3, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001dc2:	429a      	cmp	r2, r3
 8001dc4:	d203      	bcs.n	8001dce <PCD_WriteEmptyTxFifo+0xd6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	695b      	ldr	r3, [r3, #20]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d1c3      	bne.n	8001d56 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	695a      	ldr	r2, [r3, #20]
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	699b      	ldr	r3, [r3, #24]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d811      	bhi.n	8001dfe <PCD_WriteEmptyTxFifo+0x106>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	2201      	movs	r2, #1
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	43db      	mvns	r3, r3
 8001df4:	6939      	ldr	r1, [r7, #16]
 8001df6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3720      	adds	r7, #32
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	333c      	adds	r3, #60	; 0x3c
 8001e20:	3304      	adds	r3, #4
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	015a      	lsls	r2, r3, #5
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4413      	add	r3, r2
 8001e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e32:	689b      	ldr	r3, [r3, #8]
 8001e34:	60bb      	str	r3, [r7, #8]

  if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	4a19      	ldr	r2, [pc, #100]	; (8001ea0 <PCD_EP_OutXfrComplete_int+0x98>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d124      	bne.n	8001e88 <PCD_EP_OutXfrComplete_int+0x80>
  {
    /* StupPktRcvd = 1 this is a setup packet */
    if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <PCD_EP_OutXfrComplete_int+0x56>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	015a      	lsls	r2, r3, #5
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	4413      	add	r3, r2
 8001e50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e54:	461a      	mov	r2, r3
 8001e56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e5a:	6093      	str	r3, [r2, #8]
 8001e5c:	e01a      	b.n	8001e94 <PCD_EP_OutXfrComplete_int+0x8c>
    }
    else
    {
      if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	f003 0320 	and.w	r3, r3, #32
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d008      	beq.n	8001e7a <PCD_EP_OutXfrComplete_int+0x72>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	015a      	lsls	r2, r3, #5
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	4413      	add	r3, r2
 8001e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e74:	461a      	mov	r2, r3
 8001e76:	2320      	movs	r3, #32
 8001e78:	6093      	str	r3, [r2, #8]
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	b2db      	uxtb	r3, r3
 8001e7e:	4619      	mov	r1, r3
 8001e80:	6878      	ldr	r0, [r7, #4]
 8001e82:	f004 fe17 	bl	8006ab4 <HAL_PCD_DataOutStageCallback>
 8001e86:	e005      	b.n	8001e94 <PCD_EP_OutXfrComplete_int+0x8c>
  else
  {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
    HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	b2db      	uxtb	r3, r3
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f004 fe10 	bl	8006ab4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8001e94:	2300      	movs	r3, #0
}
 8001e96:	4618      	mov	r0, r3
 8001e98:	3718      	adds	r7, #24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	4f54310a 	.word	0x4f54310a

08001ea4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b086      	sub	sp, #24
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	333c      	adds	r3, #60	; 0x3c
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	015a      	lsls	r2, r3, #5
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	4a0c      	ldr	r2, [pc, #48]	; (8001f08 <PCD_EP_OutSetupPacket_int+0x64>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d90e      	bls.n	8001ef8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d009      	beq.n	8001ef8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	015a      	lsls	r2, r3, #5
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	4413      	add	r3, r2
 8001eec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ef6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f004 fdc9 	bl	8006a90 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3718      	adds	r7, #24
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	4f54300a 	.word	0x4f54300a

08001f0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b085      	sub	sp, #20
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	70fb      	strb	r3, [r7, #3]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d107      	bne.n	8001f3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8001f2a:	883b      	ldrh	r3, [r7, #0]
 8001f2c:	0419      	lsls	r1, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68ba      	ldr	r2, [r7, #8]
 8001f34:	430a      	orrs	r2, r1
 8001f36:	629a      	str	r2, [r3, #40]	; 0x28
 8001f38:	e028      	b.n	8001f8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f40:	0c1b      	lsrs	r3, r3, #16
 8001f42:	68ba      	ldr	r2, [r7, #8]
 8001f44:	4413      	add	r3, r2
 8001f46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001f48:	2300      	movs	r3, #0
 8001f4a:	73fb      	strb	r3, [r7, #15]
 8001f4c:	e00d      	b.n	8001f6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681a      	ldr	r2, [r3, #0]
 8001f52:	7bfb      	ldrb	r3, [r7, #15]
 8001f54:	3340      	adds	r3, #64	; 0x40
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	4413      	add	r3, r2
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	0c1b      	lsrs	r3, r3, #16
 8001f5e:	68ba      	ldr	r2, [r7, #8]
 8001f60:	4413      	add	r3, r2
 8001f62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	3301      	adds	r3, #1
 8001f68:	73fb      	strb	r3, [r7, #15]
 8001f6a:	7bfa      	ldrb	r2, [r7, #15]
 8001f6c:	78fb      	ldrb	r3, [r7, #3]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d3ec      	bcc.n	8001f4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8001f74:	883b      	ldrh	r3, [r7, #0]
 8001f76:	0418      	lsls	r0, r3, #16
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6819      	ldr	r1, [r3, #0]
 8001f7c:	78fb      	ldrb	r3, [r7, #3]
 8001f7e:	3b01      	subs	r3, #1
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	4302      	orrs	r2, r0
 8001f84:	3340      	adds	r3, #64	; 0x40
 8001f86:	009b      	lsls	r3, r3, #2
 8001f88:	440b      	add	r3, r1
 8001f8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	b083      	sub	sp, #12
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	887a      	ldrh	r2, [r7, #2]
 8001fac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	370c      	adds	r7, #12
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2201      	movs	r2, #1
 8001fce:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	699b      	ldr	r3, [r3, #24]
 8001fde:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fee:	f043 0303 	orr.w	r3, r3, #3
 8001ff2:	68fa      	ldr	r2, [r7, #12]
 8001ff4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3714      	adds	r7, #20
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002008:	4b04      	ldr	r3, [pc, #16]	; (800201c <HAL_PWREx_GetVoltageRange+0x18>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002010:	4618      	mov	r0, r3
 8002012:	46bd      	mov	sp, r7
 8002014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002018:	4770      	bx	lr
 800201a:	bf00      	nop
 800201c:	40007000 	.word	0x40007000

08002020 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800202e:	d130      	bne.n	8002092 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002030:	4b23      	ldr	r3, [pc, #140]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002038:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800203c:	d038      	beq.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800203e:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002046:	4a1e      	ldr	r2, [pc, #120]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002048:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800204e:	4b1d      	ldr	r3, [pc, #116]	; (80020c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2232      	movs	r2, #50	; 0x32
 8002054:	fb02 f303 	mul.w	r3, r2, r3
 8002058:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800205a:	fba2 2303 	umull	r2, r3, r2, r3
 800205e:	0c9b      	lsrs	r3, r3, #18
 8002060:	3301      	adds	r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002064:	e002      	b.n	800206c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	3b01      	subs	r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800206c:	4b14      	ldr	r3, [pc, #80]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800206e:	695b      	ldr	r3, [r3, #20]
 8002070:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002074:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002078:	d102      	bne.n	8002080 <HAL_PWREx_ControlVoltageScaling+0x60>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1f2      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002082:	695b      	ldr	r3, [r3, #20]
 8002084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002088:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208c:	d110      	bne.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e00f      	b.n	80020b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002092:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800209a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800209e:	d007      	beq.n	80020b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020a8:	4a05      	ldr	r2, [pc, #20]	; (80020c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3714      	adds	r7, #20
 80020b6:	46bd      	mov	sp, r7
 80020b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020bc:	4770      	bx	lr
 80020be:	bf00      	nop
 80020c0:	40007000 	.word	0x40007000
 80020c4:	20000000 	.word	0x20000000
 80020c8:	431bde83 	.word	0x431bde83

080020cc <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 80020d0:	4b05      	ldr	r3, [pc, #20]	; (80020e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_PWREx_EnableVddUSB+0x1c>)
 80020d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020da:	6053      	str	r3, [r2, #4]
}
 80020dc:	bf00      	nop
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40007000 	.word	0x40007000

080020ec <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b088      	sub	sp, #32
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d102      	bne.n	8002100 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80020fa:	2301      	movs	r3, #1
 80020fc:	f000 bc16 	b.w	800292c <HAL_RCC_OscConfig+0x840>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002100:	4ba0      	ldr	r3, [pc, #640]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f003 030c 	and.w	r3, r3, #12
 8002108:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800210a:	4b9e      	ldr	r3, [pc, #632]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0310 	and.w	r3, r3, #16
 800211c:	2b00      	cmp	r3, #0
 800211e:	f000 80e4 	beq.w	80022ea <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d007      	beq.n	8002138 <HAL_RCC_OscConfig+0x4c>
 8002128:	69bb      	ldr	r3, [r7, #24]
 800212a:	2b0c      	cmp	r3, #12
 800212c:	f040 808b 	bne.w	8002246 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	2b01      	cmp	r3, #1
 8002134:	f040 8087 	bne.w	8002246 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002138:	4b92      	ldr	r3, [pc, #584]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0302 	and.w	r3, r3, #2
 8002140:	2b00      	cmp	r3, #0
 8002142:	d005      	beq.n	8002150 <HAL_RCC_OscConfig+0x64>
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	699b      	ldr	r3, [r3, #24]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e3ed      	b.n	800292c <HAL_RCC_OscConfig+0x840>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1a      	ldr	r2, [r3, #32]
 8002154:	4b8b      	ldr	r3, [pc, #556]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0308 	and.w	r3, r3, #8
 800215c:	2b00      	cmp	r3, #0
 800215e:	d004      	beq.n	800216a <HAL_RCC_OscConfig+0x7e>
 8002160:	4b88      	ldr	r3, [pc, #544]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002168:	e005      	b.n	8002176 <HAL_RCC_OscConfig+0x8a>
 800216a:	4b86      	ldr	r3, [pc, #536]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 800216c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002176:	4293      	cmp	r3, r2
 8002178:	d223      	bcs.n	80021c2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a1b      	ldr	r3, [r3, #32]
 800217e:	4618      	mov	r0, r3
 8002180:	f000 fd54 	bl	8002c2c <RCC_SetFlashLatencyFromMSIRange>
 8002184:	4603      	mov	r3, r0
 8002186:	2b00      	cmp	r3, #0
 8002188:	d001      	beq.n	800218e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e3ce      	b.n	800292c <HAL_RCC_OscConfig+0x840>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800218e:	4b7d      	ldr	r3, [pc, #500]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4a7c      	ldr	r2, [pc, #496]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002194:	f043 0308 	orr.w	r3, r3, #8
 8002198:	6013      	str	r3, [r2, #0]
 800219a:	4b7a      	ldr	r3, [pc, #488]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	4977      	ldr	r1, [pc, #476]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ac:	4b75      	ldr	r3, [pc, #468]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69db      	ldr	r3, [r3, #28]
 80021b8:	021b      	lsls	r3, r3, #8
 80021ba:	4972      	ldr	r1, [pc, #456]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	604b      	str	r3, [r1, #4]
 80021c0:	e025      	b.n	800220e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021c2:	4b70      	ldr	r3, [pc, #448]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a6f      	ldr	r2, [pc, #444]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80021c8:	f043 0308 	orr.w	r3, r3, #8
 80021cc:	6013      	str	r3, [r2, #0]
 80021ce:	4b6d      	ldr	r3, [pc, #436]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	496a      	ldr	r1, [pc, #424]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021e0:	4b68      	ldr	r3, [pc, #416]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	021b      	lsls	r3, r3, #8
 80021ee:	4965      	ldr	r1, [pc, #404]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021f4:	69bb      	ldr	r3, [r7, #24]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d109      	bne.n	800220e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 fd14 	bl	8002c2c <RCC_SetFlashLatencyFromMSIRange>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e38e      	b.n	800292c <HAL_RCC_OscConfig+0x840>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800220e:	f000 fc75 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002212:	4602      	mov	r2, r0
 8002214:	4b5b      	ldr	r3, [pc, #364]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	091b      	lsrs	r3, r3, #4
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	495a      	ldr	r1, [pc, #360]	; (8002388 <HAL_RCC_OscConfig+0x29c>)
 8002220:	5ccb      	ldrb	r3, [r1, r3]
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	fa22 f303 	lsr.w	r3, r2, r3
 800222a:	4a58      	ldr	r2, [pc, #352]	; (800238c <HAL_RCC_OscConfig+0x2a0>)
 800222c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800222e:	4b58      	ldr	r3, [pc, #352]	; (8002390 <HAL_RCC_OscConfig+0x2a4>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f7fe fae4 	bl	8000800 <HAL_InitTick>
 8002238:	4603      	mov	r3, r0
 800223a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800223c:	7bfb      	ldrb	r3, [r7, #15]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d052      	beq.n	80022e8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002242:	7bfb      	ldrb	r3, [r7, #15]
 8002244:	e372      	b.n	800292c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d032      	beq.n	80022b4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800224e:	4b4d      	ldr	r3, [pc, #308]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a4c      	ldr	r2, [pc, #304]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002254:	f043 0301 	orr.w	r3, r3, #1
 8002258:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800225a:	f7fe fb21 	bl	80008a0 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002262:	f7fe fb1d 	bl	80008a0 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e35b      	b.n	800292c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002274:	4b43      	ldr	r3, [pc, #268]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002280:	4b40      	ldr	r3, [pc, #256]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a3f      	ldr	r2, [pc, #252]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002286:	f043 0308 	orr.w	r3, r3, #8
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b3d      	ldr	r3, [pc, #244]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a1b      	ldr	r3, [r3, #32]
 8002298:	493a      	ldr	r1, [pc, #232]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 800229a:	4313      	orrs	r3, r2
 800229c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800229e:	4b39      	ldr	r3, [pc, #228]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	021b      	lsls	r3, r3, #8
 80022ac:	4935      	ldr	r1, [pc, #212]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80022ae:	4313      	orrs	r3, r2
 80022b0:	604b      	str	r3, [r1, #4]
 80022b2:	e01a      	b.n	80022ea <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80022b4:	4b33      	ldr	r3, [pc, #204]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a32      	ldr	r2, [pc, #200]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80022ba:	f023 0301 	bic.w	r3, r3, #1
 80022be:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022c0:	f7fe faee 	bl	80008a0 <HAL_GetTick>
 80022c4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022c8:	f7fe faea 	bl	80008a0 <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e328      	b.n	800292c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80022da:	4b2a      	ldr	r3, [pc, #168]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d1f0      	bne.n	80022c8 <HAL_RCC_OscConfig+0x1dc>
 80022e6:	e000      	b.n	80022ea <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80022e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d073      	beq.n	80023de <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d005      	beq.n	8002308 <HAL_RCC_OscConfig+0x21c>
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	2b0c      	cmp	r3, #12
 8002300:	d10e      	bne.n	8002320 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b03      	cmp	r3, #3
 8002306:	d10b      	bne.n	8002320 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002308:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002310:	2b00      	cmp	r3, #0
 8002312:	d063      	beq.n	80023dc <HAL_RCC_OscConfig+0x2f0>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d15f      	bne.n	80023dc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e305      	b.n	800292c <HAL_RCC_OscConfig+0x840>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002328:	d106      	bne.n	8002338 <HAL_RCC_OscConfig+0x24c>
 800232a:	4b16      	ldr	r3, [pc, #88]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a15      	ldr	r2, [pc, #84]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002334:	6013      	str	r3, [r2, #0]
 8002336:	e01d      	b.n	8002374 <HAL_RCC_OscConfig+0x288>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002340:	d10c      	bne.n	800235c <HAL_RCC_OscConfig+0x270>
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002348:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800234c:	6013      	str	r3, [r2, #0]
 800234e:	4b0d      	ldr	r3, [pc, #52]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a0c      	ldr	r2, [pc, #48]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002354:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002358:	6013      	str	r3, [r2, #0]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_OscConfig+0x288>
 800235c:	4b09      	ldr	r3, [pc, #36]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a08      	ldr	r2, [pc, #32]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 8002362:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002366:	6013      	str	r3, [r2, #0]
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a05      	ldr	r2, [pc, #20]	; (8002384 <HAL_RCC_OscConfig+0x298>)
 800236e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01b      	beq.n	80023b4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237c:	f7fe fa90 	bl	80008a0 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002382:	e010      	b.n	80023a6 <HAL_RCC_OscConfig+0x2ba>
 8002384:	40021000 	.word	0x40021000
 8002388:	08007350 	.word	0x08007350
 800238c:	20000000 	.word	0x20000000
 8002390:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002394:	f7fe fa84 	bl	80008a0 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	2b64      	cmp	r3, #100	; 0x64
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e2c2      	b.n	800292c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023a6:	4baf      	ldr	r3, [pc, #700]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d0f0      	beq.n	8002394 <HAL_RCC_OscConfig+0x2a8>
 80023b2:	e014      	b.n	80023de <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b4:	f7fe fa74 	bl	80008a0 <HAL_GetTick>
 80023b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ba:	e008      	b.n	80023ce <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023bc:	f7fe fa70 	bl	80008a0 <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	2b64      	cmp	r3, #100	; 0x64
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e2ae      	b.n	800292c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80023ce:	4ba5      	ldr	r3, [pc, #660]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d1f0      	bne.n	80023bc <HAL_RCC_OscConfig+0x2d0>
 80023da:	e000      	b.n	80023de <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d060      	beq.n	80024ac <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d005      	beq.n	80023fc <HAL_RCC_OscConfig+0x310>
 80023f0:	69bb      	ldr	r3, [r7, #24]
 80023f2:	2b0c      	cmp	r3, #12
 80023f4:	d119      	bne.n	800242a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d116      	bne.n	800242a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023fc:	4b99      	ldr	r3, [pc, #612]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002404:	2b00      	cmp	r3, #0
 8002406:	d005      	beq.n	8002414 <HAL_RCC_OscConfig+0x328>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002410:	2301      	movs	r3, #1
 8002412:	e28b      	b.n	800292c <HAL_RCC_OscConfig+0x840>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002414:	4b93      	ldr	r3, [pc, #588]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	691b      	ldr	r3, [r3, #16]
 8002420:	061b      	lsls	r3, r3, #24
 8002422:	4990      	ldr	r1, [pc, #576]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002428:	e040      	b.n	80024ac <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68db      	ldr	r3, [r3, #12]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d023      	beq.n	800247a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002432:	4b8c      	ldr	r3, [pc, #560]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a8b      	ldr	r2, [pc, #556]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002438:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800243c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243e:	f7fe fa2f 	bl	80008a0 <HAL_GetTick>
 8002442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002444:	e008      	b.n	8002458 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002446:	f7fe fa2b 	bl	80008a0 <HAL_GetTick>
 800244a:	4602      	mov	r2, r0
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	1ad3      	subs	r3, r2, r3
 8002450:	2b02      	cmp	r3, #2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e269      	b.n	800292c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002458:	4b82      	ldr	r3, [pc, #520]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002460:	2b00      	cmp	r3, #0
 8002462:	d0f0      	beq.n	8002446 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002464:	4b7f      	ldr	r3, [pc, #508]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691b      	ldr	r3, [r3, #16]
 8002470:	061b      	lsls	r3, r3, #24
 8002472:	497c      	ldr	r1, [pc, #496]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]
 8002478:	e018      	b.n	80024ac <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800247a:	4b7a      	ldr	r3, [pc, #488]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a79      	ldr	r2, [pc, #484]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002480:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7fe fa0b 	bl	80008a0 <HAL_GetTick>
 800248a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248e:	f7fe fa07 	bl	80008a0 <HAL_GetTick>
 8002492:	4602      	mov	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e245      	b.n	800292c <HAL_RCC_OscConfig+0x840>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80024a0:	4b70      	ldr	r3, [pc, #448]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d1f0      	bne.n	800248e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0308 	and.w	r3, r3, #8
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d03c      	beq.n	8002532 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	695b      	ldr	r3, [r3, #20]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d01c      	beq.n	80024fa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024c0:	4b68      	ldr	r3, [pc, #416]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80024c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024c6:	4a67      	ldr	r2, [pc, #412]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024d0:	f7fe f9e6 	bl	80008a0 <HAL_GetTick>
 80024d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024d6:	e008      	b.n	80024ea <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d8:	f7fe f9e2 	bl	80008a0 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d901      	bls.n	80024ea <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e220      	b.n	800292c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80024ea:	4b5e      	ldr	r3, [pc, #376]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80024ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d0ef      	beq.n	80024d8 <HAL_RCC_OscConfig+0x3ec>
 80024f8:	e01b      	b.n	8002532 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024fa:	4b5a      	ldr	r3, [pc, #360]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80024fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002500:	4a58      	ldr	r2, [pc, #352]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250a:	f7fe f9c9 	bl	80008a0 <HAL_GetTick>
 800250e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002510:	e008      	b.n	8002524 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002512:	f7fe f9c5 	bl	80008a0 <HAL_GetTick>
 8002516:	4602      	mov	r2, r0
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	1ad3      	subs	r3, r2, r3
 800251c:	2b02      	cmp	r3, #2
 800251e:	d901      	bls.n	8002524 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002520:	2303      	movs	r3, #3
 8002522:	e203      	b.n	800292c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002524:	4b4f      	ldr	r3, [pc, #316]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d1ef      	bne.n	8002512 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 80a6 	beq.w	800268c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002540:	2300      	movs	r3, #0
 8002542:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002544:	4b47      	ldr	r3, [pc, #284]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002550:	4b44      	ldr	r3, [pc, #272]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002554:	4a43      	ldr	r2, [pc, #268]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800255a:	6593      	str	r3, [r2, #88]	; 0x58
 800255c:	4b41      	ldr	r3, [pc, #260]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 800255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002568:	2301      	movs	r3, #1
 800256a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800256c:	4b3e      	ldr	r3, [pc, #248]	; (8002668 <HAL_RCC_OscConfig+0x57c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d118      	bne.n	80025aa <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_RCC_OscConfig+0x57c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <HAL_RCC_OscConfig+0x57c>)
 800257e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002582:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002584:	f7fe f98c 	bl	80008a0 <HAL_GetTick>
 8002588:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800258a:	e008      	b.n	800259e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800258c:	f7fe f988 	bl	80008a0 <HAL_GetTick>
 8002590:	4602      	mov	r2, r0
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	2b02      	cmp	r3, #2
 8002598:	d901      	bls.n	800259e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800259a:	2303      	movs	r3, #3
 800259c:	e1c6      	b.n	800292c <HAL_RCC_OscConfig+0x840>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800259e:	4b32      	ldr	r3, [pc, #200]	; (8002668 <HAL_RCC_OscConfig+0x57c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0f0      	beq.n	800258c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d108      	bne.n	80025c4 <HAL_RCC_OscConfig+0x4d8>
 80025b2:	4b2c      	ldr	r3, [pc, #176]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80025b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b8:	4a2a      	ldr	r2, [pc, #168]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025c2:	e024      	b.n	800260e <HAL_RCC_OscConfig+0x522>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	2b05      	cmp	r3, #5
 80025ca:	d110      	bne.n	80025ee <HAL_RCC_OscConfig+0x502>
 80025cc:	4b25      	ldr	r3, [pc, #148]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	4a24      	ldr	r2, [pc, #144]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025dc:	4b21      	ldr	r3, [pc, #132]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80025de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025e2:	4a20      	ldr	r2, [pc, #128]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80025e4:	f043 0301 	orr.w	r3, r3, #1
 80025e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025ec:	e00f      	b.n	800260e <HAL_RCC_OscConfig+0x522>
 80025ee:	4b1d      	ldr	r3, [pc, #116]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f4:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 80025f6:	f023 0301 	bic.w	r3, r3, #1
 80025fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002604:	4a17      	ldr	r2, [pc, #92]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002606:	f023 0304 	bic.w	r3, r3, #4
 800260a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d016      	beq.n	8002644 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe f943 	bl	80008a0 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe f93f 	bl	80008a0 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e17b      	b.n	800292c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002634:	4b0b      	ldr	r3, [pc, #44]	; (8002664 <HAL_RCC_OscConfig+0x578>)
 8002636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0ed      	beq.n	800261e <HAL_RCC_OscConfig+0x532>
 8002642:	e01a      	b.n	800267a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002644:	f7fe f92c 	bl	80008a0 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800264a:	e00f      	b.n	800266c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264c:	f7fe f928 	bl	80008a0 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	; 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d906      	bls.n	800266c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e164      	b.n	800292c <HAL_RCC_OscConfig+0x840>
 8002662:	bf00      	nop
 8002664:	40021000 	.word	0x40021000
 8002668:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800266c:	4ba8      	ldr	r3, [pc, #672]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 800266e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d1e8      	bne.n	800264c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800267a:	7ffb      	ldrb	r3, [r7, #31]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d105      	bne.n	800268c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002680:	4ba3      	ldr	r3, [pc, #652]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	4aa2      	ldr	r2, [pc, #648]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 8002686:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800268a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d03c      	beq.n	8002712 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800269c:	2b00      	cmp	r3, #0
 800269e:	d01c      	beq.n	80026da <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026a0:	4b9b      	ldr	r3, [pc, #620]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80026a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026a6:	4a9a      	ldr	r2, [pc, #616]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026b0:	f7fe f8f6 	bl	80008a0 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026b8:	f7fe f8f2 	bl	80008a0 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e130      	b.n	800292c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80026ca:	4b91      	ldr	r3, [pc, #580]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80026cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0ef      	beq.n	80026b8 <HAL_RCC_OscConfig+0x5cc>
 80026d8:	e01b      	b.n	8002712 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80026da:	4b8d      	ldr	r3, [pc, #564]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80026dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80026e0:	4a8b      	ldr	r2, [pc, #556]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80026e2:	f023 0301 	bic.w	r3, r3, #1
 80026e6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe f8d9 	bl	80008a0 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026f2:	f7fe f8d5 	bl	80008a0 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e113      	b.n	800292c <HAL_RCC_OscConfig+0x840>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002704:	4b82      	ldr	r3, [pc, #520]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 8002706:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1ef      	bne.n	80026f2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002716:	2b00      	cmp	r3, #0
 8002718:	f000 8107 	beq.w	800292a <HAL_RCC_OscConfig+0x83e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002720:	2b02      	cmp	r3, #2
 8002722:	f040 80cb 	bne.w	80028bc <HAL_RCC_OscConfig+0x7d0>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002726:	4b7a      	ldr	r3, [pc, #488]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	f003 0203 	and.w	r2, r3, #3
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002736:	429a      	cmp	r2, r3
 8002738:	d12c      	bne.n	8002794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800273a:	697b      	ldr	r3, [r7, #20]
 800273c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002744:	3b01      	subs	r3, #1
 8002746:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002748:	429a      	cmp	r2, r3
 800274a:	d123      	bne.n	8002794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002756:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002758:	429a      	cmp	r2, r3
 800275a:	d11b      	bne.n	8002794 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002766:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002768:	429a      	cmp	r2, r3
 800276a:	d113      	bne.n	8002794 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002776:	085b      	lsrs	r3, r3, #1
 8002778:	3b01      	subs	r3, #1
 800277a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800277c:	429a      	cmp	r2, r3
 800277e:	d109      	bne.n	8002794 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800278a:	085b      	lsrs	r3, r3, #1
 800278c:	3b01      	subs	r3, #1
 800278e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d06d      	beq.n	8002870 <HAL_RCC_OscConfig+0x784>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002794:	69bb      	ldr	r3, [r7, #24]
 8002796:	2b0c      	cmp	r3, #12
 8002798:	d068      	beq.n	800286c <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800279a:	4b5d      	ldr	r3, [pc, #372]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d105      	bne.n	80027b2 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80027a6:	4b5a      	ldr	r3, [pc, #360]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e0ba      	b.n	800292c <HAL_RCC_OscConfig+0x840>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80027b6:	4b56      	ldr	r3, [pc, #344]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a55      	ldr	r2, [pc, #340]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80027bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80027c2:	f7fe f86d 	bl	80008a0 <HAL_GetTick>
 80027c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027c8:	e008      	b.n	80027dc <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ca:	f7fe f869 	bl	80008a0 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	693b      	ldr	r3, [r7, #16]
 80027d2:	1ad3      	subs	r3, r2, r3
 80027d4:	2b02      	cmp	r3, #2
 80027d6:	d901      	bls.n	80027dc <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80027d8:	2303      	movs	r3, #3
 80027da:	e0a7      	b.n	800292c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80027dc:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d1f0      	bne.n	80027ca <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027e8:	4b49      	ldr	r3, [pc, #292]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	4b49      	ldr	r3, [pc, #292]	; (8002914 <HAL_RCC_OscConfig+0x828>)
 80027ee:	4013      	ands	r3, r2
 80027f0:	687a      	ldr	r2, [r7, #4]
 80027f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80027f8:	3a01      	subs	r2, #1
 80027fa:	0112      	lsls	r2, r2, #4
 80027fc:	4311      	orrs	r1, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002802:	0212      	lsls	r2, r2, #8
 8002804:	4311      	orrs	r1, r2
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800280a:	0852      	lsrs	r2, r2, #1
 800280c:	3a01      	subs	r2, #1
 800280e:	0552      	lsls	r2, r2, #21
 8002810:	4311      	orrs	r1, r2
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002816:	0852      	lsrs	r2, r2, #1
 8002818:	3a01      	subs	r2, #1
 800281a:	0652      	lsls	r2, r2, #25
 800281c:	4311      	orrs	r1, r2
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002822:	06d2      	lsls	r2, r2, #27
 8002824:	430a      	orrs	r2, r1
 8002826:	493a      	ldr	r1, [pc, #232]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 8002828:	4313      	orrs	r3, r2
 800282a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800282c:	4b38      	ldr	r3, [pc, #224]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a37      	ldr	r2, [pc, #220]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 8002832:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002836:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002838:	4b35      	ldr	r3, [pc, #212]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	4a34      	ldr	r2, [pc, #208]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 800283e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002842:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002844:	f7fe f82c 	bl	80008a0 <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284c:	f7fe f828 	bl	80008a0 <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e066      	b.n	800292c <HAL_RCC_OscConfig+0x840>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800285e:	4b2c      	ldr	r3, [pc, #176]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002866:	2b00      	cmp	r3, #0
 8002868:	d0f0      	beq.n	800284c <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800286a:	e05e      	b.n	800292a <HAL_RCC_OscConfig+0x83e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e05d      	b.n	800292c <HAL_RCC_OscConfig+0x840>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002870:	4b27      	ldr	r3, [pc, #156]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002878:	2b00      	cmp	r3, #0
 800287a:	d156      	bne.n	800292a <HAL_RCC_OscConfig+0x83e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800287c:	4b24      	ldr	r3, [pc, #144]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a23      	ldr	r2, [pc, #140]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 8002882:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002886:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002888:	4b21      	ldr	r3, [pc, #132]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a20      	ldr	r2, [pc, #128]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 800288e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002892:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002894:	f7fe f804 	bl	80008a0 <HAL_GetTick>
 8002898:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800289a:	e008      	b.n	80028ae <HAL_RCC_OscConfig+0x7c2>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289c:	f7fe f800 	bl	80008a0 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b02      	cmp	r3, #2
 80028a8:	d901      	bls.n	80028ae <HAL_RCC_OscConfig+0x7c2>
            {
              return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e03e      	b.n	800292c <HAL_RCC_OscConfig+0x840>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d0f0      	beq.n	800289c <HAL_RCC_OscConfig+0x7b0>
 80028ba:	e036      	b.n	800292a <HAL_RCC_OscConfig+0x83e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	2b0c      	cmp	r3, #12
 80028c0:	d031      	beq.n	8002926 <HAL_RCC_OscConfig+0x83a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028c2:	4b13      	ldr	r3, [pc, #76]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4a12      	ldr	r2, [pc, #72]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80028c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028cc:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80028ce:	4b10      	ldr	r3, [pc, #64]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d105      	bne.n	80028e6 <HAL_RCC_OscConfig+0x7fa>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80028da:	4b0d      	ldr	r3, [pc, #52]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80028dc:	68db      	ldr	r3, [r3, #12]
 80028de:	4a0c      	ldr	r2, [pc, #48]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80028e0:	f023 0303 	bic.w	r3, r3, #3
 80028e4:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80028e6:	4b0a      	ldr	r3, [pc, #40]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	4a09      	ldr	r2, [pc, #36]	; (8002910 <HAL_RCC_OscConfig+0x824>)
 80028ec:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80028f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028f4:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f6:	f7fd ffd3 	bl	80008a0 <HAL_GetTick>
 80028fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028fc:	e00c      	b.n	8002918 <HAL_RCC_OscConfig+0x82c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028fe:	f7fd ffcf 	bl	80008a0 <HAL_GetTick>
 8002902:	4602      	mov	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	2b02      	cmp	r3, #2
 800290a:	d905      	bls.n	8002918 <HAL_RCC_OscConfig+0x82c>
          {
            return HAL_TIMEOUT;
 800290c:	2303      	movs	r3, #3
 800290e:	e00d      	b.n	800292c <HAL_RCC_OscConfig+0x840>
 8002910:	40021000 	.word	0x40021000
 8002914:	019d808c 	.word	0x019d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002918:	4b06      	ldr	r3, [pc, #24]	; (8002934 <HAL_RCC_OscConfig+0x848>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d1ec      	bne.n	80028fe <HAL_RCC_OscConfig+0x812>
 8002924:	e001      	b.n	800292a <HAL_RCC_OscConfig+0x83e>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e000      	b.n	800292c <HAL_RCC_OscConfig+0x840>
      }
    }
  }
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3720      	adds	r7, #32
 8002930:	46bd      	mov	sp, r7
 8002932:	bd80      	pop	{r7, pc}
 8002934:	40021000 	.word	0x40021000

08002938 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d101      	bne.n	800294c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	e0c8      	b.n	8002ade <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800294c:	4b66      	ldr	r3, [pc, #408]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b0>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	683a      	ldr	r2, [r7, #0]
 8002956:	429a      	cmp	r2, r3
 8002958:	d910      	bls.n	800297c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800295a:	4b63      	ldr	r3, [pc, #396]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b0>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f023 0207 	bic.w	r2, r3, #7
 8002962:	4961      	ldr	r1, [pc, #388]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	4313      	orrs	r3, r2
 8002968:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296a:	4b5f      	ldr	r3, [pc, #380]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b0>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 0307 	and.w	r3, r3, #7
 8002972:	683a      	ldr	r2, [r7, #0]
 8002974:	429a      	cmp	r2, r3
 8002976:	d001      	beq.n	800297c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e0b0      	b.n	8002ade <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b00      	cmp	r3, #0
 8002986:	d04c      	beq.n	8002a22 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b03      	cmp	r3, #3
 800298e:	d107      	bne.n	80029a0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002990:	4b56      	ldr	r3, [pc, #344]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d121      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e09e      	b.n	8002ade <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d107      	bne.n	80029b8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80029a8:	4b50      	ldr	r3, [pc, #320]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d115      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	e092      	b.n	8002ade <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d107      	bne.n	80029d0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80029c0:	4b4a      	ldr	r3, [pc, #296]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d109      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	e086      	b.n	8002ade <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80029d0:	4b46      	ldr	r3, [pc, #280]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e07e      	b.n	8002ade <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80029e0:	4b42      	ldr	r3, [pc, #264]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f023 0203 	bic.w	r2, r3, #3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	493f      	ldr	r1, [pc, #252]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029f2:	f7fd ff55 	bl	80008a0 <HAL_GetTick>
 80029f6:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f8:	e00a      	b.n	8002a10 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029fa:	f7fd ff51 	bl	80008a0 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e066      	b.n	8002ade <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a10:	4b36      	ldr	r3, [pc, #216]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	f003 020c 	and.w	r2, r3, #12
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d1eb      	bne.n	80029fa <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0302 	and.w	r3, r3, #2
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d008      	beq.n	8002a40 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2e:	4b2f      	ldr	r3, [pc, #188]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	492c      	ldr	r1, [pc, #176]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 8002a3c:	4313      	orrs	r3, r2
 8002a3e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a40:	4b29      	ldr	r3, [pc, #164]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0307 	and.w	r3, r3, #7
 8002a48:	683a      	ldr	r2, [r7, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d210      	bcs.n	8002a70 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f023 0207 	bic.w	r2, r3, #7
 8002a56:	4924      	ldr	r1, [pc, #144]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b22      	ldr	r3, [pc, #136]	; (8002ae8 <HAL_RCC_ClockConfig+0x1b0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e036      	b.n	8002ade <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0304 	and.w	r3, r3, #4
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d008      	beq.n	8002a8e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a7c:	4b1b      	ldr	r3, [pc, #108]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	68db      	ldr	r3, [r3, #12]
 8002a88:	4918      	ldr	r1, [pc, #96]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0308 	and.w	r3, r3, #8
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d009      	beq.n	8002aae <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a9a:	4b14      	ldr	r3, [pc, #80]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	691b      	ldr	r3, [r3, #16]
 8002aa6:	00db      	lsls	r3, r3, #3
 8002aa8:	4910      	ldr	r1, [pc, #64]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002aae:	f000 f825 	bl	8002afc <HAL_RCC_GetSysClockFreq>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	4b0d      	ldr	r3, [pc, #52]	; (8002aec <HAL_RCC_ClockConfig+0x1b4>)
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	490c      	ldr	r1, [pc, #48]	; (8002af0 <HAL_RCC_ClockConfig+0x1b8>)
 8002ac0:	5ccb      	ldrb	r3, [r1, r3]
 8002ac2:	f003 031f 	and.w	r3, r3, #31
 8002ac6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aca:	4a0a      	ldr	r2, [pc, #40]	; (8002af4 <HAL_RCC_ClockConfig+0x1bc>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <HAL_RCC_ClockConfig+0x1c0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f7fd fe94 	bl	8000800 <HAL_InitTick>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	72fb      	strb	r3, [r7, #11]

  return status;
 8002adc:	7afb      	ldrb	r3, [r7, #11]
}
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	40022000 	.word	0x40022000
 8002aec:	40021000 	.word	0x40021000
 8002af0:	08007350 	.word	0x08007350
 8002af4:	20000000 	.word	0x20000000
 8002af8:	20000004 	.word	0x20000004

08002afc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b089      	sub	sp, #36	; 0x24
 8002b00:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002b02:	2300      	movs	r3, #0
 8002b04:	61fb      	str	r3, [r7, #28]
 8002b06:	2300      	movs	r3, #0
 8002b08:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002b0a:	4b3e      	ldr	r3, [pc, #248]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002b14:	4b3b      	ldr	r3, [pc, #236]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	f003 0303 	and.w	r3, r3, #3
 8002b1c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d005      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x34>
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b0c      	cmp	r3, #12
 8002b28:	d121      	bne.n	8002b6e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d11e      	bne.n	8002b6e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b30:	4b34      	ldr	r3, [pc, #208]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d107      	bne.n	8002b4c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b3c:	4b31      	ldr	r3, [pc, #196]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002b42:	0a1b      	lsrs	r3, r3, #8
 8002b44:	f003 030f 	and.w	r3, r3, #15
 8002b48:	61fb      	str	r3, [r7, #28]
 8002b4a:	e005      	b.n	8002b58 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b4c:	4b2d      	ldr	r3, [pc, #180]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	091b      	lsrs	r3, r3, #4
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002b58:	4a2b      	ldr	r2, [pc, #172]	; (8002c08 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b60:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d10d      	bne.n	8002b84 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002b6c:	e00a      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002b6e:	693b      	ldr	r3, [r7, #16]
 8002b70:	2b04      	cmp	r3, #4
 8002b72:	d102      	bne.n	8002b7a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002b74:	4b25      	ldr	r3, [pc, #148]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002b76:	61bb      	str	r3, [r7, #24]
 8002b78:	e004      	b.n	8002b84 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d101      	bne.n	8002b84 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002b80:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002b82:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	2b0c      	cmp	r3, #12
 8002b88:	d134      	bne.n	8002bf4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d003      	beq.n	8002ba2 <HAL_RCC_GetSysClockFreq+0xa6>
 8002b9a:	68bb      	ldr	r3, [r7, #8]
 8002b9c:	2b03      	cmp	r3, #3
 8002b9e:	d003      	beq.n	8002ba8 <HAL_RCC_GetSysClockFreq+0xac>
 8002ba0:	e005      	b.n	8002bae <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002ba2:	4b1a      	ldr	r3, [pc, #104]	; (8002c0c <HAL_RCC_GetSysClockFreq+0x110>)
 8002ba4:	617b      	str	r3, [r7, #20]
      break;
 8002ba6:	e005      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002ba8:	4b19      	ldr	r3, [pc, #100]	; (8002c10 <HAL_RCC_GetSysClockFreq+0x114>)
 8002baa:	617b      	str	r3, [r7, #20]
      break;
 8002bac:	e002      	b.n	8002bb4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002bae:	69fb      	ldr	r3, [r7, #28]
 8002bb0:	617b      	str	r3, [r7, #20]
      break;
 8002bb2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bb4:	4b13      	ldr	r3, [pc, #76]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	091b      	lsrs	r3, r3, #4
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	3301      	adds	r3, #1
 8002bc0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bc2:	4b10      	ldr	r3, [pc, #64]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	0a1b      	lsrs	r3, r3, #8
 8002bc8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002bcc:	697a      	ldr	r2, [r7, #20]
 8002bce:	fb02 f203 	mul.w	r2, r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bda:	4b0a      	ldr	r3, [pc, #40]	; (8002c04 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bdc:	68db      	ldr	r3, [r3, #12]
 8002bde:	0e5b      	lsrs	r3, r3, #25
 8002be0:	f003 0303 	and.w	r3, r3, #3
 8002be4:	3301      	adds	r3, #1
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002bf4:	69bb      	ldr	r3, [r7, #24]
}
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	3724      	adds	r7, #36	; 0x24
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c00:	4770      	bx	lr
 8002c02:	bf00      	nop
 8002c04:	40021000 	.word	0x40021000
 8002c08:	08007360 	.word	0x08007360
 8002c0c:	00f42400 	.word	0x00f42400
 8002c10:	007a1200 	.word	0x007a1200

08002c14 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c18:	4b03      	ldr	r3, [pc, #12]	; (8002c28 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	20000000 	.word	0x20000000

08002c2c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c34:	2300      	movs	r3, #0
 8002c36:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c38:	4b2a      	ldr	r3, [pc, #168]	; (8002ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c44:	f7ff f9de 	bl	8002004 <HAL_PWREx_GetVoltageRange>
 8002c48:	6178      	str	r0, [r7, #20]
 8002c4a:	e014      	b.n	8002c76 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c4c:	4b25      	ldr	r3, [pc, #148]	; (8002ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c50:	4a24      	ldr	r2, [pc, #144]	; (8002ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c56:	6593      	str	r3, [r2, #88]	; 0x58
 8002c58:	4b22      	ldr	r3, [pc, #136]	; (8002ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c60:	60fb      	str	r3, [r7, #12]
 8002c62:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c64:	f7ff f9ce 	bl	8002004 <HAL_PWREx_GetVoltageRange>
 8002c68:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c6a:	4b1e      	ldr	r3, [pc, #120]	; (8002ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c6e:	4a1d      	ldr	r2, [pc, #116]	; (8002ce4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c74:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c7c:	d10b      	bne.n	8002c96 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2b80      	cmp	r3, #128	; 0x80
 8002c82:	d919      	bls.n	8002cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2ba0      	cmp	r3, #160	; 0xa0
 8002c88:	d902      	bls.n	8002c90 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	613b      	str	r3, [r7, #16]
 8002c8e:	e013      	b.n	8002cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c90:	2301      	movs	r3, #1
 8002c92:	613b      	str	r3, [r7, #16]
 8002c94:	e010      	b.n	8002cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2b80      	cmp	r3, #128	; 0x80
 8002c9a:	d902      	bls.n	8002ca2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	613b      	str	r3, [r7, #16]
 8002ca0:	e00a      	b.n	8002cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2b80      	cmp	r3, #128	; 0x80
 8002ca6:	d102      	bne.n	8002cae <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002ca8:	2302      	movs	r3, #2
 8002caa:	613b      	str	r3, [r7, #16]
 8002cac:	e004      	b.n	8002cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2b70      	cmp	r3, #112	; 0x70
 8002cb2:	d101      	bne.n	8002cb8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f023 0207 	bic.w	r2, r3, #7
 8002cc0:	4909      	ldr	r1, [pc, #36]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002cc8:	4b07      	ldr	r3, [pc, #28]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0307 	and.w	r3, r3, #7
 8002cd0:	693a      	ldr	r2, [r7, #16]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	d001      	beq.n	8002cda <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cd6:	2301      	movs	r3, #1
 8002cd8:	e000      	b.n	8002cdc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cda:	2300      	movs	r3, #0
}
 8002cdc:	4618      	mov	r0, r3
 8002cde:	3718      	adds	r7, #24
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	40021000 	.word	0x40021000
 8002ce8:	40022000 	.word	0x40022000

08002cec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b086      	sub	sp, #24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d041      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d0c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d10:	d02a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002d12:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d16:	d824      	bhi.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d18:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d1c:	d008      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d1e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d22:	d81e      	bhi.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d00a      	beq.n	8002d3e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d2c:	d010      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d2e:	e018      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002d30:	4b86      	ldr	r3, [pc, #536]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	4a85      	ldr	r2, [pc, #532]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d3a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d3c:	e015      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	3304      	adds	r3, #4
 8002d42:	2100      	movs	r1, #0
 8002d44:	4618      	mov	r0, r3
 8002d46:	f000 fadd 	bl	8003304 <RCCEx_PLLSAI1_Config>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d4e:	e00c      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	3320      	adds	r3, #32
 8002d54:	2100      	movs	r1, #0
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 fbc6 	bl	80034e8 <RCCEx_PLLSAI2_Config>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d60:	e003      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	74fb      	strb	r3, [r7, #19]
      break;
 8002d66:	e000      	b.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002d68:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d70:	4b76      	ldr	r3, [pc, #472]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d76:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d7e:	4973      	ldr	r1, [pc, #460]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d86:	e001      	b.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d88:	7cfb      	ldrb	r3, [r7, #19]
 8002d8a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d041      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d9c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002da0:	d02a      	beq.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002da2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002da6:	d824      	bhi.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002da8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dac:	d008      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002dae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002db2:	d81e      	bhi.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002db8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002dbc:	d010      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002dbe:	e018      	b.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002dc0:	4b62      	ldr	r3, [pc, #392]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a61      	ldr	r2, [pc, #388]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002dc6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dca:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dcc:	e015      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	3304      	adds	r3, #4
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f000 fa95 	bl	8003304 <RCCEx_PLLSAI1_Config>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002dde:	e00c      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	3320      	adds	r3, #32
 8002de4:	2100      	movs	r1, #0
 8002de6:	4618      	mov	r0, r3
 8002de8:	f000 fb7e 	bl	80034e8 <RCCEx_PLLSAI2_Config>
 8002dec:	4603      	mov	r3, r0
 8002dee:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002df0:	e003      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	74fb      	strb	r3, [r7, #19]
      break;
 8002df6:	e000      	b.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002df8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002dfa:	7cfb      	ldrb	r3, [r7, #19]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10b      	bne.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e00:	4b52      	ldr	r3, [pc, #328]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e06:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e0e:	494f      	ldr	r1, [pc, #316]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e16:	e001      	b.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e18:	7cfb      	ldrb	r3, [r7, #19]
 8002e1a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	f000 80a0 	beq.w	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e2e:	4b47      	ldr	r3, [pc, #284]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d101      	bne.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00d      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e44:	4b41      	ldr	r3, [pc, #260]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e48:	4a40      	ldr	r2, [pc, #256]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002e50:	4b3e      	ldr	r3, [pc, #248]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e58:	60bb      	str	r3, [r7, #8]
 8002e5a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e60:	4b3b      	ldr	r3, [pc, #236]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a3a      	ldr	r2, [pc, #232]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e6c:	f7fd fd18 	bl	80008a0 <HAL_GetTick>
 8002e70:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e72:	e009      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e74:	f7fd fd14 	bl	80008a0 <HAL_GetTick>
 8002e78:	4602      	mov	r2, r0
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	1ad3      	subs	r3, r2, r3
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d902      	bls.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002e82:	2303      	movs	r3, #3
 8002e84:	74fb      	strb	r3, [r7, #19]
        break;
 8002e86:	e005      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002e88:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d0ef      	beq.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d15c      	bne.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002e9a:	4b2c      	ldr	r3, [pc, #176]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d01f      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d019      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002eb8:	4b24      	ldr	r3, [pc, #144]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ec4:	4b21      	ldr	r3, [pc, #132]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ec6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eca:	4a20      	ldr	r2, [pc, #128]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ed4:	4b1d      	ldr	r3, [pc, #116]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	4a1c      	ldr	r2, [pc, #112]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002edc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ee0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002ee4:	4a19      	ldr	r2, [pc, #100]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ee6:	697b      	ldr	r3, [r7, #20]
 8002ee8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d016      	beq.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef6:	f7fd fcd3 	bl	80008a0 <HAL_GetTick>
 8002efa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002efc:	e00b      	b.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efe:	f7fd fccf 	bl	80008a0 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d902      	bls.n	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	74fb      	strb	r3, [r7, #19]
            break;
 8002f14:	e006      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f16:	4b0d      	ldr	r3, [pc, #52]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f003 0302 	and.w	r3, r3, #2
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d0ec      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002f24:	7cfb      	ldrb	r3, [r7, #19]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d10c      	bne.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f2a:	4b08      	ldr	r3, [pc, #32]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f30:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f3a:	4904      	ldr	r1, [pc, #16]	; (8002f4c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f42:	e009      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f44:	7cfb      	ldrb	r3, [r7, #19]
 8002f46:	74bb      	strb	r3, [r7, #18]
 8002f48:	e006      	b.n	8002f58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002f4a:	bf00      	nop
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f54:	7cfb      	ldrb	r3, [r7, #19]
 8002f56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f58:	7c7b      	ldrb	r3, [r7, #17]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d105      	bne.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f5e:	4ba6      	ldr	r3, [pc, #664]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f62:	4aa5      	ldr	r2, [pc, #660]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0301 	and.w	r3, r3, #1
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d00a      	beq.n	8002f8c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f76:	4ba0      	ldr	r3, [pc, #640]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f7c:	f023 0203 	bic.w	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f84:	499c      	ldr	r1, [pc, #624]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d00a      	beq.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f98:	4b97      	ldr	r3, [pc, #604]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f9e:	f023 020c 	bic.w	r2, r3, #12
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa6:	4994      	ldr	r1, [pc, #592]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0304 	and.w	r3, r3, #4
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002fba:	4b8f      	ldr	r3, [pc, #572]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc8:	498b      	ldr	r1, [pc, #556]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002fdc:	4b86      	ldr	r3, [pc, #536]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fea:	4983      	ldr	r1, [pc, #524]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ffe:	4b7e      	ldr	r3, [pc, #504]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003004:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800300c:	497a      	ldr	r1, [pc, #488]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0320 	and.w	r3, r3, #32
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003020:	4b75      	ldr	r3, [pc, #468]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302e:	4972      	ldr	r1, [pc, #456]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003042:	4b6d      	ldr	r3, [pc, #436]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003050:	4969      	ldr	r1, [pc, #420]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003064:	4b64      	ldr	r3, [pc, #400]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003072:	4961      	ldr	r1, [pc, #388]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003086:	4b5c      	ldr	r3, [pc, #368]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003094:	4958      	ldr	r1, [pc, #352]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00a      	beq.n	80030be <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80030a8:	4b53      	ldr	r3, [pc, #332]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030b6:	4950      	ldr	r1, [pc, #320]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030ca:	4b4b      	ldr	r3, [pc, #300]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030d8:	4947      	ldr	r1, [pc, #284]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030da:	4313      	orrs	r3, r2
 80030dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x416>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80030ec:	4b42      	ldr	r3, [pc, #264]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030ee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80030f2:	f023 0203 	bic.w	r2, r3, #3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fa:	493f      	ldr	r1, [pc, #252]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800310a:	2b00      	cmp	r3, #0
 800310c:	d028      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x474>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800310e:	4b3a      	ldr	r3, [pc, #232]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003110:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003114:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311c:	4936      	ldr	r1, [pc, #216]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800311e:	4313      	orrs	r3, r2
 8003120:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003128:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800312c:	d106      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x450>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800312e:	4b32      	ldr	r3, [pc, #200]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	4a31      	ldr	r2, [pc, #196]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003134:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003138:	60d3      	str	r3, [r2, #12]
 800313a:	e011      	b.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x474>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003144:	d10c      	bne.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x474>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	3304      	adds	r3, #4
 800314a:	2101      	movs	r1, #1
 800314c:	4618      	mov	r0, r3
 800314e:	f000 f8d9 	bl	8003304 <RCCEx_PLLSAI1_Config>
 8003152:	4603      	mov	r3, r0
 8003154:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003156:	7cfb      	ldrb	r3, [r7, #19]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x474>
        {
          /* set overall return value */
          status = ret;
 800315c:	7cfb      	ldrb	r3, [r7, #19]
 800315e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d028      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800316c:	4b22      	ldr	r3, [pc, #136]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800316e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003172:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800317a:	491f      	ldr	r1, [pc, #124]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800317c:	4313      	orrs	r3, r2
 800317e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003186:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800318a:	d106      	bne.n	800319a <HAL_RCCEx_PeriphCLKConfig+0x4ae>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800318c:	4b1a      	ldr	r3, [pc, #104]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 800318e:	68db      	ldr	r3, [r3, #12]
 8003190:	4a19      	ldr	r2, [pc, #100]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 8003192:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003196:	60d3      	str	r3, [r2, #12]
 8003198:	e011      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80031a2:	d10c      	bne.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	3304      	adds	r3, #4
 80031a8:	2101      	movs	r1, #1
 80031aa:	4618      	mov	r0, r3
 80031ac:	f000 f8aa 	bl	8003304 <RCCEx_PLLSAI1_Config>
 80031b0:	4603      	mov	r3, r0
 80031b2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031b4:	7cfb      	ldrb	r3, [r7, #19]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x4d2>
      {
        /* set overall return value */
        status = ret;
 80031ba:	7cfb      	ldrb	r3, [r7, #19]
 80031bc:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d02a      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x534>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80031ca:	4b0b      	ldr	r3, [pc, #44]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031d0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031d8:	4907      	ldr	r1, [pc, #28]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031e8:	d108      	bne.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x510>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80031ea:	4b03      	ldr	r3, [pc, #12]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	4a02      	ldr	r2, [pc, #8]	; (80031f8 <HAL_RCCEx_PeriphCLKConfig+0x50c>)
 80031f0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80031f4:	60d3      	str	r3, [r2, #12]
 80031f6:	e013      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x534>
 80031f8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003200:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003204:	d10c      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x534>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	3304      	adds	r3, #4
 800320a:	2101      	movs	r1, #1
 800320c:	4618      	mov	r0, r3
 800320e:	f000 f879 	bl	8003304 <RCCEx_PLLSAI1_Config>
 8003212:	4603      	mov	r3, r0
 8003214:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003216:	7cfb      	ldrb	r3, [r7, #19]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x534>
      {
        /* set overall return value */
        status = ret;
 800321c:	7cfb      	ldrb	r3, [r7, #19]
 800321e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d02f      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800322c:	4b2c      	ldr	r3, [pc, #176]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003232:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800323a:	4929      	ldr	r1, [pc, #164]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800323c:	4313      	orrs	r3, r2
 800323e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003246:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800324a:	d10d      	bne.n	8003268 <HAL_RCCEx_PeriphCLKConfig+0x57c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	3304      	adds	r3, #4
 8003250:	2102      	movs	r1, #2
 8003252:	4618      	mov	r0, r3
 8003254:	f000 f856 	bl	8003304 <RCCEx_PLLSAI1_Config>
 8003258:	4603      	mov	r3, r0
 800325a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800325c:	7cfb      	ldrb	r3, [r7, #19]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d014      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003262:	7cfb      	ldrb	r3, [r7, #19]
 8003264:	74bb      	strb	r3, [r7, #18]
 8003266:	e011      	b.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800326c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003270:	d10c      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	3320      	adds	r3, #32
 8003276:	2102      	movs	r1, #2
 8003278:	4618      	mov	r0, r3
 800327a:	f000 f935 	bl	80034e8 <RCCEx_PLLSAI2_Config>
 800327e:	4603      	mov	r3, r0
 8003280:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003282:	7cfb      	ldrb	r3, [r7, #19]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0x5a0>
      {
        /* set overall return value */
        status = ret;
 8003288:	7cfb      	ldrb	r3, [r7, #19]
 800328a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00b      	beq.n	80032b0 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003298:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 800329a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800329e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032a8:	490d      	ldr	r1, [pc, #52]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80032aa:	4313      	orrs	r3, r2
 80032ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d00b      	beq.n	80032d4 <HAL_RCCEx_PeriphCLKConfig+0x5e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80032bc:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80032be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032c2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032cc:	4904      	ldr	r1, [pc, #16]	; (80032e0 <HAL_RCCEx_PeriphCLKConfig+0x5f4>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80032d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3718      	adds	r7, #24
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	40021000 	.word	0x40021000

080032e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80032e4:	b480      	push	{r7}
 80032e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80032e8:	4b05      	ldr	r3, [pc, #20]	; (8003300 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a04      	ldr	r2, [pc, #16]	; (8003300 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80032ee:	f043 0304 	orr.w	r3, r3, #4
 80032f2:	6013      	str	r3, [r2, #0]
}
 80032f4:	bf00      	nop
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	40021000 	.word	0x40021000

08003304 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	b084      	sub	sp, #16
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800330e:	2300      	movs	r3, #0
 8003310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003312:	4b74      	ldr	r3, [pc, #464]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d018      	beq.n	8003350 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800331e:	4b71      	ldr	r3, [pc, #452]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003320:	68db      	ldr	r3, [r3, #12]
 8003322:	f003 0203 	and.w	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	429a      	cmp	r2, r3
 800332c:	d10d      	bne.n	800334a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
       ||
 8003332:	2b00      	cmp	r3, #0
 8003334:	d009      	beq.n	800334a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003336:	4b6b      	ldr	r3, [pc, #428]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003338:	68db      	ldr	r3, [r3, #12]
 800333a:	091b      	lsrs	r3, r3, #4
 800333c:	f003 0307 	and.w	r3, r3, #7
 8003340:	1c5a      	adds	r2, r3, #1
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	685b      	ldr	r3, [r3, #4]
       ||
 8003346:	429a      	cmp	r2, r3
 8003348:	d047      	beq.n	80033da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	73fb      	strb	r3, [r7, #15]
 800334e:	e044      	b.n	80033da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	2b03      	cmp	r3, #3
 8003356:	d018      	beq.n	800338a <RCCEx_PLLSAI1_Config+0x86>
 8003358:	2b03      	cmp	r3, #3
 800335a:	d825      	bhi.n	80033a8 <RCCEx_PLLSAI1_Config+0xa4>
 800335c:	2b01      	cmp	r3, #1
 800335e:	d002      	beq.n	8003366 <RCCEx_PLLSAI1_Config+0x62>
 8003360:	2b02      	cmp	r3, #2
 8003362:	d009      	beq.n	8003378 <RCCEx_PLLSAI1_Config+0x74>
 8003364:	e020      	b.n	80033a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003366:	4b5f      	ldr	r3, [pc, #380]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d11d      	bne.n	80033ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003376:	e01a      	b.n	80033ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003378:	4b5a      	ldr	r3, [pc, #360]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003380:	2b00      	cmp	r3, #0
 8003382:	d116      	bne.n	80033b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003388:	e013      	b.n	80033b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800338a:	4b56      	ldr	r3, [pc, #344]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10f      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003396:	4b53      	ldr	r3, [pc, #332]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d109      	bne.n	80033b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80033a2:	2301      	movs	r3, #1
 80033a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80033a6:	e006      	b.n	80033b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	73fb      	strb	r3, [r7, #15]
      break;
 80033ac:	e004      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033ae:	bf00      	nop
 80033b0:	e002      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033b2:	bf00      	nop
 80033b4:	e000      	b.n	80033b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80033b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80033b8:	7bfb      	ldrb	r3, [r7, #15]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10d      	bne.n	80033da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80033be:	4b49      	ldr	r3, [pc, #292]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c0:	68db      	ldr	r3, [r3, #12]
 80033c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6819      	ldr	r1, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	3b01      	subs	r3, #1
 80033d0:	011b      	lsls	r3, r3, #4
 80033d2:	430b      	orrs	r3, r1
 80033d4:	4943      	ldr	r1, [pc, #268]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80033da:	7bfb      	ldrb	r3, [r7, #15]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d17c      	bne.n	80034da <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80033e0:	4b40      	ldr	r3, [pc, #256]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a3f      	ldr	r2, [pc, #252]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ec:	f7fd fa58 	bl	80008a0 <HAL_GetTick>
 80033f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80033f2:	e009      	b.n	8003408 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033f4:	f7fd fa54 	bl	80008a0 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d902      	bls.n	8003408 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	73fb      	strb	r3, [r7, #15]
        break;
 8003406:	e005      	b.n	8003414 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003408:	4b36      	ldr	r3, [pc, #216]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ef      	bne.n	80033f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003414:	7bfb      	ldrb	r3, [r7, #15]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d15f      	bne.n	80034da <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d110      	bne.n	8003442 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003420:	4b30      	ldr	r3, [pc, #192]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003422:	691b      	ldr	r3, [r3, #16]
 8003424:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003428:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800342c:	687a      	ldr	r2, [r7, #4]
 800342e:	6892      	ldr	r2, [r2, #8]
 8003430:	0211      	lsls	r1, r2, #8
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68d2      	ldr	r2, [r2, #12]
 8003436:	06d2      	lsls	r2, r2, #27
 8003438:	430a      	orrs	r2, r1
 800343a:	492a      	ldr	r1, [pc, #168]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800343c:	4313      	orrs	r3, r2
 800343e:	610b      	str	r3, [r1, #16]
 8003440:	e027      	b.n	8003492 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d112      	bne.n	800346e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003448:	4b26      	ldr	r3, [pc, #152]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800344a:	691b      	ldr	r3, [r3, #16]
 800344c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003450:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003454:	687a      	ldr	r2, [r7, #4]
 8003456:	6892      	ldr	r2, [r2, #8]
 8003458:	0211      	lsls	r1, r2, #8
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	6912      	ldr	r2, [r2, #16]
 800345e:	0852      	lsrs	r2, r2, #1
 8003460:	3a01      	subs	r2, #1
 8003462:	0552      	lsls	r2, r2, #21
 8003464:	430a      	orrs	r2, r1
 8003466:	491f      	ldr	r1, [pc, #124]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003468:	4313      	orrs	r3, r2
 800346a:	610b      	str	r3, [r1, #16]
 800346c:	e011      	b.n	8003492 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800346e:	4b1d      	ldr	r3, [pc, #116]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003476:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6892      	ldr	r2, [r2, #8]
 800347e:	0211      	lsls	r1, r2, #8
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6952      	ldr	r2, [r2, #20]
 8003484:	0852      	lsrs	r2, r2, #1
 8003486:	3a01      	subs	r2, #1
 8003488:	0652      	lsls	r2, r2, #25
 800348a:	430a      	orrs	r2, r1
 800348c:	4915      	ldr	r1, [pc, #84]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800348e:	4313      	orrs	r3, r2
 8003490:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003492:	4b14      	ldr	r3, [pc, #80]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800349c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800349e:	f7fd f9ff 	bl	80008a0 <HAL_GetTick>
 80034a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034a4:	e009      	b.n	80034ba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80034a6:	f7fd f9fb 	bl	80008a0 <HAL_GetTick>
 80034aa:	4602      	mov	r2, r0
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	2b02      	cmp	r3, #2
 80034b2:	d902      	bls.n	80034ba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80034b4:	2303      	movs	r3, #3
 80034b6:	73fb      	strb	r3, [r7, #15]
          break;
 80034b8:	e005      	b.n	80034c6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80034ba:	4b0a      	ldr	r3, [pc, #40]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d0ef      	beq.n	80034a6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80034c6:	7bfb      	ldrb	r3, [r7, #15]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d106      	bne.n	80034da <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80034cc:	4b05      	ldr	r3, [pc, #20]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034ce:	691a      	ldr	r2, [r3, #16]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	699b      	ldr	r3, [r3, #24]
 80034d4:	4903      	ldr	r1, [pc, #12]	; (80034e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80034da:	7bfb      	ldrb	r3, [r7, #15]
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3710      	adds	r7, #16
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}
 80034e4:	40021000 	.word	0x40021000

080034e8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80034f2:	2300      	movs	r3, #0
 80034f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80034f6:	4b69      	ldr	r3, [pc, #420]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 80034f8:	68db      	ldr	r3, [r3, #12]
 80034fa:	f003 0303 	and.w	r3, r3, #3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d018      	beq.n	8003534 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003502:	4b66      	ldr	r3, [pc, #408]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003504:	68db      	ldr	r3, [r3, #12]
 8003506:	f003 0203 	and.w	r2, r3, #3
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d10d      	bne.n	800352e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
       ||
 8003516:	2b00      	cmp	r3, #0
 8003518:	d009      	beq.n	800352e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800351a:	4b60      	ldr	r3, [pc, #384]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	091b      	lsrs	r3, r3, #4
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	1c5a      	adds	r2, r3, #1
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685b      	ldr	r3, [r3, #4]
       ||
 800352a:	429a      	cmp	r2, r3
 800352c:	d047      	beq.n	80035be <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800352e:	2301      	movs	r3, #1
 8003530:	73fb      	strb	r3, [r7, #15]
 8003532:	e044      	b.n	80035be <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	2b03      	cmp	r3, #3
 800353a:	d018      	beq.n	800356e <RCCEx_PLLSAI2_Config+0x86>
 800353c:	2b03      	cmp	r3, #3
 800353e:	d825      	bhi.n	800358c <RCCEx_PLLSAI2_Config+0xa4>
 8003540:	2b01      	cmp	r3, #1
 8003542:	d002      	beq.n	800354a <RCCEx_PLLSAI2_Config+0x62>
 8003544:	2b02      	cmp	r3, #2
 8003546:	d009      	beq.n	800355c <RCCEx_PLLSAI2_Config+0x74>
 8003548:	e020      	b.n	800358c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800354a:	4b54      	ldr	r3, [pc, #336]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0302 	and.w	r3, r3, #2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d11d      	bne.n	8003592 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003556:	2301      	movs	r3, #1
 8003558:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800355a:	e01a      	b.n	8003592 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800355c:	4b4f      	ldr	r3, [pc, #316]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003564:	2b00      	cmp	r3, #0
 8003566:	d116      	bne.n	8003596 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800356c:	e013      	b.n	8003596 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800356e:	4b4b      	ldr	r3, [pc, #300]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003576:	2b00      	cmp	r3, #0
 8003578:	d10f      	bne.n	800359a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800357a:	4b48      	ldr	r3, [pc, #288]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d109      	bne.n	800359a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800358a:	e006      	b.n	800359a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800358c:	2301      	movs	r3, #1
 800358e:	73fb      	strb	r3, [r7, #15]
      break;
 8003590:	e004      	b.n	800359c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003592:	bf00      	nop
 8003594:	e002      	b.n	800359c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003596:	bf00      	nop
 8003598:	e000      	b.n	800359c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800359a:	bf00      	nop
    }

    if(status == HAL_OK)
 800359c:	7bfb      	ldrb	r3, [r7, #15]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10d      	bne.n	80035be <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80035a2:	4b3e      	ldr	r3, [pc, #248]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6819      	ldr	r1, [r3, #0]
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	3b01      	subs	r3, #1
 80035b4:	011b      	lsls	r3, r3, #4
 80035b6:	430b      	orrs	r3, r1
 80035b8:	4938      	ldr	r1, [pc, #224]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035ba:	4313      	orrs	r3, r2
 80035bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80035be:	7bfb      	ldrb	r3, [r7, #15]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d166      	bne.n	8003692 <RCCEx_PLLSAI2_Config+0x1aa>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80035c4:	4b35      	ldr	r3, [pc, #212]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a34      	ldr	r2, [pc, #208]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035d0:	f7fd f966 	bl	80008a0 <HAL_GetTick>
 80035d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035d6:	e009      	b.n	80035ec <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80035d8:	f7fd f962 	bl	80008a0 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b02      	cmp	r3, #2
 80035e4:	d902      	bls.n	80035ec <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	73fb      	strb	r3, [r7, #15]
        break;
 80035ea:	e005      	b.n	80035f8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80035ec:	4b2b      	ldr	r3, [pc, #172]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d1ef      	bne.n	80035d8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80035f8:	7bfb      	ldrb	r3, [r7, #15]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d149      	bne.n	8003692 <RCCEx_PLLSAI2_Config+0x1aa>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d110      	bne.n	8003626 <RCCEx_PLLSAI2_Config+0x13e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI2 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003604:	4b25      	ldr	r3, [pc, #148]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800360c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003610:	687a      	ldr	r2, [r7, #4]
 8003612:	6892      	ldr	r2, [r2, #8]
 8003614:	0211      	lsls	r1, r2, #8
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	68d2      	ldr	r2, [r2, #12]
 800361a:	06d2      	lsls	r2, r2, #27
 800361c:	430a      	orrs	r2, r1
 800361e:	491f      	ldr	r1, [pc, #124]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003620:	4313      	orrs	r3, r2
 8003622:	614b      	str	r3, [r1, #20]
 8003624:	e011      	b.n	800364a <RCCEx_PLLSAI2_Config+0x162>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003626:	4b1d      	ldr	r3, [pc, #116]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800362e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	6892      	ldr	r2, [r2, #8]
 8003636:	0211      	lsls	r1, r2, #8
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	6912      	ldr	r2, [r2, #16]
 800363c:	0852      	lsrs	r2, r2, #1
 800363e:	3a01      	subs	r2, #1
 8003640:	0652      	lsls	r2, r2, #25
 8003642:	430a      	orrs	r2, r1
 8003644:	4915      	ldr	r1, [pc, #84]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003646:	4313      	orrs	r3, r2
 8003648:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800364a:	4b14      	ldr	r3, [pc, #80]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a13      	ldr	r2, [pc, #76]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003654:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003656:	f7fd f923 	bl	80008a0 <HAL_GetTick>
 800365a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800365c:	e009      	b.n	8003672 <RCCEx_PLLSAI2_Config+0x18a>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800365e:	f7fd f91f 	bl	80008a0 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d902      	bls.n	8003672 <RCCEx_PLLSAI2_Config+0x18a>
        {
          status = HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	73fb      	strb	r3, [r7, #15]
          break;
 8003670:	e005      	b.n	800367e <RCCEx_PLLSAI2_Config+0x196>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003672:	4b0a      	ldr	r3, [pc, #40]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0ef      	beq.n	800365e <RCCEx_PLLSAI2_Config+0x176>
        }
      }

      if(status == HAL_OK)
 800367e:	7bfb      	ldrb	r3, [r7, #15]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d106      	bne.n	8003692 <RCCEx_PLLSAI2_Config+0x1aa>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 8003686:	695a      	ldr	r2, [r3, #20]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	4903      	ldr	r1, [pc, #12]	; (800369c <RCCEx_PLLSAI2_Config+0x1b4>)
 800368e:	4313      	orrs	r3, r2
 8003690:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003692:	7bfb      	ldrb	r3, [r7, #15]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	40021000 	.word	0x40021000

080036a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80036a0:	b084      	sub	sp, #16
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
 80036aa:	f107 001c 	add.w	r0, r7, #28
 80036ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	68db      	ldr	r3, [r3, #12]
 80036b6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f001 fa40 	bl	8004b44 <USB_CoreReset>
 80036c4:	4603      	mov	r3, r0
 80036c6:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80036c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d106      	bne.n	80036dc <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	639a      	str	r2, [r3, #56]	; 0x38
 80036da:	e005      	b.n	80036e8 <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036e0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80036e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3710      	adds	r7, #16
 80036ee:	46bd      	mov	sp, r7
 80036f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80036f4:	b004      	add	sp, #16
 80036f6:	4770      	bx	lr

080036f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b087      	sub	sp, #28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	4613      	mov	r3, r2
 8003704:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	2b02      	cmp	r3, #2
 800370a:	d165      	bne.n	80037d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	4a3e      	ldr	r2, [pc, #248]	; (8003808 <USB_SetTurnaroundTime+0x110>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d906      	bls.n	8003722 <USB_SetTurnaroundTime+0x2a>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	4a3d      	ldr	r2, [pc, #244]	; (800380c <USB_SetTurnaroundTime+0x114>)
 8003718:	4293      	cmp	r3, r2
 800371a:	d202      	bcs.n	8003722 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800371c:	230f      	movs	r3, #15
 800371e:	617b      	str	r3, [r7, #20]
 8003720:	e05c      	b.n	80037dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	4a39      	ldr	r2, [pc, #228]	; (800380c <USB_SetTurnaroundTime+0x114>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d306      	bcc.n	8003738 <USB_SetTurnaroundTime+0x40>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	4a38      	ldr	r2, [pc, #224]	; (8003810 <USB_SetTurnaroundTime+0x118>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d202      	bcs.n	8003738 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003732:	230e      	movs	r3, #14
 8003734:	617b      	str	r3, [r7, #20]
 8003736:	e051      	b.n	80037dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	4a35      	ldr	r2, [pc, #212]	; (8003810 <USB_SetTurnaroundTime+0x118>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d306      	bcc.n	800374e <USB_SetTurnaroundTime+0x56>
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	4a34      	ldr	r2, [pc, #208]	; (8003814 <USB_SetTurnaroundTime+0x11c>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d202      	bcs.n	800374e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003748:	230d      	movs	r3, #13
 800374a:	617b      	str	r3, [r7, #20]
 800374c:	e046      	b.n	80037dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	4a30      	ldr	r2, [pc, #192]	; (8003814 <USB_SetTurnaroundTime+0x11c>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d306      	bcc.n	8003764 <USB_SetTurnaroundTime+0x6c>
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	4a2f      	ldr	r2, [pc, #188]	; (8003818 <USB_SetTurnaroundTime+0x120>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d802      	bhi.n	8003764 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800375e:	230c      	movs	r3, #12
 8003760:	617b      	str	r3, [r7, #20]
 8003762:	e03b      	b.n	80037dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4a2c      	ldr	r2, [pc, #176]	; (8003818 <USB_SetTurnaroundTime+0x120>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d906      	bls.n	800377a <USB_SetTurnaroundTime+0x82>
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	4a2b      	ldr	r2, [pc, #172]	; (800381c <USB_SetTurnaroundTime+0x124>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d802      	bhi.n	800377a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003774:	230b      	movs	r3, #11
 8003776:	617b      	str	r3, [r7, #20]
 8003778:	e030      	b.n	80037dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	4a27      	ldr	r2, [pc, #156]	; (800381c <USB_SetTurnaroundTime+0x124>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d906      	bls.n	8003790 <USB_SetTurnaroundTime+0x98>
 8003782:	68bb      	ldr	r3, [r7, #8]
 8003784:	4a26      	ldr	r2, [pc, #152]	; (8003820 <USB_SetTurnaroundTime+0x128>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d802      	bhi.n	8003790 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800378a:	230a      	movs	r3, #10
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	e025      	b.n	80037dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	4a23      	ldr	r2, [pc, #140]	; (8003820 <USB_SetTurnaroundTime+0x128>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d906      	bls.n	80037a6 <USB_SetTurnaroundTime+0xae>
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	4a22      	ldr	r2, [pc, #136]	; (8003824 <USB_SetTurnaroundTime+0x12c>)
 800379c:	4293      	cmp	r3, r2
 800379e:	d202      	bcs.n	80037a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80037a0:	2309      	movs	r3, #9
 80037a2:	617b      	str	r3, [r7, #20]
 80037a4:	e01a      	b.n	80037dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80037a6:	68bb      	ldr	r3, [r7, #8]
 80037a8:	4a1e      	ldr	r2, [pc, #120]	; (8003824 <USB_SetTurnaroundTime+0x12c>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d306      	bcc.n	80037bc <USB_SetTurnaroundTime+0xc4>
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	4a1d      	ldr	r2, [pc, #116]	; (8003828 <USB_SetTurnaroundTime+0x130>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d802      	bhi.n	80037bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80037b6:	2308      	movs	r3, #8
 80037b8:	617b      	str	r3, [r7, #20]
 80037ba:	e00f      	b.n	80037dc <USB_SetTurnaroundTime+0xe4>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	4a1a      	ldr	r2, [pc, #104]	; (8003828 <USB_SetTurnaroundTime+0x130>)
 80037c0:	4293      	cmp	r3, r2
 80037c2:	d906      	bls.n	80037d2 <USB_SetTurnaroundTime+0xda>
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	4a19      	ldr	r2, [pc, #100]	; (800382c <USB_SetTurnaroundTime+0x134>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d202      	bcs.n	80037d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80037cc:	2307      	movs	r3, #7
 80037ce:	617b      	str	r3, [r7, #20]
 80037d0:	e004      	b.n	80037dc <USB_SetTurnaroundTime+0xe4>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80037d2:	2306      	movs	r3, #6
 80037d4:	617b      	str	r3, [r7, #20]
 80037d6:	e001      	b.n	80037dc <USB_SetTurnaroundTime+0xe4>
    }
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80037d8:	2309      	movs	r3, #9
 80037da:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	68db      	ldr	r3, [r3, #12]
 80037e0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	697b      	ldr	r3, [r7, #20]
 80037ee:	029b      	lsls	r3, r3, #10
 80037f0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80037f4:	431a      	orrs	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80037fa:	2300      	movs	r3, #0
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	371c      	adds	r7, #28
 8003800:	46bd      	mov	sp, r7
 8003802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003806:	4770      	bx	lr
 8003808:	00d8acbf 	.word	0x00d8acbf
 800380c:	00e4e1c0 	.word	0x00e4e1c0
 8003810:	00f42400 	.word	0x00f42400
 8003814:	01067380 	.word	0x01067380
 8003818:	011a499f 	.word	0x011a499f
 800381c:	01312cff 	.word	0x01312cff
 8003820:	014ca43f 	.word	0x014ca43f
 8003824:	016e3600 	.word	0x016e3600
 8003828:	01a6ab1f 	.word	0x01a6ab1f
 800382c:	01e84800 	.word	0x01e84800

08003830 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f043 0201 	orr.w	r2, r3, #1
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003844:	2300      	movs	r3, #0
}
 8003846:	4618      	mov	r0, r3
 8003848:	370c      	adds	r7, #12
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr

08003852 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003852:	b480      	push	{r7}
 8003854:	b083      	sub	sp, #12
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 0201 	bic.w	r2, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	370c      	adds	r7, #12
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr

08003874 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
 800387c:	460b      	mov	r3, r1
 800387e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d115      	bne.n	80038c2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038a2:	2001      	movs	r0, #1
 80038a4:	f7fd f808 	bl	80008b8 <HAL_Delay>
      ms++;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	3301      	adds	r3, #1
 80038ac:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f001 f8cf 	bl	8004a52 <USB_GetMode>
 80038b4:	4603      	mov	r3, r0
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d01e      	beq.n	80038f8 <USB_SetCurrentMode+0x84>
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2b31      	cmp	r3, #49	; 0x31
 80038be:	d9f0      	bls.n	80038a2 <USB_SetCurrentMode+0x2e>
 80038c0:	e01a      	b.n	80038f8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80038c2:	78fb      	ldrb	r3, [r7, #3]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d115      	bne.n	80038f4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80038d4:	2001      	movs	r0, #1
 80038d6:	f7fc ffef 	bl	80008b8 <HAL_Delay>
      ms++;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	3301      	adds	r3, #1
 80038de:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f001 f8b6 	bl	8004a52 <USB_GetMode>
 80038e6:	4603      	mov	r3, r0
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d005      	beq.n	80038f8 <USB_SetCurrentMode+0x84>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2b31      	cmp	r3, #49	; 0x31
 80038f0:	d9f0      	bls.n	80038d4 <USB_SetCurrentMode+0x60>
 80038f2:	e001      	b.n	80038f8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e005      	b.n	8003904 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2b32      	cmp	r3, #50	; 0x32
 80038fc:	d101      	bne.n	8003902 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e000      	b.n	8003904 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003902:	2300      	movs	r3, #0
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}

0800390c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800390c:	b084      	sub	sp, #16
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800391a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800391e:	2300      	movs	r3, #0
 8003920:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	e009      	b.n	8003940 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800392c:	687a      	ldr	r2, [r7, #4]
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	3340      	adds	r3, #64	; 0x40
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	4413      	add	r3, r2
 8003936:	2200      	movs	r2, #0
 8003938:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	3301      	adds	r3, #1
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]
 8003942:	2b0e      	cmp	r3, #14
 8003944:	d9f2      	bls.n	800392c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003946:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003948:	2b00      	cmp	r3, #0
 800394a:	d11c      	bne.n	8003986 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	68fa      	ldr	r2, [r7, #12]
 8003956:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800395a:	f043 0302 	orr.w	r3, r3, #2
 800395e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003964:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	601a      	str	r2, [r3, #0]
 8003984:	e005      	b.n	8003992 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003998:	461a      	mov	r2, r3
 800399a:	2300      	movs	r3, #0
 800399c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039a4:	4619      	mov	r1, r3
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ac:	461a      	mov	r2, r3
 80039ae:	680b      	ldr	r3, [r1, #0]
 80039b0:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039b2:	2103      	movs	r1, #3
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f955 	bl	8003c64 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039ba:	2110      	movs	r1, #16
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f8f1 	bl	8003ba4 <USB_FlushTxFifo>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f91b 	bl	8003c08 <USB_FlushRxFifo>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e2:	461a      	mov	r2, r3
 80039e4:	2300      	movs	r3, #0
 80039e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ee:	461a      	mov	r2, r3
 80039f0:	2300      	movs	r3, #0
 80039f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fa:	461a      	mov	r2, r3
 80039fc:	2300      	movs	r3, #0
 80039fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	e043      	b.n	8003a8e <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a1c:	d118      	bne.n	8003a50 <USB_DevInit+0x144>
    {
      if (i == 0U)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a30:	461a      	mov	r2, r3
 8003a32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	e013      	b.n	8003a62 <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a46:	461a      	mov	r2, r3
 8003a48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e008      	b.n	8003a62 <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2300      	movs	r3, #0
 8003a72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a80:	461a      	mov	r2, r3
 8003a82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d3b7      	bcc.n	8003a06 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	e043      	b.n	8003b24 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ab2:	d118      	bne.n	8003ae6 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e013      	b.n	8003af8 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003adc:	461a      	mov	r2, r3
 8003ade:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	e008      	b.n	8003af8 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af2:	461a      	mov	r2, r3
 8003af4:	2300      	movs	r3, #0
 8003af6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b04:	461a      	mov	r2, r3
 8003b06:	2300      	movs	r3, #0
 8003b08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b16:	461a      	mov	r2, r3
 8003b18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	3301      	adds	r3, #1
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d3b7      	bcc.n	8003a9c <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	f043 0210 	orr.w	r2, r3, #16
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	699a      	ldr	r2, [r3, #24]
 8003b5e:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <USB_DevInit+0x294>)
 8003b60:	4313      	orrs	r3, r2
 8003b62:	687a      	ldr	r2, [r7, #4]
 8003b64:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d005      	beq.n	8003b78 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	699b      	ldr	r3, [r3, #24]
 8003b70:	f043 0208 	orr.w	r2, r3, #8
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b78:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b7a:	2b01      	cmp	r3, #1
 8003b7c:	d107      	bne.n	8003b8e <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003b86:	f043 0304 	orr.w	r3, r3, #4
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b9a:	b004      	add	sp, #16
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	803c3800 	.word	0x803c3800

08003ba4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b085      	sub	sp, #20
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	60fb      	str	r3, [r7, #12]
 8003bb8:	4a12      	ldr	r2, [pc, #72]	; (8003c04 <USB_FlushTxFifo+0x60>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d901      	bls.n	8003bc2 <USB_FlushTxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e01a      	b.n	8003bf8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	daf3      	bge.n	8003bb2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003bca:	2300      	movs	r3, #0
 8003bcc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	019b      	lsls	r3, r3, #6
 8003bd2:	f043 0220 	orr.w	r2, r3, #32
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3301      	adds	r3, #1
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	4a08      	ldr	r2, [pc, #32]	; (8003c04 <USB_FlushTxFifo+0x60>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d901      	bls.n	8003bea <USB_FlushTxFifo+0x46>
    {
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e006      	b.n	8003bf8 <USB_FlushTxFifo+0x54>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	f003 0320 	and.w	r3, r3, #32
 8003bf2:	2b20      	cmp	r3, #32
 8003bf4:	d0f1      	beq.n	8003bda <USB_FlushTxFifo+0x36>

  return HAL_OK;
 8003bf6:	2300      	movs	r3, #0
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3714      	adds	r7, #20
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr
 8003c04:	00030d40 	.word	0x00030d40

08003c08 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b085      	sub	sp, #20
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	4a11      	ldr	r2, [pc, #68]	; (8003c60 <USB_FlushRxFifo+0x58>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d901      	bls.n	8003c24 <USB_FlushRxFifo+0x1c>
    {
      return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e017      	b.n	8003c54 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	daf3      	bge.n	8003c14 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2210      	movs	r2, #16
 8003c34:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	3301      	adds	r3, #1
 8003c3a:	60fb      	str	r3, [r7, #12]
 8003c3c:	4a08      	ldr	r2, [pc, #32]	; (8003c60 <USB_FlushRxFifo+0x58>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d901      	bls.n	8003c46 <USB_FlushRxFifo+0x3e>
    {
      return HAL_TIMEOUT;
 8003c42:	2303      	movs	r3, #3
 8003c44:	e006      	b.n	8003c54 <USB_FlushRxFifo+0x4c>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	f003 0310 	and.w	r3, r3, #16
 8003c4e:	2b10      	cmp	r3, #16
 8003c50:	d0f1      	beq.n	8003c36 <USB_FlushRxFifo+0x2e>

  return HAL_OK;
 8003c52:	2300      	movs	r3, #0
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	3714      	adds	r7, #20
 8003c58:	46bd      	mov	sp, r7
 8003c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5e:	4770      	bx	lr
 8003c60:	00030d40 	.word	0x00030d40

08003c64 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b085      	sub	sp, #20
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	460b      	mov	r3, r1
 8003c6e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	78fb      	ldrb	r3, [r7, #3]
 8003c7e:	68f9      	ldr	r1, [r7, #12]
 8003c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c84:	4313      	orrs	r3, r2
 8003c86:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3714      	adds	r7, #20
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr

08003c96 <USB_GetDevSpeed>:
  * @retval speed  device speed
  *          This parameter can be one of these values:
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003c96:	b480      	push	{r7}
 8003c98:	b087      	sub	sp, #28
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 0306 	and.w	r3, r3, #6
 8003cae:	60fb      	str	r3, [r7, #12]

  if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b02      	cmp	r3, #2
 8003cb4:	d002      	beq.n	8003cbc <USB_GetDevSpeed+0x26>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d102      	bne.n	8003cc2 <USB_GetDevSpeed+0x2c>
      (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003cbc:	2302      	movs	r3, #2
 8003cbe:	75fb      	strb	r3, [r7, #23]
 8003cc0:	e001      	b.n	8003cc6 <USB_GetDevSpeed+0x30>
  }
  else
  {
    speed = 0xFU;
 8003cc2:	230f      	movs	r3, #15
 8003cc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003cc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	371c      	adds	r7, #28
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd2:	4770      	bx	lr

08003cd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	b085      	sub	sp, #20
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
 8003cdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003ce2:	683b      	ldr	r3, [r7, #0]
 8003ce4:	781b      	ldrb	r3, [r3, #0]
 8003ce6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003ce8:	683b      	ldr	r3, [r7, #0]
 8003cea:	785b      	ldrb	r3, [r3, #1]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d13a      	bne.n	8003d66 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cf6:	69da      	ldr	r2, [r3, #28]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	f003 030f 	and.w	r3, r3, #15
 8003d00:	2101      	movs	r1, #1
 8003d02:	fa01 f303 	lsl.w	r3, r1, r3
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	68f9      	ldr	r1, [r7, #12]
 8003d0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	015a      	lsls	r2, r3, #5
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	4413      	add	r3, r2
 8003d1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d155      	bne.n	8003dd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d28:	68bb      	ldr	r3, [r7, #8]
 8003d2a:	015a      	lsls	r2, r3, #5
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	4413      	add	r3, r2
 8003d30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	78db      	ldrb	r3, [r3, #3]
 8003d42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003d46:	68bb      	ldr	r3, [r7, #8]
 8003d48:	059b      	lsls	r3, r3, #22
 8003d4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	68ba      	ldr	r2, [r7, #8]
 8003d50:	0151      	lsls	r1, r2, #5
 8003d52:	68fa      	ldr	r2, [r7, #12]
 8003d54:	440a      	add	r2, r1
 8003d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	e036      	b.n	8003dd4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	683b      	ldr	r3, [r7, #0]
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	f003 030f 	and.w	r3, r3, #15
 8003d76:	2101      	movs	r1, #1
 8003d78:	fa01 f303 	lsl.w	r3, r1, r3
 8003d7c:	041b      	lsls	r3, r3, #16
 8003d7e:	68f9      	ldr	r1, [r7, #12]
 8003d80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d84:	4313      	orrs	r3, r2
 8003d86:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	015a      	lsls	r2, r3, #5
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d11a      	bne.n	8003dd4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	015a      	lsls	r2, r3, #5
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	4413      	add	r3, r2
 8003da6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003daa:	681a      	ldr	r2, [r3, #0]
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	78db      	ldrb	r3, [r3, #3]
 8003db8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	68ba      	ldr	r2, [r7, #8]
 8003dc0:	0151      	lsls	r1, r2, #5
 8003dc2:	68fa      	ldr	r2, [r7, #12]
 8003dc4:	440a      	add	r2, r1
 8003dc6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dd2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3714      	adds	r7, #20
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr
	...

08003de4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	785b      	ldrb	r3, [r3, #1]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d161      	bne.n	8003ec4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e16:	d11f      	bne.n	8003e58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003e18:	68bb      	ldr	r3, [r7, #8]
 8003e1a:	015a      	lsls	r2, r3, #5
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	4413      	add	r3, r2
 8003e20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	68ba      	ldr	r2, [r7, #8]
 8003e28:	0151      	lsls	r1, r2, #5
 8003e2a:	68fa      	ldr	r2, [r7, #12]
 8003e2c:	440a      	add	r2, r1
 8003e2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	015a      	lsls	r2, r3, #5
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	4413      	add	r3, r2
 8003e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	68ba      	ldr	r2, [r7, #8]
 8003e48:	0151      	lsls	r1, r2, #5
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	440a      	add	r2, r1
 8003e4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	f003 030f 	and.w	r3, r3, #15
 8003e68:	2101      	movs	r1, #1
 8003e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	43db      	mvns	r3, r3
 8003e72:	68f9      	ldr	r1, [r7, #12]
 8003e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e78:	4013      	ands	r3, r2
 8003e7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	f003 030f 	and.w	r3, r3, #15
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e92:	b29b      	uxth	r3, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	68f9      	ldr	r1, [r7, #12]
 8003e98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e9c:	4013      	ands	r3, r2
 8003e9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	015a      	lsls	r2, r3, #5
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4413      	add	r3, r2
 8003ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	0159      	lsls	r1, r3, #5
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	440b      	add	r3, r1
 8003eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003eba:	4619      	mov	r1, r3
 8003ebc:	4b35      	ldr	r3, [pc, #212]	; (8003f94 <USB_DeactivateEndpoint+0x1b0>)
 8003ebe:	4013      	ands	r3, r2
 8003ec0:	600b      	str	r3, [r1, #0]
 8003ec2:	e060      	b.n	8003f86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	015a      	lsls	r2, r3, #5
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	4413      	add	r3, r2
 8003ecc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ed6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003eda:	d11f      	bne.n	8003f1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003edc:	68bb      	ldr	r3, [r7, #8]
 8003ede:	015a      	lsls	r2, r3, #5
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	0151      	lsls	r1, r2, #5
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	440a      	add	r2, r1
 8003ef2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003efa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	68ba      	ldr	r2, [r7, #8]
 8003f0c:	0151      	lsls	r1, r2, #5
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	440a      	add	r2, r1
 8003f12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003f1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	f003 030f 	and.w	r3, r3, #15
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f32:	041b      	lsls	r3, r3, #16
 8003f34:	43db      	mvns	r3, r3
 8003f36:	68f9      	ldr	r1, [r7, #12]
 8003f38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	f003 030f 	and.w	r3, r3, #15
 8003f50:	2101      	movs	r1, #1
 8003f52:	fa01 f303 	lsl.w	r3, r1, r3
 8003f56:	041b      	lsls	r3, r3, #16
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	68f9      	ldr	r1, [r7, #12]
 8003f5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f60:	4013      	ands	r3, r2
 8003f62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	015a      	lsls	r2, r3, #5
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	4413      	add	r3, r2
 8003f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	0159      	lsls	r1, r3, #5
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	440b      	add	r3, r1
 8003f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f7e:	4619      	mov	r1, r3
 8003f80:	4b05      	ldr	r3, [pc, #20]	; (8003f98 <USB_DeactivateEndpoint+0x1b4>)
 8003f82:	4013      	ands	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003f86:	2300      	movs	r3, #0
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3714      	adds	r7, #20
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr
 8003f94:	ec337800 	.word	0xec337800
 8003f98:	eff37800 	.word	0xeff37800

08003f9c <USB_EPStartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	613b      	str	r3, [r7, #16]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	785b      	ldrb	r3, [r3, #1]
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	f040 810a 	bne.w	80041ce <USB_EPStartXfer+0x232>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d132      	bne.n	8004028 <USB_EPStartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	015a      	lsls	r2, r3, #5
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	4413      	add	r3, r2
 8003fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	693a      	ldr	r2, [r7, #16]
 8003fd2:	0151      	lsls	r1, r2, #5
 8003fd4:	697a      	ldr	r2, [r7, #20]
 8003fd6:	440a      	add	r2, r1
 8003fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003fe0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003fe4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	015a      	lsls	r2, r3, #5
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	4413      	add	r3, r2
 8003fee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ff2:	691b      	ldr	r3, [r3, #16]
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	0151      	lsls	r1, r2, #5
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	440a      	add	r2, r1
 8003ffc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004000:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004004:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	693a      	ldr	r2, [r7, #16]
 8004016:	0151      	lsls	r1, r2, #5
 8004018:	697a      	ldr	r2, [r7, #20]
 800401a:	440a      	add	r2, r1
 800401c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004020:	0cdb      	lsrs	r3, r3, #19
 8004022:	04db      	lsls	r3, r3, #19
 8004024:	6113      	str	r3, [r2, #16]
 8004026:	e074      	b.n	8004112 <USB_EPStartXfer+0x176>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	697b      	ldr	r3, [r7, #20]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	0151      	lsls	r1, r2, #5
 800403a:	697a      	ldr	r2, [r7, #20]
 800403c:	440a      	add	r2, r1
 800403e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004042:	0cdb      	lsrs	r3, r3, #19
 8004044:	04db      	lsls	r3, r3, #19
 8004046:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	015a      	lsls	r2, r3, #5
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	4413      	add	r3, r2
 8004050:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	693a      	ldr	r2, [r7, #16]
 8004058:	0151      	lsls	r1, r2, #5
 800405a:	697a      	ldr	r2, [r7, #20]
 800405c:	440a      	add	r2, r1
 800405e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004062:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004066:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800406a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004078:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	6959      	ldr	r1, [r3, #20]
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	440b      	add	r3, r1
 8004084:	1e59      	subs	r1, r3, #1
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	fbb1 f3f3 	udiv	r3, r1, r3
 800408e:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004090:	4baf      	ldr	r3, [pc, #700]	; (8004350 <USB_EPStartXfer+0x3b4>)
 8004092:	400b      	ands	r3, r1
 8004094:	6939      	ldr	r1, [r7, #16]
 8004096:	0148      	lsls	r0, r1, #5
 8004098:	6979      	ldr	r1, [r7, #20]
 800409a:	4401      	add	r1, r0
 800409c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040a0:	4313      	orrs	r3, r2
 80040a2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040b0:	691a      	ldr	r2, [r3, #16]
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	695b      	ldr	r3, [r3, #20]
 80040b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ba:	6939      	ldr	r1, [r7, #16]
 80040bc:	0148      	lsls	r0, r1, #5
 80040be:	6979      	ldr	r1, [r7, #20]
 80040c0:	4401      	add	r1, r0
 80040c2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80040c6:	4313      	orrs	r3, r2
 80040c8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	78db      	ldrb	r3, [r3, #3]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d11f      	bne.n	8004112 <USB_EPStartXfer+0x176>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	015a      	lsls	r2, r3, #5
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	4413      	add	r3, r2
 80040da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	693a      	ldr	r2, [r7, #16]
 80040e2:	0151      	lsls	r1, r2, #5
 80040e4:	697a      	ldr	r2, [r7, #20]
 80040e6:	440a      	add	r2, r1
 80040e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040ec:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80040f0:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	015a      	lsls	r2, r3, #5
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	4413      	add	r3, r2
 80040fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	693a      	ldr	r2, [r7, #16]
 8004102:	0151      	lsls	r1, r2, #5
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	440a      	add	r2, r1
 8004108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004110:	6113      	str	r3, [r2, #16]
      }
    }
    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	015a      	lsls	r2, r3, #5
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	4413      	add	r3, r2
 800411a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	0151      	lsls	r1, r2, #5
 8004124:	697a      	ldr	r2, [r7, #20]
 8004126:	440a      	add	r2, r1
 8004128:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800412c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004130:	6013      	str	r3, [r2, #0]

    if (ep->type != EP_TYPE_ISOC)
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	78db      	ldrb	r3, [r3, #3]
 8004136:	2b01      	cmp	r3, #1
 8004138:	d015      	beq.n	8004166 <USB_EPStartXfer+0x1ca>
    {
      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	695b      	ldr	r3, [r3, #20]
 800413e:	2b00      	cmp	r3, #0
 8004140:	f000 8100 	beq.w	8004344 <USB_EPStartXfer+0x3a8>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	2101      	movs	r1, #1
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	6979      	ldr	r1, [r7, #20]
 800415c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004160:	4313      	orrs	r3, r2
 8004162:	634b      	str	r3, [r1, #52]	; 0x34
 8004164:	e0ee      	b.n	8004344 <USB_EPStartXfer+0x3a8>
      }
    }
    else
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004172:	2b00      	cmp	r3, #0
 8004174:	d110      	bne.n	8004198 <USB_EPStartXfer+0x1fc>
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	0151      	lsls	r1, r2, #5
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	440a      	add	r2, r1
 800418c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004190:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004194:	6013      	str	r3, [r2, #0]
 8004196:	e00f      	b.n	80041b8 <USB_EPStartXfer+0x21c>
      }
      else
      {
        USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	0151      	lsls	r1, r2, #5
 80041aa:	697a      	ldr	r2, [r7, #20]
 80041ac:	440a      	add	r2, r1
 80041ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b6:	6013      	str	r3, [r2, #0]
      }

      (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len);
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	68d9      	ldr	r1, [r3, #12]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	781a      	ldrb	r2, [r3, #0]
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	695b      	ldr	r3, [r3, #20]
 80041c4:	b29b      	uxth	r3, r3
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f000 f9e2 	bl	8004590 <USB_WritePacket>
 80041cc:	e0ba      	b.n	8004344 <USB_EPStartXfer+0x3a8>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041da:	691b      	ldr	r3, [r3, #16]
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	0151      	lsls	r1, r2, #5
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	440a      	add	r2, r1
 80041e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041e8:	0cdb      	lsrs	r3, r3, #19
 80041ea:	04db      	lsls	r3, r3, #19
 80041ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	015a      	lsls	r2, r3, #5
 80041f2:	697b      	ldr	r3, [r7, #20]
 80041f4:	4413      	add	r3, r2
 80041f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fa:	691b      	ldr	r3, [r3, #16]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	0151      	lsls	r1, r2, #5
 8004200:	697a      	ldr	r2, [r7, #20]
 8004202:	440a      	add	r2, r1
 8004204:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004208:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800420c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004210:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d123      	bne.n	8004262 <USB_EPStartXfer+0x2c6>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	015a      	lsls	r2, r3, #5
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	4413      	add	r3, r2
 8004222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004226:	691a      	ldr	r2, [r3, #16]
 8004228:	683b      	ldr	r3, [r7, #0]
 800422a:	689b      	ldr	r3, [r3, #8]
 800422c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004230:	6939      	ldr	r1, [r7, #16]
 8004232:	0148      	lsls	r0, r1, #5
 8004234:	6979      	ldr	r1, [r7, #20]
 8004236:	4401      	add	r1, r0
 8004238:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800423c:	4313      	orrs	r3, r2
 800423e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	015a      	lsls	r2, r3, #5
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	4413      	add	r3, r2
 8004248:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800424c:	691b      	ldr	r3, [r3, #16]
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	0151      	lsls	r1, r2, #5
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	440a      	add	r2, r1
 8004256:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800425a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800425e:	6113      	str	r3, [r2, #16]
 8004260:	e033      	b.n	80042ca <USB_EPStartXfer+0x32e>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	695a      	ldr	r2, [r3, #20]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	4413      	add	r3, r2
 800426c:	1e5a      	subs	r2, r3, #1
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	fbb2 f3f3 	udiv	r3, r2, r3
 8004276:	81fb      	strh	r3, [r7, #14]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004284:	691a      	ldr	r2, [r3, #16]
 8004286:	89fb      	ldrh	r3, [r7, #14]
 8004288:	04d9      	lsls	r1, r3, #19
 800428a:	4b31      	ldr	r3, [pc, #196]	; (8004350 <USB_EPStartXfer+0x3b4>)
 800428c:	400b      	ands	r3, r1
 800428e:	6939      	ldr	r1, [r7, #16]
 8004290:	0148      	lsls	r0, r1, #5
 8004292:	6979      	ldr	r1, [r7, #20]
 8004294:	4401      	add	r1, r0
 8004296:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800429a:	4313      	orrs	r3, r2
 800429c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket * pktcnt);
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042aa:	691a      	ldr	r2, [r3, #16]
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	89f9      	ldrh	r1, [r7, #14]
 80042b2:	fb01 f303 	mul.w	r3, r1, r3
 80042b6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042ba:	6939      	ldr	r1, [r7, #16]
 80042bc:	0148      	lsls	r0, r1, #5
 80042be:	6979      	ldr	r1, [r7, #20]
 80042c0:	4401      	add	r1, r0
 80042c2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80042c6:	4313      	orrs	r3, r2
 80042c8:	610b      	str	r3, [r1, #16]
    }

    if (ep->type == EP_TYPE_ISOC)
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	78db      	ldrb	r3, [r3, #3]
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d128      	bne.n	8004324 <USB_EPStartXfer+0x388>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d110      	bne.n	8004304 <USB_EPStartXfer+0x368>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	015a      	lsls	r2, r3, #5
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	4413      	add	r3, r2
 80042ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	693a      	ldr	r2, [r7, #16]
 80042f2:	0151      	lsls	r1, r2, #5
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	440a      	add	r2, r1
 80042f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004300:	6013      	str	r3, [r2, #0]
 8004302:	e00f      	b.n	8004324 <USB_EPStartXfer+0x388>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	015a      	lsls	r2, r3, #5
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	4413      	add	r3, r2
 800430c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	693a      	ldr	r2, [r7, #16]
 8004314:	0151      	lsls	r1, r2, #5
 8004316:	697a      	ldr	r2, [r7, #20]
 8004318:	440a      	add	r2, r1
 800431a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004322:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	015a      	lsls	r2, r3, #5
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	4413      	add	r3, r2
 800432c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	0151      	lsls	r1, r2, #5
 8004336:	697a      	ldr	r2, [r7, #20]
 8004338:	440a      	add	r2, r1
 800433a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800433e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004342:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004344:	2300      	movs	r3, #0
}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	1ff80000 	.word	0x1ff80000

08004354 <USB_EP0StartXfer>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	781b      	ldrb	r3, [r3, #0]
 8004366:	60bb      	str	r3, [r7, #8]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	785b      	ldrb	r3, [r3, #1]
 800436c:	2b01      	cmp	r3, #1
 800436e:	f040 80ab 	bne.w	80044c8 <USB_EP0StartXfer+0x174>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d132      	bne.n	80043e0 <USB_EP0StartXfer+0x8c>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	015a      	lsls	r2, r3, #5
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	4413      	add	r3, r2
 8004382:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004386:	691b      	ldr	r3, [r3, #16]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	0151      	lsls	r1, r2, #5
 800438c:	68fa      	ldr	r2, [r7, #12]
 800438e:	440a      	add	r2, r1
 8004390:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004394:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004398:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800439c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	68ba      	ldr	r2, [r7, #8]
 80043ae:	0151      	lsls	r1, r2, #5
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	440a      	add	r2, r1
 80043b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80043bc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	015a      	lsls	r2, r3, #5
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	4413      	add	r3, r2
 80043c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	68ba      	ldr	r2, [r7, #8]
 80043ce:	0151      	lsls	r1, r2, #5
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	440a      	add	r2, r1
 80043d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d8:	0cdb      	lsrs	r3, r3, #19
 80043da:	04db      	lsls	r3, r3, #19
 80043dc:	6113      	str	r3, [r2, #16]
 80043de:	e04e      	b.n	800447e <USB_EP0StartXfer+0x12a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	68ba      	ldr	r2, [r7, #8]
 80043f0:	0151      	lsls	r1, r2, #5
 80043f2:	68fa      	ldr	r2, [r7, #12]
 80043f4:	440a      	add	r2, r1
 80043f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043fa:	0cdb      	lsrs	r3, r3, #19
 80043fc:	04db      	lsls	r3, r3, #19
 80043fe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	015a      	lsls	r2, r3, #5
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4413      	add	r3, r2
 8004408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800440c:	691b      	ldr	r3, [r3, #16]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	0151      	lsls	r1, r2, #5
 8004412:	68fa      	ldr	r2, [r7, #12]
 8004414:	440a      	add	r2, r1
 8004416:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800441a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800441e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004422:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	695a      	ldr	r2, [r3, #20]
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	429a      	cmp	r2, r3
 800442e:	d903      	bls.n	8004438 <USB_EP0StartXfer+0xe4>
      {
        ep->xfer_len = ep->maxpacket;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	689a      	ldr	r2, [r3, #8]
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	615a      	str	r2, [r3, #20]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004444:	691b      	ldr	r3, [r3, #16]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	0151      	lsls	r1, r2, #5
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	440a      	add	r2, r1
 800444e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004452:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004456:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	015a      	lsls	r2, r3, #5
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4413      	add	r3, r2
 8004460:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004464:	691a      	ldr	r2, [r3, #16]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800446e:	68b9      	ldr	r1, [r7, #8]
 8004470:	0148      	lsls	r0, r1, #5
 8004472:	68f9      	ldr	r1, [r7, #12]
 8004474:	4401      	add	r1, r0
 8004476:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800447a:	4313      	orrs	r3, r2
 800447c:	610b      	str	r3, [r1, #16]
    }

    /* EP enable, IN data in FIFO */
    USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	68ba      	ldr	r2, [r7, #8]
 800448e:	0151      	lsls	r1, r2, #5
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	440a      	add	r2, r1
 8004494:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004498:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800449c:	6013      	str	r3, [r2, #0]

    /* Enable the Tx FIFO Empty Interrupt for this EP */
    if (ep->xfer_len > 0U)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d06d      	beq.n	8004582 <USB_EP0StartXfer+0x22e>
    {
      USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	781b      	ldrb	r3, [r3, #0]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	2101      	movs	r1, #1
 80044b8:	fa01 f303 	lsl.w	r3, r1, r3
 80044bc:	68f9      	ldr	r1, [r7, #12]
 80044be:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044c2:	4313      	orrs	r3, r2
 80044c4:	634b      	str	r3, [r1, #52]	; 0x34
 80044c6:	e05c      	b.n	8004582 <USB_EP0StartXfer+0x22e>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	015a      	lsls	r2, r3, #5
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	4413      	add	r3, r2
 80044d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d4:	691b      	ldr	r3, [r3, #16]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	0151      	lsls	r1, r2, #5
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	440a      	add	r2, r1
 80044de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044e2:	0cdb      	lsrs	r3, r3, #19
 80044e4:	04db      	lsls	r3, r3, #19
 80044e6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	0151      	lsls	r1, r2, #5
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	440a      	add	r2, r1
 80044fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004502:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004506:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800450a:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	695b      	ldr	r3, [r3, #20]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d003      	beq.n	800451c <USB_EP0StartXfer+0x1c8>
    {
      ep->xfer_len = ep->maxpacket;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	689a      	ldr	r2, [r3, #8]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	615a      	str	r2, [r3, #20]
    }

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	015a      	lsls	r2, r3, #5
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	4413      	add	r3, r2
 8004524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004528:	691b      	ldr	r3, [r3, #16]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	0151      	lsls	r1, r2, #5
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	440a      	add	r2, r1
 8004532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004536:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800453a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & (ep->maxpacket));
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	015a      	lsls	r2, r3, #5
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	4413      	add	r3, r2
 8004544:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004548:	691a      	ldr	r2, [r3, #16]
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	689b      	ldr	r3, [r3, #8]
 800454e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004552:	68b9      	ldr	r1, [r7, #8]
 8004554:	0148      	lsls	r0, r1, #5
 8004556:	68f9      	ldr	r1, [r7, #12]
 8004558:	4401      	add	r1, r0
 800455a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800455e:	4313      	orrs	r3, r2
 8004560:	610b      	str	r3, [r1, #16]

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	015a      	lsls	r2, r3, #5
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	4413      	add	r3, r2
 800456a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	0151      	lsls	r1, r2, #5
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	440a      	add	r2, r1
 8004578:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800457c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004580:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3714      	adds	r7, #20
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr

08004590 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8004590:	b480      	push	{r7}
 8004592:	b089      	sub	sp, #36	; 0x24
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	4611      	mov	r1, r2
 800459c:	461a      	mov	r2, r3
 800459e:	460b      	mov	r3, r1
 80045a0:	71fb      	strb	r3, [r7, #7]
 80045a2:	4613      	mov	r3, r2
 80045a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80045ae:	88bb      	ldrh	r3, [r7, #4]
 80045b0:	3303      	adds	r3, #3
 80045b2:	089b      	lsrs	r3, r3, #2
 80045b4:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	61bb      	str	r3, [r7, #24]
 80045ba:	e018      	b.n	80045ee <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	031a      	lsls	r2, r3, #12
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4413      	add	r3, r2
 80045c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045c8:	461a      	mov	r2, r3
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6013      	str	r3, [r2, #0]
    pSrc++;
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	3301      	adds	r3, #1
 80045d4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	3301      	adds	r3, #1
 80045da:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	3301      	adds	r3, #1
 80045e0:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	3301      	adds	r3, #1
 80045e6:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80045e8:	69bb      	ldr	r3, [r7, #24]
 80045ea:	3301      	adds	r3, #1
 80045ec:	61bb      	str	r3, [r7, #24]
 80045ee:	69ba      	ldr	r2, [r7, #24]
 80045f0:	693b      	ldr	r3, [r7, #16]
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d3e2      	bcc.n	80045bc <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80045f6:	2300      	movs	r3, #0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	3724      	adds	r7, #36	; 0x24
 80045fc:	46bd      	mov	sp, r7
 80045fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004602:	4770      	bx	lr

08004604 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004604:	b480      	push	{r7}
 8004606:	b08b      	sub	sp, #44	; 0x2c
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	4613      	mov	r3, r2
 8004610:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800461a:	88fb      	ldrh	r3, [r7, #6]
 800461c:	089b      	lsrs	r3, r3, #2
 800461e:	b29b      	uxth	r3, r3
 8004620:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	f003 0303 	and.w	r3, r3, #3
 8004628:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800462a:	2300      	movs	r3, #0
 800462c:	623b      	str	r3, [r7, #32]
 800462e:	e014      	b.n	800465a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004630:	69bb      	ldr	r3, [r7, #24]
 8004632:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463a:	601a      	str	r2, [r3, #0]
    pDest++;
 800463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800463e:	3301      	adds	r3, #1
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	3301      	adds	r3, #1
 8004646:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800464a:	3301      	adds	r3, #1
 800464c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	3301      	adds	r3, #1
 8004652:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004654:	6a3b      	ldr	r3, [r7, #32]
 8004656:	3301      	adds	r3, #1
 8004658:	623b      	str	r3, [r7, #32]
 800465a:	6a3a      	ldr	r2, [r7, #32]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	429a      	cmp	r2, r3
 8004660:	d3e6      	bcc.n	8004630 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004662:	8bfb      	ldrh	r3, [r7, #30]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d01e      	beq.n	80046a6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800466c:	69bb      	ldr	r3, [r7, #24]
 800466e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004672:	461a      	mov	r2, r3
 8004674:	f107 0310 	add.w	r3, r7, #16
 8004678:	6812      	ldr	r2, [r2, #0]
 800467a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	6a3b      	ldr	r3, [r7, #32]
 8004680:	b2db      	uxtb	r3, r3
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	fa22 f303 	lsr.w	r3, r2, r3
 8004688:	b2da      	uxtb	r2, r3
 800468a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800468c:	701a      	strb	r2, [r3, #0]
      i++;
 800468e:	6a3b      	ldr	r3, [r7, #32]
 8004690:	3301      	adds	r3, #1
 8004692:	623b      	str	r3, [r7, #32]
      pDest++;
 8004694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004696:	3301      	adds	r3, #1
 8004698:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800469a:	8bfb      	ldrh	r3, [r7, #30]
 800469c:	3b01      	subs	r3, #1
 800469e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80046a0:	8bfb      	ldrh	r3, [r7, #30]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1ea      	bne.n	800467c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	372c      	adds	r7, #44	; 0x2c
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	785b      	ldrb	r3, [r3, #1]
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d12c      	bne.n	800472a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	db12      	blt.n	8004708 <USB_EPSetStall+0x54>
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d00f      	beq.n	8004708 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	015a      	lsls	r2, r3, #5
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	4413      	add	r3, r2
 80046f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	0151      	lsls	r1, r2, #5
 80046fa:	68fa      	ldr	r2, [r7, #12]
 80046fc:	440a      	add	r2, r1
 80046fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004702:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004706:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	0151      	lsls	r1, r2, #5
 800471a:	68fa      	ldr	r2, [r7, #12]
 800471c:	440a      	add	r2, r1
 800471e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004722:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	e02b      	b.n	8004782 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2b00      	cmp	r3, #0
 800473a:	db12      	blt.n	8004762 <USB_EPSetStall+0xae>
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d00f      	beq.n	8004762 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004742:	68bb      	ldr	r3, [r7, #8]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	440a      	add	r2, r1
 8004758:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800475c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004760:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	015a      	lsls	r2, r3, #5
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4413      	add	r3, r2
 800476a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	68ba      	ldr	r2, [r7, #8]
 8004772:	0151      	lsls	r1, r2, #5
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	440a      	add	r2, r1
 8004778:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800477c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004780:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3714      	adds	r7, #20
 8004788:	46bd      	mov	sp, r7
 800478a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478e:	4770      	bx	lr

08004790 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004790:	b480      	push	{r7}
 8004792:	b085      	sub	sp, #20
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	781b      	ldrb	r3, [r3, #0]
 80047a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	785b      	ldrb	r3, [r3, #1]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d128      	bne.n	80047fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	015a      	lsls	r2, r3, #5
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4413      	add	r3, r2
 80047b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	68ba      	ldr	r2, [r7, #8]
 80047bc:	0151      	lsls	r1, r2, #5
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	440a      	add	r2, r1
 80047c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80047ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	78db      	ldrb	r3, [r3, #3]
 80047d0:	2b03      	cmp	r3, #3
 80047d2:	d003      	beq.n	80047dc <USB_EPClearStall+0x4c>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	78db      	ldrb	r3, [r3, #3]
 80047d8:	2b02      	cmp	r3, #2
 80047da:	d138      	bne.n	800484e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	0151      	lsls	r1, r2, #5
 80047ee:	68fa      	ldr	r2, [r7, #12]
 80047f0:	440a      	add	r2, r1
 80047f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047fa:	6013      	str	r3, [r2, #0]
 80047fc:	e027      	b.n	800484e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	015a      	lsls	r2, r3, #5
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	4413      	add	r3, r2
 8004806:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	0151      	lsls	r1, r2, #5
 8004810:	68fa      	ldr	r2, [r7, #12]
 8004812:	440a      	add	r2, r1
 8004814:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004818:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800481c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	78db      	ldrb	r3, [r3, #3]
 8004822:	2b03      	cmp	r3, #3
 8004824:	d003      	beq.n	800482e <USB_EPClearStall+0x9e>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	78db      	ldrb	r3, [r3, #3]
 800482a:	2b02      	cmp	r3, #2
 800482c:	d10f      	bne.n	800484e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	0151      	lsls	r1, r2, #5
 8004840:	68fa      	ldr	r2, [r7, #12]
 8004842:	440a      	add	r2, r1
 8004844:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800484c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	3714      	adds	r7, #20
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800485c:	b480      	push	{r7}
 800485e:	b085      	sub	sp, #20
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
 8004864:	460b      	mov	r3, r1
 8004866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800487a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800487e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	78fb      	ldrb	r3, [r7, #3]
 800488a:	011b      	lsls	r3, r3, #4
 800488c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004890:	68f9      	ldr	r1, [r7, #12]
 8004892:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004896:	4313      	orrs	r3, r2
 8004898:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3714      	adds	r7, #20
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr

080048a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	68fa      	ldr	r2, [r7, #12]
 80048be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80048c2:	f023 0303 	bic.w	r3, r3, #3
 80048c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048d6:	f023 0302 	bic.w	r3, r3, #2
 80048da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3714      	adds	r7, #20
 80048e2:	46bd      	mov	sp, r7
 80048e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e8:	4770      	bx	lr

080048ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80048ea:	b480      	push	{r7}
 80048ec:	b085      	sub	sp, #20
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004904:	f023 0303 	bic.w	r3, r3, #3
 8004908:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004918:	f043 0302 	orr.w	r3, r3, #2
 800491c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800491e:	2300      	movs	r3, #0
}
 8004920:	4618      	mov	r0, r3
 8004922:	3714      	adds	r7, #20
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	695b      	ldr	r3, [r3, #20]
 8004938:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	68fa      	ldr	r2, [r7, #12]
 8004940:	4013      	ands	r3, r2
 8004942:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004944:	68fb      	ldr	r3, [r7, #12]
}
 8004946:	4618      	mov	r0, r3
 8004948:	3714      	adds	r7, #20
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004952:	b480      	push	{r7}
 8004954:	b085      	sub	sp, #20
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004964:	699b      	ldr	r3, [r3, #24]
 8004966:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496e:	69db      	ldr	r3, [r3, #28]
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	4013      	ands	r3, r2
 8004974:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	0c1b      	lsrs	r3, r3, #16
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004986:	b480      	push	{r7}
 8004988:	b085      	sub	sp, #20
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004998:	699b      	ldr	r3, [r3, #24]
 800499a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049a2:	69db      	ldr	r3, [r3, #28]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	4013      	ands	r3, r2
 80049a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	b29b      	uxth	r3, r3
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3714      	adds	r7, #20
 80049b2:	46bd      	mov	sp, r7
 80049b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b8:	4770      	bx	lr

080049ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049ba:	b480      	push	{r7}
 80049bc:	b085      	sub	sp, #20
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	460b      	mov	r3, r1
 80049c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80049ca:	78fb      	ldrb	r3, [r7, #3]
 80049cc:	015a      	lsls	r2, r3, #5
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	4413      	add	r3, r2
 80049d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	68ba      	ldr	r2, [r7, #8]
 80049e4:	4013      	ands	r3, r2
 80049e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049e8:	68bb      	ldr	r3, [r7, #8]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3714      	adds	r7, #20
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr

080049f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80049f6:	b480      	push	{r7}
 80049f8:	b087      	sub	sp, #28
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]
 80049fe:	460b      	mov	r3, r1
 8004a00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a18:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004a1a:	78fb      	ldrb	r3, [r7, #3]
 8004a1c:	f003 030f 	and.w	r3, r3, #15
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	fa22 f303 	lsr.w	r3, r2, r3
 8004a26:	01db      	lsls	r3, r3, #7
 8004a28:	b2db      	uxtb	r3, r3
 8004a2a:	693a      	ldr	r2, [r7, #16]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004a30:	78fb      	ldrb	r3, [r7, #3]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	693a      	ldr	r2, [r7, #16]
 8004a40:	4013      	ands	r3, r2
 8004a42:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004a44:	68bb      	ldr	r3, [r7, #8]
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	371c      	adds	r7, #28
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr

08004a52 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004a52:	b480      	push	{r7}
 8004a54:	b083      	sub	sp, #12
 8004a56:	af00      	add	r7, sp, #0
 8004a58:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0301 	and.w	r3, r3, #1
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	370c      	adds	r7, #12
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b085      	sub	sp, #20
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68fa      	ldr	r2, [r7, #12]
 8004a84:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a88:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004a8c:	f023 0307 	bic.w	r3, r3, #7
 8004a90:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aa0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004aa4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004aa6:	2300      	movs	r3, #0
}
 8004aa8:	4618      	mov	r0, r3
 8004aaa:	3714      	adds	r7, #20
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <USB_EP0_OutStart>:
  * @param  USBx  Selected device
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t *psetup)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b085      	sub	sp, #20
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	60fb      	str	r3, [r7, #12]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	333c      	adds	r3, #60	; 0x3c
 8004ac6:	3304      	adds	r3, #4
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	60bb      	str	r3, [r7, #8]
  UNUSED(psetup);

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004acc:	68bb      	ldr	r3, [r7, #8]
 8004ace:	4a1c      	ldr	r2, [pc, #112]	; (8004b40 <USB_EP0_OutStart+0x8c>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d90a      	bls.n	8004aea <USB_EP0_OutStart+0x36>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ae0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ae4:	d101      	bne.n	8004aea <USB_EP0_OutStart+0x36>
    {
      return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	e024      	b.n	8004b34 <USB_EP0_OutStart+0x80>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004af0:	461a      	mov	r2, r3
 8004af2:	2300      	movs	r3, #0
 8004af4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004afc:	691b      	ldr	r3, [r3, #16]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b04:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b18:	f043 0318 	orr.w	r3, r3, #24
 8004b1c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b24:	691b      	ldr	r3, [r3, #16]
 8004b26:	68fa      	ldr	r2, [r7, #12]
 8004b28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b2c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004b30:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr
 8004b40:	4f54300a 	.word	0x4f54300a

08004b44 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	3301      	adds	r3, #1
 8004b54:	60fb      	str	r3, [r7, #12]
 8004b56:	4a13      	ldr	r2, [pc, #76]	; (8004ba4 <USB_CoreReset+0x60>)
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d901      	bls.n	8004b60 <USB_CoreReset+0x1c>
    {
      return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e01a      	b.n	8004b96 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	691b      	ldr	r3, [r3, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	daf3      	bge.n	8004b50 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	691b      	ldr	r3, [r3, #16]
 8004b70:	f043 0201 	orr.w	r2, r3, #1
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	60fb      	str	r3, [r7, #12]
 8004b7e:	4a09      	ldr	r2, [pc, #36]	; (8004ba4 <USB_CoreReset+0x60>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d901      	bls.n	8004b88 <USB_CoreReset+0x44>
    {
      return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e006      	b.n	8004b96 <USB_CoreReset+0x52>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	691b      	ldr	r3, [r3, #16]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d0f1      	beq.n	8004b78 <USB_CoreReset+0x34>

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	00030d40 	.word	0x00030d40

08004ba8 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b084      	sub	sp, #16
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
 8004bb0:	460b      	mov	r3, r1
 8004bb2:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004bb4:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004bb8:	f002 fafe 	bl	80071b8 <USBD_static_malloc>
 8004bbc:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d105      	bne.n	8004bd0 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e066      	b.n	8004c9e <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	7c1b      	ldrb	r3, [r3, #16]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d119      	bne.n	8004c14 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004be0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004be4:	2202      	movs	r2, #2
 8004be6:	2181      	movs	r1, #129	; 0x81
 8004be8:	6878      	ldr	r0, [r7, #4]
 8004bea:	f002 f8d1 	bl	8006d90 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004bf4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	2101      	movs	r1, #1
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f002 f8c7 	bl	8006d90 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2210      	movs	r2, #16
 8004c0e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 8004c12:	e016      	b.n	8004c42 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8004c14:	2340      	movs	r3, #64	; 0x40
 8004c16:	2202      	movs	r2, #2
 8004c18:	2181      	movs	r1, #129	; 0x81
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f002 f8b8 	bl	8006d90 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8004c26:	2340      	movs	r3, #64	; 0x40
 8004c28:	2202      	movs	r2, #2
 8004c2a:	2101      	movs	r1, #1
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f002 f8af 	bl	8006d90 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2201      	movs	r2, #1
 8004c36:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2210      	movs	r2, #16
 8004c3e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8004c42:	2308      	movs	r3, #8
 8004c44:	2203      	movs	r2, #3
 8004c46:	2182      	movs	r1, #130	; 0x82
 8004c48:	6878      	ldr	r0, [r7, #4]
 8004c4a:	f002 f8a1 	bl	8006d90 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2201      	movs	r2, #1
 8004c52:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2200      	movs	r2, #0
 8004c64:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	7c1b      	ldrb	r3, [r3, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d109      	bne.n	8004c8c <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c82:	2101      	movs	r1, #1
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f002 f9fd 	bl	8007084 <USBD_LL_PrepareReceive>
 8004c8a:	e007      	b.n	8004c9c <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8004c92:	2340      	movs	r3, #64	; 0x40
 8004c94:	2101      	movs	r1, #1
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f002 f9f4 	bl	8007084 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3710      	adds	r7, #16
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}

08004ca6 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ca6:	b580      	push	{r7, lr}
 8004ca8:	b082      	sub	sp, #8
 8004caa:	af00      	add	r7, sp, #0
 8004cac:	6078      	str	r0, [r7, #4]
 8004cae:	460b      	mov	r3, r1
 8004cb0:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8004cb2:	2181      	movs	r1, #129	; 0x81
 8004cb4:	6878      	ldr	r0, [r7, #4]
 8004cb6:	f002 f8a9 	bl	8006e0c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f002 f8a2 	bl	8006e0c <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8004cd0:	2182      	movs	r1, #130	; 0x82
 8004cd2:	6878      	ldr	r0, [r7, #4]
 8004cd4:	f002 f89a 	bl	8006e0c <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00e      	beq.n	8004d10 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d02:	4618      	mov	r0, r3
 8004d04:	f002 fa66 	bl	80071d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8004d10:	2300      	movs	r3, #0
}
 8004d12:	4618      	mov	r0, r3
 8004d14:	3708      	adds	r7, #8
 8004d16:	46bd      	mov	sp, r7
 8004d18:	bd80      	pop	{r7, pc}
	...

08004d1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b086      	sub	sp, #24
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
 8004d24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004d2c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004d2e:	2300      	movs	r3, #0
 8004d30:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004d32:	2300      	movs	r3, #0
 8004d34:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004d36:	2300      	movs	r3, #0
 8004d38:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8004d40:	2303      	movs	r3, #3
 8004d42:	e0af      	b.n	8004ea4 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	781b      	ldrb	r3, [r3, #0]
 8004d48:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d03f      	beq.n	8004dd0 <USBD_CDC_Setup+0xb4>
 8004d50:	2b20      	cmp	r3, #32
 8004d52:	f040 809f 	bne.w	8004e94 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	88db      	ldrh	r3, [r3, #6]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d02e      	beq.n	8004dbc <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	b25b      	sxtb	r3, r3
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	da16      	bge.n	8004d96 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8004d74:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	88d2      	ldrh	r2, [r2, #6]
 8004d7a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	88db      	ldrh	r3, [r3, #6]
 8004d80:	2b07      	cmp	r3, #7
 8004d82:	bf28      	it	cs
 8004d84:	2307      	movcs	r3, #7
 8004d86:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	89fa      	ldrh	r2, [r7, #14]
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6878      	ldr	r0, [r7, #4]
 8004d90:	f001 fb43 	bl	800641a <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8004d94:	e085      	b.n	8004ea2 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	785a      	ldrb	r2, [r3, #1]
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	88db      	ldrh	r3, [r3, #6]
 8004da4:	b2da      	uxtb	r2, r3
 8004da6:	693b      	ldr	r3, [r7, #16]
 8004da8:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 8004dac:	6939      	ldr	r1, [r7, #16]
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	88db      	ldrh	r3, [r3, #6]
 8004db2:	461a      	mov	r2, r3
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f001 fb5c 	bl	8006472 <USBD_CtlPrepareRx>
      break;
 8004dba:	e072      	b.n	8004ea2 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	7850      	ldrb	r0, [r2, #1]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	6839      	ldr	r1, [r7, #0]
 8004dcc:	4798      	blx	r3
      break;
 8004dce:	e068      	b.n	8004ea2 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	785b      	ldrb	r3, [r3, #1]
 8004dd4:	2b0b      	cmp	r3, #11
 8004dd6:	d852      	bhi.n	8004e7e <USBD_CDC_Setup+0x162>
 8004dd8:	a201      	add	r2, pc, #4	; (adr r2, 8004de0 <USBD_CDC_Setup+0xc4>)
 8004dda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dde:	bf00      	nop
 8004de0:	08004e11 	.word	0x08004e11
 8004de4:	08004e8d 	.word	0x08004e8d
 8004de8:	08004e7f 	.word	0x08004e7f
 8004dec:	08004e7f 	.word	0x08004e7f
 8004df0:	08004e7f 	.word	0x08004e7f
 8004df4:	08004e7f 	.word	0x08004e7f
 8004df8:	08004e7f 	.word	0x08004e7f
 8004dfc:	08004e7f 	.word	0x08004e7f
 8004e00:	08004e7f 	.word	0x08004e7f
 8004e04:	08004e7f 	.word	0x08004e7f
 8004e08:	08004e3b 	.word	0x08004e3b
 8004e0c:	08004e65 	.word	0x08004e65
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e16:	b2db      	uxtb	r3, r3
 8004e18:	2b03      	cmp	r3, #3
 8004e1a:	d107      	bne.n	8004e2c <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004e1c:	f107 030a 	add.w	r3, r7, #10
 8004e20:	2202      	movs	r2, #2
 8004e22:	4619      	mov	r1, r3
 8004e24:	6878      	ldr	r0, [r7, #4]
 8004e26:	f001 faf8 	bl	800641a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e2a:	e032      	b.n	8004e92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004e2c:	6839      	ldr	r1, [r7, #0]
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f001 fa82 	bl	8006338 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e34:	2303      	movs	r3, #3
 8004e36:	75fb      	strb	r3, [r7, #23]
          break;
 8004e38:	e02b      	b.n	8004e92 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	2b03      	cmp	r3, #3
 8004e44:	d107      	bne.n	8004e56 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004e46:	f107 030d 	add.w	r3, r7, #13
 8004e4a:	2201      	movs	r2, #1
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f001 fae3 	bl	800641a <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004e54:	e01d      	b.n	8004e92 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8004e56:	6839      	ldr	r1, [r7, #0]
 8004e58:	6878      	ldr	r0, [r7, #4]
 8004e5a:	f001 fa6d 	bl	8006338 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e5e:	2303      	movs	r3, #3
 8004e60:	75fb      	strb	r3, [r7, #23]
          break;
 8004e62:	e016      	b.n	8004e92 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	2b03      	cmp	r3, #3
 8004e6e:	d00f      	beq.n	8004e90 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8004e70:	6839      	ldr	r1, [r7, #0]
 8004e72:	6878      	ldr	r0, [r7, #4]
 8004e74:	f001 fa60 	bl	8006338 <USBD_CtlError>
            ret = USBD_FAIL;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004e7c:	e008      	b.n	8004e90 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004e7e:	6839      	ldr	r1, [r7, #0]
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f001 fa59 	bl	8006338 <USBD_CtlError>
          ret = USBD_FAIL;
 8004e86:	2303      	movs	r3, #3
 8004e88:	75fb      	strb	r3, [r7, #23]
          break;
 8004e8a:	e002      	b.n	8004e92 <USBD_CDC_Setup+0x176>
          break;
 8004e8c:	bf00      	nop
 8004e8e:	e008      	b.n	8004ea2 <USBD_CDC_Setup+0x186>
          break;
 8004e90:	bf00      	nop
      }
      break;
 8004e92:	e006      	b.n	8004ea2 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8004e94:	6839      	ldr	r1, [r7, #0]
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f001 fa4e 	bl	8006338 <USBD_CtlError>
      ret = USBD_FAIL;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	75fb      	strb	r3, [r7, #23]
      break;
 8004ea0:	bf00      	nop
  }

  return (uint8_t)ret;
 8004ea2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ea4:	4618      	mov	r0, r3
 8004ea6:	3718      	adds	r7, #24
 8004ea8:	46bd      	mov	sp, r7
 8004eaa:	bd80      	pop	{r7, pc}

08004eac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b084      	sub	sp, #16
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	460b      	mov	r3, r1
 8004eb6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8004ebe:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d101      	bne.n	8004ece <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004eca:	2303      	movs	r3, #3
 8004ecc:	e04f      	b.n	8004f6e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004ed4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004ed6:	78fa      	ldrb	r2, [r7, #3]
 8004ed8:	6879      	ldr	r1, [r7, #4]
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	3318      	adds	r3, #24
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d029      	beq.n	8004f40 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8004eec:	78fa      	ldrb	r2, [r7, #3]
 8004eee:	6879      	ldr	r1, [r7, #4]
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	009b      	lsls	r3, r3, #2
 8004ef8:	440b      	add	r3, r1
 8004efa:	3318      	adds	r3, #24
 8004efc:	681a      	ldr	r2, [r3, #0]
 8004efe:	78f9      	ldrb	r1, [r7, #3]
 8004f00:	68f8      	ldr	r0, [r7, #12]
 8004f02:	460b      	mov	r3, r1
 8004f04:	00db      	lsls	r3, r3, #3
 8004f06:	1a5b      	subs	r3, r3, r1
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4403      	add	r3, r0
 8004f0c:	3344      	adds	r3, #68	; 0x44
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	fbb2 f1f3 	udiv	r1, r2, r3
 8004f14:	fb03 f301 	mul.w	r3, r3, r1
 8004f18:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d110      	bne.n	8004f40 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 8004f1e:	78fa      	ldrb	r2, [r7, #3]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3318      	adds	r3, #24
 8004f2e:	2200      	movs	r2, #0
 8004f30:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004f32:	78f9      	ldrb	r1, [r7, #3]
 8004f34:	2300      	movs	r3, #0
 8004f36:	2200      	movs	r2, #0
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	f002 f86b 	bl	8007014 <USBD_LL_Transmit>
 8004f3e:	e015      	b.n	8004f6c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	2200      	movs	r2, #0
 8004f44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00b      	beq.n	8004f6c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004f5a:	691b      	ldr	r3, [r3, #16]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004f68:	78fa      	ldrb	r2, [r7, #3]
 8004f6a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004f6c:	2300      	movs	r3, #0
}
 8004f6e:	4618      	mov	r0, r3
 8004f70:	3710      	adds	r7, #16
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}

08004f76 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004f76:	b580      	push	{r7, lr}
 8004f78:	b084      	sub	sp, #16
 8004f7a:	af00      	add	r7, sp, #0
 8004f7c:	6078      	str	r0, [r7, #4]
 8004f7e:	460b      	mov	r3, r1
 8004f80:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f88:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d101      	bne.n	8004f98 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004f94:	2303      	movs	r3, #3
 8004f96:	e015      	b.n	8004fc4 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004f98:	78fb      	ldrb	r3, [r7, #3]
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f002 f8a9 	bl	80070f4 <USBD_LL_GetRxDataSize>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fb0:	68db      	ldr	r3, [r3, #12]
 8004fb2:	68fa      	ldr	r2, [r7, #12]
 8004fb4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004fbe:	4611      	mov	r1, r2
 8004fc0:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004fc2:	2300      	movs	r3, #0
}
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	3710      	adds	r7, #16
 8004fc8:	46bd      	mov	sp, r7
 8004fca:	bd80      	pop	{r7, pc}

08004fcc <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b084      	sub	sp, #16
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8004fda:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e01b      	b.n	800501e <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d015      	beq.n	800501c <USBD_CDC_EP0_RxReady+0x50>
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004ff6:	2bff      	cmp	r3, #255	; 0xff
 8004ff8:	d010      	beq.n	800501c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	68fa      	ldr	r2, [r7, #12]
 8005004:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 8005008:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8005010:	b292      	uxth	r2, r2
 8005012:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	22ff      	movs	r2, #255	; 0xff
 8005018:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}
	...

08005028 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2243      	movs	r2, #67	; 0x43
 8005034:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 8005036:	4b03      	ldr	r3, [pc, #12]	; (8005044 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8005038:	4618      	mov	r0, r3
 800503a:	370c      	adds	r7, #12
 800503c:	46bd      	mov	sp, r7
 800503e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005042:	4770      	bx	lr
 8005044:	20000094 	.word	0x20000094

08005048 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2243      	movs	r2, #67	; 0x43
 8005054:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8005056:	4b03      	ldr	r3, [pc, #12]	; (8005064 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8005058:	4618      	mov	r0, r3
 800505a:	370c      	adds	r7, #12
 800505c:	46bd      	mov	sp, r7
 800505e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005062:	4770      	bx	lr
 8005064:	20000050 	.word	0x20000050

08005068 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005068:	b480      	push	{r7}
 800506a:	b083      	sub	sp, #12
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2243      	movs	r2, #67	; 0x43
 8005074:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8005076:	4b03      	ldr	r3, [pc, #12]	; (8005084 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8005078:	4618      	mov	r0, r3
 800507a:	370c      	adds	r7, #12
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	200000d8 	.word	0x200000d8

08005088 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8005088:	b480      	push	{r7}
 800508a:	b083      	sub	sp, #12
 800508c:	af00      	add	r7, sp, #0
 800508e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	220a      	movs	r2, #10
 8005094:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8005096:	4b03      	ldr	r3, [pc, #12]	; (80050a4 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8005098:	4618      	mov	r0, r3
 800509a:	370c      	adds	r7, #12
 800509c:	46bd      	mov	sp, r7
 800509e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a2:	4770      	bx	lr
 80050a4:	2000000c 	.word	0x2000000c

080050a8 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80050b2:	683b      	ldr	r3, [r7, #0]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80050b8:	2303      	movs	r3, #3
 80050ba:	e004      	b.n	80050c6 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	683a      	ldr	r2, [r7, #0]
 80050c0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 80050c4:	2300      	movs	r3, #0
}
 80050c6:	4618      	mov	r0, r3
 80050c8:	370c      	adds	r7, #12
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr

080050d2 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80050d2:	b480      	push	{r7}
 80050d4:	b087      	sub	sp, #28
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80050e4:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80050e6:	697b      	ldr	r3, [r7, #20]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d101      	bne.n	80050f0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80050ec:	2303      	movs	r3, #3
 80050ee:	e008      	b.n	8005102 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	68ba      	ldr	r2, [r7, #8]
 80050f4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	687a      	ldr	r2, [r7, #4]
 80050fc:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8005100:	2300      	movs	r3, #0
}
 8005102:	4618      	mov	r0, r3
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510c:	4770      	bx	lr

0800510e <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800510e:	b480      	push	{r7}
 8005110:	b085      	sub	sp, #20
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800511e:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d101      	bne.n	800512a <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 8005126:	2303      	movs	r3, #3
 8005128:	e004      	b.n	8005134 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	683a      	ldr	r2, [r7, #0]
 800512e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8005132:	2300      	movs	r3, #0
}
 8005134:	4618      	mov	r0, r3
 8005136:	3714      	adds	r7, #20
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800514e:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8005150:	2301      	movs	r3, #1
 8005152:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800515a:	2b00      	cmp	r3, #0
 800515c:	d101      	bne.n	8005162 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800515e:	2303      	movs	r3, #3
 8005160:	e01a      	b.n	8005198 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005168:	2b00      	cmp	r3, #0
 800516a:	d114      	bne.n	8005196 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2201      	movs	r2, #1
 8005170:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800518a:	2181      	movs	r1, #129	; 0x81
 800518c:	6878      	ldr	r0, [r7, #4]
 800518e:	f001 ff41 	bl	8007014 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005196:	7bfb      	ldrb	r3, [r7, #15]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3710      	adds	r7, #16
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}

080051a0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051ae:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d101      	bne.n	80051be <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e016      	b.n	80051ec <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	7c1b      	ldrb	r3, [r3, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d109      	bne.n	80051da <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80051d0:	2101      	movs	r1, #1
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f001 ff56 	bl	8007084 <USBD_LL_PrepareReceive>
 80051d8:	e007      	b.n	80051ea <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80051e0:	2340      	movs	r3, #64	; 0x40
 80051e2:	2101      	movs	r1, #1
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f001 ff4d 	bl	8007084 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3710      	adds	r7, #16
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b086      	sub	sp, #24
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	4613      	mov	r3, r2
 8005200:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d101      	bne.n	800520c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005208:	2303      	movs	r3, #3
 800520a:	e01f      	b.n	800524c <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	2200      	movs	r2, #0
 8005218:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	2200      	movs	r2, #0
 8005220:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005224:	68bb      	ldr	r3, [r7, #8]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2201      	movs	r2, #1
 8005236:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	79fa      	ldrb	r2, [r7, #7]
 800523e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005240:	68f8      	ldr	r0, [r7, #12]
 8005242:	f001 fd27 	bl	8006c94 <USBD_LL_Init>
 8005246:	4603      	mov	r3, r0
 8005248:	75fb      	strb	r3, [r7, #23]

  return ret;
 800524a:	7dfb      	ldrb	r3, [r7, #23]
}
 800524c:	4618      	mov	r0, r3
 800524e:	3718      	adds	r7, #24
 8005250:	46bd      	mov	sp, r7
 8005252:	bd80      	pop	{r7, pc}

08005254 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b084      	sub	sp, #16
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800525e:	2300      	movs	r3, #0
 8005260:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d101      	bne.n	800526c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8005268:	2303      	movs	r3, #3
 800526a:	e016      	b.n	800529a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	683a      	ldr	r2, [r7, #0]
 8005270:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	2b00      	cmp	r3, #0
 800527e:	d00b      	beq.n	8005298 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	f107 020e 	add.w	r2, r7, #14
 800528c:	4610      	mov	r0, r2
 800528e:	4798      	blx	r3
 8005290:	4602      	mov	r2, r0
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8005298:	2300      	movs	r3, #0
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80052a2:	b580      	push	{r7, lr}
 80052a4:	b082      	sub	sp, #8
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f001 fd3e 	bl	8006d2c <USBD_LL_Start>
 80052b0:	4603      	mov	r3, r0
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3708      	adds	r7, #8
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 80052ba:	b480      	push	{r7}
 80052bc:	b083      	sub	sp, #12
 80052be:	af00      	add	r7, sp, #0
 80052c0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80052c2:	2300      	movs	r3, #0
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	370c      	adds	r7, #12
 80052c8:	46bd      	mov	sp, r7
 80052ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ce:	4770      	bx	lr

080052d0 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b084      	sub	sp, #16
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	460b      	mov	r3, r1
 80052da:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 80052dc:	2303      	movs	r3, #3
 80052de:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	78fa      	ldrb	r2, [r7, #3]
 80052f4:	4611      	mov	r1, r2
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	4798      	blx	r3
 80052fa:	4603      	mov	r3, r0
 80052fc:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80052fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8005300:	4618      	mov	r0, r3
 8005302:	3710      	adds	r7, #16
 8005304:	46bd      	mov	sp, r7
 8005306:	bd80      	pop	{r7, pc}

08005308 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af00      	add	r7, sp, #0
 800530e:	6078      	str	r0, [r7, #4]
 8005310:	460b      	mov	r3, r1
 8005312:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800531a:	2b00      	cmp	r3, #0
 800531c:	d007      	beq.n	800532e <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	78fa      	ldrb	r2, [r7, #3]
 8005328:	4611      	mov	r1, r2
 800532a:	6878      	ldr	r0, [r7, #4]
 800532c:	4798      	blx	r3
  }

  return USBD_OK;
 800532e:	2300      	movs	r3, #0
}
 8005330:	4618      	mov	r0, r3
 8005332:	3708      	adds	r7, #8
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}

08005338 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005348:	6839      	ldr	r1, [r7, #0]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 ffba 	bl	80062c4 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2201      	movs	r2, #1
 8005354:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800535e:	461a      	mov	r2, r3
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800536c:	f003 031f 	and.w	r3, r3, #31
 8005370:	2b02      	cmp	r3, #2
 8005372:	d01a      	beq.n	80053aa <USBD_LL_SetupStage+0x72>
 8005374:	2b02      	cmp	r3, #2
 8005376:	d822      	bhi.n	80053be <USBD_LL_SetupStage+0x86>
 8005378:	2b00      	cmp	r3, #0
 800537a:	d002      	beq.n	8005382 <USBD_LL_SetupStage+0x4a>
 800537c:	2b01      	cmp	r3, #1
 800537e:	d00a      	beq.n	8005396 <USBD_LL_SetupStage+0x5e>
 8005380:	e01d      	b.n	80053be <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005388:	4619      	mov	r1, r3
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fa62 	bl	8005854 <USBD_StdDevReq>
 8005390:	4603      	mov	r3, r0
 8005392:	73fb      	strb	r3, [r7, #15]
      break;
 8005394:	e020      	b.n	80053d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800539c:	4619      	mov	r1, r3
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 fac6 	bl	8005930 <USBD_StdItfReq>
 80053a4:	4603      	mov	r3, r0
 80053a6:	73fb      	strb	r3, [r7, #15]
      break;
 80053a8:	e016      	b.n	80053d8 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053b0:	4619      	mov	r1, r3
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f000 fb05 	bl	80059c2 <USBD_StdEPReq>
 80053b8:	4603      	mov	r3, r0
 80053ba:	73fb      	strb	r3, [r7, #15]
      break;
 80053bc:	e00c      	b.n	80053d8 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	4619      	mov	r1, r3
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f001 fd53 	bl	8006e78 <USBD_LL_StallEP>
 80053d2:	4603      	mov	r3, r0
 80053d4:	73fb      	strb	r3, [r7, #15]
      break;
 80053d6:	bf00      	nop
  }

  return ret;
 80053d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3710      	adds	r7, #16
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}

080053e2 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80053e2:	b580      	push	{r7, lr}
 80053e4:	b086      	sub	sp, #24
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	60f8      	str	r0, [r7, #12]
 80053ea:	460b      	mov	r3, r1
 80053ec:	607a      	str	r2, [r7, #4]
 80053ee:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80053f0:	7afb      	ldrb	r3, [r7, #11]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d138      	bne.n	8005468 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80053fc:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005404:	2b03      	cmp	r3, #3
 8005406:	d14a      	bne.n	800549e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	429a      	cmp	r2, r3
 8005412:	d913      	bls.n	800543c <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	689a      	ldr	r2, [r3, #8]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	68db      	ldr	r3, [r3, #12]
 800541c:	1ad2      	subs	r2, r2, r3
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	693b      	ldr	r3, [r7, #16]
 8005428:	689b      	ldr	r3, [r3, #8]
 800542a:	4293      	cmp	r3, r2
 800542c:	bf28      	it	cs
 800542e:	4613      	movcs	r3, r2
 8005430:	461a      	mov	r2, r3
 8005432:	6879      	ldr	r1, [r7, #4]
 8005434:	68f8      	ldr	r0, [r7, #12]
 8005436:	f001 f839 	bl	80064ac <USBD_CtlContinueRx>
 800543a:	e030      	b.n	800549e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b03      	cmp	r3, #3
 8005446:	d10b      	bne.n	8005460 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800544e:	691b      	ldr	r3, [r3, #16]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d005      	beq.n	8005460 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800545a:	691b      	ldr	r3, [r3, #16]
 800545c:	68f8      	ldr	r0, [r7, #12]
 800545e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005460:	68f8      	ldr	r0, [r7, #12]
 8005462:	f001 f834 	bl	80064ce <USBD_CtlSendStatus>
 8005466:	e01a      	b.n	800549e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b03      	cmp	r3, #3
 8005472:	d114      	bne.n	800549e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800547a:	699b      	ldr	r3, [r3, #24]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00e      	beq.n	800549e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	7afa      	ldrb	r2, [r7, #11]
 800548a:	4611      	mov	r1, r2
 800548c:	68f8      	ldr	r0, [r7, #12]
 800548e:	4798      	blx	r3
 8005490:	4603      	mov	r3, r0
 8005492:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8005494:	7dfb      	ldrb	r3, [r7, #23]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d001      	beq.n	800549e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800549a:	7dfb      	ldrb	r3, [r7, #23]
 800549c:	e000      	b.n	80054a0 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	4618      	mov	r0, r3
 80054a2:	3718      	adds	r7, #24
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}

080054a8 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b086      	sub	sp, #24
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	60f8      	str	r0, [r7, #12]
 80054b0:	460b      	mov	r3, r1
 80054b2:	607a      	str	r2, [r7, #4]
 80054b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80054b6:	7afb      	ldrb	r3, [r7, #11]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d16b      	bne.n	8005594 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3314      	adds	r3, #20
 80054c0:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d156      	bne.n	800557a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	689a      	ldr	r2, [r3, #8]
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	68db      	ldr	r3, [r3, #12]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d914      	bls.n	8005502 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80054d8:	693b      	ldr	r3, [r7, #16]
 80054da:	689a      	ldr	r2, [r3, #8]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	1ad2      	subs	r2, r2, r3
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	689b      	ldr	r3, [r3, #8]
 80054ea:	461a      	mov	r2, r3
 80054ec:	6879      	ldr	r1, [r7, #4]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 ffae 	bl	8006450 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054f4:	2300      	movs	r3, #0
 80054f6:	2200      	movs	r2, #0
 80054f8:	2100      	movs	r1, #0
 80054fa:	68f8      	ldr	r0, [r7, #12]
 80054fc:	f001 fdc2 	bl	8007084 <USBD_LL_PrepareReceive>
 8005500:	e03b      	b.n	800557a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005502:	693b      	ldr	r3, [r7, #16]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	429a      	cmp	r2, r3
 800550c:	d11c      	bne.n	8005548 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	685a      	ldr	r2, [r3, #4]
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005516:	429a      	cmp	r2, r3
 8005518:	d316      	bcc.n	8005548 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	685a      	ldr	r2, [r3, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005524:	429a      	cmp	r2, r3
 8005526:	d20f      	bcs.n	8005548 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005528:	2200      	movs	r2, #0
 800552a:	2100      	movs	r1, #0
 800552c:	68f8      	ldr	r0, [r7, #12]
 800552e:	f000 ff8f 	bl	8006450 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	2200      	movs	r2, #0
 8005536:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800553a:	2300      	movs	r3, #0
 800553c:	2200      	movs	r2, #0
 800553e:	2100      	movs	r1, #0
 8005540:	68f8      	ldr	r0, [r7, #12]
 8005542:	f001 fd9f 	bl	8007084 <USBD_LL_PrepareReceive>
 8005546:	e018      	b.n	800557a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b03      	cmp	r3, #3
 8005552:	d10b      	bne.n	800556c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d005      	beq.n	800556c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	68f8      	ldr	r0, [r7, #12]
 800556a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800556c:	2180      	movs	r1, #128	; 0x80
 800556e:	68f8      	ldr	r0, [r7, #12]
 8005570:	f001 fc82 	bl	8006e78 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005574:	68f8      	ldr	r0, [r7, #12]
 8005576:	f000 ffbd 	bl	80064f4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005580:	2b01      	cmp	r3, #1
 8005582:	d122      	bne.n	80055ca <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8005584:	68f8      	ldr	r0, [r7, #12]
 8005586:	f7ff fe98 	bl	80052ba <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005592:	e01a      	b.n	80055ca <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b03      	cmp	r3, #3
 800559e:	d114      	bne.n	80055ca <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d00e      	beq.n	80055ca <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055b2:	695b      	ldr	r3, [r3, #20]
 80055b4:	7afa      	ldrb	r2, [r7, #11]
 80055b6:	4611      	mov	r1, r2
 80055b8:	68f8      	ldr	r0, [r7, #12]
 80055ba:	4798      	blx	r3
 80055bc:	4603      	mov	r3, r0
 80055be:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 80055c0:	7dfb      	ldrb	r3, [r7, #23]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d001      	beq.n	80055ca <USBD_LL_DataInStage+0x122>
        {
          return ret;
 80055c6:	7dfb      	ldrb	r3, [r7, #23]
 80055c8:	e000      	b.n	80055cc <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 80055ca:	2300      	movs	r3, #0
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2200      	movs	r2, #0
 80055f0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2200      	movs	r2, #0
 80055f6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005600:	2b00      	cmp	r3, #0
 8005602:	d101      	bne.n	8005608 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8005604:	2303      	movs	r3, #3
 8005606:	e02f      	b.n	8005668 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800560e:	2b00      	cmp	r3, #0
 8005610:	d00f      	beq.n	8005632 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d009      	beq.n	8005632 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	687a      	ldr	r2, [r7, #4]
 8005628:	6852      	ldr	r2, [r2, #4]
 800562a:	b2d2      	uxtb	r2, r2
 800562c:	4611      	mov	r1, r2
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005632:	2340      	movs	r3, #64	; 0x40
 8005634:	2200      	movs	r2, #0
 8005636:	2100      	movs	r1, #0
 8005638:	6878      	ldr	r0, [r7, #4]
 800563a:	f001 fba9 	bl	8006d90 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2201      	movs	r2, #1
 8005642:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	2240      	movs	r2, #64	; 0x40
 800564a:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800564e:	2340      	movs	r3, #64	; 0x40
 8005650:	2200      	movs	r2, #0
 8005652:	2180      	movs	r1, #128	; 0x80
 8005654:	6878      	ldr	r0, [r7, #4]
 8005656:	f001 fb9b 	bl	8006d90 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2201      	movs	r2, #1
 800565e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2240      	movs	r2, #64	; 0x40
 8005664:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	3708      	adds	r7, #8
 800566c:	46bd      	mov	sp, r7
 800566e:	bd80      	pop	{r7, pc}

08005670 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005670:	b480      	push	{r7}
 8005672:	b083      	sub	sp, #12
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	460b      	mov	r3, r1
 800567a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	78fa      	ldrb	r2, [r7, #3]
 8005680:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	370c      	adds	r7, #12
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005690:	b480      	push	{r7}
 8005692:	b083      	sub	sp, #12
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800569e:	b2da      	uxtb	r2, r3
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2204      	movs	r2, #4
 80056aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80056ae:	2300      	movs	r3, #0
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b04      	cmp	r3, #4
 80056ce:	d106      	bne.n	80056de <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80056d6:	b2da      	uxtb	r2, r3
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80056de:	2300      	movs	r3, #0
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d101      	bne.n	8005702 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 80056fe:	2303      	movs	r3, #3
 8005700:	e012      	b.n	8005728 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005708:	b2db      	uxtb	r3, r3
 800570a:	2b03      	cmp	r3, #3
 800570c:	d10b      	bne.n	8005726 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005714:	69db      	ldr	r3, [r3, #28]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d005      	beq.n	8005726 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	6878      	ldr	r0, [r7, #4]
 8005724:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005726:	2300      	movs	r3, #0
}
 8005728:	4618      	mov	r0, r3
 800572a:	3708      	adds	r7, #8
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}

08005730 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b082      	sub	sp, #8
 8005734:	af00      	add	r7, sp, #0
 8005736:	6078      	str	r0, [r7, #4]
 8005738:	460b      	mov	r3, r1
 800573a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d101      	bne.n	800574a <USBD_LL_IsoINIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005746:	2303      	movs	r3, #3
 8005748:	e014      	b.n	8005774 <USBD_LL_IsoINIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b03      	cmp	r3, #3
 8005754:	d10d      	bne.n	8005772 <USBD_LL_IsoINIncomplete+0x42>
  {
    if (pdev->pClass->IsoINIncomplete != NULL)
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800575c:	6a1b      	ldr	r3, [r3, #32]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d007      	beq.n	8005772 <USBD_LL_IsoINIncomplete+0x42>
    {
      (void)pdev->pClass->IsoINIncomplete(pdev, epnum);
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005768:	6a1b      	ldr	r3, [r3, #32]
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	4611      	mov	r1, r2
 800576e:	6878      	ldr	r0, [r7, #4]
 8005770:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005772:	2300      	movs	r3, #0
}
 8005774:	4618      	mov	r0, r3
 8005776:	3708      	adds	r7, #8
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}

0800577c <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
 8005784:	460b      	mov	r3, r1
 8005786:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass == NULL)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800578e:	2b00      	cmp	r3, #0
 8005790:	d101      	bne.n	8005796 <USBD_LL_IsoOUTIncomplete+0x1a>
  {
    return USBD_FAIL;
 8005792:	2303      	movs	r3, #3
 8005794:	e014      	b.n	80057c0 <USBD_LL_IsoOUTIncomplete+0x44>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b03      	cmp	r3, #3
 80057a0:	d10d      	bne.n	80057be <USBD_LL_IsoOUTIncomplete+0x42>
  {
    if (pdev->pClass->IsoOUTIncomplete != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d007      	beq.n	80057be <USBD_LL_IsoOUTIncomplete+0x42>
    {
      (void)pdev->pClass->IsoOUTIncomplete(pdev, epnum);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	78fa      	ldrb	r2, [r7, #3]
 80057b8:	4611      	mov	r1, r2
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057be:	2300      	movs	r3, #0
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3708      	adds	r7, #8
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}

080057c8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	370c      	adds	r7, #12
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr

080057de <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80057de:	b580      	push	{r7, lr}
 80057e0:	b082      	sub	sp, #8
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	6078      	str	r0, [r7, #4]
  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2201      	movs	r2, #1
 80057ea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  if (pdev->pClass != NULL)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d009      	beq.n	800580c <USBD_LL_DevDisconnected+0x2e>
  {
    (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	687a      	ldr	r2, [r7, #4]
 8005802:	6852      	ldr	r2, [r2, #4]
 8005804:	b2d2      	uxtb	r2, r2
 8005806:	4611      	mov	r1, r2
 8005808:	6878      	ldr	r0, [r7, #4]
 800580a:	4798      	blx	r3
  }

  return USBD_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}

08005816 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005816:	b480      	push	{r7}
 8005818:	b087      	sub	sp, #28
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005822:	697b      	ldr	r3, [r7, #20]
 8005824:	781b      	ldrb	r3, [r3, #0]
 8005826:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005828:	697b      	ldr	r3, [r7, #20]
 800582a:	3301      	adds	r3, #1
 800582c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800582e:	697b      	ldr	r3, [r7, #20]
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005834:	8a3b      	ldrh	r3, [r7, #16]
 8005836:	021b      	lsls	r3, r3, #8
 8005838:	b21a      	sxth	r2, r3
 800583a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800583e:	4313      	orrs	r3, r2
 8005840:	b21b      	sxth	r3, r3
 8005842:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005844:	89fb      	ldrh	r3, [r7, #14]
}
 8005846:	4618      	mov	r0, r3
 8005848:	371c      	adds	r7, #28
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr
	...

08005854 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800585e:	2300      	movs	r3, #0
 8005860:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800586a:	2b40      	cmp	r3, #64	; 0x40
 800586c:	d005      	beq.n	800587a <USBD_StdDevReq+0x26>
 800586e:	2b40      	cmp	r3, #64	; 0x40
 8005870:	d853      	bhi.n	800591a <USBD_StdDevReq+0xc6>
 8005872:	2b00      	cmp	r3, #0
 8005874:	d00b      	beq.n	800588e <USBD_StdDevReq+0x3a>
 8005876:	2b20      	cmp	r3, #32
 8005878:	d14f      	bne.n	800591a <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	6839      	ldr	r1, [r7, #0]
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	4798      	blx	r3
 8005888:	4603      	mov	r3, r0
 800588a:	73fb      	strb	r3, [r7, #15]
      break;
 800588c:	e04a      	b.n	8005924 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	785b      	ldrb	r3, [r3, #1]
 8005892:	2b09      	cmp	r3, #9
 8005894:	d83b      	bhi.n	800590e <USBD_StdDevReq+0xba>
 8005896:	a201      	add	r2, pc, #4	; (adr r2, 800589c <USBD_StdDevReq+0x48>)
 8005898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800589c:	080058f1 	.word	0x080058f1
 80058a0:	08005905 	.word	0x08005905
 80058a4:	0800590f 	.word	0x0800590f
 80058a8:	080058fb 	.word	0x080058fb
 80058ac:	0800590f 	.word	0x0800590f
 80058b0:	080058cf 	.word	0x080058cf
 80058b4:	080058c5 	.word	0x080058c5
 80058b8:	0800590f 	.word	0x0800590f
 80058bc:	080058e7 	.word	0x080058e7
 80058c0:	080058d9 	.word	0x080058d9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80058c4:	6839      	ldr	r1, [r7, #0]
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f000 f9de 	bl	8005c88 <USBD_GetDescriptor>
          break;
 80058cc:	e024      	b.n	8005918 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80058ce:	6839      	ldr	r1, [r7, #0]
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 fb6d 	bl	8005fb0 <USBD_SetAddress>
          break;
 80058d6:	e01f      	b.n	8005918 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80058d8:	6839      	ldr	r1, [r7, #0]
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 fbac 	bl	8006038 <USBD_SetConfig>
 80058e0:	4603      	mov	r3, r0
 80058e2:	73fb      	strb	r3, [r7, #15]
          break;
 80058e4:	e018      	b.n	8005918 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80058e6:	6839      	ldr	r1, [r7, #0]
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 fc4b 	bl	8006184 <USBD_GetConfig>
          break;
 80058ee:	e013      	b.n	8005918 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80058f0:	6839      	ldr	r1, [r7, #0]
 80058f2:	6878      	ldr	r0, [r7, #4]
 80058f4:	f000 fc7c 	bl	80061f0 <USBD_GetStatus>
          break;
 80058f8:	e00e      	b.n	8005918 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80058fa:	6839      	ldr	r1, [r7, #0]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 fcab 	bl	8006258 <USBD_SetFeature>
          break;
 8005902:	e009      	b.n	8005918 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005904:	6839      	ldr	r1, [r7, #0]
 8005906:	6878      	ldr	r0, [r7, #4]
 8005908:	f000 fcba 	bl	8006280 <USBD_ClrFeature>
          break;
 800590c:	e004      	b.n	8005918 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800590e:	6839      	ldr	r1, [r7, #0]
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f000 fd11 	bl	8006338 <USBD_CtlError>
          break;
 8005916:	bf00      	nop
      }
      break;
 8005918:	e004      	b.n	8005924 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 800591a:	6839      	ldr	r1, [r7, #0]
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f000 fd0b 	bl	8006338 <USBD_CtlError>
      break;
 8005922:	bf00      	nop
  }

  return ret;
 8005924:	7bfb      	ldrb	r3, [r7, #15]
}
 8005926:	4618      	mov	r0, r3
 8005928:	3710      	adds	r7, #16
 800592a:	46bd      	mov	sp, r7
 800592c:	bd80      	pop	{r7, pc}
 800592e:	bf00      	nop

08005930 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b084      	sub	sp, #16
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800593a:	2300      	movs	r3, #0
 800593c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800593e:	683b      	ldr	r3, [r7, #0]
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005946:	2b40      	cmp	r3, #64	; 0x40
 8005948:	d005      	beq.n	8005956 <USBD_StdItfReq+0x26>
 800594a:	2b40      	cmp	r3, #64	; 0x40
 800594c:	d82f      	bhi.n	80059ae <USBD_StdItfReq+0x7e>
 800594e:	2b00      	cmp	r3, #0
 8005950:	d001      	beq.n	8005956 <USBD_StdItfReq+0x26>
 8005952:	2b20      	cmp	r3, #32
 8005954:	d12b      	bne.n	80059ae <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800595c:	b2db      	uxtb	r3, r3
 800595e:	3b01      	subs	r3, #1
 8005960:	2b02      	cmp	r3, #2
 8005962:	d81d      	bhi.n	80059a0 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	889b      	ldrh	r3, [r3, #4]
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b01      	cmp	r3, #1
 800596c:	d813      	bhi.n	8005996 <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005974:	689b      	ldr	r3, [r3, #8]
 8005976:	6839      	ldr	r1, [r7, #0]
 8005978:	6878      	ldr	r0, [r7, #4]
 800597a:	4798      	blx	r3
 800597c:	4603      	mov	r3, r0
 800597e:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	88db      	ldrh	r3, [r3, #6]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d110      	bne.n	80059aa <USBD_StdItfReq+0x7a>
 8005988:	7bfb      	ldrb	r3, [r7, #15]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d10d      	bne.n	80059aa <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 800598e:	6878      	ldr	r0, [r7, #4]
 8005990:	f000 fd9d 	bl	80064ce <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005994:	e009      	b.n	80059aa <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8005996:	6839      	ldr	r1, [r7, #0]
 8005998:	6878      	ldr	r0, [r7, #4]
 800599a:	f000 fccd 	bl	8006338 <USBD_CtlError>
          break;
 800599e:	e004      	b.n	80059aa <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 80059a0:	6839      	ldr	r1, [r7, #0]
 80059a2:	6878      	ldr	r0, [r7, #4]
 80059a4:	f000 fcc8 	bl	8006338 <USBD_CtlError>
          break;
 80059a8:	e000      	b.n	80059ac <USBD_StdItfReq+0x7c>
          break;
 80059aa:	bf00      	nop
      }
      break;
 80059ac:	e004      	b.n	80059b8 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fcc1 	bl	8006338 <USBD_CtlError>
      break;
 80059b6:	bf00      	nop
  }

  return ret;
 80059b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ba:	4618      	mov	r0, r3
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}

080059c2 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80059c2:	b580      	push	{r7, lr}
 80059c4:	b084      	sub	sp, #16
 80059c6:	af00      	add	r7, sp, #0
 80059c8:	6078      	str	r0, [r7, #4]
 80059ca:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 80059cc:	2300      	movs	r3, #0
 80059ce:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	889b      	ldrh	r3, [r3, #4]
 80059d4:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80059de:	2b40      	cmp	r3, #64	; 0x40
 80059e0:	d007      	beq.n	80059f2 <USBD_StdEPReq+0x30>
 80059e2:	2b40      	cmp	r3, #64	; 0x40
 80059e4:	f200 8145 	bhi.w	8005c72 <USBD_StdEPReq+0x2b0>
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00c      	beq.n	8005a06 <USBD_StdEPReq+0x44>
 80059ec:	2b20      	cmp	r3, #32
 80059ee:	f040 8140 	bne.w	8005c72 <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	6839      	ldr	r1, [r7, #0]
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	4798      	blx	r3
 8005a00:	4603      	mov	r3, r0
 8005a02:	73fb      	strb	r3, [r7, #15]
      break;
 8005a04:	e13a      	b.n	8005c7c <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	785b      	ldrb	r3, [r3, #1]
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d007      	beq.n	8005a1e <USBD_StdEPReq+0x5c>
 8005a0e:	2b03      	cmp	r3, #3
 8005a10:	f300 8129 	bgt.w	8005c66 <USBD_StdEPReq+0x2a4>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d07f      	beq.n	8005b18 <USBD_StdEPReq+0x156>
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d03c      	beq.n	8005a96 <USBD_StdEPReq+0xd4>
 8005a1c:	e123      	b.n	8005c66 <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a24:	b2db      	uxtb	r3, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d002      	beq.n	8005a30 <USBD_StdEPReq+0x6e>
 8005a2a:	2b03      	cmp	r3, #3
 8005a2c:	d016      	beq.n	8005a5c <USBD_StdEPReq+0x9a>
 8005a2e:	e02c      	b.n	8005a8a <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005a30:	7bbb      	ldrb	r3, [r7, #14]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d00d      	beq.n	8005a52 <USBD_StdEPReq+0x90>
 8005a36:	7bbb      	ldrb	r3, [r7, #14]
 8005a38:	2b80      	cmp	r3, #128	; 0x80
 8005a3a:	d00a      	beq.n	8005a52 <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a3c:	7bbb      	ldrb	r3, [r7, #14]
 8005a3e:	4619      	mov	r1, r3
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f001 fa19 	bl	8006e78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005a46:	2180      	movs	r1, #128	; 0x80
 8005a48:	6878      	ldr	r0, [r7, #4]
 8005a4a:	f001 fa15 	bl	8006e78 <USBD_LL_StallEP>
 8005a4e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005a50:	e020      	b.n	8005a94 <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8005a52:	6839      	ldr	r1, [r7, #0]
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f000 fc6f 	bl	8006338 <USBD_CtlError>
              break;
 8005a5a:	e01b      	b.n	8005a94 <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	885b      	ldrh	r3, [r3, #2]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10e      	bne.n	8005a82 <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005a64:	7bbb      	ldrb	r3, [r7, #14]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d00b      	beq.n	8005a82 <USBD_StdEPReq+0xc0>
 8005a6a:	7bbb      	ldrb	r3, [r7, #14]
 8005a6c:	2b80      	cmp	r3, #128	; 0x80
 8005a6e:	d008      	beq.n	8005a82 <USBD_StdEPReq+0xc0>
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	88db      	ldrh	r3, [r3, #6]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d104      	bne.n	8005a82 <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005a78:	7bbb      	ldrb	r3, [r7, #14]
 8005a7a:	4619      	mov	r1, r3
 8005a7c:	6878      	ldr	r0, [r7, #4]
 8005a7e:	f001 f9fb 	bl	8006e78 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005a82:	6878      	ldr	r0, [r7, #4]
 8005a84:	f000 fd23 	bl	80064ce <USBD_CtlSendStatus>

              break;
 8005a88:	e004      	b.n	8005a94 <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8005a8a:	6839      	ldr	r1, [r7, #0]
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fc53 	bl	8006338 <USBD_CtlError>
              break;
 8005a92:	bf00      	nop
          }
          break;
 8005a94:	e0ec      	b.n	8005c70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a9c:	b2db      	uxtb	r3, r3
 8005a9e:	2b02      	cmp	r3, #2
 8005aa0:	d002      	beq.n	8005aa8 <USBD_StdEPReq+0xe6>
 8005aa2:	2b03      	cmp	r3, #3
 8005aa4:	d016      	beq.n	8005ad4 <USBD_StdEPReq+0x112>
 8005aa6:	e030      	b.n	8005b0a <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005aa8:	7bbb      	ldrb	r3, [r7, #14]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00d      	beq.n	8005aca <USBD_StdEPReq+0x108>
 8005aae:	7bbb      	ldrb	r3, [r7, #14]
 8005ab0:	2b80      	cmp	r3, #128	; 0x80
 8005ab2:	d00a      	beq.n	8005aca <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005ab4:	7bbb      	ldrb	r3, [r7, #14]
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f001 f9dd 	bl	8006e78 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005abe:	2180      	movs	r1, #128	; 0x80
 8005ac0:	6878      	ldr	r0, [r7, #4]
 8005ac2:	f001 f9d9 	bl	8006e78 <USBD_LL_StallEP>
 8005ac6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005ac8:	e025      	b.n	8005b16 <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8005aca:	6839      	ldr	r1, [r7, #0]
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f000 fc33 	bl	8006338 <USBD_CtlError>
              break;
 8005ad2:	e020      	b.n	8005b16 <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	885b      	ldrh	r3, [r3, #2]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d11b      	bne.n	8005b14 <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005adc:	7bbb      	ldrb	r3, [r7, #14]
 8005ade:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d004      	beq.n	8005af0 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ae6:	7bbb      	ldrb	r3, [r7, #14]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f001 f9fa 	bl	8006ee4 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005af0:	6878      	ldr	r0, [r7, #4]
 8005af2:	f000 fcec 	bl	80064ce <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	6839      	ldr	r1, [r7, #0]
 8005b00:	6878      	ldr	r0, [r7, #4]
 8005b02:	4798      	blx	r3
 8005b04:	4603      	mov	r3, r0
 8005b06:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8005b08:	e004      	b.n	8005b14 <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 fc13 	bl	8006338 <USBD_CtlError>
              break;
 8005b12:	e000      	b.n	8005b16 <USBD_StdEPReq+0x154>
              break;
 8005b14:	bf00      	nop
          }
          break;
 8005b16:	e0ab      	b.n	8005c70 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b1e:	b2db      	uxtb	r3, r3
 8005b20:	2b02      	cmp	r3, #2
 8005b22:	d002      	beq.n	8005b2a <USBD_StdEPReq+0x168>
 8005b24:	2b03      	cmp	r3, #3
 8005b26:	d032      	beq.n	8005b8e <USBD_StdEPReq+0x1cc>
 8005b28:	e097      	b.n	8005c5a <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b2a:	7bbb      	ldrb	r3, [r7, #14]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d007      	beq.n	8005b40 <USBD_StdEPReq+0x17e>
 8005b30:	7bbb      	ldrb	r3, [r7, #14]
 8005b32:	2b80      	cmp	r3, #128	; 0x80
 8005b34:	d004      	beq.n	8005b40 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fbfd 	bl	8006338 <USBD_CtlError>
                break;
 8005b3e:	e091      	b.n	8005c64 <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b40:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	da0b      	bge.n	8005b60 <USBD_StdEPReq+0x19e>
 8005b48:	7bbb      	ldrb	r3, [r7, #14]
 8005b4a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005b4e:	4613      	mov	r3, r2
 8005b50:	009b      	lsls	r3, r3, #2
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	3310      	adds	r3, #16
 8005b58:	687a      	ldr	r2, [r7, #4]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	e00b      	b.n	8005b78 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b60:	7bbb      	ldrb	r3, [r7, #14]
 8005b62:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b66:	4613      	mov	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	4413      	add	r3, r2
 8005b6c:	009b      	lsls	r3, r3, #2
 8005b6e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	4413      	add	r3, r2
 8005b76:	3304      	adds	r3, #4
 8005b78:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2202      	movs	r2, #2
 8005b84:	4619      	mov	r1, r3
 8005b86:	6878      	ldr	r0, [r7, #4]
 8005b88:	f000 fc47 	bl	800641a <USBD_CtlSendData>
              break;
 8005b8c:	e06a      	b.n	8005c64 <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005b8e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	da11      	bge.n	8005bba <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005b96:	7bbb      	ldrb	r3, [r7, #14]
 8005b98:	f003 020f 	and.w	r2, r3, #15
 8005b9c:	6879      	ldr	r1, [r7, #4]
 8005b9e:	4613      	mov	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	4413      	add	r3, r2
 8005ba4:	009b      	lsls	r3, r3, #2
 8005ba6:	440b      	add	r3, r1
 8005ba8:	3324      	adds	r3, #36	; 0x24
 8005baa:	881b      	ldrh	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d117      	bne.n	8005be0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005bb0:	6839      	ldr	r1, [r7, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f000 fbc0 	bl	8006338 <USBD_CtlError>
                  break;
 8005bb8:	e054      	b.n	8005c64 <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005bba:	7bbb      	ldrb	r3, [r7, #14]
 8005bbc:	f003 020f 	and.w	r2, r3, #15
 8005bc0:	6879      	ldr	r1, [r7, #4]
 8005bc2:	4613      	mov	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	4413      	add	r3, r2
 8005bc8:	009b      	lsls	r3, r3, #2
 8005bca:	440b      	add	r3, r1
 8005bcc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005bd0:	881b      	ldrh	r3, [r3, #0]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d104      	bne.n	8005be0 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8005bd6:	6839      	ldr	r1, [r7, #0]
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fbad 	bl	8006338 <USBD_CtlError>
                  break;
 8005bde:	e041      	b.n	8005c64 <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005be0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	da0b      	bge.n	8005c00 <USBD_StdEPReq+0x23e>
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005bee:	4613      	mov	r3, r2
 8005bf0:	009b      	lsls	r3, r3, #2
 8005bf2:	4413      	add	r3, r2
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	3310      	adds	r3, #16
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	4413      	add	r3, r2
 8005bfc:	3304      	adds	r3, #4
 8005bfe:	e00b      	b.n	8005c18 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005c00:	7bbb      	ldrb	r3, [r7, #14]
 8005c02:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005c06:	4613      	mov	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	4413      	add	r3, r2
 8005c0c:	009b      	lsls	r3, r3, #2
 8005c0e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	4413      	add	r3, r2
 8005c16:	3304      	adds	r3, #4
 8005c18:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005c1a:	7bbb      	ldrb	r3, [r7, #14]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d002      	beq.n	8005c26 <USBD_StdEPReq+0x264>
 8005c20:	7bbb      	ldrb	r3, [r7, #14]
 8005c22:	2b80      	cmp	r3, #128	; 0x80
 8005c24:	d103      	bne.n	8005c2e <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	601a      	str	r2, [r3, #0]
 8005c2c:	e00e      	b.n	8005c4c <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005c2e:	7bbb      	ldrb	r3, [r7, #14]
 8005c30:	4619      	mov	r1, r3
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f001 f98c 	bl	8006f50 <USBD_LL_IsStallEP>
 8005c38:	4603      	mov	r3, r0
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d003      	beq.n	8005c46 <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	2201      	movs	r2, #1
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	e002      	b.n	8005c4c <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	2200      	movs	r2, #0
 8005c4a:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	2202      	movs	r2, #2
 8005c50:	4619      	mov	r1, r3
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fbe1 	bl	800641a <USBD_CtlSendData>
              break;
 8005c58:	e004      	b.n	8005c64 <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8005c5a:	6839      	ldr	r1, [r7, #0]
 8005c5c:	6878      	ldr	r0, [r7, #4]
 8005c5e:	f000 fb6b 	bl	8006338 <USBD_CtlError>
              break;
 8005c62:	bf00      	nop
          }
          break;
 8005c64:	e004      	b.n	8005c70 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 8005c66:	6839      	ldr	r1, [r7, #0]
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	f000 fb65 	bl	8006338 <USBD_CtlError>
          break;
 8005c6e:	bf00      	nop
      }
      break;
 8005c70:	e004      	b.n	8005c7c <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 8005c72:	6839      	ldr	r1, [r7, #0]
 8005c74:	6878      	ldr	r0, [r7, #4]
 8005c76:	f000 fb5f 	bl	8006338 <USBD_CtlError>
      break;
 8005c7a:	bf00      	nop
  }

  return ret;
 8005c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7e:	4618      	mov	r0, r3
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
	...

08005c88 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	b084      	sub	sp, #16
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
 8005c90:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005c92:	2300      	movs	r3, #0
 8005c94:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005c96:	2300      	movs	r3, #0
 8005c98:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	885b      	ldrh	r3, [r3, #2]
 8005ca2:	0a1b      	lsrs	r3, r3, #8
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	2b0e      	cmp	r3, #14
 8005caa:	f200 8152 	bhi.w	8005f52 <USBD_GetDescriptor+0x2ca>
 8005cae:	a201      	add	r2, pc, #4	; (adr r2, 8005cb4 <USBD_GetDescriptor+0x2c>)
 8005cb0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb4:	08005d25 	.word	0x08005d25
 8005cb8:	08005d3d 	.word	0x08005d3d
 8005cbc:	08005d7d 	.word	0x08005d7d
 8005cc0:	08005f53 	.word	0x08005f53
 8005cc4:	08005f53 	.word	0x08005f53
 8005cc8:	08005ef3 	.word	0x08005ef3
 8005ccc:	08005f1f 	.word	0x08005f1f
 8005cd0:	08005f53 	.word	0x08005f53
 8005cd4:	08005f53 	.word	0x08005f53
 8005cd8:	08005f53 	.word	0x08005f53
 8005cdc:	08005f53 	.word	0x08005f53
 8005ce0:	08005f53 	.word	0x08005f53
 8005ce4:	08005f53 	.word	0x08005f53
 8005ce8:	08005f53 	.word	0x08005f53
 8005cec:	08005cf1 	.word	0x08005cf1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005cf6:	69db      	ldr	r3, [r3, #28]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d00b      	beq.n	8005d14 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d02:	69db      	ldr	r3, [r3, #28]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	7c12      	ldrb	r2, [r2, #16]
 8005d08:	f107 0108 	add.w	r1, r7, #8
 8005d0c:	4610      	mov	r0, r2
 8005d0e:	4798      	blx	r3
 8005d10:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005d12:	e126      	b.n	8005f62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fb0e 	bl	8006338 <USBD_CtlError>
        err++;
 8005d1c:	7afb      	ldrb	r3, [r7, #11]
 8005d1e:	3301      	adds	r3, #1
 8005d20:	72fb      	strb	r3, [r7, #11]
      break;
 8005d22:	e11e      	b.n	8005f62 <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	687a      	ldr	r2, [r7, #4]
 8005d2e:	7c12      	ldrb	r2, [r2, #16]
 8005d30:	f107 0108 	add.w	r1, r7, #8
 8005d34:	4610      	mov	r0, r2
 8005d36:	4798      	blx	r3
 8005d38:	60f8      	str	r0, [r7, #12]
      break;
 8005d3a:	e112      	b.n	8005f62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	7c1b      	ldrb	r3, [r3, #16]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d10d      	bne.n	8005d60 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4c:	f107 0208 	add.w	r2, r7, #8
 8005d50:	4610      	mov	r0, r2
 8005d52:	4798      	blx	r3
 8005d54:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	3301      	adds	r3, #1
 8005d5a:	2202      	movs	r2, #2
 8005d5c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005d5e:	e100      	b.n	8005f62 <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d68:	f107 0208 	add.w	r2, r7, #8
 8005d6c:	4610      	mov	r0, r2
 8005d6e:	4798      	blx	r3
 8005d70:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3301      	adds	r3, #1
 8005d76:	2202      	movs	r2, #2
 8005d78:	701a      	strb	r2, [r3, #0]
      break;
 8005d7a:	e0f2      	b.n	8005f62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	885b      	ldrh	r3, [r3, #2]
 8005d80:	b2db      	uxtb	r3, r3
 8005d82:	2b05      	cmp	r3, #5
 8005d84:	f200 80ac 	bhi.w	8005ee0 <USBD_GetDescriptor+0x258>
 8005d88:	a201      	add	r2, pc, #4	; (adr r2, 8005d90 <USBD_GetDescriptor+0x108>)
 8005d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d8e:	bf00      	nop
 8005d90:	08005da9 	.word	0x08005da9
 8005d94:	08005ddd 	.word	0x08005ddd
 8005d98:	08005e11 	.word	0x08005e11
 8005d9c:	08005e45 	.word	0x08005e45
 8005da0:	08005e79 	.word	0x08005e79
 8005da4:	08005ead 	.word	0x08005ead
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dae:	685b      	ldr	r3, [r3, #4]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d00b      	beq.n	8005dcc <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dba:	685b      	ldr	r3, [r3, #4]
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	7c12      	ldrb	r2, [r2, #16]
 8005dc0:	f107 0108 	add.w	r1, r7, #8
 8005dc4:	4610      	mov	r0, r2
 8005dc6:	4798      	blx	r3
 8005dc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dca:	e091      	b.n	8005ef0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fab2 	bl	8006338 <USBD_CtlError>
            err++;
 8005dd4:	7afb      	ldrb	r3, [r7, #11]
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	72fb      	strb	r3, [r7, #11]
          break;
 8005dda:	e089      	b.n	8005ef0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d00b      	beq.n	8005e00 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	687a      	ldr	r2, [r7, #4]
 8005df2:	7c12      	ldrb	r2, [r2, #16]
 8005df4:	f107 0108 	add.w	r1, r7, #8
 8005df8:	4610      	mov	r0, r2
 8005dfa:	4798      	blx	r3
 8005dfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005dfe:	e077      	b.n	8005ef0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e00:	6839      	ldr	r1, [r7, #0]
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 fa98 	bl	8006338 <USBD_CtlError>
            err++;
 8005e08:	7afb      	ldrb	r3, [r7, #11]
 8005e0a:	3301      	adds	r3, #1
 8005e0c:	72fb      	strb	r3, [r7, #11]
          break;
 8005e0e:	e06f      	b.n	8005ef0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d00b      	beq.n	8005e34 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	7c12      	ldrb	r2, [r2, #16]
 8005e28:	f107 0108 	add.w	r1, r7, #8
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	4798      	blx	r3
 8005e30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e32:	e05d      	b.n	8005ef0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e34:	6839      	ldr	r1, [r7, #0]
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 fa7e 	bl	8006338 <USBD_CtlError>
            err++;
 8005e3c:	7afb      	ldrb	r3, [r7, #11]
 8005e3e:	3301      	adds	r3, #1
 8005e40:	72fb      	strb	r3, [r7, #11]
          break;
 8005e42:	e055      	b.n	8005ef0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d00b      	beq.n	8005e68 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	687a      	ldr	r2, [r7, #4]
 8005e5a:	7c12      	ldrb	r2, [r2, #16]
 8005e5c:	f107 0108 	add.w	r1, r7, #8
 8005e60:	4610      	mov	r0, r2
 8005e62:	4798      	blx	r3
 8005e64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e66:	e043      	b.n	8005ef0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e68:	6839      	ldr	r1, [r7, #0]
 8005e6a:	6878      	ldr	r0, [r7, #4]
 8005e6c:	f000 fa64 	bl	8006338 <USBD_CtlError>
            err++;
 8005e70:	7afb      	ldrb	r3, [r7, #11]
 8005e72:	3301      	adds	r3, #1
 8005e74:	72fb      	strb	r3, [r7, #11]
          break;
 8005e76:	e03b      	b.n	8005ef0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e7e:	695b      	ldr	r3, [r3, #20]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d00b      	beq.n	8005e9c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e8a:	695b      	ldr	r3, [r3, #20]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	7c12      	ldrb	r2, [r2, #16]
 8005e90:	f107 0108 	add.w	r1, r7, #8
 8005e94:	4610      	mov	r0, r2
 8005e96:	4798      	blx	r3
 8005e98:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005e9a:	e029      	b.n	8005ef0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f000 fa4a 	bl	8006338 <USBD_CtlError>
            err++;
 8005ea4:	7afb      	ldrb	r3, [r7, #11]
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	72fb      	strb	r3, [r7, #11]
          break;
 8005eaa:	e021      	b.n	8005ef0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00b      	beq.n	8005ed0 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ebe:	699b      	ldr	r3, [r3, #24]
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	7c12      	ldrb	r2, [r2, #16]
 8005ec4:	f107 0108 	add.w	r1, r7, #8
 8005ec8:	4610      	mov	r0, r2
 8005eca:	4798      	blx	r3
 8005ecc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ece:	e00f      	b.n	8005ef0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8005ed0:	6839      	ldr	r1, [r7, #0]
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fa30 	bl	8006338 <USBD_CtlError>
            err++;
 8005ed8:	7afb      	ldrb	r3, [r7, #11]
 8005eda:	3301      	adds	r3, #1
 8005edc:	72fb      	strb	r3, [r7, #11]
          break;
 8005ede:	e007      	b.n	8005ef0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8005ee0:	6839      	ldr	r1, [r7, #0]
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fa28 	bl	8006338 <USBD_CtlError>
          err++;
 8005ee8:	7afb      	ldrb	r3, [r7, #11]
 8005eea:	3301      	adds	r3, #1
 8005eec:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 8005eee:	bf00      	nop
      }
      break;
 8005ef0:	e037      	b.n	8005f62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	7c1b      	ldrb	r3, [r3, #16]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d109      	bne.n	8005f0e <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f02:	f107 0208 	add.w	r2, r7, #8
 8005f06:	4610      	mov	r0, r2
 8005f08:	4798      	blx	r3
 8005f0a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f0c:	e029      	b.n	8005f62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005f0e:	6839      	ldr	r1, [r7, #0]
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fa11 	bl	8006338 <USBD_CtlError>
        err++;
 8005f16:	7afb      	ldrb	r3, [r7, #11]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	72fb      	strb	r3, [r7, #11]
      break;
 8005f1c:	e021      	b.n	8005f62 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	7c1b      	ldrb	r3, [r3, #16]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d10d      	bne.n	8005f42 <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f2e:	f107 0208 	add.w	r2, r7, #8
 8005f32:	4610      	mov	r0, r2
 8005f34:	4798      	blx	r3
 8005f36:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	2207      	movs	r2, #7
 8005f3e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005f40:	e00f      	b.n	8005f62 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 8005f42:	6839      	ldr	r1, [r7, #0]
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f000 f9f7 	bl	8006338 <USBD_CtlError>
        err++;
 8005f4a:	7afb      	ldrb	r3, [r7, #11]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	72fb      	strb	r3, [r7, #11]
      break;
 8005f50:	e007      	b.n	8005f62 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 8005f52:	6839      	ldr	r1, [r7, #0]
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 f9ef 	bl	8006338 <USBD_CtlError>
      err++;
 8005f5a:	7afb      	ldrb	r3, [r7, #11]
 8005f5c:	3301      	adds	r3, #1
 8005f5e:	72fb      	strb	r3, [r7, #11]
      break;
 8005f60:	bf00      	nop
  }

  if (err != 0U)
 8005f62:	7afb      	ldrb	r3, [r7, #11]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d11e      	bne.n	8005fa6 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8005f68:	683b      	ldr	r3, [r7, #0]
 8005f6a:	88db      	ldrh	r3, [r3, #6]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d016      	beq.n	8005f9e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8005f70:	893b      	ldrh	r3, [r7, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d00e      	beq.n	8005f94 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	88da      	ldrh	r2, [r3, #6]
 8005f7a:	893b      	ldrh	r3, [r7, #8]
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	bf28      	it	cs
 8005f80:	4613      	movcs	r3, r2
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005f86:	893b      	ldrh	r3, [r7, #8]
 8005f88:	461a      	mov	r2, r3
 8005f8a:	68f9      	ldr	r1, [r7, #12]
 8005f8c:	6878      	ldr	r0, [r7, #4]
 8005f8e:	f000 fa44 	bl	800641a <USBD_CtlSendData>
 8005f92:	e009      	b.n	8005fa8 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 f9ce 	bl	8006338 <USBD_CtlError>
 8005f9c:	e004      	b.n	8005fa8 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fa95 	bl	80064ce <USBD_CtlSendStatus>
 8005fa4:	e000      	b.n	8005fa8 <USBD_GetDescriptor+0x320>
    return;
 8005fa6:	bf00      	nop
  }
}
 8005fa8:	3710      	adds	r7, #16
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bd80      	pop	{r7, pc}
 8005fae:	bf00      	nop

08005fb0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fb0:	b580      	push	{r7, lr}
 8005fb2:	b084      	sub	sp, #16
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
 8005fb8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	889b      	ldrh	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d131      	bne.n	8006026 <USBD_SetAddress+0x76>
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	88db      	ldrh	r3, [r3, #6]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d12d      	bne.n	8006026 <USBD_SetAddress+0x76>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	885b      	ldrh	r3, [r3, #2]
 8005fce:	2b7f      	cmp	r3, #127	; 0x7f
 8005fd0:	d829      	bhi.n	8006026 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	885b      	ldrh	r3, [r3, #2]
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fdc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe4:	b2db      	uxtb	r3, r3
 8005fe6:	2b03      	cmp	r3, #3
 8005fe8:	d104      	bne.n	8005ff4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005fea:	6839      	ldr	r1, [r7, #0]
 8005fec:	6878      	ldr	r0, [r7, #4]
 8005fee:	f000 f9a3 	bl	8006338 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ff2:	e01d      	b.n	8006030 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	7bfa      	ldrb	r2, [r7, #15]
 8005ff8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005ffc:	7bfb      	ldrb	r3, [r7, #15]
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f000 ffd1 	bl	8006fa8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006006:	6878      	ldr	r0, [r7, #4]
 8006008:	f000 fa61 	bl	80064ce <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800600c:	7bfb      	ldrb	r3, [r7, #15]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d004      	beq.n	800601c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2202      	movs	r2, #2
 8006016:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800601a:	e009      	b.n	8006030 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006024:	e004      	b.n	8006030 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006026:	6839      	ldr	r1, [r7, #0]
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 f985 	bl	8006338 <USBD_CtlError>
  }
}
 800602e:	bf00      	nop
 8006030:	bf00      	nop
 8006032:	3710      	adds	r7, #16
 8006034:	46bd      	mov	sp, r7
 8006036:	bd80      	pop	{r7, pc}

08006038 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b084      	sub	sp, #16
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
 8006040:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006042:	2300      	movs	r3, #0
 8006044:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	885b      	ldrh	r3, [r3, #2]
 800604a:	b2da      	uxtb	r2, r3
 800604c:	4b4c      	ldr	r3, [pc, #304]	; (8006180 <USBD_SetConfig+0x148>)
 800604e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006050:	4b4b      	ldr	r3, [pc, #300]	; (8006180 <USBD_SetConfig+0x148>)
 8006052:	781b      	ldrb	r3, [r3, #0]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d905      	bls.n	8006064 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006058:	6839      	ldr	r1, [r7, #0]
 800605a:	6878      	ldr	r0, [r7, #4]
 800605c:	f000 f96c 	bl	8006338 <USBD_CtlError>
    return USBD_FAIL;
 8006060:	2303      	movs	r3, #3
 8006062:	e088      	b.n	8006176 <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800606a:	b2db      	uxtb	r3, r3
 800606c:	2b02      	cmp	r3, #2
 800606e:	d002      	beq.n	8006076 <USBD_SetConfig+0x3e>
 8006070:	2b03      	cmp	r3, #3
 8006072:	d025      	beq.n	80060c0 <USBD_SetConfig+0x88>
 8006074:	e071      	b.n	800615a <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006076:	4b42      	ldr	r3, [pc, #264]	; (8006180 <USBD_SetConfig+0x148>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d01c      	beq.n	80060b8 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 800607e:	4b40      	ldr	r3, [pc, #256]	; (8006180 <USBD_SetConfig+0x148>)
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	461a      	mov	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006088:	4b3d      	ldr	r3, [pc, #244]	; (8006180 <USBD_SetConfig+0x148>)
 800608a:	781b      	ldrb	r3, [r3, #0]
 800608c:	4619      	mov	r1, r3
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff f91e 	bl	80052d0 <USBD_SetClassConfig>
 8006094:	4603      	mov	r3, r0
 8006096:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006098:	7bfb      	ldrb	r3, [r7, #15]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d004      	beq.n	80060a8 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 800609e:	6839      	ldr	r1, [r7, #0]
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f000 f949 	bl	8006338 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80060a6:	e065      	b.n	8006174 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	f000 fa10 	bl	80064ce <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2203      	movs	r2, #3
 80060b2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80060b6:	e05d      	b.n	8006174 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 80060b8:	6878      	ldr	r0, [r7, #4]
 80060ba:	f000 fa08 	bl	80064ce <USBD_CtlSendStatus>
      break;
 80060be:	e059      	b.n	8006174 <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80060c0:	4b2f      	ldr	r3, [pc, #188]	; (8006180 <USBD_SetConfig+0x148>)
 80060c2:	781b      	ldrb	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d112      	bne.n	80060ee <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2202      	movs	r2, #2
 80060cc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80060d0:	4b2b      	ldr	r3, [pc, #172]	; (8006180 <USBD_SetConfig+0x148>)
 80060d2:	781b      	ldrb	r3, [r3, #0]
 80060d4:	461a      	mov	r2, r3
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80060da:	4b29      	ldr	r3, [pc, #164]	; (8006180 <USBD_SetConfig+0x148>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	4619      	mov	r1, r3
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff f911 	bl	8005308 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 f9f1 	bl	80064ce <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80060ec:	e042      	b.n	8006174 <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80060ee:	4b24      	ldr	r3, [pc, #144]	; (8006180 <USBD_SetConfig+0x148>)
 80060f0:	781b      	ldrb	r3, [r3, #0]
 80060f2:	461a      	mov	r2, r3
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	685b      	ldr	r3, [r3, #4]
 80060f8:	429a      	cmp	r2, r3
 80060fa:	d02a      	beq.n	8006152 <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	b2db      	uxtb	r3, r3
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f7ff f8ff 	bl	8005308 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800610a:	4b1d      	ldr	r3, [pc, #116]	; (8006180 <USBD_SetConfig+0x148>)
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	461a      	mov	r2, r3
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006114:	4b1a      	ldr	r3, [pc, #104]	; (8006180 <USBD_SetConfig+0x148>)
 8006116:	781b      	ldrb	r3, [r3, #0]
 8006118:	4619      	mov	r1, r3
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f7ff f8d8 	bl	80052d0 <USBD_SetClassConfig>
 8006120:	4603      	mov	r3, r0
 8006122:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006124:	7bfb      	ldrb	r3, [r7, #15]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d00f      	beq.n	800614a <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 800612a:	6839      	ldr	r1, [r7, #0]
 800612c:	6878      	ldr	r0, [r7, #4]
 800612e:	f000 f903 	bl	8006338 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	b2db      	uxtb	r3, r3
 8006138:	4619      	mov	r1, r3
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7ff f8e4 	bl	8005308 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006148:	e014      	b.n	8006174 <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f9bf 	bl	80064ce <USBD_CtlSendStatus>
      break;
 8006150:	e010      	b.n	8006174 <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f9bb 	bl	80064ce <USBD_CtlSendStatus>
      break;
 8006158:	e00c      	b.n	8006174 <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 800615a:	6839      	ldr	r1, [r7, #0]
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	f000 f8eb 	bl	8006338 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006162:	4b07      	ldr	r3, [pc, #28]	; (8006180 <USBD_SetConfig+0x148>)
 8006164:	781b      	ldrb	r3, [r3, #0]
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f7ff f8cd 	bl	8005308 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800616e:	2303      	movs	r3, #3
 8006170:	73fb      	strb	r3, [r7, #15]
      break;
 8006172:	bf00      	nop
  }

  return ret;
 8006174:	7bfb      	ldrb	r3, [r7, #15]
}
 8006176:	4618      	mov	r0, r3
 8006178:	3710      	adds	r7, #16
 800617a:	46bd      	mov	sp, r7
 800617c:	bd80      	pop	{r7, pc}
 800617e:	bf00      	nop
 8006180:	200001f4 	.word	0x200001f4

08006184 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
 800618c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800618e:	683b      	ldr	r3, [r7, #0]
 8006190:	88db      	ldrh	r3, [r3, #6]
 8006192:	2b01      	cmp	r3, #1
 8006194:	d004      	beq.n	80061a0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006196:	6839      	ldr	r1, [r7, #0]
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	f000 f8cd 	bl	8006338 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800619e:	e023      	b.n	80061e8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061a6:	b2db      	uxtb	r3, r3
 80061a8:	2b02      	cmp	r3, #2
 80061aa:	dc02      	bgt.n	80061b2 <USBD_GetConfig+0x2e>
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	dc03      	bgt.n	80061b8 <USBD_GetConfig+0x34>
 80061b0:	e015      	b.n	80061de <USBD_GetConfig+0x5a>
 80061b2:	2b03      	cmp	r3, #3
 80061b4:	d00b      	beq.n	80061ce <USBD_GetConfig+0x4a>
 80061b6:	e012      	b.n	80061de <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2200      	movs	r2, #0
 80061bc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	3308      	adds	r3, #8
 80061c2:	2201      	movs	r2, #1
 80061c4:	4619      	mov	r1, r3
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f927 	bl	800641a <USBD_CtlSendData>
        break;
 80061cc:	e00c      	b.n	80061e8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	3304      	adds	r3, #4
 80061d2:	2201      	movs	r2, #1
 80061d4:	4619      	mov	r1, r3
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 f91f 	bl	800641a <USBD_CtlSendData>
        break;
 80061dc:	e004      	b.n	80061e8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80061de:	6839      	ldr	r1, [r7, #0]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 f8a9 	bl	8006338 <USBD_CtlError>
        break;
 80061e6:	bf00      	nop
}
 80061e8:	bf00      	nop
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006200:	b2db      	uxtb	r3, r3
 8006202:	3b01      	subs	r3, #1
 8006204:	2b02      	cmp	r3, #2
 8006206:	d81e      	bhi.n	8006246 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	88db      	ldrh	r3, [r3, #6]
 800620c:	2b02      	cmp	r3, #2
 800620e:	d004      	beq.n	800621a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006210:	6839      	ldr	r1, [r7, #0]
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f890 	bl	8006338 <USBD_CtlError>
        break;
 8006218:	e01a      	b.n	8006250 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2201      	movs	r2, #1
 800621e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	68db      	ldr	r3, [r3, #12]
 800622e:	f043 0202 	orr.w	r2, r3, #2
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	330c      	adds	r3, #12
 800623a:	2202      	movs	r2, #2
 800623c:	4619      	mov	r1, r3
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f8eb 	bl	800641a <USBD_CtlSendData>
      break;
 8006244:	e004      	b.n	8006250 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f875 	bl	8006338 <USBD_CtlError>
      break;
 800624e:	bf00      	nop
  }
}
 8006250:	bf00      	nop
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b082      	sub	sp, #8
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
 8006260:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	885b      	ldrh	r3, [r3, #2]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d106      	bne.n	8006278 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2201      	movs	r2, #1
 800626e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006272:	6878      	ldr	r0, [r7, #4]
 8006274:	f000 f92b 	bl	80064ce <USBD_CtlSendStatus>
  }
}
 8006278:	bf00      	nop
 800627a:	3708      	adds	r7, #8
 800627c:	46bd      	mov	sp, r7
 800627e:	bd80      	pop	{r7, pc}

08006280 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006290:	b2db      	uxtb	r3, r3
 8006292:	3b01      	subs	r3, #1
 8006294:	2b02      	cmp	r3, #2
 8006296:	d80b      	bhi.n	80062b0 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	885b      	ldrh	r3, [r3, #2]
 800629c:	2b01      	cmp	r3, #1
 800629e:	d10c      	bne.n	80062ba <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2200      	movs	r2, #0
 80062a4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f910 	bl	80064ce <USBD_CtlSendStatus>
      }
      break;
 80062ae:	e004      	b.n	80062ba <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f840 	bl	8006338 <USBD_CtlError>
      break;
 80062b8:	e000      	b.n	80062bc <USBD_ClrFeature+0x3c>
      break;
 80062ba:	bf00      	nop
  }
}
 80062bc:	bf00      	nop
 80062be:	3708      	adds	r7, #8
 80062c0:	46bd      	mov	sp, r7
 80062c2:	bd80      	pop	{r7, pc}

080062c4 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b084      	sub	sp, #16
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	781a      	ldrb	r2, [r3, #0]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	3301      	adds	r3, #1
 80062de:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	781a      	ldrb	r2, [r3, #0]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	3301      	adds	r3, #1
 80062ec:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80062ee:	68f8      	ldr	r0, [r7, #12]
 80062f0:	f7ff fa91 	bl	8005816 <SWAPBYTE>
 80062f4:	4603      	mov	r3, r0
 80062f6:	461a      	mov	r2, r3
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	3301      	adds	r3, #1
 8006306:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006308:	68f8      	ldr	r0, [r7, #12]
 800630a:	f7ff fa84 	bl	8005816 <SWAPBYTE>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	3301      	adds	r3, #1
 800631a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	3301      	adds	r3, #1
 8006320:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f7ff fa77 	bl	8005816 <SWAPBYTE>
 8006328:	4603      	mov	r3, r0
 800632a:	461a      	mov	r2, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	80da      	strh	r2, [r3, #6]
}
 8006330:	bf00      	nop
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b082      	sub	sp, #8
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006342:	2180      	movs	r1, #128	; 0x80
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fd97 	bl	8006e78 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800634a:	2100      	movs	r1, #0
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fd93 	bl	8006e78 <USBD_LL_StallEP>
}
 8006352:	bf00      	nop
 8006354:	3708      	adds	r7, #8
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800635a:	b580      	push	{r7, lr}
 800635c:	b086      	sub	sp, #24
 800635e:	af00      	add	r7, sp, #0
 8006360:	60f8      	str	r0, [r7, #12]
 8006362:	60b9      	str	r1, [r7, #8]
 8006364:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006366:	2300      	movs	r3, #0
 8006368:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d036      	beq.n	80063de <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006374:	6938      	ldr	r0, [r7, #16]
 8006376:	f000 f836 	bl	80063e6 <USBD_GetLen>
 800637a:	4603      	mov	r3, r0
 800637c:	3301      	adds	r3, #1
 800637e:	b29b      	uxth	r3, r3
 8006380:	005b      	lsls	r3, r3, #1
 8006382:	b29a      	uxth	r2, r3
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006388:	7dfb      	ldrb	r3, [r7, #23]
 800638a:	68ba      	ldr	r2, [r7, #8]
 800638c:	4413      	add	r3, r2
 800638e:	687a      	ldr	r2, [r7, #4]
 8006390:	7812      	ldrb	r2, [r2, #0]
 8006392:	701a      	strb	r2, [r3, #0]
  idx++;
 8006394:	7dfb      	ldrb	r3, [r7, #23]
 8006396:	3301      	adds	r3, #1
 8006398:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800639a:	7dfb      	ldrb	r3, [r7, #23]
 800639c:	68ba      	ldr	r2, [r7, #8]
 800639e:	4413      	add	r3, r2
 80063a0:	2203      	movs	r2, #3
 80063a2:	701a      	strb	r2, [r3, #0]
  idx++;
 80063a4:	7dfb      	ldrb	r3, [r7, #23]
 80063a6:	3301      	adds	r3, #1
 80063a8:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80063aa:	e013      	b.n	80063d4 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80063ac:	7dfb      	ldrb	r3, [r7, #23]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	4413      	add	r3, r2
 80063b2:	693a      	ldr	r2, [r7, #16]
 80063b4:	7812      	ldrb	r2, [r2, #0]
 80063b6:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	3301      	adds	r3, #1
 80063bc:	613b      	str	r3, [r7, #16]
    idx++;
 80063be:	7dfb      	ldrb	r3, [r7, #23]
 80063c0:	3301      	adds	r3, #1
 80063c2:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80063c4:	7dfb      	ldrb	r3, [r7, #23]
 80063c6:	68ba      	ldr	r2, [r7, #8]
 80063c8:	4413      	add	r3, r2
 80063ca:	2200      	movs	r2, #0
 80063cc:	701a      	strb	r2, [r3, #0]
    idx++;
 80063ce:	7dfb      	ldrb	r3, [r7, #23]
 80063d0:	3301      	adds	r3, #1
 80063d2:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	781b      	ldrb	r3, [r3, #0]
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d1e7      	bne.n	80063ac <USBD_GetString+0x52>
 80063dc:	e000      	b.n	80063e0 <USBD_GetString+0x86>
    return;
 80063de:	bf00      	nop
  }
}
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80063e6:	b480      	push	{r7}
 80063e8:	b085      	sub	sp, #20
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80063ee:	2300      	movs	r3, #0
 80063f0:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80063f6:	e005      	b.n	8006404 <USBD_GetLen+0x1e>
  {
    len++;
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	3301      	adds	r3, #1
 80063fc:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	3301      	adds	r3, #1
 8006402:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d1f5      	bne.n	80063f8 <USBD_GetLen+0x12>
  }

  return len;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr

0800641a <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800641a:	b580      	push	{r7, lr}
 800641c:	b084      	sub	sp, #16
 800641e:	af00      	add	r7, sp, #0
 8006420:	60f8      	str	r0, [r7, #12]
 8006422:	60b9      	str	r1, [r7, #8]
 8006424:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2202      	movs	r2, #2
 800642a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	687a      	ldr	r2, [r7, #4]
 8006438:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68ba      	ldr	r2, [r7, #8]
 800643e:	2100      	movs	r1, #0
 8006440:	68f8      	ldr	r0, [r7, #12]
 8006442:	f000 fde7 	bl	8007014 <USBD_LL_Transmit>

  return USBD_OK;
 8006446:	2300      	movs	r3, #0
}
 8006448:	4618      	mov	r0, r3
 800644a:	3710      	adds	r7, #16
 800644c:	46bd      	mov	sp, r7
 800644e:	bd80      	pop	{r7, pc}

08006450 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b084      	sub	sp, #16
 8006454:	af00      	add	r7, sp, #0
 8006456:	60f8      	str	r0, [r7, #12]
 8006458:	60b9      	str	r1, [r7, #8]
 800645a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	68ba      	ldr	r2, [r7, #8]
 8006460:	2100      	movs	r1, #0
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 fdd6 	bl	8007014 <USBD_LL_Transmit>

  return USBD_OK;
 8006468:	2300      	movs	r3, #0
}
 800646a:	4618      	mov	r0, r3
 800646c:	3710      	adds	r7, #16
 800646e:	46bd      	mov	sp, r7
 8006470:	bd80      	pop	{r7, pc}

08006472 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006472:	b580      	push	{r7, lr}
 8006474:	b084      	sub	sp, #16
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2203      	movs	r2, #3
 8006482:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	687a      	ldr	r2, [r7, #4]
 8006492:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	68ba      	ldr	r2, [r7, #8]
 800649a:	2100      	movs	r1, #0
 800649c:	68f8      	ldr	r0, [r7, #12]
 800649e:	f000 fdf1 	bl	8007084 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064a2:	2300      	movs	r3, #0
}
 80064a4:	4618      	mov	r0, r3
 80064a6:	3710      	adds	r7, #16
 80064a8:	46bd      	mov	sp, r7
 80064aa:	bd80      	pop	{r7, pc}

080064ac <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80064ac:	b580      	push	{r7, lr}
 80064ae:	b084      	sub	sp, #16
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	60f8      	str	r0, [r7, #12]
 80064b4:	60b9      	str	r1, [r7, #8]
 80064b6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	2100      	movs	r1, #0
 80064be:	68f8      	ldr	r0, [r7, #12]
 80064c0:	f000 fde0 	bl	8007084 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80064c4:	2300      	movs	r3, #0
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3710      	adds	r7, #16
 80064ca:	46bd      	mov	sp, r7
 80064cc:	bd80      	pop	{r7, pc}

080064ce <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80064ce:	b580      	push	{r7, lr}
 80064d0:	b082      	sub	sp, #8
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2204      	movs	r2, #4
 80064da:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80064de:	2300      	movs	r3, #0
 80064e0:	2200      	movs	r2, #0
 80064e2:	2100      	movs	r1, #0
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 fd95 	bl	8007014 <USBD_LL_Transmit>

  return USBD_OK;
 80064ea:	2300      	movs	r3, #0
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3708      	adds	r7, #8
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}

080064f4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b082      	sub	sp, #8
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2205      	movs	r2, #5
 8006500:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006504:	2300      	movs	r3, #0
 8006506:	2200      	movs	r2, #0
 8006508:	2100      	movs	r1, #0
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f000 fdba 	bl	8007084 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	3708      	adds	r7, #8
 8006516:	46bd      	mov	sp, r7
 8006518:	bd80      	pop	{r7, pc}
	...

0800651c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006520:	2200      	movs	r2, #0
 8006522:	4912      	ldr	r1, [pc, #72]	; (800656c <MX_USB_DEVICE_Init+0x50>)
 8006524:	4812      	ldr	r0, [pc, #72]	; (8006570 <MX_USB_DEVICE_Init+0x54>)
 8006526:	f7fe fe65 	bl	80051f4 <USBD_Init>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006530:	f7fa f8ad 	bl	800068e <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006534:	490f      	ldr	r1, [pc, #60]	; (8006574 <MX_USB_DEVICE_Init+0x58>)
 8006536:	480e      	ldr	r0, [pc, #56]	; (8006570 <MX_USB_DEVICE_Init+0x54>)
 8006538:	f7fe fe8c 	bl	8005254 <USBD_RegisterClass>
 800653c:	4603      	mov	r3, r0
 800653e:	2b00      	cmp	r3, #0
 8006540:	d001      	beq.n	8006546 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006542:	f7fa f8a4 	bl	800068e <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006546:	490c      	ldr	r1, [pc, #48]	; (8006578 <MX_USB_DEVICE_Init+0x5c>)
 8006548:	4809      	ldr	r0, [pc, #36]	; (8006570 <MX_USB_DEVICE_Init+0x54>)
 800654a:	f7fe fdad 	bl	80050a8 <USBD_CDC_RegisterInterface>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d001      	beq.n	8006558 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006554:	f7fa f89b 	bl	800068e <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006558:	4805      	ldr	r0, [pc, #20]	; (8006570 <MX_USB_DEVICE_Init+0x54>)
 800655a:	f7fe fea2 	bl	80052a2 <USBD_Start>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006564:	f7fa f893 	bl	800068e <Error_Handler>
  }
  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006568:	bf00      	nop
 800656a:	bd80      	pop	{r7, pc}
 800656c:	20000130 	.word	0x20000130
 8006570:	20000460 	.word	0x20000460
 8006574:	20000018 	.word	0x20000018
 8006578:	2000011c 	.word	0x2000011c

0800657c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006580:	2200      	movs	r2, #0
 8006582:	4905      	ldr	r1, [pc, #20]	; (8006598 <CDC_Init_FS+0x1c>)
 8006584:	4805      	ldr	r0, [pc, #20]	; (800659c <CDC_Init_FS+0x20>)
 8006586:	f7fe fda4 	bl	80050d2 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800658a:	4905      	ldr	r1, [pc, #20]	; (80065a0 <CDC_Init_FS+0x24>)
 800658c:	4803      	ldr	r0, [pc, #12]	; (800659c <CDC_Init_FS+0x20>)
 800658e:	f7fe fdbe 	bl	800510e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8006592:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8006594:	4618      	mov	r0, r3
 8006596:	bd80      	pop	{r7, pc}
 8006598:	20000f30 	.word	0x20000f30
 800659c:	20000460 	.word	0x20000460
 80065a0:	20000730 	.word	0x20000730

080065a4 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80065a4:	b480      	push	{r7}
 80065a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80065a8:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80065aa:	4618      	mov	r0, r3
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	4603      	mov	r3, r0
 80065bc:	6039      	str	r1, [r7, #0]
 80065be:	71fb      	strb	r3, [r7, #7]
 80065c0:	4613      	mov	r3, r2
 80065c2:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	2b23      	cmp	r3, #35	; 0x23
 80065c8:	d84a      	bhi.n	8006660 <CDC_Control_FS+0xac>
 80065ca:	a201      	add	r2, pc, #4	; (adr r2, 80065d0 <CDC_Control_FS+0x1c>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	08006661 	.word	0x08006661
 80065d4:	08006661 	.word	0x08006661
 80065d8:	08006661 	.word	0x08006661
 80065dc:	08006661 	.word	0x08006661
 80065e0:	08006661 	.word	0x08006661
 80065e4:	08006661 	.word	0x08006661
 80065e8:	08006661 	.word	0x08006661
 80065ec:	08006661 	.word	0x08006661
 80065f0:	08006661 	.word	0x08006661
 80065f4:	08006661 	.word	0x08006661
 80065f8:	08006661 	.word	0x08006661
 80065fc:	08006661 	.word	0x08006661
 8006600:	08006661 	.word	0x08006661
 8006604:	08006661 	.word	0x08006661
 8006608:	08006661 	.word	0x08006661
 800660c:	08006661 	.word	0x08006661
 8006610:	08006661 	.word	0x08006661
 8006614:	08006661 	.word	0x08006661
 8006618:	08006661 	.word	0x08006661
 800661c:	08006661 	.word	0x08006661
 8006620:	08006661 	.word	0x08006661
 8006624:	08006661 	.word	0x08006661
 8006628:	08006661 	.word	0x08006661
 800662c:	08006661 	.word	0x08006661
 8006630:	08006661 	.word	0x08006661
 8006634:	08006661 	.word	0x08006661
 8006638:	08006661 	.word	0x08006661
 800663c:	08006661 	.word	0x08006661
 8006640:	08006661 	.word	0x08006661
 8006644:	08006661 	.word	0x08006661
 8006648:	08006661 	.word	0x08006661
 800664c:	08006661 	.word	0x08006661
 8006650:	08006661 	.word	0x08006661
 8006654:	08006661 	.word	0x08006661
 8006658:	08006661 	.word	0x08006661
 800665c:	08006661 	.word	0x08006661
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8006660:	bf00      	nop
  }

  return (USBD_OK);
 8006662:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <CDC_Receive_FS>:
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
#define buffergroesse 64 		//wie viele speicherplätze bekommt der ringbuffer?
extern uint8_t bufferdata[buffergroesse];
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800667a:	6879      	ldr	r1, [r7, #4]
 800667c:	480c      	ldr	r0, [pc, #48]	; (80066b0 <CDC_Receive_FS+0x40>)
 800667e:	f7fe fd46 	bl	800510e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006682:	480b      	ldr	r0, [pc, #44]	; (80066b0 <CDC_Receive_FS+0x40>)
 8006684:	f7fe fd8c 	bl	80051a0 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	73fb      	strb	r3, [r7, #15]

  memcpy (bufferdata,Buf,len);
 800668e:	7bfb      	ldrb	r3, [r7, #15]
 8006690:	461a      	mov	r2, r3
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	4807      	ldr	r0, [pc, #28]	; (80066b4 <CDC_Receive_FS+0x44>)
 8006696:	f000 fdd1 	bl	800723c <memcpy>
  memset (Buf,'\0', len);
 800669a:	7bfb      	ldrb	r3, [r7, #15]
 800669c:	461a      	mov	r2, r3
 800669e:	2100      	movs	r1, #0
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f000 fdd9 	bl	8007258 <memset>

  return (USBD_OK);
 80066a6:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80066a8:	4618      	mov	r0, r3
 80066aa:	3710      	adds	r7, #16
 80066ac:	46bd      	mov	sp, r7
 80066ae:	bd80      	pop	{r7, pc}
 80066b0:	20000460 	.word	0x20000460
 80066b4:	20000418 	.word	0x20000418

080066b8 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b084      	sub	sp, #16
 80066bc:	af00      	add	r7, sp, #0
 80066be:	6078      	str	r0, [r7, #4]
 80066c0:	460b      	mov	r3, r1
 80066c2:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80066c4:	2300      	movs	r3, #0
 80066c6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80066c8:	4b0d      	ldr	r3, [pc, #52]	; (8006700 <CDC_Transmit_FS+0x48>)
 80066ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80066ce:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d001      	beq.n	80066de <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80066da:	2301      	movs	r3, #1
 80066dc:	e00b      	b.n	80066f6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80066de:	887b      	ldrh	r3, [r7, #2]
 80066e0:	461a      	mov	r2, r3
 80066e2:	6879      	ldr	r1, [r7, #4]
 80066e4:	4806      	ldr	r0, [pc, #24]	; (8006700 <CDC_Transmit_FS+0x48>)
 80066e6:	f7fe fcf4 	bl	80050d2 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80066ea:	4805      	ldr	r0, [pc, #20]	; (8006700 <CDC_Transmit_FS+0x48>)
 80066ec:	f7fe fd28 	bl	8005140 <USBD_CDC_TransmitPacket>
 80066f0:	4603      	mov	r3, r0
 80066f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80066f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3710      	adds	r7, #16
 80066fa:	46bd      	mov	sp, r7
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	20000460 	.word	0x20000460

08006704 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006704:	b480      	push	{r7}
 8006706:	b087      	sub	sp, #28
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	4613      	mov	r3, r2
 8006710:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8006712:	2300      	movs	r3, #0
 8006714:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8006716:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800671a:	4618      	mov	r0, r3
 800671c:	371c      	adds	r7, #28
 800671e:	46bd      	mov	sp, r7
 8006720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006724:	4770      	bx	lr
	...

08006728 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006728:	b480      	push	{r7}
 800672a:	b083      	sub	sp, #12
 800672c:	af00      	add	r7, sp, #0
 800672e:	4603      	mov	r3, r0
 8006730:	6039      	str	r1, [r7, #0]
 8006732:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	2212      	movs	r2, #18
 8006738:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800673a:	4b03      	ldr	r3, [pc, #12]	; (8006748 <USBD_FS_DeviceDescriptor+0x20>)
}
 800673c:	4618      	mov	r0, r3
 800673e:	370c      	adds	r7, #12
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	20000150 	.word	0x20000150

0800674c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800674c:	b480      	push	{r7}
 800674e:	b083      	sub	sp, #12
 8006750:	af00      	add	r7, sp, #0
 8006752:	4603      	mov	r3, r0
 8006754:	6039      	str	r1, [r7, #0]
 8006756:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006758:	683b      	ldr	r3, [r7, #0]
 800675a:	2204      	movs	r2, #4
 800675c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800675e:	4b03      	ldr	r3, [pc, #12]	; (800676c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	20000170 	.word	0x20000170

08006770 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	4603      	mov	r3, r0
 8006778:	6039      	str	r1, [r7, #0]
 800677a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800677c:	79fb      	ldrb	r3, [r7, #7]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d105      	bne.n	800678e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006782:	683a      	ldr	r2, [r7, #0]
 8006784:	4907      	ldr	r1, [pc, #28]	; (80067a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006786:	4808      	ldr	r0, [pc, #32]	; (80067a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006788:	f7ff fde7 	bl	800635a <USBD_GetString>
 800678c:	e004      	b.n	8006798 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800678e:	683a      	ldr	r2, [r7, #0]
 8006790:	4904      	ldr	r1, [pc, #16]	; (80067a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8006792:	4805      	ldr	r0, [pc, #20]	; (80067a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8006794:	f7ff fde1 	bl	800635a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006798:	4b02      	ldr	r3, [pc, #8]	; (80067a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800679a:	4618      	mov	r0, r3
 800679c:	3708      	adds	r7, #8
 800679e:	46bd      	mov	sp, r7
 80067a0:	bd80      	pop	{r7, pc}
 80067a2:	bf00      	nop
 80067a4:	20001730 	.word	0x20001730
 80067a8:	08007308 	.word	0x08007308

080067ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	4603      	mov	r3, r0
 80067b4:	6039      	str	r1, [r7, #0]
 80067b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80067b8:	683a      	ldr	r2, [r7, #0]
 80067ba:	4904      	ldr	r1, [pc, #16]	; (80067cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80067bc:	4804      	ldr	r0, [pc, #16]	; (80067d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80067be:	f7ff fdcc 	bl	800635a <USBD_GetString>
  return USBD_StrDesc;
 80067c2:	4b02      	ldr	r3, [pc, #8]	; (80067cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80067c4:	4618      	mov	r0, r3
 80067c6:	3708      	adds	r7, #8
 80067c8:	46bd      	mov	sp, r7
 80067ca:	bd80      	pop	{r7, pc}
 80067cc:	20001730 	.word	0x20001730
 80067d0:	08007320 	.word	0x08007320

080067d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b082      	sub	sp, #8
 80067d8:	af00      	add	r7, sp, #0
 80067da:	4603      	mov	r3, r0
 80067dc:	6039      	str	r1, [r7, #0]
 80067de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	221a      	movs	r2, #26
 80067e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80067e6:	f000 f855 	bl	8006894 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80067ea:	4b02      	ldr	r3, [pc, #8]	; (80067f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	3708      	adds	r7, #8
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20000174 	.word	0x20000174

080067f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b082      	sub	sp, #8
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	4603      	mov	r3, r0
 8006800:	6039      	str	r1, [r7, #0]
 8006802:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006804:	79fb      	ldrb	r3, [r7, #7]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d105      	bne.n	8006816 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	4907      	ldr	r1, [pc, #28]	; (800682c <USBD_FS_ConfigStrDescriptor+0x34>)
 800680e:	4808      	ldr	r0, [pc, #32]	; (8006830 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006810:	f7ff fda3 	bl	800635a <USBD_GetString>
 8006814:	e004      	b.n	8006820 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006816:	683a      	ldr	r2, [r7, #0]
 8006818:	4904      	ldr	r1, [pc, #16]	; (800682c <USBD_FS_ConfigStrDescriptor+0x34>)
 800681a:	4805      	ldr	r0, [pc, #20]	; (8006830 <USBD_FS_ConfigStrDescriptor+0x38>)
 800681c:	f7ff fd9d 	bl	800635a <USBD_GetString>
  }
  return USBD_StrDesc;
 8006820:	4b02      	ldr	r3, [pc, #8]	; (800682c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006822:	4618      	mov	r0, r3
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	20001730 	.word	0x20001730
 8006830:	08007334 	.word	0x08007334

08006834 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006834:	b580      	push	{r7, lr}
 8006836:	b082      	sub	sp, #8
 8006838:	af00      	add	r7, sp, #0
 800683a:	4603      	mov	r3, r0
 800683c:	6039      	str	r1, [r7, #0]
 800683e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006840:	79fb      	ldrb	r3, [r7, #7]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d105      	bne.n	8006852 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	4907      	ldr	r1, [pc, #28]	; (8006868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800684a:	4808      	ldr	r0, [pc, #32]	; (800686c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800684c:	f7ff fd85 	bl	800635a <USBD_GetString>
 8006850:	e004      	b.n	800685c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006852:	683a      	ldr	r2, [r7, #0]
 8006854:	4904      	ldr	r1, [pc, #16]	; (8006868 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006856:	4805      	ldr	r0, [pc, #20]	; (800686c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006858:	f7ff fd7f 	bl	800635a <USBD_GetString>
  }
  return USBD_StrDesc;
 800685c:	4b02      	ldr	r3, [pc, #8]	; (8006868 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20001730 	.word	0x20001730
 800686c:	08007340 	.word	0x08007340

08006870 <USBD_FS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	4603      	mov	r3, r0
 8006878:	6039      	str	r1, [r7, #0]
 800687a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_BOSDesc);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	220c      	movs	r2, #12
 8006880:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_FS_BOSDesc;
 8006882:	4b03      	ldr	r3, [pc, #12]	; (8006890 <USBD_FS_USR_BOSDescriptor+0x20>)
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	20000164 	.word	0x20000164

08006894 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800689a:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <Get_SerialNum+0x44>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80068a0:	4b0e      	ldr	r3, [pc, #56]	; (80068dc <Get_SerialNum+0x48>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80068a6:	4b0e      	ldr	r3, [pc, #56]	; (80068e0 <Get_SerialNum+0x4c>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80068ac:	68fa      	ldr	r2, [r7, #12]
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4413      	add	r3, r2
 80068b2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d009      	beq.n	80068ce <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80068ba:	2208      	movs	r2, #8
 80068bc:	4909      	ldr	r1, [pc, #36]	; (80068e4 <Get_SerialNum+0x50>)
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f000 f814 	bl	80068ec <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80068c4:	2204      	movs	r2, #4
 80068c6:	4908      	ldr	r1, [pc, #32]	; (80068e8 <Get_SerialNum+0x54>)
 80068c8:	68b8      	ldr	r0, [r7, #8]
 80068ca:	f000 f80f 	bl	80068ec <IntToUnicode>
  }
}
 80068ce:	bf00      	nop
 80068d0:	3710      	adds	r7, #16
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
 80068d6:	bf00      	nop
 80068d8:	1fff7590 	.word	0x1fff7590
 80068dc:	1fff7594 	.word	0x1fff7594
 80068e0:	1fff7598 	.word	0x1fff7598
 80068e4:	20000176 	.word	0x20000176
 80068e8:	20000186 	.word	0x20000186

080068ec <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80068ec:	b480      	push	{r7}
 80068ee:	b087      	sub	sp, #28
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	60f8      	str	r0, [r7, #12]
 80068f4:	60b9      	str	r1, [r7, #8]
 80068f6:	4613      	mov	r3, r2
 80068f8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80068fa:	2300      	movs	r3, #0
 80068fc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80068fe:	2300      	movs	r3, #0
 8006900:	75fb      	strb	r3, [r7, #23]
 8006902:	e027      	b.n	8006954 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	0f1b      	lsrs	r3, r3, #28
 8006908:	2b09      	cmp	r3, #9
 800690a:	d80b      	bhi.n	8006924 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	0f1b      	lsrs	r3, r3, #28
 8006910:	b2da      	uxtb	r2, r3
 8006912:	7dfb      	ldrb	r3, [r7, #23]
 8006914:	005b      	lsls	r3, r3, #1
 8006916:	4619      	mov	r1, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	440b      	add	r3, r1
 800691c:	3230      	adds	r2, #48	; 0x30
 800691e:	b2d2      	uxtb	r2, r2
 8006920:	701a      	strb	r2, [r3, #0]
 8006922:	e00a      	b.n	800693a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	0f1b      	lsrs	r3, r3, #28
 8006928:	b2da      	uxtb	r2, r3
 800692a:	7dfb      	ldrb	r3, [r7, #23]
 800692c:	005b      	lsls	r3, r3, #1
 800692e:	4619      	mov	r1, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	440b      	add	r3, r1
 8006934:	3237      	adds	r2, #55	; 0x37
 8006936:	b2d2      	uxtb	r2, r2
 8006938:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	011b      	lsls	r3, r3, #4
 800693e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006940:	7dfb      	ldrb	r3, [r7, #23]
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	3301      	adds	r3, #1
 8006946:	68ba      	ldr	r2, [r7, #8]
 8006948:	4413      	add	r3, r2
 800694a:	2200      	movs	r2, #0
 800694c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800694e:	7dfb      	ldrb	r3, [r7, #23]
 8006950:	3301      	adds	r3, #1
 8006952:	75fb      	strb	r3, [r7, #23]
 8006954:	7dfa      	ldrb	r2, [r7, #23]
 8006956:	79fb      	ldrb	r3, [r7, #7]
 8006958:	429a      	cmp	r2, r3
 800695a:	d3d3      	bcc.n	8006904 <IntToUnicode+0x18>
  }
}
 800695c:	bf00      	nop
 800695e:	bf00      	nop
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
	...

0800696c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800696c:	b580      	push	{r7, lr}
 800696e:	b0ae      	sub	sp, #184	; 0xb8
 8006970:	af00      	add	r7, sp, #0
 8006972:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006974:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]
 800697c:	605a      	str	r2, [r3, #4]
 800697e:	609a      	str	r2, [r3, #8]
 8006980:	60da      	str	r2, [r3, #12]
 8006982:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006984:	f107 0318 	add.w	r3, r7, #24
 8006988:	228c      	movs	r2, #140	; 0x8c
 800698a:	2100      	movs	r1, #0
 800698c:	4618      	mov	r0, r3
 800698e:	f000 fc63 	bl	8007258 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800699a:	d173      	bne.n	8006a84 <HAL_PCD_MspInit+0x118>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800699c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80069a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80069a2:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80069a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80069aa:	2301      	movs	r3, #1
 80069ac:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80069ae:	2301      	movs	r3, #1
 80069b0:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80069b2:	2318      	movs	r3, #24
 80069b4:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 80069b6:	2302      	movs	r3, #2
 80069b8:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80069ba:	2302      	movs	r3, #2
 80069bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80069be:	2302      	movs	r3, #2
 80069c0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80069c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80069c6:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80069c8:	f107 0318 	add.w	r3, r7, #24
 80069cc:	4618      	mov	r0, r3
 80069ce:	f7fc f98d 	bl	8002cec <HAL_RCCEx_PeriphCLKConfig>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <HAL_PCD_MspInit+0x70>
    {
      Error_Handler();
 80069d8:	f7f9 fe59 	bl	800068e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069dc:	4b2b      	ldr	r3, [pc, #172]	; (8006a8c <HAL_PCD_MspInit+0x120>)
 80069de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069e0:	4a2a      	ldr	r2, [pc, #168]	; (8006a8c <HAL_PCD_MspInit+0x120>)
 80069e2:	f043 0301 	orr.w	r3, r3, #1
 80069e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80069e8:	4b28      	ldr	r3, [pc, #160]	; (8006a8c <HAL_PCD_MspInit+0x120>)
 80069ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80069ec:	f003 0301 	and.w	r3, r3, #1
 80069f0:	617b      	str	r3, [r7, #20]
 80069f2:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80069f4:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80069f8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80069fc:	2302      	movs	r3, #2
 80069fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006a0e:	230a      	movs	r3, #10
 8006a10:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a14:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8006a18:	4619      	mov	r1, r3
 8006a1a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006a1e:	f7fa f881 	bl	8000b24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006a22:	4b1a      	ldr	r3, [pc, #104]	; (8006a8c <HAL_PCD_MspInit+0x120>)
 8006a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a26:	4a19      	ldr	r2, [pc, #100]	; (8006a8c <HAL_PCD_MspInit+0x120>)
 8006a28:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006a2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006a2e:	4b17      	ldr	r3, [pc, #92]	; (8006a8c <HAL_PCD_MspInit+0x120>)
 8006a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a32:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006a36:	613b      	str	r3, [r7, #16]
 8006a38:	693b      	ldr	r3, [r7, #16]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a3a:	4b14      	ldr	r3, [pc, #80]	; (8006a8c <HAL_PCD_MspInit+0x120>)
 8006a3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d114      	bne.n	8006a70 <HAL_PCD_MspInit+0x104>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a46:	4b11      	ldr	r3, [pc, #68]	; (8006a8c <HAL_PCD_MspInit+0x120>)
 8006a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a4a:	4a10      	ldr	r2, [pc, #64]	; (8006a8c <HAL_PCD_MspInit+0x120>)
 8006a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a50:	6593      	str	r3, [r2, #88]	; 0x58
 8006a52:	4b0e      	ldr	r3, [pc, #56]	; (8006a8c <HAL_PCD_MspInit+0x120>)
 8006a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a5a:	60fb      	str	r3, [r7, #12]
 8006a5c:	68fb      	ldr	r3, [r7, #12]
      HAL_PWREx_EnableVddUSB();
 8006a5e:	f7fb fb35 	bl	80020cc <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a62:	4b0a      	ldr	r3, [pc, #40]	; (8006a8c <HAL_PCD_MspInit+0x120>)
 8006a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006a66:	4a09      	ldr	r2, [pc, #36]	; (8006a8c <HAL_PCD_MspInit+0x120>)
 8006a68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a6c:	6593      	str	r3, [r2, #88]	; 0x58
 8006a6e:	e001      	b.n	8006a74 <HAL_PCD_MspInit+0x108>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 8006a70:	f7fb fb2c 	bl	80020cc <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006a74:	2200      	movs	r2, #0
 8006a76:	2100      	movs	r1, #0
 8006a78:	2043      	movs	r0, #67	; 0x43
 8006a7a:	f7fa f81c 	bl	8000ab6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006a7e:	2043      	movs	r0, #67	; 0x43
 8006a80:	f7fa f835 	bl	8000aee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006a84:	bf00      	nop
 8006a86:	37b8      	adds	r7, #184	; 0xb8
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	bd80      	pop	{r7, pc}
 8006a8c:	40021000 	.word	0x40021000

08006a90 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006a90:	b580      	push	{r7, lr}
 8006a92:	b082      	sub	sp, #8
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	; 0x404
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	f503 7371 	add.w	r3, r3, #964	; 0x3c4
 8006aa4:	4619      	mov	r1, r3
 8006aa6:	4610      	mov	r0, r2
 8006aa8:	f7fe fc46 	bl	8005338 <USBD_LL_SetupStage>
}
 8006aac:	bf00      	nop
 8006aae:	3708      	adds	r7, #8
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bd80      	pop	{r7, pc}

08006ab4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b082      	sub	sp, #8
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
 8006abc:	460b      	mov	r3, r1
 8006abe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006ac6:	78fa      	ldrb	r2, [r7, #3]
 8006ac8:	6879      	ldr	r1, [r7, #4]
 8006aca:	4613      	mov	r3, r2
 8006acc:	00db      	lsls	r3, r3, #3
 8006ace:	1a9b      	subs	r3, r3, r2
 8006ad0:	009b      	lsls	r3, r3, #2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8006ad8:	681a      	ldr	r2, [r3, #0]
 8006ada:	78fb      	ldrb	r3, [r7, #3]
 8006adc:	4619      	mov	r1, r3
 8006ade:	f7fe fc80 	bl	80053e2 <USBD_LL_DataOutStage>
}
 8006ae2:	bf00      	nop
 8006ae4:	3708      	adds	r7, #8
 8006ae6:	46bd      	mov	sp, r7
 8006ae8:	bd80      	pop	{r7, pc}

08006aea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006aea:	b580      	push	{r7, lr}
 8006aec:	b082      	sub	sp, #8
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	460b      	mov	r3, r1
 8006af4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
 8006afc:	78fa      	ldrb	r2, [r7, #3]
 8006afe:	6879      	ldr	r1, [r7, #4]
 8006b00:	4613      	mov	r3, r2
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	1a9b      	subs	r3, r3, r2
 8006b06:	009b      	lsls	r3, r3, #2
 8006b08:	440b      	add	r3, r1
 8006b0a:	3348      	adds	r3, #72	; 0x48
 8006b0c:	681a      	ldr	r2, [r3, #0]
 8006b0e:	78fb      	ldrb	r3, [r7, #3]
 8006b10:	4619      	mov	r1, r3
 8006b12:	f7fe fcc9 	bl	80054a8 <USBD_LL_DataInStage>
}
 8006b16:	bf00      	nop
 8006b18:	3708      	adds	r7, #8
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	bd80      	pop	{r7, pc}

08006b1e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b1e:	b580      	push	{r7, lr}
 8006b20:	b082      	sub	sp, #8
 8006b22:	af00      	add	r7, sp, #0
 8006b24:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fe fddd 	bl	80056ec <USBD_LL_SOF>
}
 8006b32:	bf00      	nop
 8006b34:	3708      	adds	r7, #8
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}

08006b3a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b3a:	b580      	push	{r7, lr}
 8006b3c:	b084      	sub	sp, #16
 8006b3e:	af00      	add	r7, sp, #0
 8006b40:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006b42:	2301      	movs	r3, #1
 8006b44:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	2b02      	cmp	r3, #2
 8006b4c:	d001      	beq.n	8006b52 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006b4e:	f7f9 fd9e 	bl	800068e <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b58:	7bfa      	ldrb	r2, [r7, #15]
 8006b5a:	4611      	mov	r1, r2
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe fd87 	bl	8005670 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b68:	4618      	mov	r0, r3
 8006b6a:	f7fe fd33 	bl	80055d4 <USBD_LL_Reset>
}
 8006b6e:	bf00      	nop
 8006b70:	3710      	adds	r7, #16
 8006b72:	46bd      	mov	sp, r7
 8006b74:	bd80      	pop	{r7, pc}
	...

08006b78 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b082      	sub	sp, #8
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	6812      	ldr	r2, [r2, #0]
 8006b8e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006b92:	f043 0301 	orr.w	r3, r3, #1
 8006b96:	6013      	str	r3, [r2, #0]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f7fe fd76 	bl	8005690 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6a1b      	ldr	r3, [r3, #32]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d005      	beq.n	8006bb8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006bac:	4b04      	ldr	r3, [pc, #16]	; (8006bc0 <HAL_PCD_SuspendCallback+0x48>)
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	4a03      	ldr	r2, [pc, #12]	; (8006bc0 <HAL_PCD_SuspendCallback+0x48>)
 8006bb2:	f043 0306 	orr.w	r3, r3, #6
 8006bb6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	e000ed00 	.word	0xe000ed00

08006bc4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b082      	sub	sp, #8
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	6078      	str	r0, [r7, #4]
  __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6812      	ldr	r2, [r2, #0]
 8006bda:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006bde:	f023 0301 	bic.w	r3, r3, #1
 8006be2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	6a1b      	ldr	r3, [r3, #32]
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d007      	beq.n	8006bfc <HAL_PCD_ResumeCallback+0x38>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006bec:	4b08      	ldr	r3, [pc, #32]	; (8006c10 <HAL_PCD_ResumeCallback+0x4c>)
 8006bee:	691b      	ldr	r3, [r3, #16]
 8006bf0:	4a07      	ldr	r2, [pc, #28]	; (8006c10 <HAL_PCD_ResumeCallback+0x4c>)
 8006bf2:	f023 0306 	bic.w	r3, r3, #6
 8006bf6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8006bf8:	f000 faf6 	bl	80071e8 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c02:	4618      	mov	r0, r3
 8006c04:	f7fe fd5a 	bl	80056bc <USBD_LL_Resume>
}
 8006c08:	bf00      	nop
 8006c0a:	3708      	adds	r7, #8
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	e000ed00 	.word	0xe000ed00

08006c14 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	460b      	mov	r3, r1
 8006c1e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c26:	78fa      	ldrb	r2, [r7, #3]
 8006c28:	4611      	mov	r1, r2
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	f7fe fda6 	bl	800577c <USBD_LL_IsoOUTIncomplete>
}
 8006c30:	bf00      	nop
 8006c32:	3708      	adds	r7, #8
 8006c34:	46bd      	mov	sp, r7
 8006c36:	bd80      	pop	{r7, pc}

08006c38 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b082      	sub	sp, #8
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	460b      	mov	r3, r1
 8006c42:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c4a:	78fa      	ldrb	r2, [r7, #3]
 8006c4c:	4611      	mov	r1, r2
 8006c4e:	4618      	mov	r0, r3
 8006c50:	f7fe fd6e 	bl	8005730 <USBD_LL_IsoINIncomplete>
}
 8006c54:	bf00      	nop
 8006c56:	3708      	adds	r7, #8
 8006c58:	46bd      	mov	sp, r7
 8006c5a:	bd80      	pop	{r7, pc}

08006c5c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b082      	sub	sp, #8
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f7fe fdac 	bl	80057c8 <USBD_LL_DevConnected>
}
 8006c70:	bf00      	nop
 8006c72:	3708      	adds	r7, #8
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}

08006c78 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b082      	sub	sp, #8
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8006c86:	4618      	mov	r0, r3
 8006c88:	f7fe fda9 	bl	80057de <USBD_LL_DevDisconnected>
}
 8006c8c:	bf00      	nop
 8006c8e:	3708      	adds	r7, #8
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	781b      	ldrb	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d13c      	bne.n	8006d1e <USBD_LL_Init+0x8a>
  /* Enable USB power on Pwrctrl CR2 register. */
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006ca4:	4a20      	ldr	r2, [pc, #128]	; (8006d28 <USBD_LL_Init+0x94>)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8c2 3404 	str.w	r3, [r2, #1028]	; 0x404
  pdev->pData = &hpcd_USB_OTG_FS;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	4a1e      	ldr	r2, [pc, #120]	; (8006d28 <USBD_LL_Init+0x94>)
 8006cb0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006cb4:	4b1c      	ldr	r3, [pc, #112]	; (8006d28 <USBD_LL_Init+0x94>)
 8006cb6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006cba:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8006cbc:	4b1a      	ldr	r3, [pc, #104]	; (8006d28 <USBD_LL_Init+0x94>)
 8006cbe:	2206      	movs	r2, #6
 8006cc0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006cc2:	4b19      	ldr	r3, [pc, #100]	; (8006d28 <USBD_LL_Init+0x94>)
 8006cc4:	2202      	movs	r2, #2
 8006cc6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006cc8:	4b17      	ldr	r3, [pc, #92]	; (8006d28 <USBD_LL_Init+0x94>)
 8006cca:	2202      	movs	r2, #2
 8006ccc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006cce:	4b16      	ldr	r3, [pc, #88]	; (8006d28 <USBD_LL_Init+0x94>)
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006cd4:	4b14      	ldr	r3, [pc, #80]	; (8006d28 <USBD_LL_Init+0x94>)
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006cda:	4b13      	ldr	r3, [pc, #76]	; (8006d28 <USBD_LL_Init+0x94>)
 8006cdc:	2200      	movs	r2, #0
 8006cde:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8006ce0:	4b11      	ldr	r3, [pc, #68]	; (8006d28 <USBD_LL_Init+0x94>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006ce6:	4b10      	ldr	r3, [pc, #64]	; (8006d28 <USBD_LL_Init+0x94>)
 8006ce8:	2200      	movs	r2, #0
 8006cea:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006cec:	4b0e      	ldr	r3, [pc, #56]	; (8006d28 <USBD_LL_Init+0x94>)
 8006cee:	2200      	movs	r2, #0
 8006cf0:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006cf2:	480d      	ldr	r0, [pc, #52]	; (8006d28 <USBD_LL_Init+0x94>)
 8006cf4:	f7fa f8f2 	bl	8000edc <HAL_PCD_Init>
 8006cf8:	4603      	mov	r3, r0
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d001      	beq.n	8006d02 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006cfe:	f7f9 fcc6 	bl	800068e <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d02:	2180      	movs	r1, #128	; 0x80
 8006d04:	4808      	ldr	r0, [pc, #32]	; (8006d28 <USBD_LL_Init+0x94>)
 8006d06:	f7fb f948 	bl	8001f9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d0a:	2240      	movs	r2, #64	; 0x40
 8006d0c:	2100      	movs	r1, #0
 8006d0e:	4806      	ldr	r0, [pc, #24]	; (8006d28 <USBD_LL_Init+0x94>)
 8006d10:	f7fb f8fc 	bl	8001f0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d14:	2280      	movs	r2, #128	; 0x80
 8006d16:	2101      	movs	r1, #1
 8006d18:	4803      	ldr	r0, [pc, #12]	; (8006d28 <USBD_LL_Init+0x94>)
 8006d1a:	f7fb f8f7 	bl	8001f0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d1e:	2300      	movs	r3, #0
}
 8006d20:	4618      	mov	r0, r3
 8006d22:	3708      	adds	r7, #8
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	20001930 	.word	0x20001930

08006d2c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b084      	sub	sp, #16
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d34:	2300      	movs	r3, #0
 8006d36:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fa f9ee 	bl	8001124 <HAL_PCD_Start>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006d4c:	7bbb      	ldrb	r3, [r7, #14]
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d816      	bhi.n	8006d80 <USBD_LL_Start+0x54>
 8006d52:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <USBD_LL_Start+0x2c>)
 8006d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d58:	08006d69 	.word	0x08006d69
 8006d5c:	08006d6f 	.word	0x08006d6f
 8006d60:	08006d75 	.word	0x08006d75
 8006d64:	08006d7b 	.word	0x08006d7b
    case HAL_OK :
      usb_status = USBD_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006d6c:	e00b      	b.n	8006d86 <USBD_LL_Start+0x5a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	73fb      	strb	r3, [r7, #15]
    break;
 8006d72:	e008      	b.n	8006d86 <USBD_LL_Start+0x5a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006d74:	2301      	movs	r3, #1
 8006d76:	73fb      	strb	r3, [r7, #15]
    break;
 8006d78:	e005      	b.n	8006d86 <USBD_LL_Start+0x5a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	73fb      	strb	r3, [r7, #15]
    break;
 8006d7e:	e002      	b.n	8006d86 <USBD_LL_Start+0x5a>
    default :
      usb_status = USBD_FAIL;
 8006d80:	2303      	movs	r3, #3
 8006d82:	73fb      	strb	r3, [r7, #15]
    break;
 8006d84:	bf00      	nop
  }
  return usb_status;
 8006d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d88:	4618      	mov	r0, r3
 8006d8a:	3710      	adds	r7, #16
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}

08006d90 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b084      	sub	sp, #16
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	4608      	mov	r0, r1
 8006d9a:	4611      	mov	r1, r2
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	4603      	mov	r3, r0
 8006da0:	70fb      	strb	r3, [r7, #3]
 8006da2:	460b      	mov	r3, r1
 8006da4:	70bb      	strb	r3, [r7, #2]
 8006da6:	4613      	mov	r3, r2
 8006da8:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006daa:	2300      	movs	r3, #0
 8006dac:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006dae:	2300      	movs	r3, #0
 8006db0:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8006db8:	78bb      	ldrb	r3, [r7, #2]
 8006dba:	883a      	ldrh	r2, [r7, #0]
 8006dbc:	78f9      	ldrb	r1, [r7, #3]
 8006dbe:	f7fa fd9e 	bl	80018fe <HAL_PCD_EP_Open>
 8006dc2:	4603      	mov	r3, r0
 8006dc4:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006dc6:	7bbb      	ldrb	r3, [r7, #14]
 8006dc8:	2b03      	cmp	r3, #3
 8006dca:	d817      	bhi.n	8006dfc <USBD_LL_OpenEP+0x6c>
 8006dcc:	a201      	add	r2, pc, #4	; (adr r2, 8006dd4 <USBD_LL_OpenEP+0x44>)
 8006dce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dd2:	bf00      	nop
 8006dd4:	08006de5 	.word	0x08006de5
 8006dd8:	08006deb 	.word	0x08006deb
 8006ddc:	08006df1 	.word	0x08006df1
 8006de0:	08006df7 	.word	0x08006df7
    case HAL_OK :
      usb_status = USBD_OK;
 8006de4:	2300      	movs	r3, #0
 8006de6:	73fb      	strb	r3, [r7, #15]
    break;
 8006de8:	e00b      	b.n	8006e02 <USBD_LL_OpenEP+0x72>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006dea:	2303      	movs	r3, #3
 8006dec:	73fb      	strb	r3, [r7, #15]
    break;
 8006dee:	e008      	b.n	8006e02 <USBD_LL_OpenEP+0x72>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006df0:	2301      	movs	r3, #1
 8006df2:	73fb      	strb	r3, [r7, #15]
    break;
 8006df4:	e005      	b.n	8006e02 <USBD_LL_OpenEP+0x72>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006df6:	2303      	movs	r3, #3
 8006df8:	73fb      	strb	r3, [r7, #15]
    break;
 8006dfa:	e002      	b.n	8006e02 <USBD_LL_OpenEP+0x72>
    default :
      usb_status = USBD_FAIL;
 8006dfc:	2303      	movs	r3, #3
 8006dfe:	73fb      	strb	r3, [r7, #15]
    break;
 8006e00:	bf00      	nop
  }
  return usb_status;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e04:	4618      	mov	r0, r3
 8006e06:	3710      	adds	r7, #16
 8006e08:	46bd      	mov	sp, r7
 8006e0a:	bd80      	pop	{r7, pc}

08006e0c <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e0c:	b580      	push	{r7, lr}
 8006e0e:	b084      	sub	sp, #16
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
 8006e14:	460b      	mov	r3, r1
 8006e16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e26:	78fa      	ldrb	r2, [r7, #3]
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	f7fa fdcf 	bl	80019ce <HAL_PCD_EP_Close>
 8006e30:	4603      	mov	r3, r0
 8006e32:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	2b03      	cmp	r3, #3
 8006e38:	d816      	bhi.n	8006e68 <USBD_LL_CloseEP+0x5c>
 8006e3a:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <USBD_LL_CloseEP+0x34>)
 8006e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e40:	08006e51 	.word	0x08006e51
 8006e44:	08006e57 	.word	0x08006e57
 8006e48:	08006e5d 	.word	0x08006e5d
 8006e4c:	08006e63 	.word	0x08006e63
    case HAL_OK :
      usb_status = USBD_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]
    break;
 8006e54:	e00b      	b.n	8006e6e <USBD_LL_CloseEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006e56:	2303      	movs	r3, #3
 8006e58:	73fb      	strb	r3, [r7, #15]
    break;
 8006e5a:	e008      	b.n	8006e6e <USBD_LL_CloseEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	73fb      	strb	r3, [r7, #15]
    break;
 8006e60:	e005      	b.n	8006e6e <USBD_LL_CloseEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006e62:	2303      	movs	r3, #3
 8006e64:	73fb      	strb	r3, [r7, #15]
    break;
 8006e66:	e002      	b.n	8006e6e <USBD_LL_CloseEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006e68:	2303      	movs	r3, #3
 8006e6a:	73fb      	strb	r3, [r7, #15]
    break;
 8006e6c:	bf00      	nop
  }
  return usb_status;
 8006e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e70:	4618      	mov	r0, r3
 8006e72:	3710      	adds	r7, #16
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}

08006e78 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e78:	b580      	push	{r7, lr}
 8006e7a:	b084      	sub	sp, #16
 8006e7c:	af00      	add	r7, sp, #0
 8006e7e:	6078      	str	r0, [r7, #4]
 8006e80:	460b      	mov	r3, r1
 8006e82:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e84:	2300      	movs	r3, #0
 8006e86:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006e92:	78fa      	ldrb	r2, [r7, #3]
 8006e94:	4611      	mov	r1, r2
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fa fe76 	bl	8001b88 <HAL_PCD_EP_SetStall>
 8006e9c:	4603      	mov	r3, r0
 8006e9e:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006ea0:	7bbb      	ldrb	r3, [r7, #14]
 8006ea2:	2b03      	cmp	r3, #3
 8006ea4:	d816      	bhi.n	8006ed4 <USBD_LL_StallEP+0x5c>
 8006ea6:	a201      	add	r2, pc, #4	; (adr r2, 8006eac <USBD_LL_StallEP+0x34>)
 8006ea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006eac:	08006ebd 	.word	0x08006ebd
 8006eb0:	08006ec3 	.word	0x08006ec3
 8006eb4:	08006ec9 	.word	0x08006ec9
 8006eb8:	08006ecf 	.word	0x08006ecf
    case HAL_OK :
      usb_status = USBD_OK;
 8006ebc:	2300      	movs	r3, #0
 8006ebe:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec0:	e00b      	b.n	8006eda <USBD_LL_StallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ec2:	2303      	movs	r3, #3
 8006ec4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ec6:	e008      	b.n	8006eda <USBD_LL_StallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ec8:	2301      	movs	r3, #1
 8006eca:	73fb      	strb	r3, [r7, #15]
    break;
 8006ecc:	e005      	b.n	8006eda <USBD_LL_StallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	73fb      	strb	r3, [r7, #15]
    break;
 8006ed2:	e002      	b.n	8006eda <USBD_LL_StallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006ed4:	2303      	movs	r3, #3
 8006ed6:	73fb      	strb	r3, [r7, #15]
    break;
 8006ed8:	bf00      	nop
  }
  return usb_status;
 8006eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3710      	adds	r7, #16
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}

08006ee4 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	460b      	mov	r3, r1
 8006eee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006efe:	78fa      	ldrb	r2, [r7, #3]
 8006f00:	4611      	mov	r1, r2
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7fa fea2 	bl	8001c4c <HAL_PCD_EP_ClrStall>
 8006f08:	4603      	mov	r3, r0
 8006f0a:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006f0c:	7bbb      	ldrb	r3, [r7, #14]
 8006f0e:	2b03      	cmp	r3, #3
 8006f10:	d816      	bhi.n	8006f40 <USBD_LL_ClearStallEP+0x5c>
 8006f12:	a201      	add	r2, pc, #4	; (adr r2, 8006f18 <USBD_LL_ClearStallEP+0x34>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006f29 	.word	0x08006f29
 8006f1c:	08006f2f 	.word	0x08006f2f
 8006f20:	08006f35 	.word	0x08006f35
 8006f24:	08006f3b 	.word	0x08006f3b
    case HAL_OK :
      usb_status = USBD_OK;
 8006f28:	2300      	movs	r3, #0
 8006f2a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f2c:	e00b      	b.n	8006f46 <USBD_LL_ClearStallEP+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006f2e:	2303      	movs	r3, #3
 8006f30:	73fb      	strb	r3, [r7, #15]
    break;
 8006f32:	e008      	b.n	8006f46 <USBD_LL_ClearStallEP+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006f34:	2301      	movs	r3, #1
 8006f36:	73fb      	strb	r3, [r7, #15]
    break;
 8006f38:	e005      	b.n	8006f46 <USBD_LL_ClearStallEP+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006f3a:	2303      	movs	r3, #3
 8006f3c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f3e:	e002      	b.n	8006f46 <USBD_LL_ClearStallEP+0x62>
    default :
      usb_status = USBD_FAIL;
 8006f40:	2303      	movs	r3, #3
 8006f42:	73fb      	strb	r3, [r7, #15]
    break;
 8006f44:	bf00      	nop
  }
  return usb_status;
 8006f46:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3710      	adds	r7, #16
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006f62:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f64:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	da0b      	bge.n	8006f84 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f72:	68f9      	ldr	r1, [r7, #12]
 8006f74:	4613      	mov	r3, r2
 8006f76:	00db      	lsls	r3, r3, #3
 8006f78:	1a9b      	subs	r3, r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	440b      	add	r3, r1
 8006f7e:	333e      	adds	r3, #62	; 0x3e
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	e00b      	b.n	8006f9c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f84:	78fb      	ldrb	r3, [r7, #3]
 8006f86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f8a:	68f9      	ldr	r1, [r7, #12]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	00db      	lsls	r3, r3, #3
 8006f90:	1a9b      	subs	r3, r3, r2
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	440b      	add	r3, r1
 8006f96:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8006f9a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3714      	adds	r7, #20
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa6:	4770      	bx	lr

08006fa8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	b084      	sub	sp, #16
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	460b      	mov	r3, r1
 8006fb2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	73bb      	strb	r3, [r7, #14]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	73fb      	strb	r3, [r7, #15]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8006fc2:	78fa      	ldrb	r2, [r7, #3]
 8006fc4:	4611      	mov	r1, r2
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	f7fa fc74 	bl	80018b4 <HAL_PCD_SetAddress>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	73bb      	strb	r3, [r7, #14]

  switch (hal_status) {
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	2b03      	cmp	r3, #3
 8006fd4:	d816      	bhi.n	8007004 <USBD_LL_SetUSBAddress+0x5c>
 8006fd6:	a201      	add	r2, pc, #4	; (adr r2, 8006fdc <USBD_LL_SetUSBAddress+0x34>)
 8006fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fdc:	08006fed 	.word	0x08006fed
 8006fe0:	08006ff3 	.word	0x08006ff3
 8006fe4:	08006ff9 	.word	0x08006ff9
 8006fe8:	08006fff 	.word	0x08006fff
    case HAL_OK :
      usb_status = USBD_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff0:	e00b      	b.n	800700a <USBD_LL_SetUSBAddress+0x62>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	73fb      	strb	r3, [r7, #15]
    break;
 8006ff6:	e008      	b.n	800700a <USBD_LL_SetUSBAddress+0x62>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	73fb      	strb	r3, [r7, #15]
    break;
 8006ffc:	e005      	b.n	800700a <USBD_LL_SetUSBAddress+0x62>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8006ffe:	2303      	movs	r3, #3
 8007000:	73fb      	strb	r3, [r7, #15]
    break;
 8007002:	e002      	b.n	800700a <USBD_LL_SetUSBAddress+0x62>
    default :
      usb_status = USBD_FAIL;
 8007004:	2303      	movs	r3, #3
 8007006:	73fb      	strb	r3, [r7, #15]
    break;
 8007008:	bf00      	nop
  }
  return usb_status;
 800700a:	7bfb      	ldrb	r3, [r7, #15]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	607a      	str	r2, [r7, #4]
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	460b      	mov	r3, r1
 8007022:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007028:	2300      	movs	r3, #0
 800702a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8007032:	7af9      	ldrb	r1, [r7, #11]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	f7fa fd69 	bl	8001b0e <HAL_PCD_EP_Transmit>
 800703c:	4603      	mov	r3, r0
 800703e:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 8007040:	7dbb      	ldrb	r3, [r7, #22]
 8007042:	2b03      	cmp	r3, #3
 8007044:	d816      	bhi.n	8007074 <USBD_LL_Transmit+0x60>
 8007046:	a201      	add	r2, pc, #4	; (adr r2, 800704c <USBD_LL_Transmit+0x38>)
 8007048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800704c:	0800705d 	.word	0x0800705d
 8007050:	08007063 	.word	0x08007063
 8007054:	08007069 	.word	0x08007069
 8007058:	0800706f 	.word	0x0800706f
    case HAL_OK :
      usb_status = USBD_OK;
 800705c:	2300      	movs	r3, #0
 800705e:	75fb      	strb	r3, [r7, #23]
    break;
 8007060:	e00b      	b.n	800707a <USBD_LL_Transmit+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007062:	2303      	movs	r3, #3
 8007064:	75fb      	strb	r3, [r7, #23]
    break;
 8007066:	e008      	b.n	800707a <USBD_LL_Transmit+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007068:	2301      	movs	r3, #1
 800706a:	75fb      	strb	r3, [r7, #23]
    break;
 800706c:	e005      	b.n	800707a <USBD_LL_Transmit+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800706e:	2303      	movs	r3, #3
 8007070:	75fb      	strb	r3, [r7, #23]
    break;
 8007072:	e002      	b.n	800707a <USBD_LL_Transmit+0x66>
    default :
      usb_status = USBD_FAIL;
 8007074:	2303      	movs	r3, #3
 8007076:	75fb      	strb	r3, [r7, #23]
    break;
 8007078:	bf00      	nop
  }
  return usb_status;
 800707a:	7dfb      	ldrb	r3, [r7, #23]
}
 800707c:	4618      	mov	r0, r3
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}

08007084 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007084:	b580      	push	{r7, lr}
 8007086:	b086      	sub	sp, #24
 8007088:	af00      	add	r7, sp, #0
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	607a      	str	r2, [r7, #4]
 800708e:	603b      	str	r3, [r7, #0]
 8007090:	460b      	mov	r3, r1
 8007092:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007094:	2300      	movs	r3, #0
 8007096:	75bb      	strb	r3, [r7, #22]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007098:	2300      	movs	r3, #0
 800709a:	75fb      	strb	r3, [r7, #23]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 80070a2:	7af9      	ldrb	r1, [r7, #11]
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	687a      	ldr	r2, [r7, #4]
 80070a8:	f7fa fcdb 	bl	8001a62 <HAL_PCD_EP_Receive>
 80070ac:	4603      	mov	r3, r0
 80070ae:	75bb      	strb	r3, [r7, #22]

  switch (hal_status) {
 80070b0:	7dbb      	ldrb	r3, [r7, #22]
 80070b2:	2b03      	cmp	r3, #3
 80070b4:	d816      	bhi.n	80070e4 <USBD_LL_PrepareReceive+0x60>
 80070b6:	a201      	add	r2, pc, #4	; (adr r2, 80070bc <USBD_LL_PrepareReceive+0x38>)
 80070b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070bc:	080070cd 	.word	0x080070cd
 80070c0:	080070d3 	.word	0x080070d3
 80070c4:	080070d9 	.word	0x080070d9
 80070c8:	080070df 	.word	0x080070df
    case HAL_OK :
      usb_status = USBD_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	75fb      	strb	r3, [r7, #23]
    break;
 80070d0:	e00b      	b.n	80070ea <USBD_LL_PrepareReceive+0x66>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070d2:	2303      	movs	r3, #3
 80070d4:	75fb      	strb	r3, [r7, #23]
    break;
 80070d6:	e008      	b.n	80070ea <USBD_LL_PrepareReceive+0x66>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070d8:	2301      	movs	r3, #1
 80070da:	75fb      	strb	r3, [r7, #23]
    break;
 80070dc:	e005      	b.n	80070ea <USBD_LL_PrepareReceive+0x66>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070de:	2303      	movs	r3, #3
 80070e0:	75fb      	strb	r3, [r7, #23]
    break;
 80070e2:	e002      	b.n	80070ea <USBD_LL_PrepareReceive+0x66>
    default :
      usb_status = USBD_FAIL;
 80070e4:	2303      	movs	r3, #3
 80070e6:	75fb      	strb	r3, [r7, #23]
    break;
 80070e8:	bf00      	nop
  }
  return usb_status;
 80070ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80070ec:	4618      	mov	r0, r3
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b082      	sub	sp, #8
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
 80070fc:	460b      	mov	r3, r1
 80070fe:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8007106:	78fa      	ldrb	r2, [r7, #3]
 8007108:	4611      	mov	r1, r2
 800710a:	4618      	mov	r0, r3
 800710c:	f7fa fce7 	bl	8001ade <HAL_PCD_EP_GetRxCount>
 8007110:	4603      	mov	r3, r0
}
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
	...

0800711c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
 8007124:	460b      	mov	r3, r1
 8007126:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8007128:	78fb      	ldrb	r3, [r7, #3]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d002      	beq.n	8007134 <HAL_PCDEx_LPM_Callback+0x18>
 800712e:	2b01      	cmp	r3, #1
 8007130:	d01f      	beq.n	8007172 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8007132:	e03b      	b.n	80071ac <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	6a1b      	ldr	r3, [r3, #32]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d007      	beq.n	800714c <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800713c:	f000 f854 	bl	80071e8 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007140:	4b1c      	ldr	r3, [pc, #112]	; (80071b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8007142:	691b      	ldr	r3, [r3, #16]
 8007144:	4a1b      	ldr	r2, [pc, #108]	; (80071b4 <HAL_PCDEx_LPM_Callback+0x98>)
 8007146:	f023 0306 	bic.w	r3, r3, #6
 800714a:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	687a      	ldr	r2, [r7, #4]
 8007158:	6812      	ldr	r2, [r2, #0]
 800715a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800715e:	f023 0301 	bic.w	r3, r3, #1
 8007162:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe faa6 	bl	80056bc <USBD_LL_Resume>
    break;
 8007170:	e01c      	b.n	80071ac <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	687a      	ldr	r2, [r7, #4]
 800717e:	6812      	ldr	r2, [r2, #0]
 8007180:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007184:	f043 0301 	orr.w	r3, r3, #1
 8007188:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	; 0x404
 8007190:	4618      	mov	r0, r3
 8007192:	f7fe fa7d 	bl	8005690 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6a1b      	ldr	r3, [r3, #32]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d005      	beq.n	80071aa <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800719e:	4b05      	ldr	r3, [pc, #20]	; (80071b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80071a0:	691b      	ldr	r3, [r3, #16]
 80071a2:	4a04      	ldr	r2, [pc, #16]	; (80071b4 <HAL_PCDEx_LPM_Callback+0x98>)
 80071a4:	f043 0306 	orr.w	r3, r3, #6
 80071a8:	6113      	str	r3, [r2, #16]
    break;
 80071aa:	bf00      	nop
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}
 80071b4:	e000ed00 	.word	0xe000ed00

080071b8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80071c0:	4b03      	ldr	r3, [pc, #12]	; (80071d0 <USBD_static_malloc+0x18>)
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	370c      	adds	r7, #12
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	200001f8 	.word	0x200001f8

080071d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80071d4:	b480      	push	{r7}
 80071d6:	b083      	sub	sp, #12
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]

}
 80071dc:	bf00      	nop
 80071de:	370c      	adds	r7, #12
 80071e0:	46bd      	mov	sp, r7
 80071e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e6:	4770      	bx	lr

080071e8 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80071ec:	f7f9 f9f9 	bl	80005e2 <SystemClock_Config>
}
 80071f0:	bf00      	nop
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <__libc_init_array>:
 80071f4:	b570      	push	{r4, r5, r6, lr}
 80071f6:	4d0d      	ldr	r5, [pc, #52]	; (800722c <__libc_init_array+0x38>)
 80071f8:	4c0d      	ldr	r4, [pc, #52]	; (8007230 <__libc_init_array+0x3c>)
 80071fa:	1b64      	subs	r4, r4, r5
 80071fc:	10a4      	asrs	r4, r4, #2
 80071fe:	2600      	movs	r6, #0
 8007200:	42a6      	cmp	r6, r4
 8007202:	d109      	bne.n	8007218 <__libc_init_array+0x24>
 8007204:	4d0b      	ldr	r5, [pc, #44]	; (8007234 <__libc_init_array+0x40>)
 8007206:	4c0c      	ldr	r4, [pc, #48]	; (8007238 <__libc_init_array+0x44>)
 8007208:	f000 f84a 	bl	80072a0 <_init>
 800720c:	1b64      	subs	r4, r4, r5
 800720e:	10a4      	asrs	r4, r4, #2
 8007210:	2600      	movs	r6, #0
 8007212:	42a6      	cmp	r6, r4
 8007214:	d105      	bne.n	8007222 <__libc_init_array+0x2e>
 8007216:	bd70      	pop	{r4, r5, r6, pc}
 8007218:	f855 3b04 	ldr.w	r3, [r5], #4
 800721c:	4798      	blx	r3
 800721e:	3601      	adds	r6, #1
 8007220:	e7ee      	b.n	8007200 <__libc_init_array+0xc>
 8007222:	f855 3b04 	ldr.w	r3, [r5], #4
 8007226:	4798      	blx	r3
 8007228:	3601      	adds	r6, #1
 800722a:	e7f2      	b.n	8007212 <__libc_init_array+0x1e>
 800722c:	08007494 	.word	0x08007494
 8007230:	08007494 	.word	0x08007494
 8007234:	08007494 	.word	0x08007494
 8007238:	08007498 	.word	0x08007498

0800723c <memcpy>:
 800723c:	440a      	add	r2, r1
 800723e:	4291      	cmp	r1, r2
 8007240:	f100 33ff 	add.w	r3, r0, #4294967295
 8007244:	d100      	bne.n	8007248 <memcpy+0xc>
 8007246:	4770      	bx	lr
 8007248:	b510      	push	{r4, lr}
 800724a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800724e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007252:	4291      	cmp	r1, r2
 8007254:	d1f9      	bne.n	800724a <memcpy+0xe>
 8007256:	bd10      	pop	{r4, pc}

08007258 <memset>:
 8007258:	4402      	add	r2, r0
 800725a:	4603      	mov	r3, r0
 800725c:	4293      	cmp	r3, r2
 800725e:	d100      	bne.n	8007262 <memset+0xa>
 8007260:	4770      	bx	lr
 8007262:	f803 1b01 	strb.w	r1, [r3], #1
 8007266:	e7f9      	b.n	800725c <memset+0x4>

08007268 <strcasecmp>:
 8007268:	b570      	push	{r4, r5, r6, lr}
 800726a:	4d0c      	ldr	r5, [pc, #48]	; (800729c <strcasecmp+0x34>)
 800726c:	4604      	mov	r4, r0
 800726e:	462e      	mov	r6, r5
 8007270:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007274:	5d5a      	ldrb	r2, [r3, r5]
 8007276:	f002 0203 	and.w	r2, r2, #3
 800727a:	2a01      	cmp	r2, #1
 800727c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007280:	5cb0      	ldrb	r0, [r6, r2]
 8007282:	f000 0003 	and.w	r0, r0, #3
 8007286:	bf08      	it	eq
 8007288:	3320      	addeq	r3, #32
 800728a:	2801      	cmp	r0, #1
 800728c:	bf08      	it	eq
 800728e:	3220      	addeq	r2, #32
 8007290:	1a98      	subs	r0, r3, r2
 8007292:	d101      	bne.n	8007298 <strcasecmp+0x30>
 8007294:	2a00      	cmp	r2, #0
 8007296:	d1eb      	bne.n	8007270 <strcasecmp+0x8>
 8007298:	bd70      	pop	{r4, r5, r6, pc}
 800729a:	bf00      	nop
 800729c:	08007391 	.word	0x08007391

080072a0 <_init>:
 80072a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072a2:	bf00      	nop
 80072a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072a6:	bc08      	pop	{r3}
 80072a8:	469e      	mov	lr, r3
 80072aa:	4770      	bx	lr

080072ac <_fini>:
 80072ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ae:	bf00      	nop
 80072b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072b2:	bc08      	pop	{r3}
 80072b4:	469e      	mov	lr, r3
 80072b6:	4770      	bx	lr
